<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>如何实现CPU单核睿频？</title>
    <url>/2020/07/24/achieve-one-core-turbo/</url>
    <content><![CDATA[<p>之前的Blog：<a href="https://www.ichenfu.com/2020/07/17/cpu-idle-time-managment/">再谈CPU的电源管理（如何做到稳定全核睿频？）</a>最终通过了<code>tuned</code>实现了CPU全核心运行在允许的全核睿频频率上。但是这个只是场景之一，并不是所有场景下都会用到很多的核心，从这些应用角度讲，更需要少量但是更高频率的核心，一个比较简单的例子就是DPDK，作为DPDK应用，一般来说也不会用到很多核心，但是他的polling模型，是希望单核频率越高越好的。针对类似的这种场景，实现少量核心，比如说单核的高频，比多核全开，频率变低更合适。</p>
<p>那么问题来了，怎么在Linux上实现稳定的单核睿频呢？这里给一个稍微暴力点的办法。<span id="more"></span></p>
<p>以我们目前机器上的CPU<code>Intel 6240R</code>为例，在<a href="https://ark.intel.com/content/www/cn/zh/ark/products/199343/intel-xeon-gold-6240r-processor-35-75m-cache-2-40-ghz.html">Intel Ark</a> 上，可以看到这款CPU的最大睿频频率是<code>4.00 GHz</code>，也就是说，理论上，至少有一个核心能运行在4GHz的频率上。虽然Intel没有明确说明这款CPU的全核睿频速度，但是从上次的结果看，这块CPU在全核状态，最高能达到3.2GHz的频率。</p>
<p>那么怎么实现单核最高频率呢？同样上一篇Blog里，在Intel论坛上有个关于C6状态的信息：”has 133 microsecond wakeup latency and turns off core (allowing more power to other cores)”，也就是说，当一个核心进入C6状态，核心就被关闭，同时也意味着有更多的电力可以给其他核心（提升频率）。</p>
<p>这么说就简单了，想办法让不需要的CPU核心进入C6状态，或者将核心关闭就行。这里Linux提供了一个接口，直接关闭CPU，那么理论上关闭了一些核心之后，相应的剩下的核心频率会相应提高。首先，先看看当前CPU的一些情况：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"> ~<span class="token punctuation">]</span><span class="token comment"># lscpu</span>
Architecture:          x86_64
CPU op-mode<span class="token punctuation">(</span>s<span class="token punctuation">)</span>:        <span class="token number">32</span>-bit, <span class="token number">64</span>-bit
Byte Order:            Little Endian
CPU<span class="token punctuation">(</span>s<span class="token punctuation">)</span>:                <span class="token number">96</span>
On-line CPU<span class="token punctuation">(</span>s<span class="token punctuation">)</span> list:   <span class="token number">0</span>-95
Thread<span class="token punctuation">(</span>s<span class="token punctuation">)</span> per core:    <span class="token number">2</span>
Core<span class="token punctuation">(</span>s<span class="token punctuation">)</span> per socket:    <span class="token number">24</span>
Socket<span class="token punctuation">(</span>s<span class="token punctuation">)</span>:             <span class="token number">2</span>
NUMA node<span class="token punctuation">(</span>s<span class="token punctuation">)</span>:          <span class="token number">2</span>
Vendor ID:             GenuineIntel
CPU family:            <span class="token number">6</span>
Model:                 <span class="token number">85</span>
Model name:            Intel<span class="token punctuation">(</span>R<span class="token punctuation">)</span> Xeon<span class="token punctuation">(</span>R<span class="token punctuation">)</span> Gold 6240R CPU @ <span class="token number">2</span>.40GHz
Stepping:              <span class="token number">7</span>
CPU MHz:               <span class="token number">3199.951</span>
CPU max MHz:           <span class="token number">4000.0000</span>
CPU min MHz:           <span class="token number">1000.0000</span>
BogoMIPS:              <span class="token number">4800.00</span>
Virtualization:        VT-x
L1d cache:             32K
L1i cache:             32K
L2 cache:              1024K
L3 cache:              36608K
NUMA node0 CPU<span class="token punctuation">(</span>s<span class="token punctuation">)</span>:     <span class="token number">0,2</span>,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94
NUMA node1 CPU<span class="token punctuation">(</span>s<span class="token punctuation">)</span>:     <span class="token number">1,3</span>,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59,61,63,65,67,69,71,73,75,77,79,81,83,85,87,89,91,93,95<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>可以看到目前机器上有两颗CPU，对应的核心分别是<code>0,2,4,6...</code>双数核，和<code>1,3,5,7...</code>单数核，如果我想只保留第二颗CPU的1号核心的话，就需要执行:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> <span class="token number">3</span> <span class="token number">5</span> <span class="token number">7</span> <span class="token number">9</span> <span class="token number">11</span> <span class="token number">13</span> <span class="token number">15</span> <span class="token number">17</span> <span class="token number">19</span> <span class="token number">21</span> <span class="token number">23</span> <span class="token number">25</span> <span class="token number">27</span> <span class="token number">29</span> <span class="token number">31</span> <span class="token number">33</span> <span class="token number">35</span> <span class="token number">37</span> <span class="token number">39</span> <span class="token number">41</span> <span class="token number">43</span> <span class="token number">45</span> <span class="token number">47</span> <span class="token number">49</span> <span class="token number">51</span> <span class="token number">53</span> <span class="token number">55</span> <span class="token number">57</span> <span class="token number">59</span> <span class="token number">61</span> <span class="token number">63</span> <span class="token number">65</span> <span class="token number">67</span> <span class="token number">69</span> <span class="token number">71</span> <span class="token number">73</span> <span class="token number">75</span> <span class="token number">77</span> <span class="token number">79</span> <span class="token number">81</span> <span class="token number">83</span> <span class="token number">85</span> <span class="token number">87</span> <span class="token number">89</span> <span class="token number">91</span> <span class="token number">93</span> <span class="token number">95</span><span class="token punctuation">;</span> <span class="token keyword">do</span> <span class="token builtin class-name">echo</span> <span class="token number">0</span> <span class="token operator">></span> /sys/devices/system/cpu/cpu<span class="token variable">$i</span>/online  <span class="token punctuation">;</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>把所有除1之外的单数核心<code>online</code>状态修改成0，也就是强制这些CPU核心下线。执行之后再执行<code>lscpu</code>看下状态：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">~<span class="token punctuation">]</span><span class="token comment"># lscpu</span>
Architecture:          x86_64
CPU op-mode<span class="token punctuation">(</span>s<span class="token punctuation">)</span>:        <span class="token number">32</span>-bit, <span class="token number">64</span>-bit
Byte Order:            Little Endian
CPU<span class="token punctuation">(</span>s<span class="token punctuation">)</span>:                <span class="token number">96</span>
On-line CPU<span class="token punctuation">(</span>s<span class="token punctuation">)</span> list:   <span class="token number">0</span>-2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94
Off-line CPU<span class="token punctuation">(</span>s<span class="token punctuation">)</span> list:  <span class="token number">3,5</span>,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59,61,63,65,67,69,71,73,75,77,79,81,83,85,87,89,91,93,95
Thread<span class="token punctuation">(</span>s<span class="token punctuation">)</span> per core:    <span class="token number">1</span>
Core<span class="token punctuation">(</span>s<span class="token punctuation">)</span> per socket:    <span class="token number">12</span>
Socket<span class="token punctuation">(</span>s<span class="token punctuation">)</span>:             <span class="token number">2</span>
NUMA node<span class="token punctuation">(</span>s<span class="token punctuation">)</span>:          <span class="token number">2</span>
Vendor ID:             GenuineIntel
CPU family:            <span class="token number">6</span>
Model:                 <span class="token number">85</span>
Model name:            Intel<span class="token punctuation">(</span>R<span class="token punctuation">)</span> Xeon<span class="token punctuation">(</span>R<span class="token punctuation">)</span> Gold 6240R CPU @ <span class="token number">2</span>.40GHz
Stepping:              <span class="token number">7</span>
CPU MHz:               <span class="token number">3199.804</span>
CPU max MHz:           <span class="token number">4000.0000</span>
CPU min MHz:           <span class="token number">1000.0000</span>
BogoMIPS:              <span class="token number">4800.00</span>
Virtualization:        VT-x
L1d cache:             32K
L1i cache:             32K
L2 cache:              1024K
L3 cache:              36608K
NUMA node0 CPU<span class="token punctuation">(</span>s<span class="token punctuation">)</span>:     <span class="token number">0,2</span>,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94
NUMA node1 CPU<span class="token punctuation">(</span>s<span class="token punctuation">)</span>:     <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>可以看到<code>Off-line CPU(s) list:</code>多了刚刚设置offline的核心。此时第二颗CPU只有第一个核心在线了。此时再运行一下turbostat看下核心频率：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">~<span class="token punctuation">]</span><span class="token comment"># turbostat</span>
Package Core    CPU     Avg_MHz Busy%   Bzy_MHz TSC_MHz IRQ     SMI     POLL    C1      C1E     C6      POLL%   C1%     C1E%    C6%     CPU%c1  CPU%c6  CoreTmp PkgTmp  PkgWatt RAMWatt PKG_%R
AM_%
-       -       -       <span class="token number">13</span>      <span class="token number">0.42</span>    <span class="token number">3200</span>    <span class="token number">2346</span>    <span class="token number">13230</span>   <span class="token number">0</span>       <span class="token number">26</span>      <span class="token number">19085</span>   <span class="token number">0</span>       <span class="token number">0</span>       <span class="token number">0.04</span>    <span class="token number">97.55</span>   <span class="token number">0.00</span>    <span class="token number">0.00</span>    <span class="token number">99.58</span>   <span class="token number">0.00</span>    <span class="token number">58</span>      <span class="token number">56</span>      <span class="token number">38.96</span>   <span class="token number">43.47</span>   <span class="token number">0.00</span> <span class="token number">0</span>
.00
<span class="token number">0</span>       <span class="token number">0</span>       <span class="token number">1</span>       <span class="token number">67</span>      <span class="token number">1.68</span>    <span class="token number">4000</span>    <span class="token number">2394</span>    <span class="token number">978</span>     <span class="token number">0</span>       <span class="token number">10</span>      <span class="token number">1128</span>    <span class="token number">0</span>       <span class="token number">0</span>       <span class="token number">0.00</span>    <span class="token number">98.33</span>   <span class="token number">0.00</span>    <span class="token number">0.00</span>    <span class="token number">98.32</span>   <span class="token number">0.00</span>    <span class="token number">55</span>      <span class="token number">56</span>      <span class="token number">38.96</span>   <span class="token number">43.47</span>   <span class="token number">0.00</span> <span class="token number">0</span>
.00
<span class="token number">0</span>       <span class="token number">0</span>       <span class="token number">48</span>      <span class="token number">3</span>       <span class="token number">0.09</span>    <span class="token number">3200</span>    <span class="token number">2394</span>    <span class="token number">307</span>     <span class="token number">0</span>       <span class="token number">0</span>       <span class="token number">381</span>     <span class="token number">0</span>       <span class="token number">0</span>       <span class="token number">0.00</span>    <span class="token number">99.91</span>   <span class="token number">0.00</span>    <span class="token number">0.00</span>    <span class="token number">99.91</span>
<span class="token number">0</span>       <span class="token number">1</span>       <span class="token number">4</span>       <span class="token number">15</span>      <span class="token number">0.46</span>    <span class="token number">3200</span>    <span class="token number">2394</span>    <span class="token number">613</span>     <span class="token number">0</span>       <span class="token number">0</span>       <span class="token number">985</span>     <span class="token number">0</span>       <span class="token number">0</span>       <span class="token number">0.00</span>    <span class="token number">99.55</span>   <span class="token number">0.00</span>    <span class="token number">0.00</span>    <span class="token number">99.54</span>   <span class="token number">0.00</span>    <span class="token number">56</span>
<span class="token number">0</span>       <span class="token number">1</span>       <span class="token number">52</span>      <span class="token number">169</span>     <span class="token number">5.30</span>    <span class="token number">3200</span>    <span class="token number">2394</span>    <span class="token number">655</span>     <span class="token number">0</span>       <span class="token number">0</span>       <span class="token number">507</span>     <span class="token number">0</span>       <span class="token number">0</span>       <span class="token number">0.00</span>    <span class="token number">94.70</span>   <span class="token number">0.00</span>    <span class="token number">0.00</span>    <span class="token number">94.70</span>
<span class="token number">0</span>       <span class="token number">2</span>       <span class="token number">8</span>       <span class="token number">9</span>       <span class="token number">0.29</span>    <span class="token number">3200</span>    <span class="token number">2394</span>    <span class="token number">300</span>     <span class="token number">0</span>       <span class="token number">0</span>       <span class="token number">558</span>     <span class="token number">0</span>       <span class="token number">0</span>       <span class="token number">0.00</span>    <span class="token number">99.71</span>   <span class="token number">0.00</span>    <span class="token number">0.00</span>    <span class="token number">99.71</span>   <span class="token number">0.00</span>    <span class="token number">56</span>
<span class="token number">0</span>       <span class="token number">2</span>       <span class="token number">56</span>      <span class="token number">5</span>       <span class="token number">0.16</span>    <span class="token number">3200</span>    <span class="token number">2394</span>    <span class="token number">183</span>     <span class="token number">0</span>       <span class="token number">0</span>       <span class="token number">214</span>     <span class="token number">0</span>       <span class="token number">0</span>       <span class="token number">0.00</span>    <span class="token number">99.84</span>   <span class="token number">0.00</span>    <span class="token number">0.00</span>    <span class="token number">99.84</span>
<span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>可以看到<code>CPU 1</code>非常突出，在许多3200中的4000特别亮眼，说明成功的将单核频率拉到了Ark描述的4.0GHz，说明Intel没有骗人，嘿嘿。</p>
<p>到这里任务算是完成了，实际上Intel的睿频状态比较多，不同的核心数量，会获得不一样的频率，具体的，可以根据情况测试。最后还有一件事，就是如何恢复呢，自然也很简单：重启机器，或者反向执行一下脚本：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> <span class="token number">3</span> <span class="token number">5</span> <span class="token number">7</span> <span class="token number">9</span> <span class="token number">11</span> <span class="token number">13</span> <span class="token number">15</span> <span class="token number">17</span> <span class="token number">19</span> <span class="token number">21</span> <span class="token number">23</span> <span class="token number">25</span> <span class="token number">27</span> <span class="token number">29</span> <span class="token number">31</span> <span class="token number">33</span> <span class="token number">35</span> <span class="token number">37</span> <span class="token number">39</span> <span class="token number">41</span> <span class="token number">43</span> <span class="token number">45</span> <span class="token number">47</span> <span class="token number">49</span> <span class="token number">51</span> <span class="token number">53</span> <span class="token number">55</span> <span class="token number">57</span> <span class="token number">59</span> <span class="token number">61</span> <span class="token number">63</span> <span class="token number">65</span> <span class="token number">67</span> <span class="token number">69</span> <span class="token number">71</span> <span class="token number">73</span> <span class="token number">75</span> <span class="token number">77</span> <span class="token number">79</span> <span class="token number">81</span> <span class="token number">83</span> <span class="token number">85</span> <span class="token number">87</span> <span class="token number">89</span> <span class="token number">91</span> <span class="token number">93</span> <span class="token number">95</span><span class="token punctuation">;</span> <span class="token keyword">do</span> <span class="token builtin class-name">echo</span> <span class="token number">1</span> <span class="token operator">></span> /sys/devices/system/cpu/cpu<span class="token variable">$i</span>/online  <span class="token punctuation">;</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>CPU</tag>
        <tag>单核睿频</tag>
      </tags>
  </entry>
  <entry>
    <title>Apache 2.2 Basic Auth</title>
    <url>/2017/01/08/apache-basic-auth/</url>
    <content><![CDATA[<p>最近需要修改一下Apache的BasicAuth模块，顺便简单分析一下。</p>
<p>首先是 <code>mod_authn_file</code>, 这个模块从文件中读取用户名和密码组合，并逐一check看用户名和密码是否符合。代码在 <code>modules/aaa/mod_authn_file.c</code>。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">static</span> <span class="token keyword">const</span> authn_provider authn_file_provider <span class="token operator">=</span>
<span class="token punctuation">&#123;</span>
    <span class="token operator">&amp;</span>check_password<span class="token punctuation">,</span>
    <span class="token operator">&amp;</span>get_realm_hash<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">//注册一个叫file的AuthProvider，主要是两个函数check_password和get_realm_hash</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">register_hooks</span><span class="token punctuation">(</span>apr_pool_t <span class="token operator">*</span>p<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">ap_register_provider</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> AUTHN_PROVIDER_GROUP<span class="token punctuation">,</span> <span class="token string">"file"</span><span class="token punctuation">,</span> <span class="token string">"0"</span><span class="token punctuation">,</span>
                         <span class="token operator">&amp;</span>authn_file_provider<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<span id="more"></span>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">    <span class="token keyword">static</span> authn_status <span class="token function">check_password</span><span class="token punctuation">(</span>request_rec <span class="token operator">*</span>r<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>user<span class="token punctuation">,</span>
                                       <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>password<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        authn_file_config_rec <span class="token operator">*</span>conf <span class="token operator">=</span> <span class="token function">ap_get_module_config</span><span class="token punctuation">(</span>r<span class="token operator">-></span>per_dir_config<span class="token punctuation">,</span>
                                                           <span class="token operator">&amp;</span>authn_file_module<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ap_configfile_t <span class="token operator">*</span>f<span class="token punctuation">;</span>
        <span class="token keyword">char</span> l<span class="token punctuation">[</span>MAX_STRING_LEN<span class="token punctuation">]</span><span class="token punctuation">;</span>
        apr_status_t status<span class="token punctuation">;</span>
        <span class="token keyword">char</span> <span class="token operator">*</span>file_password <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>conf<span class="token operator">-></span>pwfile<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token function">ap_log_rerror</span><span class="token punctuation">(</span>APLOG_MARK<span class="token punctuation">,</span> APLOG_ERR<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> r<span class="token punctuation">,</span>
                          <span class="token string">"AuthUserFile not specified in the configuration"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> AUTH_GENERAL_ERROR<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token comment">//打开配置的AuthUserFile文件   </span>
        status <span class="token operator">=</span> <span class="token function">ap_pcfg_openfile</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>f<span class="token punctuation">,</span> r<span class="token operator">-></span>pool<span class="token punctuation">,</span> conf<span class="token operator">-></span>pwfile<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
        <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">!=</span> APR_SUCCESS<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token function">ap_log_rerror</span><span class="token punctuation">(</span>APLOG_MARK<span class="token punctuation">,</span> APLOG_ERR<span class="token punctuation">,</span> status<span class="token punctuation">,</span> r<span class="token punctuation">,</span>
                          <span class="token string">"Could not open password file: %s"</span><span class="token punctuation">,</span> conf<span class="token operator">-></span>pwfile<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> AUTH_GENERAL_ERROR<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token comment">//一行一行读取</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token function">ap_cfg_getline</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> MAX_STRING_LEN<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>rpw<span class="token punctuation">,</span> <span class="token operator">*</span>w<span class="token punctuation">;</span>
    
            <span class="token comment">/* Skip # or blank lines. */</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>l<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'#'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token operator">!</span>l<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
    
            rpw <span class="token operator">=</span> l<span class="token punctuation">;</span>
            w <span class="token operator">=</span> <span class="token function">ap_getword</span><span class="token punctuation">(</span>r<span class="token operator">-></span>pool<span class="token punctuation">,</span> <span class="token operator">&amp;</span>rpw<span class="token punctuation">,</span> <span class="token char">':'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//UserName相同，把密码记上</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                file_password <span class="token operator">=</span> <span class="token function">ap_getword</span><span class="token punctuation">(</span>r<span class="token operator">-></span>pool<span class="token punctuation">,</span> <span class="token operator">&amp;</span>rpw<span class="token punctuation">,</span> <span class="token char">':'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token function">ap_cfg_closefile</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//没有找到密码，说明用户名不存在</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>file_password<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> AUTH_USER_NOT_FOUND<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token comment">//调用apr_password_validate，验证密码正确性。</span>
        status <span class="token operator">=</span> <span class="token function">apr_password_validate</span><span class="token punctuation">(</span>password<span class="token punctuation">,</span> file_password<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">!=</span> APR_SUCCESS<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> AUTH_DENIED<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    
        <span class="token keyword">return</span> AUTH_GRANTED<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>其中apr_password_validate的实现在 <code>srclib/apr-util/crypto/apr_passwd.c</code></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">    <span class="token function">APU_DECLARE</span><span class="token punctuation">(</span>apr_status_t<span class="token punctuation">)</span> <span class="token function">apr_password_validate</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>passwd<span class="token punctuation">,</span> 
                                                    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>hash<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">char</span> sample<span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token operator">!</span><span class="token function">defined</span><span class="token punctuation">(</span>WIN32<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">defined</span><span class="token punctuation">(</span>BEOS<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">defined</span><span class="token punctuation">(</span>NETWARE<span class="token punctuation">)</span></span></span>
        <span class="token keyword">char</span> <span class="token operator">*</span>crypt_pw<span class="token punctuation">;</span>
    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>hash<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'$'</span>
            <span class="token operator">&amp;&amp;</span> hash<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'2'</span>
            <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>hash<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'a'</span> <span class="token operator">||</span> hash<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'y'</span><span class="token punctuation">)</span>
            <span class="token operator">&amp;&amp;</span> hash<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'$'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">_crypt_blowfish_rn</span><span class="token punctuation">(</span>passwd<span class="token punctuation">,</span> hash<span class="token punctuation">,</span> sample<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>sample<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span> <span class="token function">APR_FROM_OS_ERROR</span><span class="token punctuation">(</span>errno<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strncmp</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> apr1_id<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>apr1_id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">/*
             * The hash was created using our custom algorithm.
             */</span>
            <span class="token function">apr_md5_encode</span><span class="token punctuation">(</span>passwd<span class="token punctuation">,</span> hash<span class="token punctuation">,</span> sample<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>sample<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strncmp</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> APR_SHA1PW_ID<span class="token punctuation">,</span> APR_SHA1PW_IDLEN<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
             <span class="token function">apr_sha1_base64</span><span class="token punctuation">(</span>passwd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">strlen</span><span class="token punctuation">(</span>passwd<span class="token punctuation">)</span><span class="token punctuation">,</span> sample<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">/*
             * It's not our algorithm, so feed it to crypt() if possible.
             */</span>
    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token function">defined</span><span class="token punctuation">(</span>WIN32<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">defined</span><span class="token punctuation">(</span>BEOS<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">defined</span><span class="token punctuation">(</span>NETWARE<span class="token punctuation">)</span></span></span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>passwd<span class="token punctuation">,</span> hash<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> APR_SUCCESS <span class="token operator">:</span> APR_EMISMATCH<span class="token punctuation">;</span>
    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">elif</span> <span class="token expression"><span class="token function">defined</span><span class="token punctuation">(</span>CRYPT_R_CRYPTD<span class="token punctuation">)</span></span></span>
            apr_status_t rv<span class="token punctuation">;</span>
            CRYPTD <span class="token operator">*</span>buffer <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
            <span class="token keyword">if</span> <span class="token punctuation">(</span>buffer <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span> APR_ENOMEM<span class="token punctuation">;</span>
            crypt_pw <span class="token operator">=</span> <span class="token function">crypt_r</span><span class="token punctuation">(</span>passwd<span class="token punctuation">,</span> hash<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>crypt_pw<span class="token punctuation">)</span>
                rv <span class="token operator">=</span> APR_EMISMATCH<span class="token punctuation">;</span>
            <span class="token keyword">else</span>
                rv <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>crypt_pw<span class="token punctuation">,</span> hash<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> APR_SUCCESS <span class="token operator">:</span> APR_EMISMATCH<span class="token punctuation">;</span>
            <span class="token function">free</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> rv<span class="token punctuation">;</span>
    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">elif</span> <span class="token expression"><span class="token function">defined</span><span class="token punctuation">(</span>CRYPT_R_STRUCT_CRYPT_DATA<span class="token punctuation">)</span></span></span>
            apr_status_t rv<span class="token punctuation">;</span>
            <span class="token keyword">struct</span> <span class="token class-name">crypt_data</span> <span class="token operator">*</span>buffer <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
            <span class="token keyword">if</span> <span class="token punctuation">(</span>buffer <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span> APR_ENOMEM<span class="token punctuation">;</span>
    
    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">__GLIBC_PREREQ</span></span>
            <span class="token comment">/*
             * For not too old glibc (>= 2.3.2), it's enough to set
             * buffer.initialized = 0. For &lt; 2.3.2 and for other platforms,
             * we need to zero the whole struct.
             */</span>
    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token function">__GLIBC_PREREQ</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span></span></span>
    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">USE_CRYPT_DATA_INITALIZED</span></span>
    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
    
    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">USE_CRYPT_DATA_INITALIZED</span></span>
            buffer<span class="token operator">-></span>initialized <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
            <span class="token function">memset</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
    
            crypt_pw <span class="token operator">=</span> <span class="token function">crypt_r</span><span class="token punctuation">(</span>passwd<span class="token punctuation">,</span> hash<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>crypt_pw<span class="token punctuation">)</span>
                rv <span class="token operator">=</span> APR_EMISMATCH<span class="token punctuation">;</span>
            <span class="token keyword">else</span>
                rv <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>crypt_pw<span class="token punctuation">,</span> hash<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> APR_SUCCESS <span class="token operator">:</span> APR_EMISMATCH<span class="token punctuation">;</span>
            <span class="token function">free</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> rv<span class="token punctuation">;</span>
    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
            <span class="token comment">/* Do a bit of sanity checking since we know that crypt_r()
             * should always be used for threaded builds on AIX, and
             * problems in configure logic can result in the wrong
             * choice being made.
             */</span>
    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token function">defined</span><span class="token punctuation">(</span>_AIX<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> APR_HAS_THREADS</span></span>
    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">error</span> <span class="token expression">Configuration error<span class="token operator">!</span>  <span class="token function">crypt_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span> should have been selected<span class="token operator">!</span></span></span>
    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
            <span class="token punctuation">&#123;</span>
                apr_status_t rv<span class="token punctuation">;</span>
    
                <span class="token comment">/* Handle thread safety issues by holding a mutex around the
                 * call to crypt().
                 */</span>
                <span class="token function">crypt_mutex_lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                crypt_pw <span class="token operator">=</span> <span class="token function">crypt</span><span class="token punctuation">(</span>passwd<span class="token punctuation">,</span> hash<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>crypt_pw<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    rv <span class="token operator">=</span> APR_EMISMATCH<span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
                <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                    rv <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>crypt_pw<span class="token punctuation">,</span> hash<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> APR_SUCCESS <span class="token operator">:</span> APR_EMISMATCH<span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
                <span class="token function">crypt_mutex_unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> rv<span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>sample<span class="token punctuation">,</span> hash<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> APR_SUCCESS <span class="token operator">:</span> APR_EMISMATCH<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上面的实现根据平台的不同，以及传进来的hash的格式不一样，会调用不一样的算法，主要是有MD5,SHA，crypt等几种方式，每种方式生成的hash的格式不一样，从hash的格式既可以区分。</p>
<p>下面看一下 <code>mod_auth_basic</code>,文件在 <code>modules/aaa/mod_auth_basic.c</code>。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">register_hooks</span><span class="token punctuation">(</span>apr_pool_t <span class="token operator">*</span>p<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">//注册一个authenticate_basic_user方法</span>
    <span class="token function">ap_hook_check_user_id</span><span class="token punctuation">(</span>authenticate_basic_user<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span>APR_HOOK_MIDDLE<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">authenticate_basic_user</span><span class="token punctuation">(</span>request_rec <span class="token operator">*</span>r<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    auth_basic_config_rec <span class="token operator">*</span>conf <span class="token operator">=</span> <span class="token function">ap_get_module_config</span><span class="token punctuation">(</span>r<span class="token operator">-></span>per_dir_config<span class="token punctuation">,</span>
                                                       <span class="token operator">&amp;</span>auth_basic_module<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>sent_user<span class="token punctuation">,</span> <span class="token operator">*</span>sent_pw<span class="token punctuation">,</span> <span class="token operator">*</span>current_auth<span class="token punctuation">;</span>
    <span class="token keyword">int</span> res<span class="token punctuation">;</span>
    authn_status auth_result<span class="token punctuation">;</span>
    authn_provider_list <span class="token operator">*</span>current_provider<span class="token punctuation">;</span>

    <span class="token comment">/* Are we configured to be Basic auth? */</span>
    current_auth <span class="token operator">=</span> <span class="token function">ap_auth_type</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>current_auth <span class="token operator">||</span> <span class="token function">strcasecmp</span><span class="token punctuation">(</span>current_auth<span class="token punctuation">,</span> <span class="token string">"Basic"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> DECLINED<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">/* We need an authentication realm. */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">ap_auth_name</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">ap_log_rerror</span><span class="token punctuation">(</span>APLOG_MARK<span class="token punctuation">,</span> APLOG_ERR<span class="token punctuation">,</span>
                      <span class="token number">0</span><span class="token punctuation">,</span> r<span class="token punctuation">,</span> <span class="token string">"need AuthName: %s"</span><span class="token punctuation">,</span> r<span class="token operator">-></span>uri<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> HTTP_INTERNAL_SERVER_ERROR<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    r<span class="token operator">-></span>ap_auth_type <span class="token operator">=</span> <span class="token string">"Basic"</span><span class="token punctuation">;</span>
    <span class="token comment">//拿到用户和密码</span>
    res <span class="token operator">=</span> <span class="token function">get_basic_auth</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> <span class="token operator">&amp;</span>sent_user<span class="token punctuation">,</span> <span class="token operator">&amp;</span>sent_pw<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    current_provider <span class="token operator">=</span> conf<span class="token operator">-></span>providers<span class="token punctuation">;</span>
    <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">const</span> authn_provider <span class="token operator">*</span>provider<span class="token punctuation">;</span>

        <span class="token comment">/* For now, if a provider isn't set, we'll be nice and use the file
         * provider.
         */</span>
        <span class="token comment">//找到配置的AuthProvider</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>current_provider<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            provider <span class="token operator">=</span> <span class="token function">ap_lookup_provider</span><span class="token punctuation">(</span>AUTHN_PROVIDER_GROUP<span class="token punctuation">,</span>
                                          AUTHN_DEFAULT_PROVIDER<span class="token punctuation">,</span> <span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>provider <span class="token operator">||</span> <span class="token operator">!</span>provider<span class="token operator">-></span>check_password<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token function">ap_log_rerror</span><span class="token punctuation">(</span>APLOG_MARK<span class="token punctuation">,</span> APLOG_ERR<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> r<span class="token punctuation">,</span>
                              <span class="token string">"No Authn provider configured"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                auth_result <span class="token operator">=</span> AUTH_GENERAL_ERROR<span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token function">apr_table_setn</span><span class="token punctuation">(</span>r<span class="token operator">-></span>notes<span class="token punctuation">,</span> AUTHN_PROVIDER_NAME_NOTE<span class="token punctuation">,</span> AUTHN_DEFAULT_PROVIDER<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            provider <span class="token operator">=</span> current_provider<span class="token operator">-></span>provider<span class="token punctuation">;</span>
            <span class="token function">apr_table_setn</span><span class="token punctuation">(</span>r<span class="token operator">-></span>notes<span class="token punctuation">,</span> AUTHN_PROVIDER_NAME_NOTE<span class="token punctuation">,</span> current_provider<span class="token operator">-></span>provider_name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token comment">//调用provider的check_password函数，也就是上面的check_password</span>
        auth_result <span class="token operator">=</span> provider<span class="token operator">-></span><span class="token function">check_password</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> sent_user<span class="token punctuation">,</span> sent_pw<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">apr_table_unset</span><span class="token punctuation">(</span>r<span class="token operator">-></span>notes<span class="token punctuation">,</span> AUTHN_PROVIDER_NAME_NOTE<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">/* Something occured. Stop checking. */</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>auth_result <span class="token operator">!=</span> AUTH_USER_NOT_FOUND<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token comment">/* If we're not really configured for providers, stop now. */</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>conf<span class="token operator">-></span>providers<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        current_provider <span class="token operator">=</span> current_provider<span class="token operator">-></span>next<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>current_provider<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//根据情况返回对应的状态码，记录错误信息。</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>auth_result <span class="token operator">!=</span> AUTH_GRANTED<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> return_code<span class="token punctuation">;</span>

        <span class="token comment">/* If we're not authoritative, then any error is ignored. */</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>conf<span class="token operator">-></span>authoritative<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> auth_result <span class="token operator">!=</span> AUTH_DENIED<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> DECLINED<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">switch</span> <span class="token punctuation">(</span>auth_result<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">case</span> AUTH_DENIED<span class="token operator">:</span>
            <span class="token function">ap_log_rerror</span><span class="token punctuation">(</span>APLOG_MARK<span class="token punctuation">,</span> APLOG_ERR<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> r<span class="token punctuation">,</span>
                      <span class="token string">"user %s: authentication failure for \"%s\": "</span>
                      <span class="token string">"Password Mismatch"</span><span class="token punctuation">,</span>
                      sent_user<span class="token punctuation">,</span> r<span class="token operator">-></span>uri<span class="token punctuation">)</span><span class="token punctuation">;</span>
            return_code <span class="token operator">=</span> HTTP_UNAUTHORIZED<span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> AUTH_USER_NOT_FOUND<span class="token operator">:</span>
            <span class="token function">ap_log_rerror</span><span class="token punctuation">(</span>APLOG_MARK<span class="token punctuation">,</span> APLOG_ERR<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> r<span class="token punctuation">,</span>
                      <span class="token string">"user %s not found: %s"</span><span class="token punctuation">,</span> sent_user<span class="token punctuation">,</span> r<span class="token operator">-></span>uri<span class="token punctuation">)</span><span class="token punctuation">;</span>
            return_code <span class="token operator">=</span> HTTP_UNAUTHORIZED<span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> AUTH_GENERAL_ERROR<span class="token operator">:</span>
        <span class="token keyword">default</span><span class="token operator">:</span>
            <span class="token comment">/* We'll assume that the module has already said what its error
             * was in the logs.
             */</span>
            return_code <span class="token operator">=</span> HTTP_INTERNAL_SERVER_ERROR<span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token comment">/* If we're returning 403, tell them to try again. */</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>return_code <span class="token operator">==</span> HTTP_UNAUTHORIZED<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token function">note_basic_auth_failure</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> return_code<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> OK<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>其中<code>get_basic_auth</code></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">get_basic_auth</span><span class="token punctuation">(</span>request_rec <span class="token operator">*</span>r<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>user<span class="token punctuation">,</span>
                          <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>pw<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>auth_line<span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>decoded_line<span class="token punctuation">;</span>
    <span class="token keyword">int</span> length<span class="token punctuation">;</span>

    <span class="token comment">/* Get the appropriate header */</span>
    <span class="token comment">//根据请求类型获取请求头值</span>
    auth_line <span class="token operator">=</span> <span class="token function">apr_table_get</span><span class="token punctuation">(</span>r<span class="token operator">-></span>headers_in<span class="token punctuation">,</span> <span class="token punctuation">(</span>PROXYREQ_PROXY <span class="token operator">==</span> r<span class="token operator">-></span>proxyreq<span class="token punctuation">)</span>
                                              <span class="token operator">?</span> <span class="token string">"Proxy-Authorization"</span>
                                              <span class="token operator">:</span> <span class="token string">"Authorization"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>auth_line<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">note_basic_auth_failure</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> HTTP_UNAUTHORIZED<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">//判断是不是Basic认证</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcasecmp</span><span class="token punctuation">(</span><span class="token function">ap_getword</span><span class="token punctuation">(</span>r<span class="token operator">-></span>pool<span class="token punctuation">,</span> <span class="token operator">&amp;</span>auth_line<span class="token punctuation">,</span> <span class="token char">' '</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Basic"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">/* Client tried to authenticate using wrong auth scheme */</span>
        <span class="token function">ap_log_rerror</span><span class="token punctuation">(</span>APLOG_MARK<span class="token punctuation">,</span> APLOG_ERR<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> r<span class="token punctuation">,</span>
                      <span class="token string">"client used wrong authentication scheme: %s"</span><span class="token punctuation">,</span> r<span class="token operator">-></span>uri<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">note_basic_auth_failure</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> HTTP_UNAUTHORIZED<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">/* Skip leading spaces. */</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">apr_isspace</span><span class="token punctuation">(</span><span class="token operator">*</span>auth_line<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        auth_line<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">//Baisc认证是base64 encode的，decode一下，拿到用户名和密码</span>
    decoded_line <span class="token operator">=</span> <span class="token function">apr_palloc</span><span class="token punctuation">(</span>r<span class="token operator">-></span>pool<span class="token punctuation">,</span> <span class="token function">apr_base64_decode_len</span><span class="token punctuation">(</span>auth_line<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    length <span class="token operator">=</span> <span class="token function">apr_base64_decode</span><span class="token punctuation">(</span>decoded_line<span class="token punctuation">,</span> auth_line<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* Null-terminate the string. */</span>
    decoded_line<span class="token punctuation">[</span>length<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>

    <span class="token operator">*</span>user <span class="token operator">=</span> <span class="token function">ap_getword_nulls</span><span class="token punctuation">(</span>r<span class="token operator">-></span>pool<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>decoded_line<span class="token punctuation">,</span> <span class="token char">':'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>pw <span class="token operator">=</span> decoded_line<span class="token punctuation">;</span>

    <span class="token comment">/* set the user, even though the user is unauthenticated at this point */</span>
    r<span class="token operator">-></span>user <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">*</span>user<span class="token punctuation">;</span>

    <span class="token keyword">return</span> OK<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>源码分析</category>
      </categories>
      <tags>
        <tag>Apache</tag>
        <tag>BasicAuth</tag>
        <tag>htpasswd</tag>
      </tags>
  </entry>
  <entry>
    <title>在Bash，Zsh中快速输入sudo</title>
    <url>/2017/03/29/bash-zsh-fast-sudo/</url>
    <content><![CDATA[<p>在使用普通用户执行需要超级用户权限的指令时，经常忘记前面加上sudo，等到命令输入完成，再加sudo很麻烦，可以绑定一个快捷方式快速输入最前面的sudo:<br>如果使用Bash，在<code>~/.bashrc</code>中加入：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">bind</span> <span class="token string">'"\e\e":"\C-asudo \C-e"'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>如果使用Zsh，在<code>~/.zshrc</code>中加入：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">bindkey <span class="token parameter variable">-s</span> <span class="token string">'\e\e'</span> <span class="token string">'\C-asudo \C-e'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>生效后，只需要连续按两下<code>ESC</code>键，即可快速将sudo添加到命令最前端。</p>
]]></content>
      <categories>
        <category>效率配置</category>
      </categories>
      <tags>
        <tag>bash</tag>
        <tag>zsh</tag>
        <tag>bindkey</tag>
        <tag>sudo</tag>
      </tags>
  </entry>
  <entry>
    <title>微星B550M迫击炮+5600X折腾记</title>
    <url>/2021/06/05/b550m-mortar-5600x-diy/</url>
    <content><![CDATA[<p>自己5年前配的一台电脑比较老了，在那个Intel一家独大，疯狂挤牙膏的时代，i5-6500的CPU加上微星的B150M迫击炮，也算是当时比较主流的中端配置了。不过这么多年过去了，只有4核4线程的6500确实有点孱弱了，最近明显感受到CPu性能不够用了。正好趁着今年618，终于把平台换新了，我一直是AMD Yes党，喊了这么长时间，终于入手了微星的B550M Mortar迫击炮+AMD 5600X的套装，一下子从4核4线程进化到了6核12线程，整体性能应该要强很多了。</p>
<p>不过好事多磨啊，好不容易等到CPU和主板快递到货，到家兴致勃勃把CPU插上主板、装上散热器，又把老的主板从机箱里换出来，原来老机器有两条8G 2400MHz的内存，虽然相比现在动辄3600MHz、4000MHz的内存频率低了点，好在我也就日常使用对内存带宽和延迟也不太敏感，这个钱就省了。另外还有传家宝1060显卡、硬盘什么的统统不用换。</p>
<p>本来想着一次点亮，可惜事与愿违、一度心态炸裂！一开电源，发现启动不了，主板上Debug灯卡在内存上，一动不动。这就有点小尴尬了，按理现在内存这东西兼容性都比较好，为啥会卡在内存上？一顿折腾、4个插槽、两根内存、各种插法全试了一遍、又尝试恢复CMOS到出厂设置、仍然不好使。难不成真得让AMD背锅？这AMD不Yes了啊。。赶紧去主板官方网站上找了下内存兼容性列表，另外也问了一下卖家客服，看看是啥情况。</p>
<span id="more"></span>
<p>最后客服给了个说法：升级BIOS试试。然后贴了个不需要CPU的更新BIOS的视频：</p>

<div>
    <iframe src="//player.bilibili.com/player.html?aid=59293093&bvid=BV1ot41137Wq&cid=103330978&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"></iframe>
</div>


<p>这个主板拿到手需要更新BIOS我之前倒是在评论里看到过，不过他那个评论也比较老了，我心想现在买的主板，不会还是出厂BIOS版本吧。。但是不管怎么说，先升级看看吧。这个时候同事也发给我一个视频：<a href="https://www.bilibili.com/video/BV15a411F7fk?share_source=copy_web">微星b550迫击炮wifi版本出厂通病？内存兼容性不好，点不亮？超频超不上去？刷新bios即可解决！</a>，也是类似的情况，都在骂微星的这版出厂BIOS。</p>
<p>好吧，赶紧找了个U盘，按视频里说的，把BIOS文件放U盘里，改名字为<code>MSI.ROM</code>，插上对应的USB口，按BIOS回写按钮，嘿嘿，一切还真是按预期在走，确实BIOS更新灯和U盘指示灯在闪，看起来真的需要更新。不过有一说一这个功能还是不错的，不需要先点亮就能刷BIOS，即使BIOS刷挂了还有个挽回的方法，不错。</p>
<p>等了几分钟，BIOS应该是更新好了，直接重启，突然听到硬盘寻道的声音，之前这个声音是没有的！感觉有戏了！并且键盘灯也亮了，Debug灯也正常了，看起来内存识别的问题解决了。但是这个时候屏幕还不亮。好在第二个视频里提醒了一下，似乎这个主板在启动的时候如果显示器接的是DP口，会有可能不亮，但是换HDMI口就没问题。这个简单，又找了根HDMI线，一插上就亮了，能进BIOS了！</p>
<p>进了BIOS就简单了，把一些配置改了改，主要是启动方式和顺序啥的，保存、重启，直接就进系统了，很顺利。</p>
<p>这时候还剩下最后一个问题，这个DP口能用么？毕竟相比DP口而言HDMI带宽上没什么优势，而且我这个显示器因为分辨率和刷新率比较高，只能用DP口才能满血。于是就把HDMI线拔掉换上DP线，发现没问题，一切正常。到这里彻底舒了口气，可算没问题，一切正常了。</p>
<p>最后又加上另外一根内存，重启了几次，都没问题，正常进系统。但是有个细节还是被我观察到了，就是在BIOS自检阶段，本来应该显示一些Logo之类的，现在都不会显示，等到进了系统，需要输密码的时候，显示器才亮起来。虽然不影响使用，但肯定还是存在一些问题。这个问题应该也是视频里提到的为啥DP口没显示、HDMI能显示的原因。</p>
<p>既然HDMI口能用，那感觉问题不应该是主板了，会不会是显卡的问题？于是带着这个问题去搜了搜，似乎和一个UEFI的GOP特性有关，最终找到了NVIDIA的一个工具:<a href="https://www.nvidia.com/en-us/drivers/nv-uefi-update-x64/">NVIDIA GRAPHICS FIRMWARE UPDATE TOOL FOR DISPLAYPORT 1.3 AND 1.4 DISPLAYS</a>，在这个页面里，NVIDIA提到：</p>
<blockquote><p>Without the update, systems that are connected to a DisplayPort 1.3 &#x2F; 1.4 monitor could experience blank screens on boot until the OS loads, or could experience a hang on boot.</p>
</blockquote>

<p>和遇到的现象一样啊，显示器接到DP口上，在启动时进系统前会黑屏，直到进系统才能正常显示。于是赶紧下载了工具，运行、更新显卡的FIRMWARE。重启之后，嘿嘿，久违的主板Logo能显示了，进BIOS显示也正常。</p>
<p>啊，问题总算解决了。这么说起来，搞不好因为AMD很多年不换平台，导致BIOS兼容多代CPU变得困难，才搞得这么多Bug。相比Intel一代一换主板，问题确实多了点，怪不得AMD给人的印象就是不如Intel稳定。</p>
<p>总的来说，这次平台的切换，也折腾了不少，但是我依然要说出那六个字母！AMD Yes！</p>
]]></content>
      <categories>
        <category>日常折腾</category>
      </categories>
      <tags>
        <tag>B550M Mortar</tag>
        <tag>5600X</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Go-Ceph库编写一个更简单的RBD HTTP API</title>
    <url>/2022/03/05/build-a-ceph-rbd-http-api-with-go-ceph/</url>
    <content><![CDATA[<p>很多人看到这个标题会很奇怪，Ceph不是有一个<a href="https://docs.ceph.com/en/pacific/mgr/ceph_api/index.html">RESTful API</a>么，为什么又要造一遍轮子？</p>
<p>的确，Ceph的官方组件Dashboard，内置了一些非常强大的RESTful API，功能也是比较的全面。为啥又要自己写一个呢？在我们的环境里，有一个自己实现的类似Openstack的虚拟机管理平台。而这个平台对接Ceph RBD时，就是使用的Dashboard模块提供的API。个人觉得啊，官方的API，虽然功能全，但确实对于对接的用户来说，真的不是那么友好。这里举几个简单的点：</p>
<span id="more"></span>
<ol>
<li><p>官方API基于Token进行鉴权，而Token又通过用户名和密码进行获取，并且有一个固定的过期时间，这就会有两个选择，一个暴力点的选择是不管发送什么请求，都会获取一个新的Token，这样可以保证基于新Token的请求都可以成功；或者，每次在请求之前请求<a href="https://docs.ceph.com/en/pacific/mgr/ceph_api/index.html#post--api-auth-check">auth&#x2F;check</a>接口，确认Token的有效性，如果失效了，那就重新获取；再或者，根据请求的返回值，如果出现401错误等等情况，再重新获取新的Token。但是无论是哪种方法，都会显得冗余和逻辑复杂，特别是在多线程等等环境下，还需要考虑使用单例等等。另外，这多出来的这些Token请求，确实也拖慢了整体的效率，毕竟Python写的API，确实不算快。</p>
</li>
<li><p>官方API是一个异步API，怎么理解呢？让我们先看下大部分接口的返回值，以<a href="https://docs.ceph.com/en/pacific/mgr/ceph_api/index.html#post--api-block-image">创建RBD</a>为例：</p>
<blockquote><ul>
<li>201 Created – Resource created.</li>
<li>202 Accepted – Operation is still executing. Please check the task queue.</li>
<li>400 Bad Request – Operation exception. Please check the response body for details.</li>
<li>401 Unauthorized – Unauthenticated access. Please login first.</li>
<li>403 Forbidden – Unauthorized access. Please check your permissions.</li>
<li>500 Internal Server Error – Unexpected error. Please check the response body for the stack trace.</li>
</ul>
</blockquote>
<p>对于一个创建请求，如果成功，则可能会有两种返回值：201表示RBD Image创建成功，可以直接使用；202表示创建任务已经被接受了，但是还没有创建成功，具体的结果，需要去队列里找结果。怎么理解呢？如果返回201，那么恭喜，这个Image可以直接被使用了。如果返回了202，那此时还不能直接使用这个Image，因为仅仅是添加了任务，必须等任务执行完成之后，Image才真正可用。那怎么去寻找这个任务结果呢？又需要我们去轮询调用<a href="https://docs.ceph.com/en/pacific/mgr/ceph_api/index.html#get--api-task">Display Tasks API</a>，然后从返回的一个列表里，自己匹配刚刚的请求，来确认什么时间任务被执行完成。这个动作实在是不太优雅，让人难受。</p>
</li>
<li><p>官方API确实也缺失了一些功能。因为我们是一个VM的环境，依赖Clone功能实现VM的OS卷分发，而Clone功能又依赖某个Image的某个Snapshot。但是翻遍了<a href="https://docs.ceph.com/en/pacific/mgr/ceph_api/index.html#rbdsnapshot">RBDSNAPSHOT</a>章节的文档，也没有找到如何确认某个Image的某个名字Snapshot是否存在的接口，最后从<a href="https://docs.ceph.com/en/pacific/mgr/ceph_api/index.html#get--api-block-image-image_spec">获取Image详情API</a>的返回结果里找到了Image所拥有的Snapshot列表。但是呢，除了Snapshot，这个接口也会返回所有基于该Snapshot创建的所有Clone的列表。如果像我们现在这样某个Snapshot会有成千上万个Clone（有很多VM的操作系统都是一样的）。那这个接口的返回Body就会变得无比之大，这对于Dashboard、以及客户端的解析，都会是一个不小的成本。</p>
</li>
</ol>
<p>当然了，这些问题，也只是在我们这个特定环境下的痛点，是绝对不可以说Ceph本身的实现问题的，那这些问题，要么忍着，要么，也可以尝试改变一下。</p>
<p>要说到同样是一个虚拟机管理平台，Openstack是怎么面临这些问题的呢？是不是我们也可以参考一下Openstack的实现呢？很遗憾，在Openstack Cinder组件里，是直接通过librbd的Python binding实现的。可惜的是我们并没有使用Python进行开发，相对于Openstack来说，集成方式也有些区别。</p>
<p>不过好在Ceph官方也提供了librbd的Golang Binding<a href="https://github.com/ceph/go-ceph">go-ceph</a>，原理和Python一样，也是直接基于librbd的C接口，那既然这样，我们也可以尝试基于这个库，实现一个我们自己的RBD HTTP API。不需要多么花哨的设计和功能，只需要满足最基本的功能就可以了。</p>
<p>实现之前，还是先整理一下我们的需求。到目前为止，需求并不复杂，当然未来可能会对接K8S或者类似的容器平台，还需要额外的其他接口，但在当前虚拟机这个场景下，我们需要的功能如下：</p>
<pre><code>1. Image相关接口，包括创建Image，获取Image信息，扩容Image，设置Image QOS，删除Image
2. Snapshot相关接口，包括针对Image创建Snapshot，根据Snapshot创建Clone，以及判断Image某个Snapshot是否存在（这个接口在上面提到官方API没有，但是librbd里是有相关接口的）
</code></pre>
<p>看起来还是比较简单的，这里举个创建Image接口的例子，顺便也算是提供了一个简单的go-ceph的使用文档，在这之前，go-ceph相关的文档确实不太好找，以至于我只能一遍看他的实现代码，一边看librbd的文档写代码：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"fmt"</span>
	<span class="token string">"log"</span>

	<span class="token string">"github.com/ceph/go-ceph/rados"</span>
	<span class="token string">"github.com/ceph/go-ceph/rbd"</span>
<span class="token punctuation">)</span>

<span class="token keyword">const</span> PoolName <span class="token operator">=</span> <span class="token string">"test_rbd_pool"</span>
<span class="token keyword">const</span> ImageName <span class="token operator">=</span> <span class="token string">"test-image-name"</span>
<span class="token keyword">const</span> ImageSize <span class="token builtin">uint64</span> <span class="token operator">=</span> <span class="token number">100</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token comment">// 100GB</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	conn<span class="token punctuation">,</span> err <span class="token operator">:=</span> rados<span class="token punctuation">.</span><span class="token function">NewConn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">// 打开默认的配置文件（/etc/ceph/ceph.conf）</span>
	<span class="token keyword">if</span> err <span class="token operator">:=</span> conn<span class="token punctuation">.</span><span class="token function">ReadDefaultConfigFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span> err <span class="token operator">:=</span> conn<span class="token punctuation">.</span><span class="token function">Connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">defer</span> conn<span class="token punctuation">.</span><span class="token function">Shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	ctx<span class="token punctuation">,</span> err <span class="token operator">:=</span> conn<span class="token punctuation">.</span><span class="token function">OpenIOContext</span><span class="token punctuation">(</span>PoolName<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">defer</span> ctx<span class="token punctuation">.</span><span class="token function">Destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token comment">// 这里使用默认配置创建，也可以根据自己需求，指定image的features</span>
	<span class="token keyword">if</span> err <span class="token operator">:=</span> rbd<span class="token punctuation">.</span><span class="token function">CreateImage</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> ImageName<span class="token punctuation">,</span> ImageSize<span class="token punctuation">,</span> rbd<span class="token punctuation">.</span><span class="token function">NewRbdImageOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">// 获取或者修改Image时，需要先OpenImage，或者OpenImageReadOnly</span>
	rbdImage<span class="token punctuation">,</span> err <span class="token operator">:=</span> rbd<span class="token punctuation">.</span><span class="token function">OpenImageReadOnly</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> ImageName<span class="token punctuation">,</span> rbd<span class="token punctuation">.</span>NoSnapshot<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span> err <span class="token operator">==</span> rbd<span class="token punctuation">.</span>ErrNotFound <span class="token punctuation">&#123;</span>
			log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"image not found"</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span>
		log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>rbdImage<span class="token punctuation">.</span><span class="token function">GetId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>总的来说，开发起来还是挺简单的。最终我也把上面需求的这些功能，封装成了HTTP API，代码也放到了<a href="https://github.com/C0reFast/rbd-api">C0reFast&#x2F;rbd-api</a>。相对官方的API来说，简单、速度快、所有操作全部是同步的，希望有一天在类似的场景下能发挥一些作用。</p>
]]></content>
      <categories>
        <category>Ceph</category>
      </categories>
      <tags>
        <tag>go-ceph</tag>
        <tag>RBD</tag>
        <tag>HTTP API</tag>
      </tags>
  </entry>
  <entry>
    <title>Apache: No space left on device: Couldn&#39;t create accept lock</title>
    <url>/2017/02/15/apache-no-space-left-on-device-couldnt-create-accept-lock/</url>
    <content><![CDATA[<p>服务器的Apache进程突然无法启动了，在错误日志中，有如下信息:</p>
<pre class="line-numbers language-none"><code class="language-none">[Mon Feb 13 14:54:10 2017] [emerg] (28)No space left on device: Couldn&#39;t create accept lock (&#x2F;var&#x2F;logs&#x2F;accept.lock.8173) (5)
[Mon Feb 13 14:55:02 2017] [emerg] (28)No space left on device: Couldn&#39;t create accept lock (&#x2F;var&#x2F;logs&#x2F;accept.lock.8823) (5)
[Mon Feb 13 14:56:01 2017] [emerg] (28)No space left on device: Couldn&#39;t create accept lock (&#x2F;var&#x2F;logs&#x2F;accept.lock.9113) (5)
[Mon Feb 13 14:57:01 2017] [emerg] (28)No space left on device: Couldn&#39;t create accept lock (&#x2F;var&#x2F;logs&#x2F;accept.lock.9765) (5)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>看了一下磁盘，空间并没有被占满，于是搜索了一下，找到了办法。<span id="more"></span></p>
<p>使用 <code>ipcs -s</code> 查看一下当前的系统信号量占用情况：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@phpruntime ~<span class="token punctuation">]</span><span class="token comment"># ipcs -s</span>

------ Semaphore Arrays --------
key        semid      owner      perms      nsems
0x00000000 <span class="token number">0</span>          root       <span class="token number">600</span>        <span class="token number">1</span>
0x00000000 <span class="token number">32769</span>      root       <span class="token number">600</span>        <span class="token number">1</span>
0x00000000 <span class="token number">688130</span>     nobody     <span class="token number">600</span>        <span class="token number">1</span>
0x00000000 <span class="token number">720899</span>     nobody     <span class="token number">600</span>        <span class="token number">1</span>
0x00000000 <span class="token number">753668</span>     nobody     <span class="token number">600</span>        <span class="token number">1</span>
0x00000000 <span class="token number">786437</span>     nobody     <span class="token number">600</span>        <span class="token number">1</span>
0x00000000 <span class="token number">819206</span>     nobody     <span class="token number">600</span>        <span class="token number">1</span>
0x00000000 <span class="token number">851975</span>     nobody     <span class="token number">600</span>        <span class="token number">1</span>
0x7a03096d <span class="token number">587137032</span>  root       <span class="token number">600</span>        <span class="token number">13</span>
0x00000000 <span class="token number">1114121</span>    nobody     <span class="token number">600</span>        <span class="token number">1</span>
0x00000000 <span class="token number">1212426</span>    nobody     <span class="token number">600</span>        <span class="token number">1</span>
0x00000000 <span class="token number">1146891</span>    nobody     <span class="token number">600</span>        <span class="token number">1</span>
0x00000000 <span class="token number">1081356</span>    nobody     <span class="token number">600</span>        <span class="token number">1</span>
0x00000000 <span class="token number">1179661</span>    nobody     <span class="token number">600</span>        <span class="token number">1</span>
0x00000000 <span class="token number">1245198</span>    nobody     <span class="token number">600</span>        <span class="token number">1</span>
0x00000000 <span class="token number">586940431</span>  nobody     <span class="token number">600</span>        <span class="token number">1</span>
0x00000000 <span class="token number">586973200</span>  nobody     <span class="token number">600</span>        <span class="token number">1</span>
<span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>其中nobody用户占用的信号量总数非常多，超过了100个，而我们的Apache也是运行在nobody下的，应该是信号量没有正确释放导致的，手动释放一下：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> <span class="token variable"><span class="token variable">`</span>ipcs -s<span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'/nobody/ &#123;print $2&#125;'</span><span class="token variable">`</span></span><span class="token punctuation">;</span> <span class="token keyword">do</span> <span class="token punctuation">(</span>ipcrm <span class="token parameter variable">-s</span> <span class="token variable">$i</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>释放结束后，Apache便可以正常启动了。</p>
<p>具体到Semaphore，也就是信号量，有一个内核参数可以修改：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@yq138.phpruntime ~<span class="token punctuation">]</span><span class="token comment"># cat /proc/sys/kernel/sem</span>
<span class="token number">250</span>     <span class="token number">32000</span>   <span class="token number">32</span>      <span class="token number">128</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>上面的4个数字分别代表SEMMSL, SEMMNS, SEMOPM, SEMMNI这4个属性。</p>
<ul>
<li>SEMMSL：用于控制每个信号集的最大信号数量。(defines the maximum number of semaphores per semaphore set.)</li>
<li>SEMMNS：用于控制整个 Linux 系统中信号（不是信号集）的最大数。(defines the total number of semaphores (not semaphore sets) for the entire Linux system)</li>
<li>SEMOPM：用于控制每次semop系统调用最大可以调用的信号数量 。(defines the maximum number of semaphore operations that can be performed per semop(2) system call (semaphore call))</li>
<li>SEMMNI：用于控制整个 Linux 系统中信号集的最大数量。(defines the maximum number of semaphore sets for the entire Linux system.)</li>
</ul>
<p>可以通过调整这4个数值来解决上面问题，但是是治标不治本的，因为问题发生的原因不是信号量资源不够用，而是因为没有正确释放。这里顺便看了看httpd的代码：</p>
<p>在prefork模式中，需要创建一个fork的锁，调用的是apr_proc_mutex_create这个函数。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">ap_mpm_run</span><span class="token punctuation">(</span>apr_pool_t <span class="token operator">*</span>_pconf<span class="token punctuation">,</span> apr_pool_t <span class="token operator">*</span>plog<span class="token punctuation">,</span> server_rec <span class="token operator">*</span>s<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> index<span class="token punctuation">;</span>
    <span class="token keyword">int</span> remaining_children_to_start<span class="token punctuation">;</span>
    apr_status_t rv<span class="token punctuation">;</span>

    <span class="token function">ap_log_pid</span><span class="token punctuation">(</span>pconf<span class="token punctuation">,</span> ap_pid_fname<span class="token punctuation">)</span><span class="token punctuation">;</span>

    first_server_limit <span class="token operator">=</span> server_limit<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>changed_limit_at_restart<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">ap_log_error</span><span class="token punctuation">(</span>APLOG_MARK<span class="token punctuation">,</span> APLOG_WARNING<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> s<span class="token punctuation">,</span>
                     <span class="token string">"WARNING: Attempt to change ServerLimit "</span>
                     <span class="token string">"ignored during restart"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        changed_limit_at_restart <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">/* Initialize cross-process accept lock */</span>
    ap_lock_fname <span class="token operator">=</span> <span class="token function">apr_psprintf</span><span class="token punctuation">(</span>_pconf<span class="token punctuation">,</span> <span class="token string">"%s.%"</span> APR_PID_T_FMT<span class="token punctuation">,</span>
                                 <span class="token function">ap_server_root_relative</span><span class="token punctuation">(</span>_pconf<span class="token punctuation">,</span> ap_lock_fname<span class="token punctuation">)</span><span class="token punctuation">,</span>
                                 ap_my_pid<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 调用apr_proc_mutex_create创建accept_mutex</span>
    rv <span class="token operator">=</span> <span class="token function">apr_proc_mutex_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>accept_mutex<span class="token punctuation">,</span> ap_lock_fname<span class="token punctuation">,</span>
                               ap_accept_lock_mech<span class="token punctuation">,</span> _pconf<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>rv <span class="token operator">!=</span> APR_SUCCESS<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">ap_log_error</span><span class="token punctuation">(</span>APLOG_MARK<span class="token punctuation">,</span> APLOG_EMERG<span class="token punctuation">,</span> rv<span class="token punctuation">,</span> s<span class="token punctuation">,</span>
                     <span class="token string">"Couldn't create accept lock (%s) (%d)"</span><span class="token punctuation">,</span>
                     ap_lock_fname<span class="token punctuation">,</span> ap_accept_lock_mech<span class="token punctuation">)</span><span class="token punctuation">;</span>
        mpm_state <span class="token operator">=</span> AP_MPMQ_STOPPING<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// 省略....</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>调用时，传入了一个参数 <code>ap_accept_lock_mech</code>，这个参数可以通过配置文件的 <code>AcceptMutex</code> 这个配置项进行配置，默认如果不配置的话，会使用 <code>APR_LOCK_DEFAULT</code>这个默认方式。</p>
<p><code>apr_proc_mutex_create</code> 是apr库的一部分，apr库在不同平台有不同的实现，我们就看针对unix系统的实现。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">static</span> apr_status_t <span class="token function">proc_mutex_create</span><span class="token punctuation">(</span>apr_proc_mutex_t <span class="token operator">*</span>new_mutex<span class="token punctuation">,</span> apr_lockmech_e mech<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>fname<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    apr_status_t rv<span class="token punctuation">;</span>
    <span class="token comment">// 根据mech选择合适的实现</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>rv <span class="token operator">=</span> <span class="token function">proc_mutex_choose_method</span><span class="token punctuation">(</span>new_mutex<span class="token punctuation">,</span> mech<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> APR_SUCCESS<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> rv<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    new_mutex<span class="token operator">-></span>meth <span class="token operator">=</span> new_mutex<span class="token operator">-></span>inter_meth<span class="token punctuation">;</span>
    <span class="token comment">// 调用对应的实现</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>rv <span class="token operator">=</span> new_mutex<span class="token operator">-></span>meth<span class="token operator">-></span><span class="token function">create</span><span class="token punctuation">(</span>new_mutex<span class="token punctuation">,</span> fname<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> APR_SUCCESS<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> rv<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> APR_SUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// apr_proc_mutex_create 实现</span>
<span class="token function">APR_DECLARE</span><span class="token punctuation">(</span>apr_status_t<span class="token punctuation">)</span> <span class="token function">apr_proc_mutex_create</span><span class="token punctuation">(</span>apr_proc_mutex_t <span class="token operator">*</span><span class="token operator">*</span>mutex<span class="token punctuation">,</span>
                                                <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>fname<span class="token punctuation">,</span>
                                                apr_lockmech_e mech<span class="token punctuation">,</span>
                                                apr_pool_t <span class="token operator">*</span>pool<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    apr_proc_mutex_t <span class="token operator">*</span>new_mutex<span class="token punctuation">;</span>
    apr_status_t rv<span class="token punctuation">;</span>

    new_mutex <span class="token operator">=</span> <span class="token function">apr_pcalloc</span><span class="token punctuation">(</span>pool<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>apr_proc_mutex_t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    new_mutex<span class="token operator">-></span>pool <span class="token operator">=</span> pool<span class="token punctuation">;</span>
    <span class="token comment">// 调用上面的proc_mutex_create</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>rv <span class="token operator">=</span> <span class="token function">proc_mutex_create</span><span class="token punctuation">(</span>new_mutex<span class="token punctuation">,</span> mech<span class="token punctuation">,</span> fname<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> APR_SUCCESS<span class="token punctuation">)</span>
        <span class="token keyword">return</span> rv<span class="token punctuation">;</span>

    <span class="token operator">*</span>mutex <span class="token operator">=</span> new_mutex<span class="token punctuation">;</span>
    <span class="token keyword">return</span> APR_SUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在 <code>proc_mutex_choose_method</code> 选择对应实现的时候，会根据传入的<code>mech</code>参数进行选择，当参数为<code>APR_LOCK_DEFAULT</code>时：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">static</span> apr_status_t <span class="token function">proc_mutex_choose_method</span><span class="token punctuation">(</span>apr_proc_mutex_t <span class="token operator">*</span>new_mutex<span class="token punctuation">,</span> apr_lockmech_e mech<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">// 如果指定了某个确定的选项，则直接使用对应的实现。</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>mech<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">case</span> APR_LOCK_FCNTL<span class="token operator">:</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">APR_HAS_FCNTL_SERIALIZE</span></span>
        new_mutex<span class="token operator">-></span>inter_meth <span class="token operator">=</span> <span class="token operator">&amp;</span>mutex_fcntl_methods<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
        <span class="token keyword">return</span> APR_ENOTIMPL<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> APR_LOCK_FLOCK<span class="token operator">:</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">APR_HAS_FLOCK_SERIALIZE</span></span>
        new_mutex<span class="token operator">-></span>inter_meth <span class="token operator">=</span> <span class="token operator">&amp;</span>mutex_flock_methods<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
        <span class="token keyword">return</span> APR_ENOTIMPL<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> APR_LOCK_SYSVSEM<span class="token operator">:</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">APR_HAS_SYSVSEM_SERIALIZE</span></span>
        new_mutex<span class="token operator">-></span>inter_meth <span class="token operator">=</span> <span class="token operator">&amp;</span>mutex_sysv_methods<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
        <span class="token keyword">return</span> APR_ENOTIMPL<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> APR_LOCK_POSIXSEM<span class="token operator">:</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">APR_HAS_POSIXSEM_SERIALIZE</span></span>
        new_mutex<span class="token operator">-></span>inter_meth <span class="token operator">=</span> <span class="token operator">&amp;</span>mutex_posixsem_methods<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
        <span class="token keyword">return</span> APR_ENOTIMPL<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> APR_LOCK_PROC_PTHREAD<span class="token operator">:</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">APR_HAS_PROC_PTHREAD_SERIALIZE</span></span>
        new_mutex<span class="token operator">-></span>inter_meth <span class="token operator">=</span> <span class="token operator">&amp;</span>mutex_proc_pthread_methods<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
        <span class="token keyword">return</span> APR_ENOTIMPL<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token comment">// 默认选择，和编译环境相关，当前环境中选择的是&amp;mutex_sysv_methods。</span>
    <span class="token keyword">case</span> APR_LOCK_DEFAULT<span class="token operator">:</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">APR_USE_FLOCK_SERIALIZE</span></span>
        new_mutex<span class="token operator">-></span>inter_meth <span class="token operator">=</span> <span class="token operator">&amp;</span>mutex_flock_methods<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">elif</span> <span class="token expression">APR_USE_SYSVSEM_SERIALIZE</span></span>
        new_mutex<span class="token operator">-></span>inter_meth <span class="token operator">=</span> <span class="token operator">&amp;</span>mutex_sysv_methods<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">elif</span> <span class="token expression">APR_USE_FCNTL_SERIALIZE</span></span>
        new_mutex<span class="token operator">-></span>inter_meth <span class="token operator">=</span> <span class="token operator">&amp;</span>mutex_fcntl_methods<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">elif</span> <span class="token expression">APR_USE_PROC_PTHREAD_SERIALIZE</span></span>
        new_mutex<span class="token operator">-></span>inter_meth <span class="token operator">=</span> <span class="token operator">&amp;</span>mutex_proc_pthread_methods<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">elif</span> <span class="token expression">APR_USE_POSIXSEM_SERIALIZE</span></span>
        new_mutex<span class="token operator">-></span>inter_meth <span class="token operator">=</span> <span class="token operator">&amp;</span>mutex_posixsem_methods<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
        <span class="token keyword">return</span> APR_ENOTIMPL<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
        <span class="token keyword">return</span> APR_ENOTIMPL<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> APR_SUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>系统选择了sysv的实现，所以create的具体实现是：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">static apr_status_t proc_mutex_sysv_create<span class="token punctuation">(</span>apr_proc_mutex_t *new_mutex,
                                           const char *fname<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    union semun ick<span class="token punctuation">;</span>
    apr_status_t rv<span class="token punctuation">;</span>
    
    new_mutex-<span class="token operator">></span>interproc <span class="token operator">=</span> apr_palloc<span class="token punctuation">(</span>new_mutex-<span class="token operator">></span>pool, sizeof<span class="token punctuation">(</span>*new_mutex-<span class="token operator">></span>interproc<span class="token punctuation">))</span><span class="token punctuation">;</span>
    // 调用semget获得信号
    new_mutex-<span class="token operator">></span>interproc-<span class="token operator">></span>filedes <span class="token operator">=</span> semget<span class="token punctuation">(</span>IPC_PRIVATE, <span class="token number">1</span>, IPC_CREAT <span class="token operator">|</span> 0600<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>new_mutex-<span class="token operator">></span>interproc-<span class="token operator">></span>filedes <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        rv <span class="token operator">=</span> errno<span class="token punctuation">;</span>
        proc_mutex_sysv_cleanup<span class="token punctuation">(</span>new_mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token builtin class-name">return</span> rv<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    ick.val <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>semctl<span class="token punctuation">(</span>new_mutex-<span class="token operator">></span>interproc-<span class="token operator">></span>filedes, <span class="token number">0</span>, SETVAL, ick<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        rv <span class="token operator">=</span> errno<span class="token punctuation">;</span>
        proc_mutex_sysv_cleanup<span class="token punctuation">(</span>new_mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token builtin class-name">return</span> rv<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    new_mutex-<span class="token operator">></span>curr_locked <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    // 注册清理函数
    apr_pool_cleanup_register<span class="token punctuation">(</span>new_mutex-<span class="token operator">></span>pool,
                              <span class="token punctuation">(</span>void *<span class="token punctuation">)</span>new_mutex, apr_proc_mutex_cleanup, 
                              apr_pool_cleanup_null<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token builtin class-name">return</span> APR_SUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>所以实际的情况是，Apache在启动的时候申请了信号集，但是并没有正常的在退出的时候执行清理，导致了信号集的堆积，当超过了系统的上限，就会导致申请失败，Apache无法启动。</p>
<p>而我们的系统在Apache相关的扩展或者依赖有更新时，会使用非常暴力的 <code>kill -9</code> 强制让Apache退出的方式以便加快更新速度，由于是 <code>kill -9</code>，程序直接就退出了，没有执行清理操作，<br>所以才会导致没释放的信号集越来越多，最终导致出现问题。</p>
<p>解决方法也比较简单，不使用 <code>kill -9</code>的方式杀死Apache进程，让进程自然退出就好了。</p>
]]></content>
      <categories>
        <category>源码分析</category>
      </categories>
      <tags>
        <tag>Apache</tag>
        <tag>AcceptLock</tag>
        <tag>Semaphores</tag>
      </tags>
  </entry>
  <entry>
    <title>Building a Consistent Hashing Ring Part1-Part2(构建一个一致性哈希环 Part1-Part2)</title>
    <url>/2017/04/17/building-a-consistent-hashing-ring-1-2/</url>
    <content><![CDATA[<p>本篇是<a href="https://docs.openstack.org/swift/latest/ring_background.html">Building a Consistent Hashing Ring</a>的翻译，原文一步步描述了一个一致性哈希环的构建过程，对于OpenStack Swift存储，对应的Ring文件，其实就是一个一致性哈希环。<br>这篇文章讲述了OpenStack Swift Ring文件的构建原理。目前翻译了第一部分和第二部分，包含了最原始的算法，并最终引入虚拟节点，减少扩容时的数据移动<span id="more"></span></p>
<h2 id="Part-1"><a href="#Part-1" class="headerlink" title="Part 1"></a>Part 1</h2><p>“一致性哈希”是用于描述使用散列算法分布数据以确定其位置的过程的术语。只需要知道数据id的哈系值，就可以确切地确定数据应该在哪里。哈希与位置的映射关系通常被称为“环”。</p>
<p>也许最简单的哈希只是id的模数。例如，如果所有数据的id都是数字，希望分散数据到两台机器上，可以将所有id为奇数的数据放在一台机器上，id为偶数的数据放在另一台。假设奇数id和偶数id的数据数量大致平衡，并且每个数据的大小也大致平衡，那么数据在两台计算机之间也是大致平衡的。</p>
<p>由于数据通常具有文本名称而不是数字，例如文件或URL的路径，因此实际使用中会先通过散列算法将名称转换成一个数字。例如，使用MD5，名称“mom.png”的散列是’4559a12e3e8da7c2186250c2f292e3af’，’dad.png’的散列是’096edcc4107e9e18d6a03a43b3853bea’。然后，使用模数，我们可以将“mom.jpg”放在奇数机器上，把“dad.png”放在偶数机器上。使用像MD5这样的哈希算法的另一个好处就是生成的哈希值是可以保证均匀分布的，这意味着任意名称最终将均匀分布，不用担心数据id分布的均匀性。</p>
<p>例子：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> hashlib <span class="token keyword">import</span> md5
<span class="token keyword">from</span> struct <span class="token keyword">import</span> unpack_from

<span class="token comment"># 100个节点，10000000个文件</span>
NODE_COUNT <span class="token operator">=</span> <span class="token number">100</span>
DATA_ID_COUNT <span class="token operator">=</span> <span class="token number">10000000</span>

node_counts <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> NODE_COUNT
<span class="token keyword">for</span> data_id <span class="token keyword">in</span> <span class="token builtin">xrange</span><span class="token punctuation">(</span>DATA_ID_COUNT<span class="token punctuation">)</span><span class="token punctuation">:</span>
    data_id <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>data_id<span class="token punctuation">)</span>
    <span class="token comment"># 根据数据id计算md5，并将md5的前4个字节作为一个int</span>
    hsh <span class="token operator">=</span> unpack_from<span class="token punctuation">(</span><span class="token string">'>I'</span><span class="token punctuation">,</span> md5<span class="token punctuation">(</span>data_id<span class="token punctuation">)</span><span class="token punctuation">.</span>digest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
    <span class="token comment"># 取模，计算node_id</span>
    node_id <span class="token operator">=</span> hsh <span class="token operator">%</span> NODE_COUNT
    <span class="token comment"># 统计节点的数据个数</span>
    node_counts<span class="token punctuation">[</span>node_id<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>
<span class="token comment"># 每个节点数据个数的期望值</span>
desired_count <span class="token operator">=</span> DATA_ID_COUNT <span class="token operator">/</span> NODE_COUNT
<span class="token keyword">print</span> <span class="token string">'%d: Desired data ids per node'</span> <span class="token operator">%</span> desired_count
<span class="token comment"># 数据最多的节点的数据个数</span>
max_count <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>node_counts<span class="token punctuation">)</span>
over <span class="token operator">=</span> <span class="token number">100.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span>max_count <span class="token operator">-</span> desired_count<span class="token punctuation">)</span> <span class="token operator">/</span> desired_count
<span class="token keyword">print</span> <span class="token string">'%d: Most data ids on one node, %.02f%% over'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>max_count<span class="token punctuation">,</span> over<span class="token punctuation">)</span>
<span class="token comment"># 数据最少的节点的数据个数</span>
min_count <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>node_counts<span class="token punctuation">)</span>
under <span class="token operator">=</span> <span class="token number">100.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span>desired_count <span class="token operator">-</span> min_count<span class="token punctuation">)</span> <span class="token operator">/</span> desired_count
<span class="token keyword">print</span> <span class="token string">'%d: Least data ids on one node, %.02f%% under'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>min_count<span class="token punctuation">,</span> under<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>执行结果：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">100000</span>: Desired data ids per <span class="token function">node</span>
<span class="token number">100695</span>: Most data ids on one node, <span class="token number">0.69</span>% over
<span class="token number">99073</span>: Least data ids on one node, <span class="token number">0.93</span>% under<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>结果很不错，对于单个节点，分配的数据差距小于1%。</p>
<h2 id="Part-2"><a href="#Part-2" class="headerlink" title="Part 2"></a>Part 2</h2><p>在本系列的第1部分中，我们使用哈希的模数来定位数据进行了简单地测试。可以看到数据分布地很好，但这只是故事的一部分。分布式系统不仅需要分配负载，而且随着数据量的增长，它们也经常需要扩容。</p>
<p>所以让我们想象一下，我们使用我们以前的算法来运行一个100节点的系统，但是它的资源逐渐被耗尽，所以我们要添加另一个节点。当我们将第101个节点添加到我们的系统中时，会注意到许多id将映射到与之前不同的节点。我们将不得不在我们的系统上清理一大堆数据，以便将其全部重新安置到位。</p>
<p>我们在一个最小规模的系统中举个简单的例子：开始只有2个节点，节点0存储偶数id的数据，节点1存储奇数id的数据。因此，数据id为100的将映射到节点0，数据id为101的将映射到节点1，数据id为102的将映射到节点0，依次类推，很简单的，node &#x3D; id ％ 2。现在我们添加第三个节点（节点2）以获得更多的空间，所以我们想要node &#x3D; id ％ 3。所以现在数据id为100的将映射到节点1，数据id为101的将映射到节点2，数据id为102的将映射到节点0。所以我们必须移动3个数据中的其中2个，使他们都存在正确的位置。</p>
<p>举个更大规模的例子：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">from hashlib <span class="token function">import</span> md5
from struct <span class="token function">import</span> unpack_from

NODE_COUNT <span class="token operator">=</span> <span class="token number">100</span>
NEW_NODE_COUNT <span class="token operator">=</span> <span class="token number">101</span>
DATA_ID_COUNT <span class="token operator">=</span> <span class="token number">10000000</span>

<span class="token comment"># 用于统计移动的数据个数</span>
moved_ids <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">for</span> <span class="token for-or-select variable">data_id</span> <span class="token keyword">in</span> xrange<span class="token punctuation">(</span>DATA_ID_COUNT<span class="token punctuation">)</span>:
    data_id <span class="token operator">=</span> str<span class="token punctuation">(</span>data_id<span class="token punctuation">)</span>
    hsh <span class="token operator">=</span> unpack_from<span class="token punctuation">(</span><span class="token string">'>I'</span>, md5<span class="token punctuation">(</span>str<span class="token punctuation">(</span>data_id<span class="token punctuation">))</span>.digest<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
    node_id <span class="token operator">=</span> hsh % NODE_COUNT
    new_node_id <span class="token operator">=</span> hsh % NEW_NODE_COUNT
    <span class="token comment"># 很显然，当新旧节点id不同时，需要移动该数据</span>
    <span class="token keyword">if</span> node_id <span class="token operator">!=</span> new_node_id:
        moved_ids <span class="token operator">+=</span> <span class="token number">1</span>
percent_moved <span class="token operator">=</span> <span class="token number">100.0</span> * moved_ids / DATA_ID_COUNT
print <span class="token string">'%d ids moved, %.02f%%'</span> % <span class="token punctuation">(</span>moved_ids, percent_moved<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>执行结果：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">9900989</span> ids moved, <span class="token number">99.01</span>%<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>结果很严峻，为了提升1%的容量，我们需要移动差不多99%的数据！因此，必须使用一个新的算法，来避免这种情况。</p>
<p>所以在这里我们需要引入“环”的概念，我们可以将一定哈希值范围的数据直接分配给每个节点，然后通过一定的算法减少这些范围的变化。<br>还是看一个小规模例子，数据id从0到999，两个节点，将0到499的数据分配给节点0，500到999的数据分配给节点1，当新加了节点2时，节点2的数据各有一半来自于节点0和1，这样最小化需要移动的数据量。</p>
<p>大规模的例子：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> bisect <span class="token keyword">import</span> bisect_left
<span class="token keyword">from</span> hashlib <span class="token keyword">import</span> md5
<span class="token keyword">from</span> struct <span class="token keyword">import</span> unpack_from

NODE_COUNT <span class="token operator">=</span> <span class="token number">100</span>
NEW_NODE_COUNT <span class="token operator">=</span> <span class="token number">101</span>
DATA_ID_COUNT <span class="token operator">=</span> <span class="token number">10000000</span>

<span class="token comment"># 原来每个节点的哈希值区间</span>
node_range_starts <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> node_id <span class="token keyword">in</span> <span class="token builtin">xrange</span><span class="token punctuation">(</span>NODE_COUNT<span class="token punctuation">)</span><span class="token punctuation">:</span>
    node_range_starts<span class="token punctuation">.</span>append<span class="token punctuation">(</span>DATA_ID_COUNT <span class="token operator">/</span>
                             NODE_COUNT <span class="token operator">*</span> node_id<span class="token punctuation">)</span>

<span class="token comment"># 新加节点后每个节点的哈希值区间</span>
new_node_range_starts <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> new_node_id <span class="token keyword">in</span> <span class="token builtin">xrange</span><span class="token punctuation">(</span>NEW_NODE_COUNT<span class="token punctuation">)</span><span class="token punctuation">:</span>
    new_node_range_starts<span class="token punctuation">.</span>append<span class="token punctuation">(</span>DATA_ID_COUNT <span class="token operator">/</span>
                              NEW_NODE_COUNT <span class="token operator">*</span> new_node_id<span class="token punctuation">)</span>
moved_ids <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">for</span> data_id <span class="token keyword">in</span> <span class="token builtin">xrange</span><span class="token punctuation">(</span>DATA_ID_COUNT<span class="token punctuation">)</span><span class="token punctuation">:</span>
    data_id <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>data_id<span class="token punctuation">)</span>
    hsh <span class="token operator">=</span> unpack_from<span class="token punctuation">(</span><span class="token string">'>I'</span><span class="token punctuation">,</span> md5<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>data_id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>digest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
    <span class="token comment"># 获取原来的节点id</span>
    node_id <span class="token operator">=</span> bisect_left<span class="token punctuation">(</span>node_range_starts<span class="token punctuation">,</span>
                          hsh <span class="token operator">%</span> DATA_ID_COUNT<span class="token punctuation">)</span> <span class="token operator">%</span> NODE_COUNT
    <span class="token comment"># 获取新的节点id</span>
    new_node_id <span class="token operator">=</span> bisect_left<span class="token punctuation">(</span>new_node_range_starts<span class="token punctuation">,</span>
                          hsh <span class="token operator">%</span> DATA_ID_COUNT<span class="token punctuation">)</span> <span class="token operator">%</span> NEW_NODE_COUNT
    <span class="token keyword">if</span> node_id <span class="token operator">!=</span> new_node_id<span class="token punctuation">:</span>
        moved_ids <span class="token operator">+=</span> <span class="token number">1</span>
percent_moved <span class="token operator">=</span> <span class="token number">100.0</span> <span class="token operator">*</span> moved_ids <span class="token operator">/</span> DATA_ID_COUNT
<span class="token keyword">print</span> <span class="token string">'%d ids moved, %.02f%%'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>moved_ids<span class="token punctuation">,</span> percent_moved<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>执行结果：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">4901707</span> ids moved, <span class="token number">49.02</span>%<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>结果好了不少，但是在总容量增加1%的情况下，移动50%的数据仍然不容乐观。如果我们仔细研究一下发生了什么，就会明白其实这就是“手风琴效应”，当我们将节点0的范围缩小一点，以赋予新节点，但是将所有其他节点的范围也跟着移位了相同的量。<br>为了最小化对节点分配范围的更改，可以给节点分配几个较小的区间而不是单个很大的区间。 这可以通过为每个节点创建“虚拟节点”来实现。 所以100个节点可能有1000个虚拟节点。 来看看是如何实现的：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> bisect <span class="token keyword">import</span> bisect_left
<span class="token keyword">from</span> hashlib <span class="token keyword">import</span> md5
<span class="token keyword">from</span> struct <span class="token keyword">import</span> unpack_from

NODE_COUNT <span class="token operator">=</span> <span class="token number">100</span>
DATA_ID_COUNT <span class="token operator">=</span> <span class="token number">10000000</span>
VNODE_COUNT <span class="token operator">=</span> <span class="token number">1000</span>

vnode_range_starts <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
vnode2node <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token comment"># 初始化两个表，vnode_range_starts是每个vnode对应的哈希区间，</span>
<span class="token comment"># vnode2node是每个vnode实际对应的node_id，</span>
<span class="token comment"># 这里vnode和node之间对应关系是取vnode_id % NODE_COUNT</span>
<span class="token keyword">for</span> vnode_id <span class="token keyword">in</span> <span class="token builtin">xrange</span><span class="token punctuation">(</span>VNODE_COUNT<span class="token punctuation">)</span><span class="token punctuation">:</span>
    vnode_range_starts<span class="token punctuation">.</span>append<span class="token punctuation">(</span>DATA_ID_COUNT <span class="token operator">/</span>
                              VNODE_COUNT <span class="token operator">*</span> vnode_id<span class="token punctuation">)</span>
    vnode2node<span class="token punctuation">.</span>append<span class="token punctuation">(</span>vnode_id <span class="token operator">%</span> NODE_COUNT<span class="token punctuation">)</span>
new_vnode2node <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>vnode2node<span class="token punctuation">)</span>
new_node_id <span class="token operator">=</span> NODE_COUNT
NEW_NODE_COUNT <span class="token operator">=</span> NODE_COUNT <span class="token operator">+</span> <span class="token number">1</span>
<span class="token comment"># 计算需要修改指向的vnode数量</span>
vnodes_to_reassign <span class="token operator">=</span> VNODE_COUNT <span class="token operator">/</span> NEW_NODE_COUNT
<span class="token keyword">while</span> vnodes_to_reassign <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> node_to_take_from <span class="token keyword">in</span> <span class="token builtin">xrange</span><span class="token punctuation">(</span>NODE_COUNT<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> vnode_id<span class="token punctuation">,</span> node_id <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>new_vnode2node<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> node_id <span class="token operator">==</span> node_to_take_from<span class="token punctuation">:</span>
                new_vnode2node<span class="token punctuation">[</span>vnode_id<span class="token punctuation">]</span> <span class="token operator">=</span> new_node_id
                vnodes_to_reassign <span class="token operator">-=</span> <span class="token number">1</span>
                <span class="token keyword">break</span>
        <span class="token keyword">if</span> vnodes_to_reassign <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>
            <span class="token keyword">break</span>
moved_ids <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">for</span> data_id <span class="token keyword">in</span> <span class="token builtin">xrange</span><span class="token punctuation">(</span>DATA_ID_COUNT<span class="token punctuation">)</span><span class="token punctuation">:</span>
    data_id <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>data_id<span class="token punctuation">)</span>
    hsh <span class="token operator">=</span> unpack_from<span class="token punctuation">(</span><span class="token string">'>I'</span><span class="token punctuation">,</span> md5<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>data_id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>digest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
    vnode_id <span class="token operator">=</span> bisect_left<span class="token punctuation">(</span>vnode_range_starts<span class="token punctuation">,</span>
                         hsh <span class="token operator">%</span> DATA_ID_COUNT<span class="token punctuation">)</span> <span class="token operator">%</span> VNODE_COUNT
    node_id <span class="token operator">=</span> vnode2node<span class="token punctuation">[</span>vnode_id<span class="token punctuation">]</span>
    new_node_id <span class="token operator">=</span> new_vnode2node<span class="token punctuation">[</span>vnode_id<span class="token punctuation">]</span>
    <span class="token keyword">if</span> node_id <span class="token operator">!=</span> new_node_id<span class="token punctuation">:</span>
        moved_ids <span class="token operator">+=</span> <span class="token number">1</span>
percent_moved <span class="token operator">=</span> <span class="token number">100.0</span> <span class="token operator">*</span> moved_ids <span class="token operator">/</span> DATA_ID_COUNT
<span class="token keyword">print</span> <span class="token string">'%d ids moved, %.02f%%'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>moved_ids<span class="token punctuation">,</span> percent_moved<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>执行结果:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">90423</span> ids moved, <span class="token number">0.90</span>%<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这就对了，在添加1%容量的情况下，只需要移动0.9%的数据。上面的代码，看起来vnode_range_starts有点多余了，因为在整个生命周期中只被计算了一次，而且从来没变过，所以可以优化一下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> bisect <span class="token keyword">import</span> bisect_left
<span class="token keyword">from</span> hashlib <span class="token keyword">import</span> md5
<span class="token keyword">from</span> struct <span class="token keyword">import</span> unpack_from

NODE_COUNT <span class="token operator">=</span> <span class="token number">100</span>
DATA_ID_COUNT <span class="token operator">=</span> <span class="token number">10000000</span>
VNODE_COUNT <span class="token operator">=</span> <span class="token number">1000</span>

vnode2node <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> vnode_id <span class="token keyword">in</span> <span class="token builtin">xrange</span><span class="token punctuation">(</span>VNODE_COUNT<span class="token punctuation">)</span><span class="token punctuation">:</span>
    vnode2node<span class="token punctuation">.</span>append<span class="token punctuation">(</span>vnode_id <span class="token operator">%</span> NODE_COUNT<span class="token punctuation">)</span>
new_vnode2node <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>vnode2node<span class="token punctuation">)</span>
new_node_id <span class="token operator">=</span> NODE_COUNT
vnodes_to_reassign <span class="token operator">=</span> VNODE_COUNT <span class="token operator">/</span> <span class="token punctuation">(</span>NODE_COUNT <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token keyword">while</span> vnodes_to_reassign <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> node_to_take_from <span class="token keyword">in</span> <span class="token builtin">xrange</span><span class="token punctuation">(</span>NODE_COUNT<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> vnode_id<span class="token punctuation">,</span> node_id <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>vnode2node<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> node_id <span class="token operator">==</span> node_to_take_from<span class="token punctuation">:</span>
                vnode2node<span class="token punctuation">[</span>vnode_id<span class="token punctuation">]</span> <span class="token operator">=</span> new_node_id
                vnodes_to_reassign <span class="token operator">-=</span> <span class="token number">1</span>
                <span class="token keyword">break</span>
        <span class="token keyword">if</span> vnodes_to_reassign <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>
            <span class="token keyword">break</span>
moved_ids <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">for</span> data_id <span class="token keyword">in</span> <span class="token builtin">xrange</span><span class="token punctuation">(</span>DATA_ID_COUNT<span class="token punctuation">)</span><span class="token punctuation">:</span>
    data_id <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>data_id<span class="token punctuation">)</span>
    hsh <span class="token operator">=</span> unpack_from<span class="token punctuation">(</span><span class="token string">'>I'</span><span class="token punctuation">,</span> md5<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>data_id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>digest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
    vnode_id <span class="token operator">=</span> hsh <span class="token operator">%</span> VNODE_COUNT
    node_id <span class="token operator">=</span> vnode2node<span class="token punctuation">[</span>vnode_id<span class="token punctuation">]</span>
    new_node_id <span class="token operator">=</span> new_vnode2node<span class="token punctuation">[</span>vnode_id<span class="token punctuation">]</span>
    <span class="token keyword">if</span> node_id <span class="token operator">!=</span> new_node_id<span class="token punctuation">:</span>
        moved_ids <span class="token operator">+=</span> <span class="token number">1</span>
percent_moved <span class="token operator">=</span> <span class="token number">100.0</span> <span class="token operator">*</span> moved_ids <span class="token operator">/</span> DATA_ID_COUNT
<span class="token keyword">print</span> <span class="token string">'%d ids moved, %.02f%%'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>moved_ids<span class="token punctuation">,</span> percent_moved<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>结果：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">89841</span> ids moved, <span class="token number">0.90</span>%<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>很好，在下面的系列中，会继续说明算法的局限性，并相应的进行优化。</p>
]]></content>
      <categories>
        <category>OpenStack Swift</category>
      </categories>
      <tags>
        <tag>Consistent Hashing</tag>
        <tag>Swift Ring</tag>
      </tags>
  </entry>
  <entry>
    <title>Building a Consistent Hashing Ring Part3-Part5(构建一个一致性哈希环 Part3-Part5)</title>
    <url>/2017/04/23/building-a-consistent-hashing-ring-3-5/</url>
    <content><![CDATA[<p>本篇是<a href="https://docs.openstack.org/swift/latest/ring_background.html">Building a Consistent Hashing Ring</a> 第三到第五部分的翻译，上篇翻译了原文的第一到第三部分，在第三到第五部分中，引入了分区概念，多副本，多可用区，以及权重的概念，更加接近一个高可用的实际一致性环<span id="more"></span></p>
<h2 id="Part-3"><a href="#Part-3" class="headerlink" title="Part 3"></a>Part 3</h2><p>在本系列的第2部分中，我们实现了一种算法，在集群添加新节点时也能够很好地运行。我们使用了可以独立分配给物理节点的1000个虚拟节点，这样我们可以最小化添加节点时移动的数据量。</p>
<p>虚拟节点数量确定了我们可以拥有多少物理节点。例如，如果您有1000个虚拟节点，并且尝试添加一个第1001个物理节点，那么在不替换任何物理节点的情况下是没有虚拟节点可以分配的，最终只会剩下1000个活动的物理节点。</p>
<p>不幸的是，在集群的整个生命周期中，在不进行很多细致的工作的情况下，创建时确定的虚拟节点的数量几乎永远无法改变。例如，可以将原有的一个虚拟节点拆成两个，而且将拆出的两个新虚拟节点分配给同一个物理节点，这样可以实现增加一倍的虚拟节点数量。然而，如果物理节点需要借助虚拟节点的id来更好地存储数据（例如，所有数据可能存储在&#x2F;[虚拟节点id]&#x2F;[数据id]目录中），则必须要移动数据来适应虚拟节点数量变化了。而且在移动的过程中，新旧位置都必须要有数据，很难或者基本不可能实现原子性操作。</p>
<p>所以稍微往前想一下：改变虚拟节点的数量可能是一件付出远比收益大的工作，但请记住，对于某些应用程序可能会是很有好处的。</p>
<p>解决这个限制的最简单的方法是使限制足够高，这样就不用怕遇到需要扩充的情况了。例如，如果我们认为集群永远不会拥有超过60000个物理节点，那么我们就可以设置6万个虚拟节点。</p>
<p>此外，我们应该在我们的计算中考虑一下节点的相对大小。例如，一年之后，我们可能会拥有处理当前节点的两倍容量的物理节点。因此，我们希望虚拟节点数量翻倍，这样应该将虚拟节点的估计值提高到120000。</p>
<p>为每个物理节点保留100个虚拟节点会是一个很好的规则。这样可以实现对任何给定节点的负载进行1％的调整，即使在最大容量情况下，这样的调整影响也很小。所以，对于一个最多包含60000个物理节点的集群，我们会有6,000,000个虚拟节点。</p>
<p>600万虚拟节点看起来很多，让人觉得可能会用到太多的内存。但唯一需要存储的结构是虚拟节点到实际节点映射关系。所需的内存大小大概为600万乘以2字节（存储从0到65,535的真实节点ID）大约需要12MB的内存，对于现阶段的机器来说，这并不是一件难事。</p>
<p>即使算上Python存储类型的所有开销，也没有什么可担心的。稍微修改了一下上面的代码，扩展成60000个物理和6,000,000个虚拟节点，将list更改为array(‘H’)，最高也只用了27MB的常驻内存，这还包括了两个环。</p>
<p>这时候可以换一种说法了，可以将这些这些虚拟节点叫做“分区”(partitions)。这将使我们更容易辨别之前所讨论的两种节点类型。另外，将它叫做分区也是有道理的，因为它确实是一个不间断的哈希空间的一部分。</p>
<p>我们也会始终保持分区个数为2的幂。这样可以使用哈希的位操作而不是模数来确定分区了。虽然并没有快多少，但好歹快一点点。所以，下面就是更新后的哈希环代码，使用8,388,608 (2**23)个分区和65,536个节点。我们已经提取了样本数据id集，并检查了分布情况，以确保没有破坏任何东西。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> array <span class="token keyword">import</span> array
<span class="token keyword">from</span> hashlib <span class="token keyword">import</span> md5
<span class="token keyword">from</span> struct <span class="token keyword">import</span> unpack_from

PARTITION_POWER <span class="token operator">=</span> <span class="token number">23</span>
PARTITION_SHIFT <span class="token operator">=</span> <span class="token number">32</span> <span class="token operator">-</span> PARTITION_POWER
NODE_COUNT <span class="token operator">=</span> <span class="token number">65536</span>
DATA_ID_COUNT <span class="token operator">=</span> <span class="token number">100000000</span>

part2node <span class="token operator">=</span> array<span class="token punctuation">(</span><span class="token string">'H'</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> part <span class="token keyword">in</span> <span class="token builtin">xrange</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">**</span> PARTITION_POWER<span class="token punctuation">)</span><span class="token punctuation">:</span>
    part2node<span class="token punctuation">.</span>append<span class="token punctuation">(</span>part <span class="token operator">%</span> NODE_COUNT<span class="token punctuation">)</span>
node_counts <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> NODE_COUNT
<span class="token keyword">for</span> data_id <span class="token keyword">in</span> <span class="token builtin">xrange</span><span class="token punctuation">(</span>DATA_ID_COUNT<span class="token punctuation">)</span><span class="token punctuation">:</span>
    data_id <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>data_id<span class="token punctuation">)</span>
    part <span class="token operator">=</span> unpack_from<span class="token punctuation">(</span><span class="token string">'>I'</span><span class="token punctuation">,</span> md5<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>data_id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>digest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">>></span> PARTITION_SHIFT
    node_id <span class="token operator">=</span> part2node<span class="token punctuation">[</span>part<span class="token punctuation">]</span>
    node_counts<span class="token punctuation">[</span>node_id<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>
desired_count <span class="token operator">=</span> DATA_ID_COUNT <span class="token operator">/</span> NODE_COUNT
<span class="token keyword">print</span> <span class="token string">'%d: Desired data ids per node'</span> <span class="token operator">%</span> desired_count
max_count <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>node_counts<span class="token punctuation">)</span>
over <span class="token operator">=</span> <span class="token number">100.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span>max_count <span class="token operator">-</span> desired_count<span class="token punctuation">)</span> <span class="token operator">/</span> desired_count
<span class="token keyword">print</span> <span class="token string">'%d: Most data ids on one node, %.02f%% over'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>max_count<span class="token punctuation">,</span> over<span class="token punctuation">)</span>
min_count <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>node_counts<span class="token punctuation">)</span>
under <span class="token operator">=</span> <span class="token number">100.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span>desired_count <span class="token operator">-</span> min_count<span class="token punctuation">)</span> <span class="token operator">/</span> desired_count
<span class="token keyword">print</span> <span class="token string">'%d: Least data ids on one node, %.02f%% under'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>min_count<span class="token punctuation">,</span> under<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>运行结果：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">1525</span>: Desired data ids per <span class="token function">node</span>
<span class="token number">1683</span>: Most data ids on one node, <span class="token number">10.36</span>% over
<span class="token number">1360</span>: Least data ids on one node, <span class="token number">10.82</span>% under<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>额 +-10%似乎有点高，但是我重新以65,536个分区和256个节点的情况运行了一次，得到+-0.4%，所以原因是因为1亿个样本对于8百万的分区数来说太小了。 样本量太大会使运行时间过长，所以我们将数字缩小了点。 （可以肯定的是，我用完整的版本重新运行了一个100亿数据id的样本集，得到+-1%的结果，但是一共花了了6.5个小时）。</p>
<h2 id="Part-4"><a href="#Part-4" class="headerlink" title="Part 4"></a>Part 4</h2><p>在本系列的第3部分中，我们进一步讨论了分区（虚拟节点），并基于此清理了代码。现在，我们来谈谈如何提高集群中数据的持久性和可用性。</p>
<p>对于很多的分布式数据存储，数据持久性是非常重要的。无论是RAID阵列或独立的数据副本都是需要的。虽然RAID会增加数据持久性，但它不会增加可用性 - 如果RAID机器崩溃了，数据可能是安全的，但是在修复完成之前，数据是无法被访问的。如果我们在不同机器上保留数据的多个副本，即使机器崩溃，在修复损坏的机器时，其他副本仍然是可用的。</p>
<p>实现这种多副本持久性&#x2F;可用性的最简单简单方法就是将节点进行分组并使用独立的哈希环。例如，要实现三数据副本的行业标准，您可以将节点分为三组，每组都有自己的环，每个组将收到每个数据项的副本。这可以工作地很好，但是缺点在于如果需要扩充容量，就需要一下子添加三个节点，而且，当有一个节点丢失时，基本上也就相当于少了三倍的容量。</p>
<p>作为替代，我们用一个不同但是通用的方法来满足我们的需求。这可以通过从起点沿着哈希环走动，并寻找其他不同的节点来完成。下面的代码是支持不同副本数量的（测试时将数量设置为了3）：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> array <span class="token keyword">import</span> array
<span class="token keyword">from</span> hashlib <span class="token keyword">import</span> md5
<span class="token keyword">from</span> struct <span class="token keyword">import</span> unpack_from

REPLICAS <span class="token operator">=</span> <span class="token number">3</span>
PARTITION_POWER <span class="token operator">=</span> <span class="token number">16</span>
PARTITION_SHIFT <span class="token operator">=</span> <span class="token number">32</span> <span class="token operator">-</span> PARTITION_POWER
PARTITION_MAX <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">**</span> PARTITION_POWER <span class="token operator">-</span> <span class="token number">1</span>
NODE_COUNT <span class="token operator">=</span> <span class="token number">256</span>
DATA_ID_COUNT <span class="token operator">=</span> <span class="token number">10000000</span>

part2node <span class="token operator">=</span> array<span class="token punctuation">(</span><span class="token string">'H'</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> part <span class="token keyword">in</span> <span class="token builtin">xrange</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">**</span> PARTITION_POWER<span class="token punctuation">)</span><span class="token punctuation">:</span>
    part2node<span class="token punctuation">.</span>append<span class="token punctuation">(</span>part <span class="token operator">%</span> NODE_COUNT<span class="token punctuation">)</span>
node_counts <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> NODE_COUNT
<span class="token keyword">for</span> data_id <span class="token keyword">in</span> <span class="token builtin">xrange</span><span class="token punctuation">(</span>DATA_ID_COUNT<span class="token punctuation">)</span><span class="token punctuation">:</span>
    data_id <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>data_id<span class="token punctuation">)</span>
    part <span class="token operator">=</span> unpack_from<span class="token punctuation">(</span><span class="token string">'>I'</span><span class="token punctuation">,</span>
        md5<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>data_id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>digest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">>></span> PARTITION_SHIFT
    node_ids <span class="token operator">=</span> <span class="token punctuation">[</span>part2node<span class="token punctuation">[</span>part<span class="token punctuation">]</span><span class="token punctuation">]</span>
    node_counts<span class="token punctuation">[</span>node_ids<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>
    <span class="token comment"># 按顺序往下选三个没有选中的节点</span>
    <span class="token keyword">for</span> replica <span class="token keyword">in</span> <span class="token builtin">xrange</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> REPLICAS<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">while</span> part2node<span class="token punctuation">[</span>part<span class="token punctuation">]</span> <span class="token keyword">in</span> node_ids<span class="token punctuation">:</span>
            part <span class="token operator">+=</span> <span class="token number">1</span>
            <span class="token keyword">if</span> part <span class="token operator">></span> PARTITION_MAX<span class="token punctuation">:</span>
                part <span class="token operator">=</span> <span class="token number">0</span>
        node_ids<span class="token punctuation">.</span>append<span class="token punctuation">(</span>part2node<span class="token punctuation">[</span>part<span class="token punctuation">]</span><span class="token punctuation">)</span>
        node_counts<span class="token punctuation">[</span>node_ids<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>
desired_count <span class="token operator">=</span> DATA_ID_COUNT <span class="token operator">/</span> NODE_COUNT <span class="token operator">*</span> REPLICAS
<span class="token keyword">print</span> <span class="token string">'%d: Desired data ids per node'</span> <span class="token operator">%</span> desired_count
max_count <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>node_counts<span class="token punctuation">)</span>
over <span class="token operator">=</span> <span class="token number">100.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span>max_count <span class="token operator">-</span> desired_count<span class="token punctuation">)</span> <span class="token operator">/</span> desired_count
<span class="token keyword">print</span> <span class="token string">'%d: Most data ids on one node, %.02f%% over'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>max_count<span class="token punctuation">,</span> over<span class="token punctuation">)</span>
min_count <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>node_counts<span class="token punctuation">)</span>
under <span class="token operator">=</span> <span class="token number">100.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span>desired_count <span class="token operator">-</span> min_count<span class="token punctuation">)</span> <span class="token operator">/</span> desired_count
<span class="token keyword">print</span> <span class="token string">'%d: Least data ids on one node, %.02f%% under'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>min_count<span class="token punctuation">,</span> under<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>运行结果：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">117186</span>: Desired data ids per <span class="token function">node</span>
<span class="token number">118133</span>: Most data ids on one node, <span class="token number">0.81</span>% over
<span class="token number">116093</span>: Least data ids on one node, <span class="token number">0.93</span>% under<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>很不错，数据不均衡小于1％。但是，还是有几个问题。</p>
<p>首先，由于我们最初将分区对应到物理节点，因此某个物理节点上的所有分区在其他两个物理节点上都有有额外的副本。问题是当一台机器故障时，另两个物理节点上的负载将增加一台机器的量。为了能更好地分发故障转移产生的负载，最好在开始分配分区时将分区打乱。</p>
<p>还有一个比较难解释的问题，就是是处理机器的物理分离。想像一下，一个机架只能放16台机器。因此256个节点需要16个机架。对于当前的代码，如果整个机架出现问题（电源问题，网络问题等），很有可能某些数据的三个副本都在该机架中，变得无法访问。因此我们可以给节点引入一个区域的概念，然后确保每个副本都存储在不同的区域中，从而解决这个缺陷。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> array <span class="token keyword">import</span> array
<span class="token keyword">from</span> hashlib <span class="token keyword">import</span> md5
<span class="token keyword">from</span> random <span class="token keyword">import</span> shuffle
<span class="token keyword">from</span> struct <span class="token keyword">import</span> unpack_from

REPLICAS <span class="token operator">=</span> <span class="token number">3</span>
PARTITION_POWER <span class="token operator">=</span> <span class="token number">16</span>
PARTITION_SHIFT <span class="token operator">=</span> <span class="token number">32</span> <span class="token operator">-</span> PARTITION_POWER
PARTITION_MAX <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">**</span> PARTITION_POWER <span class="token operator">-</span> <span class="token number">1</span>
NODE_COUNT <span class="token operator">=</span> <span class="token number">256</span>
ZONE_COUNT <span class="token operator">=</span> <span class="token number">16</span>
DATA_ID_COUNT <span class="token operator">=</span> <span class="token number">10000000</span>

node2zone <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token comment"># 将256个节点平均分配到16个不同的区域中</span>
<span class="token keyword">while</span> <span class="token builtin">len</span><span class="token punctuation">(</span>node2zone<span class="token punctuation">)</span> <span class="token operator">&lt;</span> NODE_COUNT<span class="token punctuation">:</span>
    zone <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">while</span> zone <span class="token operator">&lt;</span> ZONE_COUNT <span class="token keyword">and</span> <span class="token builtin">len</span><span class="token punctuation">(</span>node2zone<span class="token punctuation">)</span> <span class="token operator">&lt;</span> NODE_COUNT<span class="token punctuation">:</span>
        node2zone<span class="token punctuation">.</span>append<span class="token punctuation">(</span>zone<span class="token punctuation">)</span>
        zone <span class="token operator">+=</span> <span class="token number">1</span>
part2node <span class="token operator">=</span> array<span class="token punctuation">(</span><span class="token string">'H'</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> part <span class="token keyword">in</span> <span class="token builtin">xrange</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">**</span> PARTITION_POWER<span class="token punctuation">)</span><span class="token punctuation">:</span>
    part2node<span class="token punctuation">.</span>append<span class="token punctuation">(</span>part <span class="token operator">%</span> NODE_COUNT<span class="token punctuation">)</span>
<span class="token comment"># 关键的一步，将所有的分区全部打乱</span>
shuffle<span class="token punctuation">(</span>part2node<span class="token punctuation">)</span>
node_counts <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> NODE_COUNT
zone_counts <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> ZONE_COUNT
<span class="token keyword">for</span> data_id <span class="token keyword">in</span> <span class="token builtin">xrange</span><span class="token punctuation">(</span>DATA_ID_COUNT<span class="token punctuation">)</span><span class="token punctuation">:</span>
    data_id <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>data_id<span class="token punctuation">)</span>
    part <span class="token operator">=</span> unpack_from<span class="token punctuation">(</span><span class="token string">'>I'</span><span class="token punctuation">,</span> md5<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>data_id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>digest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">>></span> PARTITION_SHIFT
    node_ids <span class="token operator">=</span> <span class="token punctuation">[</span>part2node<span class="token punctuation">[</span>part<span class="token punctuation">]</span><span class="token punctuation">]</span>
    zones <span class="token operator">=</span> <span class="token punctuation">[</span>node2zone<span class="token punctuation">[</span>node_ids<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
    node_counts<span class="token punctuation">[</span>node_ids<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>
    zone_counts<span class="token punctuation">[</span>zones<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>
    <span class="token keyword">for</span> replica <span class="token keyword">in</span> <span class="token builtin">xrange</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> REPLICAS<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 分配副本节点时忽略在同一个区域的节点</span>
        <span class="token keyword">while</span> part2node<span class="token punctuation">[</span>part<span class="token punctuation">]</span> <span class="token keyword">in</span> node_ids <span class="token keyword">and</span> node2zone<span class="token punctuation">[</span>part2node<span class="token punctuation">[</span>part<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token keyword">in</span> zones<span class="token punctuation">:</span>
            part <span class="token operator">+=</span> <span class="token number">1</span>
            <span class="token keyword">if</span> part <span class="token operator">></span> PARTITION_MAX<span class="token punctuation">:</span>
                part <span class="token operator">=</span> <span class="token number">0</span>
        node_ids<span class="token punctuation">.</span>append<span class="token punctuation">(</span>part2node<span class="token punctuation">[</span>part<span class="token punctuation">]</span><span class="token punctuation">)</span>
        zones<span class="token punctuation">.</span>append<span class="token punctuation">(</span>node2zone<span class="token punctuation">[</span>node_ids<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        node_counts<span class="token punctuation">[</span>node_ids<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>
        zone_counts<span class="token punctuation">[</span>zones<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>
desired_count <span class="token operator">=</span> DATA_ID_COUNT <span class="token operator">/</span> NODE_COUNT <span class="token operator">*</span> REPLICAS
<span class="token keyword">print</span> <span class="token string">'%d: Desired data ids per node'</span> <span class="token operator">%</span> desired_count
max_count <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>node_counts<span class="token punctuation">)</span>
over <span class="token operator">=</span> <span class="token number">100.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span>max_count <span class="token operator">-</span> desired_count<span class="token punctuation">)</span> <span class="token operator">/</span> desired_count
<span class="token keyword">print</span> <span class="token string">'%d: Most data ids on one node, %.02f%% over'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>max_count<span class="token punctuation">,</span> over<span class="token punctuation">)</span>
min_count <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>node_counts<span class="token punctuation">)</span>
under <span class="token operator">=</span> <span class="token number">100.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span>desired_count <span class="token operator">-</span> min_count<span class="token punctuation">)</span> <span class="token operator">/</span> desired_count
<span class="token keyword">print</span> <span class="token string">'%d: Least data ids on one node, %.02f%% under'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>min_count<span class="token punctuation">,</span> under<span class="token punctuation">)</span>
desired_count <span class="token operator">=</span> DATA_ID_COUNT <span class="token operator">/</span> ZONE_COUNT <span class="token operator">*</span> REPLICAS
<span class="token keyword">print</span> <span class="token string">'%d: Desired data ids per zone'</span> <span class="token operator">%</span> desired_count
max_count <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>zone_counts<span class="token punctuation">)</span>
over <span class="token operator">=</span> <span class="token number">100.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span>max_count <span class="token operator">-</span> desired_count<span class="token punctuation">)</span> <span class="token operator">/</span> desired_count
<span class="token keyword">print</span> <span class="token string">'%d: Most data ids in one zone, %.02f%% over'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>max_count<span class="token punctuation">,</span> over<span class="token punctuation">)</span>
min_count <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>zone_counts<span class="token punctuation">)</span>
under <span class="token operator">=</span> <span class="token number">100.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span>desired_count <span class="token operator">-</span> min_count<span class="token punctuation">)</span> <span class="token operator">/</span> desired_count
<span class="token keyword">print</span> <span class="token string">'%d: Least data ids in one zone, %.02f%% under'</span> <span class="token operator">%</span>  <span class="token punctuation">(</span>min_count<span class="token punctuation">,</span> under<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>运行结果：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">117186</span>: Desired data ids per <span class="token function">node</span>
<span class="token number">118782</span>: Most data ids on one node, <span class="token number">1.36</span>% over
<span class="token number">115632</span>: Least data ids on one node, <span class="token number">1.33</span>% under
<span class="token number">1875000</span>: Desired data ids per zone
<span class="token number">1878533</span>: Most data ids <span class="token keyword">in</span> one zone, <span class="token number">0.19</span>% over
<span class="token number">1869070</span>: Least data ids <span class="token keyword">in</span> one zone, <span class="token number">0.32</span>% under<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看到将分区打乱，并且引入区域概念影响了我们的分配，但结果仍然是足够好的。 这个测试在我的机器上运行了大约64秒。</p>
<p>有一种更加常见的方式可以替换上面的代码。 这个方法根本不使用分区，而是将锚点分配给散列空间中的节点。 给定一个散列，只需要沿着锚环就能找到地一个节点，同样的可以继续找到其他节点。 为了达到和虚拟节点相同的效果，每个真实节点会被分配多个锚点。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> bisect <span class="token keyword">import</span> bisect_left
<span class="token keyword">from</span> hashlib <span class="token keyword">import</span> md5
<span class="token keyword">from</span> struct <span class="token keyword">import</span> unpack_from

REPLICAS <span class="token operator">=</span> <span class="token number">3</span>
NODE_COUNT <span class="token operator">=</span> <span class="token number">256</span>
ZONE_COUNT <span class="token operator">=</span> <span class="token number">16</span>
DATA_ID_COUNT <span class="token operator">=</span> <span class="token number">10000000</span>
VNODE_COUNT <span class="token operator">=</span> <span class="token number">100</span>

node2zone <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">while</span> <span class="token builtin">len</span><span class="token punctuation">(</span>node2zone<span class="token punctuation">)</span> <span class="token operator">&lt;</span> NODE_COUNT<span class="token punctuation">:</span>
    zone <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">while</span> zone <span class="token operator">&lt;</span> ZONE_COUNT <span class="token keyword">and</span> <span class="token builtin">len</span><span class="token punctuation">(</span>node2zone<span class="token punctuation">)</span> <span class="token operator">&lt;</span> NODE_COUNT<span class="token punctuation">:</span>
        node2zone<span class="token punctuation">.</span>append<span class="token punctuation">(</span>zone<span class="token punctuation">)</span>
        zone <span class="token operator">+=</span> <span class="token number">1</span>
hash2index <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
index2node <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> node <span class="token keyword">in</span> <span class="token builtin">xrange</span><span class="token punctuation">(</span>NODE_COUNT<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> vnode <span class="token keyword">in</span> <span class="token builtin">xrange</span><span class="token punctuation">(</span>VNODE_COUNT<span class="token punctuation">)</span><span class="token punctuation">:</span>
        hsh <span class="token operator">=</span> unpack_from<span class="token punctuation">(</span><span class="token string">'>I'</span><span class="token punctuation">,</span> md5<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>digest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
        index <span class="token operator">=</span> bisect_left<span class="token punctuation">(</span>hash2index<span class="token punctuation">,</span> hsh<span class="token punctuation">)</span>
        <span class="token keyword">if</span> index <span class="token operator">></span> <span class="token builtin">len</span><span class="token punctuation">(</span>hash2index<span class="token punctuation">)</span><span class="token punctuation">:</span>
            index <span class="token operator">=</span> <span class="token number">0</span>
        hash2index<span class="token punctuation">.</span>insert<span class="token punctuation">(</span>index<span class="token punctuation">,</span> hsh<span class="token punctuation">)</span>
        index2node<span class="token punctuation">.</span>insert<span class="token punctuation">(</span>index<span class="token punctuation">,</span> node<span class="token punctuation">)</span>
node_counts <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> NODE_COUNT
zone_counts <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> ZONE_COUNT
<span class="token keyword">for</span> data_id <span class="token keyword">in</span> <span class="token builtin">xrange</span><span class="token punctuation">(</span>DATA_ID_COUNT<span class="token punctuation">)</span><span class="token punctuation">:</span>
    data_id <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>data_id<span class="token punctuation">)</span>
    hsh <span class="token operator">=</span> unpack_from<span class="token punctuation">(</span><span class="token string">'>I'</span><span class="token punctuation">,</span> md5<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>data_id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>digest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
    index <span class="token operator">=</span> bisect_left<span class="token punctuation">(</span>hash2index<span class="token punctuation">,</span> hsh<span class="token punctuation">)</span>
    <span class="token keyword">if</span> index <span class="token operator">>=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>hash2index<span class="token punctuation">)</span><span class="token punctuation">:</span>
        index <span class="token operator">=</span> <span class="token number">0</span>
    node_ids <span class="token operator">=</span> <span class="token punctuation">[</span>index2node<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">]</span>
    zones <span class="token operator">=</span> <span class="token punctuation">[</span>node2zone<span class="token punctuation">[</span>node_ids<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
    node_counts<span class="token punctuation">[</span>node_ids<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>
    zone_counts<span class="token punctuation">[</span>zones<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>
    <span class="token keyword">for</span> replica <span class="token keyword">in</span> <span class="token builtin">xrange</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> REPLICAS<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">while</span> index2node<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token keyword">in</span> node_ids <span class="token keyword">and</span> node2zone<span class="token punctuation">[</span>index2node<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token keyword">in</span> zones<span class="token punctuation">:</span>
            index <span class="token operator">+=</span> <span class="token number">1</span>
            <span class="token keyword">if</span> index <span class="token operator">>=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>hash2index<span class="token punctuation">)</span><span class="token punctuation">:</span>
                index <span class="token operator">=</span> <span class="token number">0</span>
        node_ids<span class="token punctuation">.</span>append<span class="token punctuation">(</span>index2node<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span>
        zones<span class="token punctuation">.</span>append<span class="token punctuation">(</span>node2zone<span class="token punctuation">[</span>node_ids<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        node_counts<span class="token punctuation">[</span>node_ids<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>
        zone_counts<span class="token punctuation">[</span>zones<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>
desired_count <span class="token operator">=</span> DATA_ID_COUNT <span class="token operator">/</span> NODE_COUNT <span class="token operator">*</span> REPLICAS
<span class="token keyword">print</span> <span class="token string">'%d: Desired data ids per node'</span> <span class="token operator">%</span> desired_count
max_count <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>node_counts<span class="token punctuation">)</span>
over <span class="token operator">=</span> <span class="token number">100.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span>max_count <span class="token operator">-</span> desired_count<span class="token punctuation">)</span> <span class="token operator">/</span> desired_count
<span class="token keyword">print</span> <span class="token string">'%d: Most data ids on one node, %.02f%% over'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>max_count<span class="token punctuation">,</span> over<span class="token punctuation">)</span>
min_count <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>node_counts<span class="token punctuation">)</span>
under <span class="token operator">=</span> <span class="token number">100.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span>desired_count <span class="token operator">-</span> min_count<span class="token punctuation">)</span> <span class="token operator">/</span> desired_count
<span class="token keyword">print</span> <span class="token string">'%d: Least data ids on one node, %.02f%% under'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>min_count<span class="token punctuation">,</span> under<span class="token punctuation">)</span>
desired_count <span class="token operator">=</span> DATA_ID_COUNT <span class="token operator">/</span> ZONE_COUNT <span class="token operator">*</span> REPLICAS
<span class="token keyword">print</span> <span class="token string">'%d: Desired data ids per zone'</span> <span class="token operator">%</span> desired_count
max_count <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>zone_counts<span class="token punctuation">)</span>
over <span class="token operator">=</span> <span class="token number">100.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span>max_count <span class="token operator">-</span> desired_count<span class="token punctuation">)</span> <span class="token operator">/</span> desired_count
<span class="token keyword">print</span> <span class="token string">'%d: Most data ids in one zone, %.02f%% over'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>max_count<span class="token punctuation">,</span> over<span class="token punctuation">)</span>
min_count <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>zone_counts<span class="token punctuation">)</span>
under <span class="token operator">=</span> <span class="token number">100.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span>desired_count <span class="token operator">-</span> min_count<span class="token punctuation">)</span> <span class="token operator">/</span> desired_count
<span class="token keyword">print</span> <span class="token string">'%d: Least data ids in one zone, %.02f%% under'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>min_count<span class="token punctuation">,</span> under<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>结果：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">117186</span>: Desired data ids per <span class="token function">node</span>
<span class="token number">351282</span>: Most data ids on one node, <span class="token number">199.76</span>% over
<span class="token number">15965</span>: Least data ids on one node, <span class="token number">86.38</span>% under
<span class="token number">1875000</span>: Desired data ids per zone
<span class="token number">2248496</span>: Most data ids <span class="token keyword">in</span> one zone, <span class="token number">19.92</span>% over
<span class="token number">1378013</span>: Least data ids <span class="token keyword">in</span> one zone, <span class="token number">26.51</span>% under<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>运行这个测试需要花上15分钟的时间！然后看起来这个方法对于控制数据分布效果不是很好，所以需要添加更多的虚拟节点，当然这样也会需要消耗更多的内存，而且查找时也会消耗更多时间。对于根据id查找节点这一最常用的操作，还是有改进空间的（例如，将每个虚拟节点的故障转移节点预先分配好），但是从第一部分开始我们都没有做相关的优化，所以暂时还是先保持原样。<br>在下一节中，我们会将这些封装一下，变成一个Python模块。</p>
<h2 id="Part-5"><a href="#Part-5" class="headerlink" title="Part 5"></a>Part 5</h2><p>在第四部分中，我们实现了一个支持复制和区域概念的环，或者说，至少部分实现了。在最后一部分中，我们会将这些封装成一个Pyhton的模块，然后，再加上最后的一个功能。<br>首先，我们将创建哈希环的操作和测试哈希环的操作分开：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> array <span class="token keyword">import</span> array
<span class="token keyword">from</span> hashlib <span class="token keyword">import</span> md5
<span class="token keyword">from</span> random <span class="token keyword">import</span> shuffle
<span class="token keyword">from</span> struct <span class="token keyword">import</span> unpack_from
<span class="token keyword">from</span> time <span class="token keyword">import</span> time

<span class="token keyword">class</span> <span class="token class-name">Ring</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nodes<span class="token punctuation">,</span> part2node<span class="token punctuation">,</span> replicas<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>nodes <span class="token operator">=</span> nodes
        self<span class="token punctuation">.</span>part2node <span class="token operator">=</span> part2node
        self<span class="token punctuation">.</span>replicas <span class="token operator">=</span> replicas
        partition_power <span class="token operator">=</span> <span class="token number">1</span>
        <span class="token keyword">while</span> <span class="token number">2</span> <span class="token operator">**</span> partition_power <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>part2node<span class="token punctuation">)</span><span class="token punctuation">:</span>
            partition_power <span class="token operator">+=</span> <span class="token number">1</span>
        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>part2node<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">2</span> <span class="token operator">**</span> partition_power<span class="token punctuation">:</span>
            <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">"part2node's length is not an "</span>
                            <span class="token string">"exact power of 2"</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>partition_shift <span class="token operator">=</span> <span class="token number">32</span> <span class="token operator">-</span> partition_power

    <span class="token keyword">def</span> <span class="token function">get_nodes</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data_id<span class="token punctuation">)</span><span class="token punctuation">:</span>
        data_id <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>data_id<span class="token punctuation">)</span>
        part <span class="token operator">=</span> unpack_from<span class="token punctuation">(</span><span class="token string">'>I'</span><span class="token punctuation">,</span>
           md5<span class="token punctuation">(</span>data_id<span class="token punctuation">)</span><span class="token punctuation">.</span>digest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">>></span> self<span class="token punctuation">.</span>partition_shift
        node_ids <span class="token operator">=</span> <span class="token punctuation">[</span>self<span class="token punctuation">.</span>part2node<span class="token punctuation">[</span>part<span class="token punctuation">]</span><span class="token punctuation">]</span>
        zones <span class="token operator">=</span> <span class="token punctuation">[</span>self<span class="token punctuation">.</span>nodes<span class="token punctuation">[</span>node_ids<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
        <span class="token keyword">for</span> replica <span class="token keyword">in</span> <span class="token builtin">xrange</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>replicas<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">while</span> self<span class="token punctuation">.</span>part2node<span class="token punctuation">[</span>part<span class="token punctuation">]</span> <span class="token keyword">in</span> node_ids <span class="token keyword">and</span> \
                   self<span class="token punctuation">.</span>nodes<span class="token punctuation">[</span>self<span class="token punctuation">.</span>part2node<span class="token punctuation">[</span>part<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token keyword">in</span> zones<span class="token punctuation">:</span>
                part <span class="token operator">+=</span> <span class="token number">1</span>
                <span class="token keyword">if</span> part <span class="token operator">>=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>part2node<span class="token punctuation">)</span><span class="token punctuation">:</span>
                    part <span class="token operator">=</span> <span class="token number">0</span>
            node_ids<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">.</span>part2node<span class="token punctuation">[</span>part<span class="token punctuation">]</span><span class="token punctuation">)</span>
            zones<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">.</span>nodes<span class="token punctuation">[</span>node_ids<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token punctuation">[</span>self<span class="token punctuation">.</span>nodes<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token keyword">for</span> n <span class="token keyword">in</span> node_ids<span class="token punctuation">]</span>

<span class="token keyword">def</span> <span class="token function">build_ring</span><span class="token punctuation">(</span>nodes<span class="token punctuation">,</span> partition_power<span class="token punctuation">,</span> replicas<span class="token punctuation">)</span><span class="token punctuation">:</span>
    begin <span class="token operator">=</span> time<span class="token punctuation">(</span><span class="token punctuation">)</span>
    part2node <span class="token operator">=</span> array<span class="token punctuation">(</span><span class="token string">'H'</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> part <span class="token keyword">in</span> <span class="token builtin">xrange</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">**</span> partition_power<span class="token punctuation">)</span><span class="token punctuation">:</span>
        part2node<span class="token punctuation">.</span>append<span class="token punctuation">(</span>part <span class="token operator">%</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nodes<span class="token punctuation">)</span><span class="token punctuation">)</span>
    shuffle<span class="token punctuation">(</span>part2node<span class="token punctuation">)</span>
    ring <span class="token operator">=</span> Ring<span class="token punctuation">(</span>nodes<span class="token punctuation">,</span> part2node<span class="token punctuation">,</span> replicas<span class="token punctuation">)</span>
    <span class="token keyword">print</span> <span class="token string">'%.02fs to build ring'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> begin<span class="token punctuation">)</span>
    <span class="token keyword">return</span> ring

<span class="token keyword">def</span> <span class="token function">test_ring</span><span class="token punctuation">(</span>ring<span class="token punctuation">)</span><span class="token punctuation">:</span>
    begin <span class="token operator">=</span> time<span class="token punctuation">(</span><span class="token punctuation">)</span>
    DATA_ID_COUNT <span class="token operator">=</span> <span class="token number">10000000</span>
    node_counts <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
    zone_counts <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
    <span class="token keyword">for</span> data_id <span class="token keyword">in</span> <span class="token builtin">xrange</span><span class="token punctuation">(</span>DATA_ID_COUNT<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> node <span class="token keyword">in</span> ring<span class="token punctuation">.</span>get_nodes<span class="token punctuation">(</span>data_id<span class="token punctuation">)</span><span class="token punctuation">:</span>
            node_counts<span class="token punctuation">[</span>node<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> node_counts<span class="token punctuation">.</span>get<span class="token punctuation">(</span>node<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>
            zone_counts<span class="token punctuation">[</span>node<span class="token punctuation">[</span><span class="token string">'zone'</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> zone_counts<span class="token punctuation">.</span>get<span class="token punctuation">(</span>node<span class="token punctuation">[</span><span class="token string">'zone'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>
    <span class="token keyword">print</span> <span class="token string">'%ds to test ring'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> begin<span class="token punctuation">)</span>
    desired_count <span class="token operator">=</span> DATA_ID_COUNT <span class="token operator">/</span> <span class="token builtin">len</span><span class="token punctuation">(</span>ring<span class="token punctuation">.</span>nodes<span class="token punctuation">)</span> <span class="token operator">*</span> REPLICAS
    <span class="token keyword">print</span> <span class="token string">'%d: Desired data ids per node'</span> <span class="token operator">%</span> desired_count
    max_count <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>node_counts<span class="token punctuation">.</span>itervalues<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    over <span class="token operator">=</span> <span class="token number">100.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span>max_count <span class="token operator">-</span> desired_count<span class="token punctuation">)</span> <span class="token operator">/</span> desired_count
    <span class="token keyword">print</span> <span class="token string">'%d: Most data ids on one node, %.02f%% over'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>max_count<span class="token punctuation">,</span> over<span class="token punctuation">)</span>
    min_count <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>node_counts<span class="token punctuation">.</span>itervalues<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    under <span class="token operator">=</span> <span class="token number">100.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span>desired_count <span class="token operator">-</span> min_count<span class="token punctuation">)</span> <span class="token operator">/</span> desired_count
    <span class="token keyword">print</span> <span class="token string">'%d: Least data ids on one node, %.02f%% under'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>min_count<span class="token punctuation">,</span> under<span class="token punctuation">)</span>
    zone_count <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span>n<span class="token punctuation">[</span><span class="token string">'zone'</span><span class="token punctuation">]</span> <span class="token keyword">for</span> n <span class="token keyword">in</span> ring<span class="token punctuation">.</span>nodes<span class="token punctuation">.</span>itervalues<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    desired_count <span class="token operator">=</span> DATA_ID_COUNT <span class="token operator">/</span> zone_count <span class="token operator">*</span> ring<span class="token punctuation">.</span>replicas
    <span class="token keyword">print</span> <span class="token string">'%d: Desired data ids per zone'</span> <span class="token operator">%</span> desired_count
    max_count <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>zone_counts<span class="token punctuation">.</span>itervalues<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    over <span class="token operator">=</span> <span class="token number">100.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span>max_count <span class="token operator">-</span> desired_count<span class="token punctuation">)</span> <span class="token operator">/</span> desired_count
    <span class="token keyword">print</span> <span class="token string">'%d: Most data ids in one zone, %.02f%% over'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>max_count<span class="token punctuation">,</span> over<span class="token punctuation">)</span>
    min_count <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>zone_counts<span class="token punctuation">.</span>itervalues<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    under <span class="token operator">=</span> <span class="token number">100.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span>desired_count <span class="token operator">-</span> min_count<span class="token punctuation">)</span> <span class="token operator">/</span> desired_count
    <span class="token keyword">print</span> <span class="token string">'%d: Least data ids in one zone, %.02f%% under'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>min_count<span class="token punctuation">,</span> under<span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    PARTITION_POWER <span class="token operator">=</span> <span class="token number">16</span>
    REPLICAS <span class="token operator">=</span> <span class="token number">3</span>
    NODE_COUNT <span class="token operator">=</span> <span class="token number">256</span>
    ZONE_COUNT <span class="token operator">=</span> <span class="token number">16</span>
    nodes <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
    <span class="token keyword">while</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nodes<span class="token punctuation">)</span> <span class="token operator">&lt;</span> NODE_COUNT<span class="token punctuation">:</span>
        zone <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">while</span> zone <span class="token operator">&lt;</span> ZONE_COUNT <span class="token keyword">and</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nodes<span class="token punctuation">)</span> <span class="token operator">&lt;</span> NODE_COUNT<span class="token punctuation">:</span>
            node_id <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nodes<span class="token punctuation">)</span>
            nodes<span class="token punctuation">[</span>node_id<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'id'</span><span class="token punctuation">:</span> node_id<span class="token punctuation">,</span> <span class="token string">'zone'</span><span class="token punctuation">:</span> zone<span class="token punctuation">&#125;</span>
            zone <span class="token operator">+=</span> <span class="token number">1</span>
    ring <span class="token operator">=</span> build_ring<span class="token punctuation">(</span>nodes<span class="token punctuation">,</span> PARTITION_POWER<span class="token punctuation">,</span> REPLICAS<span class="token punctuation">)</span>
    test_ring<span class="token punctuation">(</span>ring<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>结果：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">0</span>.06s to build ring
82s to <span class="token builtin class-name">test</span> ring
<span class="token number">117186</span>: Desired data ids per <span class="token function">node</span>
<span class="token number">118773</span>: Most data ids on one node, <span class="token number">1.35</span>% over
<span class="token number">115801</span>: Least data ids on one node, <span class="token number">1.18</span>% under
<span class="token number">1875000</span>: Desired data ids per zone
<span class="token number">1878339</span>: Most data ids <span class="token keyword">in</span> one zone, <span class="token number">0.18</span>% over
<span class="token number">1869914</span>: Least data ids <span class="token keyword">in</span> one zone, <span class="token number">0.27</span>% under<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>测试我们的哈系环需要比较长的时间，但这主要是因为我们将很多的变量从数组换成了字典。 用字典存储节点好处是，可以直接附加想要的任何节点信息（IP地址，TCP端口，驱动器路径等）。 我们还会进一步测试中，目前的数据分布情况还是不错的。<br>最后，我们将最后一个特性添加到哈希环中，也就是权重。权重的用处在于，在一个哈希环的整个生命周期中，后期添加的节点，很可能比前期添加的节点拥有更多的容量，对于这次的测试，我们将模拟所有节点中有一半的节点拥有两倍的权重。所以，我们需要修改<code>build_ring</code>函数，将节点的权重考虑进去，分配给权重高的节点更多的分区。由于修改比较大，所以直接贴出代码:</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> array <span class="token keyword">import</span> array
<span class="token keyword">from</span> hashlib <span class="token keyword">import</span> md5
<span class="token keyword">from</span> random <span class="token keyword">import</span> shuffle
<span class="token keyword">from</span> struct <span class="token keyword">import</span> unpack_from
<span class="token keyword">from</span> time <span class="token keyword">import</span> time

<span class="token keyword">class</span> <span class="token class-name">Ring</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nodes<span class="token punctuation">,</span> part2node<span class="token punctuation">,</span> replicas<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>nodes <span class="token operator">=</span> nodes
        self<span class="token punctuation">.</span>part2node <span class="token operator">=</span> part2node
        self<span class="token punctuation">.</span>replicas <span class="token operator">=</span> replicas
        partition_power <span class="token operator">=</span> <span class="token number">1</span>
        <span class="token keyword">while</span> <span class="token number">2</span> <span class="token operator">**</span> partition_power <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>part2node<span class="token punctuation">)</span><span class="token punctuation">:</span>
            partition_power <span class="token operator">+=</span> <span class="token number">1</span>
        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>part2node<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">2</span> <span class="token operator">**</span> partition_power<span class="token punctuation">:</span>
            <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">"part2node's length is not an "</span>
                            <span class="token string">"exact power of 2"</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>partition_shift <span class="token operator">=</span> <span class="token number">32</span> <span class="token operator">-</span> partition_power

    <span class="token keyword">def</span> <span class="token function">get_nodes</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data_id<span class="token punctuation">)</span><span class="token punctuation">:</span>
        data_id <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>data_id<span class="token punctuation">)</span>
        part <span class="token operator">=</span> unpack_from<span class="token punctuation">(</span><span class="token string">'>I'</span><span class="token punctuation">,</span>
           md5<span class="token punctuation">(</span>data_id<span class="token punctuation">)</span><span class="token punctuation">.</span>digest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">>></span> self<span class="token punctuation">.</span>partition_shift
        node_ids <span class="token operator">=</span> <span class="token punctuation">[</span>self<span class="token punctuation">.</span>part2node<span class="token punctuation">[</span>part<span class="token punctuation">]</span><span class="token punctuation">]</span>
        zones <span class="token operator">=</span> <span class="token punctuation">[</span>self<span class="token punctuation">.</span>nodes<span class="token punctuation">[</span>node_ids<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
        <span class="token keyword">for</span> replica <span class="token keyword">in</span> <span class="token builtin">xrange</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>replicas<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">while</span> self<span class="token punctuation">.</span>part2node<span class="token punctuation">[</span>part<span class="token punctuation">]</span> <span class="token keyword">in</span> node_ids <span class="token keyword">and</span> \
                   self<span class="token punctuation">.</span>nodes<span class="token punctuation">[</span>self<span class="token punctuation">.</span>part2node<span class="token punctuation">[</span>part<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token keyword">in</span> zones<span class="token punctuation">:</span>
                part <span class="token operator">+=</span> <span class="token number">1</span>
                <span class="token keyword">if</span> part <span class="token operator">>=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>part2node<span class="token punctuation">)</span><span class="token punctuation">:</span>
                    part <span class="token operator">=</span> <span class="token number">0</span>
            node_ids<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">.</span>part2node<span class="token punctuation">[</span>part<span class="token punctuation">]</span><span class="token punctuation">)</span>
            zones<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">.</span>nodes<span class="token punctuation">[</span>node_ids<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token punctuation">[</span>self<span class="token punctuation">.</span>nodes<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token keyword">for</span> n <span class="token keyword">in</span> node_ids<span class="token punctuation">]</span>

<span class="token keyword">def</span> <span class="token function">build_ring</span><span class="token punctuation">(</span>nodes<span class="token punctuation">,</span> partition_power<span class="token punctuation">,</span> replicas<span class="token punctuation">)</span><span class="token punctuation">:</span>
    begin <span class="token operator">=</span> time<span class="token punctuation">(</span><span class="token punctuation">)</span>
    parts <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">**</span> partition_power
    <span class="token comment"># 计算总权重</span>
    total_weight <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token builtin">sum</span><span class="token punctuation">(</span>n<span class="token punctuation">[</span><span class="token string">'weight'</span><span class="token punctuation">]</span> <span class="token keyword">for</span> n <span class="token keyword">in</span> nodes<span class="token punctuation">.</span>itervalues<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> node <span class="token keyword">in</span> nodes<span class="token punctuation">.</span>itervalues<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 每个节点应该分配的分区数量</span>
        node<span class="token punctuation">[</span><span class="token string">'desired_parts'</span><span class="token punctuation">]</span> <span class="token operator">=</span> parts <span class="token operator">/</span> total_weight <span class="token operator">*</span> node<span class="token punctuation">[</span><span class="token string">'weight'</span><span class="token punctuation">]</span>
    part2node <span class="token operator">=</span> array<span class="token punctuation">(</span><span class="token string">'H'</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> part <span class="token keyword">in</span> <span class="token builtin">xrange</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">**</span> partition_power<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> node <span class="token keyword">in</span> nodes<span class="token punctuation">.</span>itervalues<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token comment"># 如果节点还有配额，就直接分配了</span>
            <span class="token keyword">if</span> node<span class="token punctuation">[</span><span class="token string">'desired_parts'</span><span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">:</span>
                node<span class="token punctuation">[</span><span class="token string">'desired_parts'</span><span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span>
                part2node<span class="token punctuation">.</span>append<span class="token punctuation">(</span>node<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
                <span class="token keyword">break</span>
        <span class="token comment"># 处理不能整除的情况</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">for</span> node <span class="token keyword">in</span> nodes<span class="token punctuation">.</span>itervalues<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">if</span> node<span class="token punctuation">[</span><span class="token string">'desired_parts'</span><span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">:</span>
                    node<span class="token punctuation">[</span><span class="token string">'desired_parts'</span><span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span>
                    part2node<span class="token punctuation">.</span>append<span class="token punctuation">(</span>node<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
                    <span class="token keyword">break</span>
    shuffle<span class="token punctuation">(</span>part2node<span class="token punctuation">)</span>
    ring <span class="token operator">=</span> Ring<span class="token punctuation">(</span>nodes<span class="token punctuation">,</span> part2node<span class="token punctuation">,</span> replicas<span class="token punctuation">)</span>
    <span class="token keyword">print</span> <span class="token string">'%.02fs to build ring'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> begin<span class="token punctuation">)</span>
    <span class="token keyword">return</span> ring

<span class="token keyword">def</span> <span class="token function">test_ring</span><span class="token punctuation">(</span>ring<span class="token punctuation">)</span><span class="token punctuation">:</span>
    begin <span class="token operator">=</span> time<span class="token punctuation">(</span><span class="token punctuation">)</span>
    DATA_ID_COUNT <span class="token operator">=</span> <span class="token number">10000000</span>
    node_counts <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
    zone_counts <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
    <span class="token keyword">for</span> data_id <span class="token keyword">in</span> <span class="token builtin">xrange</span><span class="token punctuation">(</span>DATA_ID_COUNT<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> node <span class="token keyword">in</span> ring<span class="token punctuation">.</span>get_nodes<span class="token punctuation">(</span>data_id<span class="token punctuation">)</span><span class="token punctuation">:</span>
            node_counts<span class="token punctuation">[</span>node<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> \
                node_counts<span class="token punctuation">.</span>get<span class="token punctuation">(</span>node<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>
            zone_counts<span class="token punctuation">[</span>node<span class="token punctuation">[</span><span class="token string">'zone'</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> \
                zone_counts<span class="token punctuation">.</span>get<span class="token punctuation">(</span>node<span class="token punctuation">[</span><span class="token string">'zone'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>
    <span class="token keyword">print</span> <span class="token string">'%ds to test ring'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> begin<span class="token punctuation">)</span>
    total_weight <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token builtin">sum</span><span class="token punctuation">(</span>n<span class="token punctuation">[</span><span class="token string">'weight'</span><span class="token punctuation">]</span> <span class="token keyword">for</span> n <span class="token keyword">in</span>
                             ring<span class="token punctuation">.</span>nodes<span class="token punctuation">.</span>itervalues<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    max_over <span class="token operator">=</span> <span class="token number">0</span>
    max_under <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> node <span class="token keyword">in</span> ring<span class="token punctuation">.</span>nodes<span class="token punctuation">.</span>itervalues<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        desired <span class="token operator">=</span> DATA_ID_COUNT <span class="token operator">*</span> REPLICAS <span class="token operator">*</span> \
            node<span class="token punctuation">[</span><span class="token string">'weight'</span><span class="token punctuation">]</span> <span class="token operator">/</span> total_weight
        diff <span class="token operator">=</span> node_counts<span class="token punctuation">[</span>node<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">-</span> desired
        <span class="token keyword">if</span> diff <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>
            over <span class="token operator">=</span> <span class="token number">100.0</span> <span class="token operator">*</span> diff <span class="token operator">/</span> desired
            <span class="token keyword">if</span> over <span class="token operator">></span> max_over<span class="token punctuation">:</span>
                max_over <span class="token operator">=</span> over
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            under <span class="token operator">=</span> <span class="token number">100.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token operator">-</span>diff<span class="token punctuation">)</span> <span class="token operator">/</span> desired
            <span class="token keyword">if</span> under <span class="token operator">></span> max_under<span class="token punctuation">:</span>
                max_under <span class="token operator">=</span> under
    <span class="token keyword">print</span> <span class="token string">'%.02f%% max node over'</span> <span class="token operator">%</span> max_over
    <span class="token keyword">print</span> <span class="token string">'%.02f%% max node under'</span> <span class="token operator">%</span> max_under
    max_over <span class="token operator">=</span> <span class="token number">0</span>
    max_under <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> zone <span class="token keyword">in</span> <span class="token builtin">set</span><span class="token punctuation">(</span>n<span class="token punctuation">[</span><span class="token string">'zone'</span><span class="token punctuation">]</span> <span class="token keyword">for</span> n <span class="token keyword">in</span>
                    ring<span class="token punctuation">.</span>nodes<span class="token punctuation">.</span>itervalues<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        zone_weight <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span>n<span class="token punctuation">[</span><span class="token string">'weight'</span><span class="token punctuation">]</span> <span class="token keyword">for</span> n <span class="token keyword">in</span>
            ring<span class="token punctuation">.</span>nodes<span class="token punctuation">.</span>itervalues<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> n<span class="token punctuation">[</span><span class="token string">'zone'</span><span class="token punctuation">]</span> <span class="token operator">==</span> zone<span class="token punctuation">)</span>
        desired <span class="token operator">=</span> DATA_ID_COUNT <span class="token operator">*</span> REPLICAS <span class="token operator">*</span> zone_weight <span class="token operator">/</span> total_weight
        diff <span class="token operator">=</span> zone_counts<span class="token punctuation">[</span>zone<span class="token punctuation">]</span> <span class="token operator">-</span> desired
        <span class="token keyword">if</span> diff <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>
            over <span class="token operator">=</span> <span class="token number">100.0</span> <span class="token operator">*</span> diff <span class="token operator">/</span> desired
            <span class="token keyword">if</span> over <span class="token operator">></span> max_over<span class="token punctuation">:</span>
                max_over <span class="token operator">=</span> over
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            under <span class="token operator">=</span> <span class="token number">100.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token operator">-</span>diff<span class="token punctuation">)</span> <span class="token operator">/</span> desired
            <span class="token keyword">if</span> under <span class="token operator">></span> max_under<span class="token punctuation">:</span>
                max_under <span class="token operator">=</span> under
    <span class="token keyword">print</span> <span class="token string">'%.02f%% max zone over'</span> <span class="token operator">%</span> max_over
    <span class="token keyword">print</span> <span class="token string">'%.02f%% max zone under'</span> <span class="token operator">%</span> max_under

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    PARTITION_POWER <span class="token operator">=</span> <span class="token number">16</span>
    REPLICAS <span class="token operator">=</span> <span class="token number">3</span>
    NODE_COUNT <span class="token operator">=</span> <span class="token number">256</span>
    ZONE_COUNT <span class="token operator">=</span> <span class="token number">16</span>
    nodes <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
    <span class="token keyword">while</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nodes<span class="token punctuation">)</span> <span class="token operator">&lt;</span> NODE_COUNT<span class="token punctuation">:</span>
        zone <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">while</span> zone <span class="token operator">&lt;</span> ZONE_COUNT <span class="token keyword">and</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nodes<span class="token punctuation">)</span> <span class="token operator">&lt;</span> NODE_COUNT<span class="token punctuation">:</span>
            node_id <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nodes<span class="token punctuation">)</span>
            nodes<span class="token punctuation">[</span>node_id<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'id'</span><span class="token punctuation">:</span> node_id<span class="token punctuation">,</span> <span class="token string">'zone'</span><span class="token punctuation">:</span> zone<span class="token punctuation">,</span>
                              <span class="token string">'weight'</span><span class="token punctuation">:</span> <span class="token number">1.0</span> <span class="token operator">+</span> <span class="token punctuation">(</span>node_id <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>
            zone <span class="token operator">+=</span> <span class="token number">1</span>
    ring <span class="token operator">=</span> build_ring<span class="token punctuation">(</span>nodes<span class="token punctuation">,</span> PARTITION_POWER<span class="token punctuation">,</span> REPLICAS<span class="token punctuation">)</span>
    test_ring<span class="token punctuation">(</span>ring<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>结果：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">0</span>.88s to build ring
86s to <span class="token builtin class-name">test</span> ring
<span class="token number">1.66</span>% max over
<span class="token number">1.46</span>% max under
<span class="token number">0.28</span>% max zone over
<span class="token number">0.23</span>% max zone under<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>所以在引入了不同权重的节点后，结果还是不错的。我用随机的1到100的权重重新运行了一下代码，得到7.35%低于&#x2F;18.12%高于预期的不均衡度，对于不同区域为0.24%&#x2F;0.22%，考虑到这样夸张的权重情况下，结果还是非常好的。</p>
<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>希望这个系列能比较好的介绍清楚如何创建一个哈希环。 此代码也基本上就是OpenStack Swift环的工作原理了，对于Swift来说，它的环还有许多额外的优化，例如把每个副本存储分开，以及许多用于构建，验证和以其他方式处理环的额外功能。</p>
]]></content>
      <categories>
        <category>OpenStack Swift</category>
      </categories>
      <tags>
        <tag>Consistent Hashing</tag>
        <tag>Swift Ring</tag>
      </tags>
  </entry>
  <entry>
    <title>Calico的IP分配策略以及存在的一些问题</title>
    <url>/2019/09/21/calico-ip-allocation-problems/</url>
    <content><![CDATA[<p>之前线上运行的K8S集群出现了一个Pod IP无法访问问题，调查了一下，发现和CalicoIP地址的分配策略相关，具体表现为一个&#x2F;26的IP Block<code>192.168.100.0/26</code>分配给了A机器之后，在另外一台B机器上又出现了该IP Block内的一个IP <code>192.168.100.10</code>，同时因为A机器上有该IP Block的blackhole路由<code>blackhole 192.168.100.0/26  proto bird</code>，所以导致A机器上所有的Pod访问<code>192.168.100.10</code>时因为黑洞路由原因直接失败。</p>
<p>遇到这个问题之前，只是通过文档大致了解Calico的IP分配策略，没有深入源码看看实际的情况，现在出现了相关问题，还是需要阅读一下相关代码，当然在这过程中也发现了一些问题，有些问题Calico官方也没有很好的解决。</p>
<span id="more"></span>

<h2 id="Calico-IP分配策略"><a href="#Calico-IP分配策略" class="headerlink" title="Calico IP分配策略"></a>Calico IP分配策略</h2><p>这里参考Calico 3.9版本代码，其中，CNI插件的流程就省去了，实际在CNI的ipam插件中会调用<code>libcalico-go</code>的相关代码，主要代码在<a href="https://github.com/projectcalico/libcalico-go/blob/release-v3.9/lib/ipam/ipam.go">lib&#x2F;ipam&#x2F;ipam.go</a>，由于我们线上是默认的配置，也就是不会定义特殊的IP分配策略，因此主要逻辑集中在<code>AutoAssign(ctx context.Context, args AutoAssignArgs)</code>这个接口，而具体实现在<code>autoAssign</code>函数中：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>c ipamClient<span class="token punctuation">)</span> <span class="token function">autoAssign</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> num <span class="token builtin">int</span><span class="token punctuation">,</span> handleID <span class="token operator">*</span><span class="token builtin">string</span><span class="token punctuation">,</span> attrs <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> requestedPools <span class="token punctuation">[</span><span class="token punctuation">]</span>net<span class="token punctuation">.</span>IPNet<span class="token punctuation">,</span> version <span class="token builtin">int</span><span class="token punctuation">,</span> host <span class="token builtin">string</span><span class="token punctuation">,</span> maxNumBlocks <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>net<span class="token punctuation">.</span>IPNet<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token operator">...</span>
	<span class="token comment">// 根据当前的节点获取可用的所有IP池</span>
	pools<span class="token punctuation">,</span> allPools<span class="token punctuation">,</span> err <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">determinePools</span><span class="token punctuation">(</span>requestedPools<span class="token punctuation">,</span> version<span class="token punctuation">,</span> <span class="token operator">*</span>v3n<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
	<span class="token punctuation">&#125;</span>

	<span class="token comment">// 没有可用的池子就直接返回了</span>
	<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>pools<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"no configured Calico pools for node %v"</span><span class="token punctuation">,</span> host<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	<span class="token operator">...</span>
	ips <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>net<span class="token punctuation">.</span>IPNet<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
	newIPs <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>net<span class="token punctuation">.</span>IPNet<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

	<span class="token comment">// Record how many blocks we own so we can check against the limit later.</span>
	numBlocksOwned <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>affBlocks<span class="token punctuation">)</span>

	<span class="token keyword">for</span> <span class="token function">len</span><span class="token punctuation">(</span>ips<span class="token punctuation">)</span> <span class="token operator">&lt;</span> num <span class="token punctuation">&#123;</span>
		<span class="token comment">// 所有的可用Block已经尝试完了</span>
		<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>affBlocks<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
			logCtx<span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span><span class="token string">"Ran out of existing affine blocks for host"</span><span class="token punctuation">)</span>
			<span class="token keyword">break</span>
        <span class="token punctuation">&#125;</span>
		<span class="token comment">// 选取当前Block列表第一个Block作为当前Block</span>
        cidr <span class="token operator">:=</span> affBlocks<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
		<span class="token comment">// 把第一个Block去除</span>
		affBlocks <span class="token operator">=</span> affBlocks<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>

		<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> datastoreRetries<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
            <span class="token operator">...</span>
			<span class="token comment">// 尝试从当前的Block里分配一个可用的IP</span>
			newIPs<span class="token punctuation">,</span> err <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">assignFromExistingBlock</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> b<span class="token punctuation">,</span> num<span class="token punctuation">,</span> handleID<span class="token punctuation">,</span> attrs<span class="token punctuation">,</span> host<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
			<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
				<span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ok <span class="token operator">:=</span> err<span class="token punctuation">.</span><span class="token punctuation">(</span>cerrors<span class="token punctuation">.</span>ErrorResourceUpdateConflict<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">&#123;</span>
					logCtx<span class="token punctuation">.</span><span class="token function">WithError</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Debug</span><span class="token punctuation">(</span><span class="token string">"CAS error assigning from affine block - retry"</span><span class="token punctuation">)</span>
					<span class="token keyword">continue</span>
				<span class="token punctuation">&#125;</span>
				logCtx<span class="token punctuation">.</span><span class="token function">WithError</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Warn</span><span class="token punctuation">(</span><span class="token string">"Couldn't assign from affine block, try next one"</span><span class="token punctuation">)</span>
				<span class="token keyword">break</span>
            <span class="token punctuation">&#125;</span>
			<span class="token comment">// 成功则添加到IP列表</span>
			ips <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>ips<span class="token punctuation">,</span> newIPs<span class="token operator">...</span><span class="token punctuation">)</span>
			<span class="token keyword">break</span>
		<span class="token punctuation">&#125;</span>
		logCtx<span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span><span class="token string">"Block '%s' provided addresses: %v"</span><span class="token punctuation">,</span> cidr<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> newIPs<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">// 获取 Calico IPAM 的配置</span>
	<span class="token comment">// Calico IPAM 有两个全局配置项目（二者之中只能有一个为 true）：</span>
	<span class="token comment">// StrictAffinity: 严格的一个 host 对应一个地址块，如果地址块耗尽不再分配新的地址</span>
	<span class="token comment">// AutoAllocateBlocks: 自动分配地址块，如果基于 host affine 的地址块耗尽，将分配新的地址块</span>
	<span class="token comment">// 这部分配置没有对外暴露，只能通过人工配置对应 etcd key 值或者编程调用相关接口来进行配置</span>
	<span class="token comment">// 相关讨论可参考 issue： https://github.com/projectcalico/calico/issues/1577</span>
	<span class="token comment">// 直接设置 etcd key：/calico/ipam/v2/config/ => "&#123;\"strict_affinity\":true&#125;"</span>
	config<span class="token punctuation">,</span> err <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">GetIPAMConfig</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> ips<span class="token punctuation">,</span> err
    <span class="token punctuation">&#125;</span>
	<span class="token comment">// 如果自动分配Block选项打开并且当前IP还不够</span>
	<span class="token keyword">if</span> config<span class="token punctuation">.</span>AutoAllocateBlocks <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token punctuation">&#123;</span>
		rem <span class="token operator">:=</span> num <span class="token operator">-</span> <span class="token function">len</span><span class="token punctuation">(</span>ips<span class="token punctuation">)</span>
		retries <span class="token operator">:=</span> datastoreRetries
		<span class="token keyword">for</span> rem <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> retries <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
			<span class="token operator">...</span>
			<span class="token comment">// 先看看还有没有没有被绑定到节点的Block</span>
			subnet<span class="token punctuation">,</span> err <span class="token operator">:=</span> c<span class="token punctuation">.</span>blockReaderWriter<span class="token punctuation">.</span><span class="token function">findUnclaimedBlock</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> host<span class="token punctuation">,</span> version<span class="token punctuation">,</span> pools<span class="token punctuation">,</span> <span class="token operator">*</span>config<span class="token punctuation">)</span>
			<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
				<span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ok <span class="token operator">:=</span> err<span class="token punctuation">.</span><span class="token punctuation">(</span>noFreeBlocksError<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">&#123;</span>
					<span class="token comment">// 没有就中断了</span>
					logCtx<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token string">"No free blocks available for allocation"</span><span class="token punctuation">)</span>
					<span class="token keyword">break</span>
				<span class="token punctuation">&#125;</span>
				log<span class="token punctuation">.</span><span class="token function">WithError</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token string">"Failed to find an unclaimed block"</span><span class="token punctuation">)</span>
				<span class="token keyword">return</span> ips<span class="token punctuation">,</span> err
			<span class="token punctuation">&#125;</span>
			logCtx <span class="token operator">:=</span> log<span class="token punctuation">.</span><span class="token function">WithFields</span><span class="token punctuation">(</span>log<span class="token punctuation">.</span>Fields<span class="token punctuation">&#123;</span><span class="token string">"host"</span><span class="token punctuation">:</span> host<span class="token punctuation">,</span> <span class="token string">"subnet"</span><span class="token punctuation">:</span> subnet<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
			logCtx<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token string">"Found unclaimed block"</span><span class="token punctuation">)</span>

			<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> datastoreRetries<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
				<span class="token comment">// 有的话，就绑定到当前节点</span>
				pa<span class="token punctuation">,</span> err <span class="token operator">:=</span> c<span class="token punctuation">.</span>blockReaderWriter<span class="token punctuation">.</span><span class="token function">getPendingAffinity</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> host<span class="token punctuation">,</span> <span class="token operator">*</span>subnet<span class="token punctuation">)</span>
				<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
					<span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ok <span class="token operator">:=</span> err<span class="token punctuation">.</span><span class="token punctuation">(</span>cerrors<span class="token punctuation">.</span>ErrorResourceUpdateConflict<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">&#123;</span>
						logCtx<span class="token punctuation">.</span><span class="token function">WithError</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Debug</span><span class="token punctuation">(</span><span class="token string">"CAS error claiming pending affinity, retry"</span><span class="token punctuation">)</span>
						<span class="token keyword">continue</span>
					<span class="token punctuation">&#125;</span>
					logCtx<span class="token punctuation">.</span><span class="token function">WithError</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"Error claiming pending affinity"</span><span class="token punctuation">)</span>
					<span class="token keyword">return</span> ips<span class="token punctuation">,</span> err
				<span class="token punctuation">&#125;</span>

				<span class="token comment">// 新绑定了Block，尝试在新Block里分配IP</span>
				b<span class="token punctuation">,</span> err <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">getBlockFromAffinity</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> pa<span class="token punctuation">)</span>
				<span class="token operator">...</span>
				newIPs<span class="token punctuation">,</span> err <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">assignFromExistingBlock</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> b<span class="token punctuation">,</span> rem<span class="token punctuation">,</span> handleID<span class="token punctuation">,</span> attrs<span class="token punctuation">,</span> host<span class="token punctuation">,</span> config<span class="token punctuation">.</span>StrictAffinity<span class="token punctuation">)</span>
				<span class="token operator">...</span>
				<span class="token comment">// 分配成功</span>
				ips <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>ips<span class="token punctuation">,</span> newIPs<span class="token operator">...</span><span class="token punctuation">)</span>
				rem <span class="token operator">=</span> num <span class="token operator">-</span> <span class="token function">len</span><span class="token punctuation">(</span>ips<span class="token punctuation">)</span>
				<span class="token keyword">break</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>

		<span class="token keyword">if</span> retries <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">return</span> ips<span class="token punctuation">,</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"Max retries hit - excessive concurrent IPAM requests"</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">// 如果IP分配还不够（也就是说已绑定的Block里的IP都分完了，并且也没有没有可绑定的新IPBlock了）并且IP还没分完，</span>
	<span class="token comment">// 并且StrictAffinity为false</span>
	rem <span class="token operator">:=</span> num <span class="token operator">-</span> <span class="token function">len</span><span class="token punctuation">(</span>ips<span class="token punctuation">)</span>
	<span class="token keyword">if</span> config<span class="token punctuation">.</span>StrictAffinity <span class="token operator">!=</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> rem <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
		logCtx<span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span><span class="token string">"Attempting to assign %d more addresses from non-affine blocks"</span><span class="token punctuation">,</span> rem<span class="token punctuation">)</span>

		<span class="token comment">// Iterate over pools and assign addresses until we either run out of pools,</span>
		<span class="token comment">// or the request has been satisfied.</span>
		logCtx<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token string">"Looking for blocks with free IP addresses"</span><span class="token punctuation">)</span>
		<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> p <span class="token operator">:=</span> <span class="token keyword">range</span> pools <span class="token punctuation">&#123;</span>
			<span class="token comment">// 在所有的Pool里，随机选一个Block，在这个Block里找可用的IP地址</span>
			newBlock <span class="token operator">:=</span> <span class="token function">randomBlockGenerator</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> host<span class="token punctuation">)</span>
			<span class="token keyword">for</span> rem <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
				<span class="token comment">// Grab a new random block.</span>
				blockCIDR <span class="token operator">:=</span> <span class="token function">newBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
				<span class="token keyword">if</span> blockCIDR <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
					logCtx<span class="token punctuation">.</span><span class="token function">Warningf</span><span class="token punctuation">(</span><span class="token string">"All addresses exhausted in pool %s"</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span>Spec<span class="token punctuation">.</span>CIDR<span class="token punctuation">)</span>
					<span class="token keyword">break</span>
				<span class="token punctuation">&#125;</span>

				<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> datastoreRetries<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
                    b<span class="token punctuation">,</span> err <span class="token operator">:=</span> c<span class="token punctuation">.</span>blockReaderWriter<span class="token punctuation">.</span><span class="token function">queryBlock</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token operator">*</span>blockCIDR<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span>
					<span class="token operator">...</span>
                    newIPs<span class="token punctuation">,</span> err <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">assignFromExistingBlock</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> b<span class="token punctuation">,</span> rem<span class="token punctuation">,</span> handleID<span class="token punctuation">,</span> attrs<span class="token punctuation">,</span> host<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
					<span class="token operator">...</span>
					<span class="token comment">// 分配成功</span>
					ips <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>ips<span class="token punctuation">,</span> newIPs<span class="token operator">...</span><span class="token punctuation">)</span>
					rem <span class="token operator">=</span> num <span class="token operator">-</span> <span class="token function">len</span><span class="token punctuation">(</span>ips<span class="token punctuation">)</span>
					<span class="token keyword">break</span>
				<span class="token punctuation">&#125;</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token comment">// 最后，如果执行到这里，意味着根据配置，无法再分配IP或者干脆全局都没有IP可用了</span>
	logCtx<span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span><span class="token string">"Auto-assigned %d out of %d IPv%ds: %v"</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>ips<span class="token punctuation">)</span><span class="token punctuation">,</span> num<span class="token punctuation">,</span> version<span class="token punctuation">,</span> ips<span class="token punctuation">)</span>
	<span class="token keyword">return</span> ips<span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>从上面的代码可以看到，Calico分配IP的逻辑为：</p>
<ol>
<li>如果节点有已绑定的IP Block，则从这些IP Block中分配IP</li>
<li>如果第1步失败（没有已绑定的IP Block，或者这些绑定的Block里IP耗尽），判断AutoAllocateBlocks为true，则寻找一个没有被绑定的IP Block，并绑定到当前节点，再执行分配逻辑</li>
<li>如果第2步失败（AutoAllocateBlocks为false或者没有空闲的IP Block），判断StrictAffinity为false，则从所有IP Blocks中寻找未使用的IP</li>
<li>经历前1-3步依然没有分配好IP，则失败</li>
</ol>
<p>阅读了上面的代码，则可以知道在默认配置(<code>StrictAffinity: true, AutoAllocateBlocks: false</code>)下，当节点已有IP Block中没有空闲IP并且也没有空闲IP Block时，就会发生之前所说的情况，而恰好Calico在利用<code>BIRD</code>进行BGP路由广播时，针对每个已绑定的IP Block会设置blackhole路由，从而会导致Pod IP无法访问的问题。</p>
<h2 id="一些问题"><a href="#一些问题" class="headerlink" title="一些问题"></a>一些问题</h2><p>根据上面的情况，目前看我们当前使用Calico还是有些问题的，特别是对当前IPPool的处理上。</p>
<p>一方面也是Calico的实现并不是特别好，比如<a href="https://github.com/projectcalico/calico/issues/2713">这个Issue</a>里提到的，当前针对节点的IP Block绑定，只有自动绑定的功能，但是没有自动解绑定的功能，解绑只有在删除Calico Node对象的时候才会发生，这会引发一个问题，就是说如果集群中节点有变化了，比如某台机器下线，并有新的节点上线做替换。那如果不手动操作Calico删除对应Node，就会导致之前的IP Block不被释放，也就一直无法没绑定到其他节点。</p>
<p>另一方面也是我们的使用问题，没有及时跟进Calico的更新，线上版本相对版本旧一点，导致在分配Block的时候，只能固定以&#x2F;26的BlockSize，也就是说一个IPBlock包含64个IP，而目前每台节点的Pod数量限制是默认的110，那么在使用2个Block也就是128个IP的时候就会出现比较大的浪费现象。这个问题在<a href="https://github.com/projectcalico/libcalico-go/pull/931">Allow the blockSize to be configured for Calico IPAM</a>中已经得到改进，目标版本v3.3.0。</p>
<p>因此，在高于v3.3.0版本的Calico中可以自定义BlockSize，比如定义为30，也就是一个Block 4个IP，这样可以比较好的提升IP的利用率，当然这样带来的问题是对外广播的路由数量的增加，所以需要权衡，找到一个合适的BlockSize。</p>
<p>参考：</p>
<ol>
<li><a href="https://zhengyinyong.com/post/calico-ip-allocation/">https://zhengyinyong.com/post/calico-ip-allocation/</a></li>
</ol>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Calico</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS系统Bonding+VLAN+Bridge配置</title>
    <url>/2018/12/24/centos-bonding-vlan-bridge/</url>
    <content><![CDATA[<p>由于业务的需要，需要在我们的一台虚拟化机器上，实现如下的配置：</p>
<p>首先，需要将两块网卡设置Bonding并配置交换机对应端口trunk模式;在此基础上，添加宿主机的IP地址，并添加相应的VLAN，最后，还需要添加一个Bridge，用于桥接创建的虚拟机。</p>
<p>由于本身这台机器就是Openstack的宿主机，所以当前的状况是除了所需要的一个Bridge，其他都已经配置完成了，并且由于Openstack的原因，已经有个Bridge virbr0被绑定到bond0上了。<br>但是呢，这个Bridge是给ovs用的，也就是说，桥接在virbr0上的网络需要自己带上VLAN的tag才能正常工作，而我们希望的是再有一个Bridge br0，桥接在br0上不需要管理VLAN，保持和宿主机相同就可以。</p>
<span id="more"></span>

<p>一开始有点蒙，因为VLAN和Bridge同属于二层，理论上配置的Bridge，需要将IP配置在Bridge上，但是现在IP配置在了VLAN上，牵扯到谁先谁后的问题，于是就查了查资料，找到<a href="https://www.centos.org/forums/viewtopic.php?t=63449">这篇帖子</a>，里面提供了一张图，来自于redhat官方：</p>
<p><img src="/images/bonding_vlan_bridge.png" alt="Multiple Bridge, Multiple VLAN, and Multiple NIC with Bond connection"></p>
<p>看到图后，就明白了，VLAN配置独立存在，在VLAN之上配置Bridge就可以，</p>
<p>参考上面帖子和redhat的文档给出配置：</p>
<p>eth0:</p>
<pre class="line-numbers language-none"><code class="language-none">~]# vi &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-eth0
NAME&#x3D;bond0-slave0
DEVICE&#x3D;eth0
TYPE&#x3D;Ethernet
BOOTPROTO&#x3D;none
ONBOOT&#x3D;yes
MASTER&#x3D;bond0
SLAVE&#x3D;yes
NM_CONTROLLED&#x3D;no<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>eth1:</p>
<pre class="line-numbers language-none"><code class="language-none">~]# vi &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-eth1
NAME&#x3D;bond0-slave1
DEVICE&#x3D;eth1
TYPE&#x3D;Ethernet
BOOTPROTO&#x3D;none
ONBOOT&#x3D;yes
MASTER&#x3D;bond0
SLAVE&#x3D;yes
NM_CONTROLLED&#x3D;no<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>bond0:</p>
<pre class="line-numbers language-none"><code class="language-none">~]# vi &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-bond0
NAME&#x3D;bond0
DEVICE&#x3D;bond0
BONDING_MASTER&#x3D;yes
TYPE&#x3D;Bond
ONBOOT&#x3D;yes
BOOTPROTO&#x3D;none
BONDING_OPTS&#x3D;&quot;mode&#x3D;0 miimon&#x3D;100&quot;
NM_CONTROLLED&#x3D;no<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>vlan:</p>
<pre class="line-numbers language-none"><code class="language-none">~]# vi &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-bond0.10
DEVICE&#x3D;bond0.10
BOOTPROTO&#x3D;none
ONPARENT&#x3D;yes
#IPADDR&#x3D;192.168.10.1
#NETMASK&#x3D;255.255.255.0
VLAN&#x3D;yes
NM_CONTROLLED&#x3D;no
BRIDGE&#x3D;br0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>br0:</p>
<pre class="line-numbers language-none"><code class="language-none">~]# vi &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-br0
DEVICE&#x3D;br0
ONBOOT&#x3D;yes
TYPE&#x3D;Bridge
IPADDR&#x3D;192.168.10.1
NETMASK&#x3D;255.255.255.0
NM_CONTROLLED&#x3D;no<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>配置完成后： <code>systemctl restart network</code> 等待网卡重启，搞定！</p>
<p>参考：</p>
<ol>
<li><a href="https://www.centos.org/forums/viewtopic.php?t=63449">https://www.centos.org/forums/viewtopic.php?t=63449</a></li>
<li><a href="https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Virtualization/3.1/html/Technical_Reference_Guide/sect-Technical_Reference_Guide-Host_Networking_Configurations-Multiple_Bridge_Multiple_VLAN_and_Bond_Configuration.html">https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Virtualization/3.1/html/Technical_Reference_Guide/sect-Technical_Reference_Guide-Host_Networking_Configurations-Multiple_Bridge_Multiple_VLAN_and_Bond_Configuration.html</a></li>
<li><a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/6/html/deployment_guide/sec-Configuring_a_VLAN_over_a_Bond">https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/6/html/deployment_guide/sec-Configuring_a_VLAN_over_a_Bond</a></li>
<li><a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/6/html/deployment_guide/s2-networkscripts-interfaces_network-bridge-with-vlan">https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/6/html/deployment_guide/s2-networkscripts-interfaces_network-bridge-with-vlan</a></li>
</ol>
]]></content>
      <categories>
        <category>Linux部署</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>Bonding</tag>
        <tag>VLAN</tag>
        <tag>Bridge</tag>
      </tags>
  </entry>
  <entry>
    <title>纯手动部署Ceph之Monitor部署</title>
    <url>/2017/02/07/ceph-monitor-manual-deployment/</url>
    <content><![CDATA[<p>Ceph官网上介绍了使用ceph-deploy工具部署Ceph集群的方法，但是手工部署的方法文档中写的不够详细，花了点时间研究了一下，下面是手工部署一个简单的Ceph集群的步骤，先说怎么部署Monitor。</p>
<p>Monitor是Ceph的核心，用于存储所有的元信息，这里部署的是一个3 Monitor的集群，出于简单考虑，这三个Monitor被我放在了同一台机器上，实际部署的话，还是要放在不同的机器上保持高可用。</p>
<span id="more"></span>

<p>首先需要安装好对应的包，这里用了一台CentOS 7的机器进行部署，使用了Ceph官方提供的安装源，使用jewel版本。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@test ~<span class="token punctuation">]</span><span class="token comment"># rpm -Uvh https://download.ceph.com/rpm-jewel/el7/noarch/ceph-release-1-0.el7.noarch.rpm</span>
<span class="token punctuation">[</span>root@test ~<span class="token punctuation">]</span><span class="token comment"># yum install -y ceph</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>然后开始准备配置文件，第一步需要生成一个uuid，这个uuid就是整个Ceph集群的唯一标识。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@test ~<span class="token punctuation">]</span><span class="token comment"># uuidgen </span>
def5bc47-3d8a-4ca0-9cd6-77243339ab0f<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>再给三个Monitor起一个名字，这边取mon0, mon1, mon2，然后就可以生成对应的配置文件：</p>
<blockquote><p>[root@test ~]# cat &#x2F;etc&#x2F;ceph&#x2F;ceph.conf </p>
<h1 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h1><p>[global]<br>fsid &#x3D; def5bc47-3d8a-4ca0-9cd6-77243339ab0f     # 集群ID<br>auth cluster required &#x3D; cephx                   # 打开cephx授权<br>auth service required &#x3D; cephx<br>auth client required &#x3D; cephx<br>public network &#x3D; 10.67.0.0&#x2F;16                   # 集群工作的网络段<br>osd journal size &#x3D; 1024<br>osd pool default size &#x3D; 2<br>osd pool default min size &#x3D; 1<br>osd pool default pg num &#x3D; 512<br>osd pool default pgp num &#x3D; 512<br>log file &#x3D; &#x2F;data0&#x2F;logs&#x2F;ceph&#x2F;$cluster-$name.log<br>run_dir &#x3D; &#x2F;data0&#x2F;ceph</p>
<h1 id="Monitor总配置"><a href="#Monitor总配置" class="headerlink" title="Monitor总配置"></a>Monitor总配置</h1><p>[mon]<br>mon initial members &#x3D; mon0,mon1,mon2<br>mon data &#x3D; &#x2F;data0&#x2F;ceph&#x2F;mon&#x2F;$name<br>log file &#x3D; &#x2F;data0&#x2F;logs&#x2F;ceph&#x2F;$name.log</p>
<h1 id="每个Monitor分别的配置"><a href="#每个Monitor分别的配置" class="headerlink" title="每个Monitor分别的配置"></a>每个Monitor分别的配置</h1><p>[mon.mon0]<br>name     &#x3D; mon0<br>mon addr &#x3D; 10.67.15.100:6789<br>mon host &#x3D; 10.67.15.100:6789<br>log dir &#x3D; &#x2F;data0&#x2F;logs&#x2F;ceph<br>[mon.mon1]<br>name     &#x3D; mon1<br>mon addr &#x3D; 10.67.15.100:6790<br>mon host &#x3D; 10.67.15.100:6790<br>log dir &#x3D; &#x2F;data0&#x2F;logs&#x2F;ceph<br>[mon.mon2]<br>name     &#x3D; mon2<br>mon addr &#x3D; 10.67.21.100:6791<br>mon host &#x3D; 10.67.21.100:6791<br>log dir &#x3D; &#x2F;data0&#x2F;logs&#x2F;ceph</p>
<h1 id="客户端keyring配置"><a href="#客户端keyring配置" class="headerlink" title="客户端keyring配置"></a>客户端keyring配置</h1><p>[client.admin]<br>keyring &#x3D; &#x2F;etc&#x2F;ceph&#x2F;ceph.client.admin.keyring</p>
</blockquote>

<p>由于是单机的3 Monitor，所以分配了6789,6790,6791三个不同的端口。</p>
<p>配置文件准备好，然后开始生成keyring：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@test ~<span class="token punctuation">]</span><span class="token comment"># ceph-authtool --create-keyring /etc/ceph/ceph.mon.keyring --gen-key -n mon. --cap mon 'allow *' #生成Monitor的keyring</span>
creating /etc/ceph/ceph.mon.keyring
<span class="token punctuation">[</span>root@test ~<span class="token punctuation">]</span><span class="token comment"># ceph-authtool --create-keyring /etc/ceph/ceph.client.admin.keyring --gen-key -n client.admin --set-uid=0 --cap mon 'allow *' --cap osd 'allow *' --cap mds 'allow' #生产管理keyring</span>
creating /etc/ceph/ceph.client.admin.keyring
<span class="token punctuation">[</span>root@test ~<span class="token punctuation">]</span><span class="token comment"># ceph-authtool /etc/ceph/ceph.mon.keyring --import-keyring /etc/ceph/ceph.client.admin.keyring    # 将管理keyring导入到Monitor中</span>
importing contents of /etc/ceph/ceph.client.admin.keyring into /etc/ceph/ceph.mon.keyring<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>生成Monitor map：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@test ~<span class="token punctuation">]</span><span class="token comment"># monmaptool --create --add mon0 10.67.15.100:6789 --fsid def5bc47-3d8a-4ca0-9cd6-77243339ab0f /etc/ceph/monmap</span>
monmaptool: monmap <span class="token function">file</span> /etc/ceph/monmap
monmaptool: <span class="token builtin class-name">set</span> fsid to def5bc47-3d8a-4ca0-9cd6-77243339ab0f
monmaptool: writing epoch <span class="token number">0</span> to /etc/ceph/monmap <span class="token punctuation">(</span><span class="token number">1</span> monitors<span class="token punctuation">)</span>
<span class="token punctuation">[</span>root@test ~<span class="token punctuation">]</span><span class="token comment"># monmaptool --add mon1 10.67.15.100:6790 --fsid def5bc47-3d8a-4ca0-9cd6-77243339ab0f /etc/ceph/monmap</span>
monmaptool: monmap <span class="token function">file</span> /etc/ceph/monmap
monmaptool: <span class="token builtin class-name">set</span> fsid to def5bc47-3d8a-4ca0-9cd6-77243339ab0f
monmaptool: writing epoch <span class="token number">0</span> to /etc/ceph/monmap <span class="token punctuation">(</span><span class="token number">2</span> monitors<span class="token punctuation">)</span>
<span class="token punctuation">[</span>root@test ~<span class="token punctuation">]</span><span class="token comment"># monmaptool --add mon2 10.67.15.100:6791 --fsid def5bc47-3d8a-4ca0-9cd6-77243339ab0f /etc/ceph/monmap</span>
monmaptool: monmap <span class="token function">file</span> /etc/ceph/monmap
monmaptool: <span class="token builtin class-name">set</span> fsid to def5bc47-3d8a-4ca0-9cd6-77243339ab0f
monmaptool: writing epoch <span class="token number">0</span> to /etc/ceph/monmap <span class="token punctuation">(</span><span class="token number">3</span> monitors<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>初始化Monitor的文件系统：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@test ~<span class="token punctuation">]</span><span class="token comment"># ceph-mon --mkfs -i mon0 --monmap /etc/ceph/monmap --keyring /etc/ceph/ceph.mon.keyring </span>
ceph-mon: <span class="token builtin class-name">set</span> fsid to def5bc47-3d8a-4ca0-9cd6-77243339ab0f
ceph-mon: created monfs at /data0/ceph/mon/mon.mon0 <span class="token keyword">for</span> mon.mon0
<span class="token punctuation">[</span>root@test ~<span class="token punctuation">]</span><span class="token comment"># ceph-mon --mkfs -i mon1 --monmap /etc/ceph/monmap --keyring /etc/ceph/ceph.mon.keyring</span>
ceph-mon: <span class="token builtin class-name">set</span> fsid to def5bc47-3d8a-4ca0-9cd6-77243339ab0f
ceph-mon: created monfs at /data0/ceph/mon/mon.mon1 <span class="token keyword">for</span> mon.mon1
<span class="token punctuation">[</span>root@test ~<span class="token punctuation">]</span><span class="token comment"># ceph-mon --mkfs -i mon2 --monmap /etc/ceph/monmap --keyring /etc/ceph/ceph.mon.keyring</span>
ceph-mon: <span class="token builtin class-name">set</span> fsid to def5bc47-3d8a-4ca0-9cd6-77243339ab0f
ceph-mon: created monfs at /data0/ceph/mon/mon.mon2 <span class="token keyword">for</span> mon.mon2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>启动Monitor：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@test ~<span class="token punctuation">]</span><span class="token comment"># ceph-mon --id mon0</span>
<span class="token punctuation">[</span>root@test ~<span class="token punctuation">]</span><span class="token comment"># ceph-mon --id mon1</span>
<span class="token punctuation">[</span>root@test ~<span class="token punctuation">]</span><span class="token comment"># ceph-mon --id mon2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>启动完成后，Monitor会自动选举出主，这时可以使用ceph -s和ceph osd lspools命令查看集群状态了：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@test ~<span class="token punctuation">]</span><span class="token comment"># ceph -s</span>
    cluster def5bc47-3d8a-4ca0-9cd6-77243339ab0f
     health HEALTH_ERR
            no osds
     monmap e1: <span class="token number">3</span> mons at <span class="token punctuation">&#123;</span>mon0<span class="token operator">=</span><span class="token number">10.67</span>.21.37:6789/0,mon1<span class="token operator">=</span><span class="token number">10.67</span>.21.37:6790/0,mon2<span class="token operator">=</span><span class="token number">10.67</span>.21.37:6791/0<span class="token punctuation">&#125;</span>
            election epoch <span class="token number">4</span>, quorum <span class="token number">0,1</span>,2 mon0,mon1,mon2
     osdmap e1: <span class="token number">0</span> osds: <span class="token number">0</span> up, <span class="token number">0</span> <span class="token keyword">in</span>
            flags sortbitwise,require_jewel_osds
      pgmap v2: <span class="token number">64</span> pgs, <span class="token number">1</span> pools, <span class="token number">0</span> bytes data, <span class="token number">0</span> objects
            <span class="token number">0</span> kB used, <span class="token number">0</span> kB / <span class="token number">0</span> kB avail
                  <span class="token number">64</span> creating
<span class="token punctuation">[</span>root@test ~<span class="token punctuation">]</span><span class="token comment"># ceph osd lspools</span>
<span class="token number">0</span> rbd,<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>其中ceph -s的状态为HEALTH_ERR，是因为还没有添加osd，所以集群还处于不可用状态。</p>
<p>到此Ceph集群的Monitor就已经搭建完毕了。</p>
]]></content>
      <categories>
        <category>Ceph</category>
      </categories>
      <tags>
        <tag>Ceph</tag>
        <tag>Monitor</tag>
        <tag>部署</tag>
      </tags>
  </entry>
  <entry>
    <title>纯手动部署Ceph之OSD部署</title>
    <url>/2017/02/09/ceph-osd-manual-deployment/</url>
    <content><![CDATA[<p>Monitor部署结束后，需要部署Ceph的OSD，OSD是Ceph实际存储的核心，有了OSD，数据才能正常进行存储，这里还是在一台机器上部署3个OSD，实际生产环境中，会有更多的OSD以及更多的机器。<br>这里默认机器上已经装好了所有Ceph对应的包。出于简单考虑，所有的OSD只分配一个对应的数据目录。实际生产环境中，一般一个OSD会对应一个设备。</p>
<span id="more"></span>

<p>首先还是修改配置文件，把OSD相关配置加入到配置文件 <code>/etc/ceph/ceph.conf</code> 中：</p>
<blockquote><p>[osd]<br>run_dir &#x3D; &#x2F;data0&#x2F;$name<br>osd data &#x3D; &#x2F;data0&#x2F;$name<br>osd journal &#x3D; &#x2F;data0&#x2F;$name&#x2F;journal<br>osd max object name len &#x3D; 256<br>osd max object namespace len &#x3D; 64</p>
</blockquote>
<p>这里给每个OSD分配的存储路径在 <code>/data0/$name</code> 下。</p>
<p>每个OSD也需要一个uuid，所以生成三个uuid：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@test ~<span class="token punctuation">]</span><span class="token comment"># uuidgen </span>
63970d8a-597a-4123-9767-097f88bbcd00
<span class="token punctuation">[</span>root@test ~<span class="token punctuation">]</span><span class="token comment"># uuidgen </span>
ba380679-0a81-4bbc-a5f0-27fd93137c78
<span class="token punctuation">[</span>root@test ~<span class="token punctuation">]</span><span class="token comment"># uuidgen </span>
7545c284-1cda-4cad-b23a-2e7c81cb8a47<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>调用 <code>ceph osd create</code> 分配OSD编号：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@test ~<span class="token punctuation">]</span><span class="token comment"># ceph osd create 63970d8a-597a-4123-9767-097f88bbcd00</span>
<span class="token number">0</span>
<span class="token punctuation">[</span>root@test ~<span class="token punctuation">]</span><span class="token comment"># ceph osd create ba380679-0a81-4bbc-a5f0-27fd93137c78</span>
<span class="token number">1</span>
<span class="token punctuation">[</span>root@test ~<span class="token punctuation">]</span><span class="token comment"># ceph osd create 7545c284-1cda-4cad-b23a-2e7c81cb8a47</span>
<span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>调用 <code>ceph-osd -i &#123;num&#125; --mkfs --mkkey --osd-uuid &#123;uid&#125;</code> 初始化OSD目录：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@test ~<span class="token punctuation">]</span><span class="token comment"># ceph-osd -i 0 --mkfs --mkkey --osd-uuid 63970d8a-597a-4123-9767-097f88bbcd00</span>
<span class="token number">2017</span>-02-09 09:34:29.961006 7ff9e6ef3800 <span class="token parameter variable">-1</span> journal FileJournal::_open: disabling aio <span class="token keyword">for</span> non-block journal.  Use journal_force_aio to force use of aio anyway
<span class="token number">2017</span>-02-09 09:34:30.268810 7ff9e6ef3800 <span class="token parameter variable">-1</span> journal FileJournal::_open: disabling aio <span class="token keyword">for</span> non-block journal.  Use journal_force_aio to force use of aio anyway
<span class="token number">2017</span>-02-09 09:34:30.277939 7ff9e6ef3800 <span class="token parameter variable">-1</span> filestore<span class="token punctuation">(</span>/data0/osd.0<span class="token punctuation">)</span> could not <span class="token function">find</span> <span class="token comment">#-1:7b3f43c4:::osd_superblock:0# in index: (2) No such file or directory</span>
<span class="token number">2017</span>-02-09 09:34:30.607425 7ff9e6ef3800 <span class="token parameter variable">-1</span> created object store /data0/osd.0 <span class="token keyword">for</span> osd.0 fsid def5bc47-3d8a-4ca0-9cd6-77243339ab0f
<span class="token number">2017</span>-02-09 09:34:30.607495 7ff9e6ef3800 <span class="token parameter variable">-1</span> auth: error reading file: /data0/osd.0/keyring: can<span class="token string">'t open /data0/osd.0/keyring: (2) No such file or directory
2017-02-09 09:34:30.607747 7ff9e6ef3800 -1 created new key in keyring /data0/osd.0/keyring

[root@test ~]# ceph-osd -i 1 --mkfs --mkkey --osd-uuid ba380679-0a81-4bbc-a5f0-27fd93137c78
2017-02-09 09:34:40.141883 7fcac9aef800 -1 journal FileJournal::_open: disabling aio for non-block journal.  Use journal_force_aio to force use of aio anyway
2017-02-09 09:34:40.470945 7fcac9aef800 -1 journal FileJournal::_open: disabling aio for non-block journal.  Use journal_force_aio to force use of aio anyway
2017-02-09 09:34:40.481165 7fcac9aef800 -1 filestore(/data0/osd.1) could not find #-1:7b3f43c4:::osd_superblock:0# in index: (2) No such file or directory
2017-02-09 09:34:40.810678 7fcac9aef800 -1 created object store /data0/osd.1 for osd.1 fsid def5bc47-3d8a-4ca0-9cd6-77243339ab0f
2017-02-09 09:34:40.810743 7fcac9aef800 -1 auth: error reading file: /data0/osd.1/keyring: can'</span>t <span class="token function">open</span> /data0/osd.1/keyring: <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> No such <span class="token function">file</span> or directory
<span class="token number">2017</span>-02-09 09:34:40.810982 7fcac9aef800 <span class="token parameter variable">-1</span> created new key <span class="token keyword">in</span> keyring /data0/osd.1/keyring

<span class="token punctuation">[</span>root@test ~<span class="token punctuation">]</span><span class="token comment"># ceph-osd -i 2 --mkfs --mkkey --osd-uuid 7545c284-1cda-4cad-b23a-2e7c81cb8a47</span>
<span class="token number">2017</span>-02-09 09:34:51.793012 7fa0fc68b800 <span class="token parameter variable">-1</span> journal FileJournal::_open: disabling aio <span class="token keyword">for</span> non-block journal.  Use journal_force_aio to force use of aio anyway
<span class="token number">2017</span>-02-09 09:34:52.116001 7fa0fc68b800 <span class="token parameter variable">-1</span> journal FileJournal::_open: disabling aio <span class="token keyword">for</span> non-block journal.  Use journal_force_aio to force use of aio anyway
<span class="token number">2017</span>-02-09 09:34:52.124229 7fa0fc68b800 <span class="token parameter variable">-1</span> filestore<span class="token punctuation">(</span>/data0/osd.2<span class="token punctuation">)</span> could not <span class="token function">find</span> <span class="token comment">#-1:7b3f43c4:::osd_superblock:0# in index: (2) No such file or directory</span>
<span class="token number">2017</span>-02-09 09:34:52.447702 7fa0fc68b800 <span class="token parameter variable">-1</span> created object store /data0/osd.2 <span class="token keyword">for</span> osd.2 fsid def5bc47-3d8a-4ca0-9cd6-77243339ab0f
<span class="token number">2017</span>-02-09 09:34:52.447761 7fa0fc68b800 <span class="token parameter variable">-1</span> auth: error reading file: /data0/osd.2/keyring: can't <span class="token function">open</span> /data0/osd.2/keyring: <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> No such <span class="token function">file</span> or directory
<span class="token number">2017</span>-02-09 09:34:52.447980 7fa0fc68b800 <span class="token parameter variable">-1</span> created new key <span class="token keyword">in</span> keyring /data0/osd.2/keyring<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>添加OSD授权：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@test ~<span class="token punctuation">]</span><span class="token comment"># ceph auth add osd.0 osd 'allow *' mon 'allow profile osd' -i /data0/osd.0/keyring</span>
added key <span class="token keyword">for</span> osd.0
<span class="token punctuation">[</span>root@test ~<span class="token punctuation">]</span><span class="token comment"># ceph auth add osd.1 osd 'allow *' mon 'allow profile osd' -i /data0/osd.1/keyring</span>
added key <span class="token keyword">for</span> osd.1
<span class="token punctuation">[</span>root@test ~<span class="token punctuation">]</span><span class="token comment"># ceph auth add osd.2 osd 'allow *' mon 'allow profile osd' -i /data0/osd.2/keyring</span>
added key <span class="token keyword">for</span> osd.2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>到这里，OSD的准备工作就已经做好了，可以启动OSD了，在启动之前，也可以先初始化一下crush map。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@test ~<span class="token punctuation">]</span><span class="token comment"># ceph osd crush add-bucket node1 host     # 添加一个host节点node1</span>
added bucket node1 <span class="token builtin class-name">type</span> <span class="token function">host</span> to crush map
<span class="token punctuation">[</span>root@test ~<span class="token punctuation">]</span><span class="token comment"># ceph osd crush add-bucket node2 host     # 添加一个host节点node2</span>
added bucket node2 <span class="token builtin class-name">type</span> <span class="token function">host</span> to crush map
<span class="token punctuation">[</span>root@test ~<span class="token punctuation">]</span><span class="token comment"># ceph osd crush move node1 root=default   # 将node1移到default下</span>
moved item <span class="token function">id</span> <span class="token parameter variable">-2</span> name <span class="token string">'node1'</span> to location <span class="token punctuation">&#123;</span>root<span class="token operator">=</span>default<span class="token punctuation">&#125;</span> <span class="token keyword">in</span> crush map
<span class="token punctuation">[</span>root@test ~<span class="token punctuation">]</span><span class="token comment"># ceph osd crush move node2 root=default   # 将node2移到default下</span>
moved item <span class="token function">id</span> <span class="token parameter variable">-3</span> name <span class="token string">'node2'</span> to location <span class="token punctuation">&#123;</span>root<span class="token operator">=</span>default<span class="token punctuation">&#125;</span> <span class="token keyword">in</span> crush map
<span class="token punctuation">[</span>root@test ~<span class="token punctuation">]</span><span class="token comment"># ceph osd crush add osd.0 1.0 host=node1  # 将osd.0以1.0的权重加到node1中</span>
<span class="token function">add</span> item <span class="token function">id</span> <span class="token number">0</span> name <span class="token string">'osd.0'</span> weight <span class="token number">1</span> at location <span class="token punctuation">&#123;</span>host<span class="token operator">=</span>node1<span class="token punctuation">&#125;</span> to crush map
<span class="token punctuation">[</span>root@test ~<span class="token punctuation">]</span><span class="token comment"># ceph osd crush add osd.1 1.0 host=node1  # 将osd.1以1.0的权重加到node1中</span>
<span class="token function">add</span> item <span class="token function">id</span> <span class="token number">1</span> name <span class="token string">'osd.1'</span> weight <span class="token number">1</span> at location <span class="token punctuation">&#123;</span>host<span class="token operator">=</span>node1<span class="token punctuation">&#125;</span> to crush map
<span class="token punctuation">[</span>root@test ~<span class="token punctuation">]</span><span class="token comment"># ceph osd crush add osd.2 1.0 host=node2  # 将osd.2以1.0的权重加到node2中</span>
<span class="token function">add</span> item <span class="token function">id</span> <span class="token number">2</span> name <span class="token string">'osd.2'</span> weight <span class="token number">1</span> at location <span class="token punctuation">&#123;</span>host<span class="token operator">=</span>node2<span class="token punctuation">&#125;</span> to crush map
<span class="token punctuation">[</span>root@test ~<span class="token punctuation">]</span><span class="token comment"># ceph osd tree    # 查看当前OSD Tree</span>
ID WEIGHT  TYPE NAME      UP/DOWN REWEIGHT PRIMARY-AFFINITY
<span class="token parameter variable">-1</span> <span class="token number">3.00000</span> root default
<span class="token parameter variable">-2</span> <span class="token number">2.00000</span>     <span class="token function">host</span> node1
 <span class="token number">0</span> <span class="token number">1.00000</span>         osd.0     down        <span class="token number">0</span>          <span class="token number">1.00000</span>
 <span class="token number">1</span> <span class="token number">1.00000</span>         osd.1     down        <span class="token number">0</span>          <span class="token number">1.00000</span>
<span class="token parameter variable">-3</span> <span class="token number">1.00000</span>     <span class="token function">host</span> node2
 <span class="token number">2</span> <span class="token number">1.00000</span>         osd.2     down        <span class="token number">0</span>          <span class="token number">1.00000</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这里添加了2个虚拟节点node1和node2，并把osd.0和osd.1添加到node1，osd.2添加到node2。这么做目的是因为Ceph默认分配的策略是至少有一份数据在其他机器上，所以需要一个node2，实际生产中多台机器的情况就不会有这个问题。</p>
<p>最后启动所有的OSD。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@test ~<span class="token punctuation">]</span><span class="token comment"># ceph-osd -i 0</span>
starting osd.0 at :/0 osd_data /data0/osd.0 /data0/osd.0/journal
<span class="token punctuation">[</span>root@test ~<span class="token punctuation">]</span><span class="token comment"># ceph-osd -i 1</span>
starting osd.1 at :/0 osd_data /data0/osd.1 /data0/osd.1/journal
<span class="token punctuation">[</span>root@test ~<span class="token punctuation">]</span><span class="token comment"># ceph-osd -i 2</span>
starting osd.2 at :/0 osd_data /data0/osd.2 /data0/osd.2/journal

<span class="token punctuation">[</span>root@test ~<span class="token punctuation">]</span><span class="token comment"># ceph -s	# 查看集群状态</span>
cluster def5bc47-3d8a-4ca0-9cd6-77243339ab0f
 health HEALTH_OK
 monmap e1: <span class="token number">3</span> mons at <span class="token punctuation">&#123;</span>mon0<span class="token operator">=</span><span class="token number">10.67</span>.15.100:6789/0,mon1<span class="token operator">=</span><span class="token number">10.67</span>.15.100:6790/0,mon2<span class="token operator">=</span><span class="token number">10.67</span>.15.100:6791/0<span class="token punctuation">&#125;</span>
        election epoch <span class="token number">4</span>, quorum <span class="token number">0,1</span>,2 mon0,mon1,mon2
 osdmap e18: <span class="token number">3</span> osds: <span class="token number">3</span> up, <span class="token number">3</span> <span class="token keyword">in</span>
        flags sortbitwise,require_jewel_osds
  pgmap v29: <span class="token number">64</span> pgs, <span class="token number">1</span> pools, <span class="token number">0</span> bytes data, <span class="token number">0</span> objects
        <span class="token number">11089</span> MB used, <span class="token number">647</span> GB / <span class="token number">693</span> GB avail
              <span class="token number">64</span> active+clean<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>ceph -s</code> 输出显示 <code>health HEALTH_OK</code> 说明集群已经正常。<br>至此一个简单的拥有3 monitor和3 osd的Ceph集群就搭建好了。</p>
]]></content>
      <categories>
        <category>Ceph</category>
      </categories>
      <tags>
        <tag>Ceph</tag>
        <tag>部署</tag>
        <tag>OSD</tag>
      </tags>
  </entry>
  <entry>
    <title>Ceph Monitor标记OSD DOWN分析</title>
    <url>/2021/03/18/ceph-osd-mark-down/</url>
    <content><![CDATA[<p>在上篇Blog：<a href="https://www.ichenfu.com/2021/03/16/ceph-osd-heartbeat/">Ceph OSD的心跳机制分析</a>的最后，我们知道Ceph OSD将心跳检测失败的OSD打包成MOSDFailure消息发送给Monitor，但是还遗留了一个问题，就是Monitor是怎么处理这个消息的？又是在什么的情况下会把这个OSD标记为Down状态？所以这篇就是要把整个流程补完。</p>
<p>还是来看代码，首先需要注意的是，MOSDFailure不是一个原始的消息，我们得先找到这个消息对应得MSG TYPE，这样才能知道Monitor是怎么处理的，还是先看<code>src\messages\MOSDFailure.h</code>，找到MOSDFailure类的定义：</p>
<span id="more"></span>

<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">MOSDFailure</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">PaxosServiceMessage</span></span> <span class="token punctuation">&#123;</span>
<span class="token comment">// ...</span>

  <span class="token comment">// 只看构造函数，发现初始化的消息类型是MSG_OSD_FAILURE</span>
  <span class="token function">MOSDFailure</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">PaxosServiceMessage</span><span class="token punctuation">(</span>MSG_OSD_FAILURE<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> HEAD_VERSION<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>

<span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>知道了消息类型，我们就很容易知道Monitor处理的流程了，在<code>src/mon/Monitor.cc</code>中，所有Monitor收到的消息都会由<code>Monitor::dispatch_op(MonOpRequestRef op)</code>进行处理：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token class-name">Monitor</span><span class="token double-colon punctuation">::</span><span class="token function">dispatch_op</span><span class="token punctuation">(</span>MonOpRequestRef op<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
<span class="token comment">// ...</span>

  <span class="token keyword">switch</span> <span class="token punctuation">(</span>op<span class="token operator">-></span><span class="token function">get_req</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">get_type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

    <span class="token comment">// OSDs</span>
    <span class="token comment">// 这里有一大堆消息</span>
    <span class="token keyword">case</span> CEPH_MSG_MON_GET_OSDMAP<span class="token operator">:</span>
    <span class="token keyword">case</span> CEPH_MSG_POOLOP<span class="token operator">:</span>
    <span class="token keyword">case</span> MSG_OSD_BEACON<span class="token operator">:</span>
    <span class="token keyword">case</span> MSG_OSD_MARK_ME_DOWN<span class="token operator">:</span>
    <span class="token keyword">case</span> MSG_OSD_MARK_ME_DEAD<span class="token operator">:</span>
    <span class="token keyword">case</span> MSG_OSD_FULL<span class="token operator">:</span>
    <span class="token comment">// 我们要找的MSG_OSD_FAILURE在这里</span>
    <span class="token keyword">case</span> MSG_OSD_FAILURE<span class="token operator">:</span>
    <span class="token keyword">case</span> MSG_OSD_BOOT<span class="token operator">:</span>
    <span class="token keyword">case</span> MSG_OSD_ALIVE<span class="token operator">:</span>
    <span class="token keyword">case</span> MSG_OSD_PGTEMP<span class="token operator">:</span>
    <span class="token keyword">case</span> MSG_OSD_PG_CREATED<span class="token operator">:</span>
    <span class="token keyword">case</span> MSG_REMOVE_SNAPS<span class="token operator">:</span>
    <span class="token keyword">case</span> MSG_MON_GET_PURGED_SNAPS<span class="token operator">:</span>
    <span class="token keyword">case</span> MSG_OSD_PG_READY_TO_MERGE<span class="token operator">:</span>
      paxos_service<span class="token punctuation">[</span>PAXOS_OSDMAP<span class="token punctuation">]</span><span class="token operator">-></span><span class="token function">dispatch</span><span class="token punctuation">(</span>op<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token comment">// ...</span>
  <span class="token punctuation">&#125;</span>
<span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>可以看到Monitor中把<code>MSG_OSD_FAILURE</code>消息交给了<code>paxos_service[PAXOS_OSDMAP]</code>处理，很容易的，在Monitor构造函数里我们找到<code>paxos_service[PAXOS_OSDMAP].reset(new OSDMonitor(cct, this, paxos, &quot;osdmap&quot;));</code>，也就是说，<code>MSG_OSD_FAILURE</code>消息是由OSDMonitor真正处理的。</p>
<p>话不多说，直接转到<code>src/mon/OSDMonitor.cc</code>，这里需要注意的是，OSDMonitor没有直接的dispatch方法，因为这个方法在基类里，这里就不多赘述了，实际<code>dispatch</code>会调用到<code>OSDMonitor::preprocess_query(MonOpRequestRef op)</code>以及<code>OSDMonitor::prepare_update(MonOpRequestRef op)</code>这两个方法：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token class-name">OSDMonitor</span><span class="token double-colon punctuation">::</span><span class="token function">preprocess_query</span><span class="token punctuation">(</span>MonOpRequestRef op<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
  op<span class="token operator">-></span><span class="token function">mark_osdmon_event</span><span class="token punctuation">(</span><span class="token constant">__func__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  Message <span class="token operator">*</span>m <span class="token operator">=</span> op<span class="token operator">-></span><span class="token function">get_req</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">switch</span> <span class="token punctuation">(</span>m<span class="token operator">-></span><span class="token function">get_type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

<span class="token comment">// ...</span>

  <span class="token comment">// MSG_OSD_FAILURE 由preprocess_failure处理</span>
  <span class="token keyword">case</span> MSG_OSD_FAILURE<span class="token operator">:</span>
    <span class="token keyword">return</span> <span class="token function">preprocess_failure</span><span class="token punctuation">(</span>op<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// ...</span>

  <span class="token keyword">default</span><span class="token operator">:</span>
    <span class="token function">ceph_abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">bool</span> <span class="token class-name">OSDMonitor</span><span class="token double-colon punctuation">::</span><span class="token function">prepare_update</span><span class="token punctuation">(</span>MonOpRequestRef op<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
  op<span class="token operator">-></span><span class="token function">mark_osdmon_event</span><span class="token punctuation">(</span><span class="token constant">__func__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  Message <span class="token operator">*</span>m <span class="token operator">=</span> op<span class="token operator">-></span><span class="token function">get_req</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">switch</span> <span class="token punctuation">(</span>m<span class="token operator">-></span><span class="token function">get_type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

<span class="token comment">// ...</span>

  <span class="token comment">// MSG_OSD_FAILURE 由prepare_failure处理</span>
  <span class="token keyword">case</span> MSG_OSD_FAILURE<span class="token operator">:</span>
    <span class="token keyword">return</span> <span class="token function">prepare_failure</span><span class="token punctuation">(</span>op<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// ...</span>

  <span class="token keyword">default</span><span class="token operator">:</span>
    <span class="token function">ceph_abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>终于找到最终的处理方法了，先<code>preprocess_failure</code>，后<code>prepare_failure</code>，一般来说，preprocess_query阶段，大多数是只读阶段，如果这个方法返回true，那就意味着消息处理结束了，当然如果不是一个只读操作，那还会继续交由prepare_update阶段进行处理，如果结果是需要更新Paxos，那么就会提交给Paxos。</p>
<p>先继续看<code>OSDMonitor::preprocess_failure(MonOpRequestRef op)</code>的实现吧：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token class-name">OSDMonitor</span><span class="token double-colon punctuation">::</span><span class="token function">preprocess_failure</span><span class="token punctuation">(</span>MonOpRequestRef op<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
  op<span class="token operator">-></span><span class="token function">mark_osdmon_event</span><span class="token punctuation">(</span><span class="token constant">__func__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">auto</span> m <span class="token operator">=</span> op<span class="token operator">-></span><span class="token generic-function"><span class="token function">get_req</span><span class="token generic class-name"><span class="token operator">&lt;</span>MOSDFailure<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// who is target_osd</span>
  <span class="token keyword">int</span> badboy <span class="token operator">=</span> m<span class="token operator">-></span><span class="token function">get_target_osd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// check permissions</span>
  <span class="token comment">// 检查权限</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">check_source</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> m<span class="token operator">-></span>fsid<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">goto</span> didit<span class="token punctuation">;</span>

  <span class="token comment">// first, verify the reporting host is valid</span>
  <span class="token comment">// 检查是不是一个正常源OSD汇报的</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>m<span class="token operator">-></span><span class="token function">get_orig_source</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">is_osd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> from <span class="token operator">=</span> m<span class="token operator">-></span><span class="token function">get_orig_source</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">num</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>osdmap<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span>from<span class="token punctuation">)</span> <span class="token operator">||</span>
	<span class="token operator">!</span>osdmap<span class="token punctuation">.</span><span class="token function">get_addrs</span><span class="token punctuation">(</span>from<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">legacy_equals</span><span class="token punctuation">(</span>m<span class="token operator">-></span><span class="token function">get_orig_source_addrs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span>
	<span class="token punctuation">(</span>osdmap<span class="token punctuation">.</span><span class="token function">is_down</span><span class="token punctuation">(</span>from<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> m<span class="token operator">-></span><span class="token function">if_osd_failed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">dout</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"preprocess_failure from dead osd."</span> <span class="token operator">&lt;&lt;</span> from
	      <span class="token operator">&lt;&lt;</span> <span class="token string">", ignoring"</span> <span class="token operator">&lt;&lt;</span> dendl<span class="token punctuation">;</span>
      <span class="token function">send_incremental</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> m<span class="token operator">-></span><span class="token function">get_epoch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">goto</span> didit<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>


  <span class="token comment">// weird?</span>
  <span class="token comment">// 检查汇报的源OSD是不是最新的</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>osdmap<span class="token punctuation">.</span><span class="token function">is_down</span><span class="token punctuation">(</span>badboy<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">dout</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"preprocess_failure dne(/dup?): osd."</span> <span class="token operator">&lt;&lt;</span> m<span class="token operator">-></span><span class="token function">get_target_osd</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	    <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> m<span class="token operator">-></span><span class="token function">get_target_addrs</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	    <span class="token operator">&lt;&lt;</span> <span class="token string">", from "</span> <span class="token operator">&lt;&lt;</span> m<span class="token operator">-></span><span class="token function">get_orig_source</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> dendl<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>m<span class="token operator">-></span><span class="token function">get_epoch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> osdmap<span class="token punctuation">.</span><span class="token function">get_epoch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token function">send_incremental</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> m<span class="token operator">-></span><span class="token function">get_epoch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">goto</span> didit<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>osdmap<span class="token punctuation">.</span><span class="token function">get_addrs</span><span class="token punctuation">(</span>badboy<span class="token punctuation">)</span> <span class="token operator">!=</span> m<span class="token operator">-></span><span class="token function">get_target_addrs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">dout</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"preprocess_failure wrong osd: report osd."</span> <span class="token operator">&lt;&lt;</span> m<span class="token operator">-></span><span class="token function">get_target_osd</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	    <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> m<span class="token operator">-></span><span class="token function">get_target_addrs</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	    <span class="token operator">&lt;&lt;</span> <span class="token string">" != map's "</span> <span class="token operator">&lt;&lt;</span> osdmap<span class="token punctuation">.</span><span class="token function">get_addrs</span><span class="token punctuation">(</span>badboy<span class="token punctuation">)</span>
	    <span class="token operator">&lt;&lt;</span> <span class="token string">", from "</span> <span class="token operator">&lt;&lt;</span> m<span class="token operator">-></span><span class="token function">get_orig_source</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> dendl<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>m<span class="token operator">-></span><span class="token function">get_epoch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> osdmap<span class="token punctuation">.</span><span class="token function">get_epoch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token function">send_incremental</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> m<span class="token operator">-></span><span class="token function">get_epoch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">goto</span> didit<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">// already reported?</span>
  <span class="token comment">// 检查汇报的目标OSD是不是已经Down了</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>osdmap<span class="token punctuation">.</span><span class="token function">is_down</span><span class="token punctuation">(</span>badboy<span class="token punctuation">)</span> <span class="token operator">||</span>
      osdmap<span class="token punctuation">.</span><span class="token function">get_up_from</span><span class="token punctuation">(</span>badboy<span class="token punctuation">)</span> <span class="token operator">></span> m<span class="token operator">-></span><span class="token function">get_epoch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">dout</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"preprocess_failure dup/old: osd."</span> <span class="token operator">&lt;&lt;</span> m<span class="token operator">-></span><span class="token function">get_target_osd</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	    <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> m<span class="token operator">-></span><span class="token function">get_target_addrs</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	    <span class="token operator">&lt;&lt;</span> <span class="token string">", from "</span> <span class="token operator">&lt;&lt;</span> m<span class="token operator">-></span><span class="token function">get_orig_source</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> dendl<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>m<span class="token operator">-></span><span class="token function">get_epoch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> osdmap<span class="token punctuation">.</span><span class="token function">get_epoch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token function">send_incremental</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> m<span class="token operator">-></span><span class="token function">get_epoch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">goto</span> didit<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">// 检查汇报的目标OSD是不是可以被Down</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">can_mark_down</span><span class="token punctuation">(</span>badboy<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">dout</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"preprocess_failure ignoring report of osd."</span>
	    <span class="token operator">&lt;&lt;</span> m<span class="token operator">-></span><span class="token function">get_target_osd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> m<span class="token operator">-></span><span class="token function">get_target_addrs</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	    <span class="token operator">&lt;&lt;</span> <span class="token string">" from "</span> <span class="token operator">&lt;&lt;</span> m<span class="token operator">-></span><span class="token function">get_orig_source</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> dendl<span class="token punctuation">;</span>
    <span class="token keyword">goto</span> didit<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">// 如果上述检查都没有问题，说明这是一个新发现的有问题的OSD，那需要进一步处理了</span>
  <span class="token function">dout</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"preprocess_failure new: osd."</span> <span class="token operator">&lt;&lt;</span> m<span class="token operator">-></span><span class="token function">get_target_osd</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	   <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> m<span class="token operator">-></span><span class="token function">get_target_addrs</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	   <span class="token operator">&lt;&lt;</span> <span class="token string">", from "</span> <span class="token operator">&lt;&lt;</span> m<span class="token operator">-></span><span class="token function">get_orig_source</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> dendl<span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>


 didit<span class="token operator">:</span>
  <span class="token comment">// 所有检查失败的，不管什么原因，都会忽略这个汇报</span>
  mon<span class="token operator">-></span><span class="token function">no_reply</span><span class="token punctuation">(</span>op<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>可以看到<code>preprocess_failure</code>里做了很多的校验工作，确保收到的消息是一个正确的消息，并且不是已经处理过的信息，所有检查都通过，说明真的有OSD出问题了，那就需要进一步处理了。于是就进入到<code>prepare_failure</code>的流程：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token class-name">OSDMonitor</span><span class="token double-colon punctuation">::</span><span class="token function">prepare_failure</span><span class="token punctuation">(</span>MonOpRequestRef op<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
<span class="token comment">// ...</span>

  <span class="token comment">// 如果收到的消息中标记这个OSD失效了</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>m<span class="token operator">-></span><span class="token function">if_osd_failed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// calculate failure time</span>
    utime_t now <span class="token operator">=</span> <span class="token function">ceph_clock_now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    utime_t failed_since <span class="token operator">=</span>
      m<span class="token operator">-></span><span class="token function">get_recv_stamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">utime_t</span><span class="token punctuation">(</span>m<span class="token operator">-></span>failed_for<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// add a report</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>m<span class="token operator">-></span><span class="token function">is_immediate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      mon<span class="token operator">-></span>clog<span class="token operator">-></span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"osd."</span> <span class="token operator">&lt;&lt;</span> m<span class="token operator">-></span><span class="token function">get_target_osd</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			 <span class="token operator">&lt;&lt;</span> <span class="token string">" reported immediately failed by "</span>
			 <span class="token operator">&lt;&lt;</span> m<span class="token operator">-></span><span class="token function">get_orig_source</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">force_failure</span><span class="token punctuation">(</span>target_osd<span class="token punctuation">,</span> reporter<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    mon<span class="token operator">-></span>clog<span class="token operator">-></span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"osd."</span> <span class="token operator">&lt;&lt;</span> m<span class="token operator">-></span><span class="token function">get_target_osd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" reported failed by "</span>
		      <span class="token operator">&lt;&lt;</span> m<span class="token operator">-></span><span class="token function">get_orig_source</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    failure_info_t<span class="token operator">&amp;</span> fi <span class="token operator">=</span> failure_info<span class="token punctuation">[</span>target_osd<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">// 在这个失效OSD的reporters列表里加上汇报的这个OSD</span>
    MonOpRequestRef old_op <span class="token operator">=</span> fi<span class="token punctuation">.</span><span class="token function">add_report</span><span class="token punctuation">(</span>reporter<span class="token punctuation">,</span> failed_since<span class="token punctuation">,</span> op<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>old_op<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      mon<span class="token operator">-></span><span class="token function">no_reply</span><span class="token punctuation">(</span>old_op<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// 判断是不是到阈值了</span>
    <span class="token keyword">return</span> <span class="token function">check_failure</span><span class="token punctuation">(</span>now<span class="token punctuation">,</span> target_osd<span class="token punctuation">,</span> fi<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
<span class="token comment">// ..</span>

    <span class="token comment">// 如果收到的消息中标记这个OSD没有失效</span>
    <span class="token comment">// 从失效列表里把这个OSD删了</span>
	failure_info<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>target_osd<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// ...</span>

  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>可以看到逻辑不复杂，Monitor会维护一个失效列表，收到消息后，经过一些检查，把汇报源加到失效OSD的reporters列表里，最后执行<code>check_failure</code>，那后续的判断就在<code>OSDMonitor::check_failure(utime_t now, int target_osd, failure_info_t&amp; fi)</code>了，继续：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token class-name">OSDMonitor</span><span class="token double-colon punctuation">::</span><span class="token function">check_failure</span><span class="token punctuation">(</span>utime_t now<span class="token punctuation">,</span> <span class="token keyword">int</span> target_osd<span class="token punctuation">,</span> failure_info_t<span class="token operator">&amp;</span> fi<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
  <span class="token comment">// already pending failure?</span>
  <span class="token comment">// 先判断是不是已经在提交Paxos的队列里了，在里面了就自然不用再多处理了</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>pending_inc<span class="token punctuation">.</span>new_state<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>target_osd<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
      pending_inc<span class="token punctuation">.</span>new_state<span class="token punctuation">[</span>target_osd<span class="token punctuation">]</span> <span class="token operator">&amp;</span> CEPH_OSD_UP<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">dout</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" already pending failure"</span> <span class="token operator">&lt;&lt;</span> dendl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">// ...</span>

  <span class="token comment">// 关键逻辑来了，经过一系列计算，如果汇报者的数量超过了mon_osd_min_down_reporters的值，就把OSD状态提交给Paxos</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>failed_for <span class="token operator">>=</span> grace <span class="token operator">&amp;&amp;</span>
      reporters_by_subtree<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token function">g_conf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-function"><span class="token function">get_val</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">uint64_t</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token string">"mon_osd_min_down_reporters"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">dout</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" we have enough reporters to mark osd."</span> <span class="token operator">&lt;&lt;</span> target_osd
	    <span class="token operator">&lt;&lt;</span> <span class="token string">" down"</span> <span class="token operator">&lt;&lt;</span> dendl<span class="token punctuation">;</span>
    pending_inc<span class="token punctuation">.</span>new_state<span class="token punctuation">[</span>target_osd<span class="token punctuation">]</span> <span class="token operator">=</span> CEPH_OSD_UP<span class="token punctuation">;</span>

    <span class="token comment">// ...</span>

    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>刚看到代码的时候，会不会觉得有点奇怪，为啥提交到Paxos的是一个<code>CEPH_OSD_UP</code>的值？理论上不是应该是标记为DOWN么？我们看下<code>new_state</code>的这个定义就知道了：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">mempool<span class="token double-colon punctuation">::</span>osdmap<span class="token double-colon punctuation">::</span>map<span class="token operator">&lt;</span><span class="token keyword">int32_t</span><span class="token punctuation">,</span><span class="token keyword">uint32_t</span><span class="token operator">></span> new_state<span class="token punctuation">;</span>             <span class="token comment">// XORed onto previous state.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>发现注释没，这个new_state是会异或到原值里的，也就是说，其实上面的操作是把OSD的<code>UP</code>状态去掉，没有<code>UP</code>状态，自然这个OSD就是DOWN状态了。</p>
<p>好了，到这里，基本上就能确定一个OSD要被标记为Down状态，只剩下最后一步，因为Monitor是个分布式的系统，需要Paxos保证一致性，而<code>pending_inc</code>队列里的内容，就是要提交给Paxos的修改了，具体Paxos的部分，这里就不再深入分析了。</p>
]]></content>
      <categories>
        <category>Ceph</category>
      </categories>
      <tags>
        <tag>Ceph</tag>
        <tag>OSD DOWN</tag>
        <tag>源码分析</tag>
      </tags>
  </entry>
  <entry>
    <title>Ceph OSD的心跳机制分析</title>
    <url>/2021/03/16/ceph-osd-heartbeat/</url>
    <content><![CDATA[<p>心跳机制在Ceph中承担非常重要的角色，所有OSD之间都需要通过心跳来确认各个OSD的状态，并且在OSD出现失联，Crash等情况下能及时的被发现，从而进行故障OSD摘除，触发数据重平衡等，保证数据的安全性。</p>
<p>所以弄明白当前Ceph的心跳机制，理顺OSD从故障到被集群踢出的流程是十分必要的。</p>
<h3 id="心跳初始化-心跳发送"><a href="#心跳初始化-心跳发送" class="headerlink" title="心跳初始化 &amp; 心跳发送"></a>心跳初始化 &amp; 心跳发送</h3><p>首先我们从Ceph OSD进程的启动main函数开始，代码在<code>src/ceph_osd.cc</code>：</p>
<span id="more"></span>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
<span class="token comment">// ...</span>

<span class="token comment">//首先创建前端、后端的发送、接收总共四个Messenger</span>
  Messenger <span class="token operator">*</span>ms_hb_back_client <span class="token operator">=</span> <span class="token class-name">Messenger</span><span class="token double-colon punctuation">::</span><span class="token function">create</span><span class="token punctuation">(</span>g_ceph_context<span class="token punctuation">,</span> cluster_msg_type<span class="token punctuation">,</span>
				entity_name_t<span class="token double-colon punctuation">::</span><span class="token function">OSD</span><span class="token punctuation">(</span>whoami<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"hb_back_client"</span><span class="token punctuation">,</span>
				nonce<span class="token punctuation">,</span> Messenger<span class="token double-colon punctuation">::</span>HEARTBEAT<span class="token punctuation">)</span><span class="token punctuation">;</span>
  Messenger <span class="token operator">*</span>ms_hb_front_client <span class="token operator">=</span> <span class="token class-name">Messenger</span><span class="token double-colon punctuation">::</span><span class="token function">create</span><span class="token punctuation">(</span>g_ceph_context<span class="token punctuation">,</span> public_msg_type<span class="token punctuation">,</span>
				entity_name_t<span class="token double-colon punctuation">::</span><span class="token function">OSD</span><span class="token punctuation">(</span>whoami<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"hb_front_client"</span><span class="token punctuation">,</span>
				nonce<span class="token punctuation">,</span> Messenger<span class="token double-colon punctuation">::</span>HEARTBEAT<span class="token punctuation">)</span><span class="token punctuation">;</span>
  Messenger <span class="token operator">*</span>ms_hb_back_server <span class="token operator">=</span> <span class="token class-name">Messenger</span><span class="token double-colon punctuation">::</span><span class="token function">create</span><span class="token punctuation">(</span>g_ceph_context<span class="token punctuation">,</span> cluster_msg_type<span class="token punctuation">,</span>
				entity_name_t<span class="token double-colon punctuation">::</span><span class="token function">OSD</span><span class="token punctuation">(</span>whoami<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"hb_back_server"</span><span class="token punctuation">,</span>
				nonce<span class="token punctuation">,</span> Messenger<span class="token double-colon punctuation">::</span>HEARTBEAT<span class="token punctuation">)</span><span class="token punctuation">;</span>
  Messenger <span class="token operator">*</span>ms_hb_front_server <span class="token operator">=</span> <span class="token class-name">Messenger</span><span class="token double-colon punctuation">::</span><span class="token function">create</span><span class="token punctuation">(</span>g_ceph_context<span class="token punctuation">,</span> public_msg_type<span class="token punctuation">,</span>
				entity_name_t<span class="token double-colon punctuation">::</span><span class="token function">OSD</span><span class="token punctuation">(</span>whoami<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"hb_front_server"</span><span class="token punctuation">,</span>
				nonce<span class="token punctuation">,</span> Messenger<span class="token double-colon punctuation">::</span>HEARTBEAT<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// ...</span>

<span class="token comment">// 接下来进行绑定，将前后端对应的IP地址绑定到对应的Messenger上</span>
  entity_addrvec_t hb_front_addrs <span class="token operator">=</span> public_addrs<span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> a <span class="token operator">:</span> hb_front_addrs<span class="token punctuation">.</span>v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    a<span class="token punctuation">.</span><span class="token function">set_port</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>ms_hb_front_server<span class="token operator">-></span><span class="token function">bindv</span><span class="token punctuation">(</span>hb_front_addrs<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
    forker<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>ms_hb_front_client<span class="token operator">-></span><span class="token function">client_bind</span><span class="token punctuation">(</span>hb_front_addrs<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
    forker<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  entity_addrvec_t hb_back_addrs <span class="token operator">=</span> cluster_addrs<span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> a <span class="token operator">:</span> hb_back_addrs<span class="token punctuation">.</span>v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    a<span class="token punctuation">.</span><span class="token function">set_port</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>ms_hb_back_server<span class="token operator">-></span><span class="token function">bindv</span><span class="token punctuation">(</span>hb_back_addrs<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
    forker<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>ms_hb_back_client<span class="token operator">-></span><span class="token function">client_bind</span><span class="token punctuation">(</span>hb_back_addrs<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
    forker<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// ...</span>

<span class="token comment">// 创建OSD实例</span>
  osdptr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">OSD</span><span class="token punctuation">(</span>g_ceph_context<span class="token punctuation">,</span>
		   store<span class="token punctuation">,</span>
		   whoami<span class="token punctuation">,</span>
		   ms_cluster<span class="token punctuation">,</span>
		   ms_public<span class="token punctuation">,</span>
		   ms_hb_front_client<span class="token punctuation">,</span>
		   ms_hb_back_client<span class="token punctuation">,</span>
		   ms_hb_front_server<span class="token punctuation">,</span>
		   ms_hb_back_server<span class="token punctuation">,</span>
		   ms_objecter<span class="token punctuation">,</span>
		   <span class="token operator">&amp;</span>mc<span class="token punctuation">,</span>
		   data_path<span class="token punctuation">,</span>
		   journal_path<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// ...</span>

<span class="token comment">// 此时心跳等还没启动，真正初始化心跳是在OSD::init()里</span>
  err <span class="token operator">=</span> osdptr<span class="token operator">-></span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>初始化心跳相关逻辑在OSD::init()方法里，我们转到<code>src/osd/OSD.cc</code>：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token class-name">OSD</span><span class="token double-colon punctuation">::</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
<span class="token comment">// ...</span>

<span class="token comment">// 给各个心跳相关的Messenger加上回调，用于处理心跳返回，以及其他OSD发送到自己的心跳，具体流程后面分析</span>
  hb_front_client_messenger<span class="token operator">-></span><span class="token function">add_dispatcher_head</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>heartbeat_dispatcher<span class="token punctuation">)</span><span class="token punctuation">;</span>
  hb_back_client_messenger<span class="token operator">-></span><span class="token function">add_dispatcher_head</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>heartbeat_dispatcher<span class="token punctuation">)</span><span class="token punctuation">;</span>
  hb_front_server_messenger<span class="token operator">-></span><span class="token function">add_dispatcher_head</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>heartbeat_dispatcher<span class="token punctuation">)</span><span class="token punctuation">;</span>
  hb_back_server_messenger<span class="token operator">-></span><span class="token function">add_dispatcher_head</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>heartbeat_dispatcher<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// ...</span>

<span class="token comment">// 正式启动心跳</span>
<span class="token comment">// start the heartbeat</span>
  heartbeat_thread<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">"osd_srv_heartbt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>继续，看看<code>heartbeat_thread</code>的定义是什么样的，代码在<code>src/osd/OSD.h</code>:</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">T_Heartbeat</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Thread</span></span> <span class="token punctuation">&#123;</span>
  OSD <span class="token operator">*</span>osd<span class="token punctuation">;</span>
  <span class="token keyword">explicit</span> <span class="token function">T_Heartbeat</span><span class="token punctuation">(</span>OSD <span class="token operator">*</span>o<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">osd</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
  <span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">entry</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">override</span> <span class="token punctuation">&#123;</span>
    osd<span class="token operator">-></span><span class="token function">heartbeat_entry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span> heartbeat_thread<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>很简单，就是调用<code>osd-&gt;heartbeat_entry()</code>，那就继续看<code>OSD::heartbeat_entry()</code>做了哪些事，同样实现在<code>src/osd/OSD.cc</code>：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token class-name">OSD</span><span class="token double-colon punctuation">::</span><span class="token function">heartbeat_entry</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
  std<span class="token double-colon punctuation">::</span>unique_lock <span class="token function">l</span><span class="token punctuation">(</span>heartbeat_lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_stopping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>heartbeat_stop<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 调用OSD::heartbeat()</span>
    <span class="token function">heartbeat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 根据配置，等待一段时间，继续心跳</span>
    <span class="token keyword">double</span> wait<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>cct<span class="token operator">-></span>_conf<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">get_val</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token string">"debug_disable_randomized_ping"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      wait <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>cct<span class="token operator">-></span>_conf<span class="token operator">-></span>osd_heartbeat_interval<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      wait <span class="token operator">=</span> <span class="token number">.5</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">10.0</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>cct<span class="token operator">-></span>_conf<span class="token operator">-></span>osd_heartbeat_interval<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">auto</span> w <span class="token operator">=</span> ceph<span class="token double-colon punctuation">::</span><span class="token function">make_timespan</span><span class="token punctuation">(</span>wait<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">dout</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"heartbeat_entry sleeping for "</span> <span class="token operator">&lt;&lt;</span> wait <span class="token operator">&lt;&lt;</span> dendl<span class="token punctuation">;</span>
    heartbeat_cond<span class="token punctuation">.</span><span class="token function">wait_for</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_stopping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token function">dout</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"heartbeat_entry woke up"</span> <span class="token operator">&lt;&lt;</span> dendl<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">OSD</span><span class="token double-colon punctuation">::</span><span class="token function">heartbeat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
<span class="token comment">// ...</span>

  <span class="token comment">// 获取当前的系统负载，在心跳包中，会带上当前OSD所在机器的负载信息</span>
  <span class="token comment">// 这里用了个公式，计算的是一天的累计的负载</span>
  <span class="token comment">// get CPU load avg</span>
  <span class="token keyword">double</span> loadavgs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> hb_interval <span class="token operator">=</span> cct<span class="token operator">-></span>_conf<span class="token operator">-></span>osd_heartbeat_interval<span class="token punctuation">;</span>
  <span class="token keyword">int</span> n_samples <span class="token operator">=</span> <span class="token number">86400</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>hb_interval <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    n_samples <span class="token operator">/=</span> hb_interval<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>n_samples <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span>
      n_samples <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getloadavg</span><span class="token punctuation">(</span>loadavgs<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    logger<span class="token operator">-></span><span class="token function">set</span><span class="token punctuation">(</span>l_osd_loadavg<span class="token punctuation">,</span> <span class="token number">100</span> <span class="token operator">*</span> loadavgs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    daily_loadavg <span class="token operator">=</span> <span class="token punctuation">(</span>daily_loadavg <span class="token operator">*</span> <span class="token punctuation">(</span>n_samples <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> loadavgs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> n_samples<span class="token punctuation">;</span>
    <span class="token function">dout</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"heartbeat: daily_loadavg "</span> <span class="token operator">&lt;&lt;</span> daily_loadavg <span class="token operator">&lt;&lt;</span> dendl<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

<span class="token comment">// ...</span>

  utime_t now <span class="token operator">=</span> <span class="token function">ceph_clock_now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">auto</span> mnow <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">get_mnow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  utime_t deadline <span class="token operator">=</span> now<span class="token punctuation">;</span>
  deadline <span class="token operator">+=</span> cct<span class="token operator">-></span>_conf<span class="token operator">-></span>osd_heartbeat_grace<span class="token punctuation">;</span>

  <span class="token comment">// 遍历所有需要心跳检测的Peer</span>
  <span class="token comment">// send heartbeats</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span>HeartbeatInfo<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator i <span class="token operator">=</span> heartbeat_peers<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       i <span class="token operator">!=</span> heartbeat_peers<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  
  <span class="token comment">// ...</span>

    <span class="token comment">// 通过集群内网络发送MOSDPing消息</span>
    i<span class="token operator">-></span>second<span class="token punctuation">.</span>con_back<span class="token operator">-></span><span class="token function">send_message</span><span class="token punctuation">(</span>
      <span class="token keyword">new</span> <span class="token function">MOSDPing</span><span class="token punctuation">(</span>monc<span class="token operator">-></span><span class="token function">get_fsid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		   service<span class="token punctuation">.</span><span class="token function">get_osdmap_epoch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		   MOSDPing<span class="token double-colon punctuation">::</span>PING<span class="token punctuation">,</span>
		   now<span class="token punctuation">,</span>
		   mnow<span class="token punctuation">,</span>
		   mnow<span class="token punctuation">,</span>
		   service<span class="token punctuation">.</span><span class="token function">get_up_epoch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		   cct<span class="token operator">-></span>_conf<span class="token operator">-></span>osd_heartbeat_min_size<span class="token punctuation">,</span>
		   delta_ub<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 如果前端网络是分离的，那从前端网络也发送MOSDPing消息</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">-></span>second<span class="token punctuation">.</span>con_front<span class="token punctuation">)</span>
      i<span class="token operator">-></span>second<span class="token punctuation">.</span>con_front<span class="token operator">-></span><span class="token function">send_message</span><span class="token punctuation">(</span>
	<span class="token keyword">new</span> <span class="token function">MOSDPing</span><span class="token punctuation">(</span>monc<span class="token operator">-></span><span class="token function">get_fsid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		     service<span class="token punctuation">.</span><span class="token function">get_osdmap_epoch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		     MOSDPing<span class="token double-colon punctuation">::</span>PING<span class="token punctuation">,</span>
		     now<span class="token punctuation">,</span>
		     mnow<span class="token punctuation">,</span>
		     mnow<span class="token punctuation">,</span>
		     service<span class="token punctuation">.</span><span class="token function">get_up_epoch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		     cct<span class="token operator">-></span>_conf<span class="token operator">-></span>osd_heartbeat_min_size<span class="token punctuation">,</span>
		     delta_ub<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  logger<span class="token operator">-></span><span class="token function">set</span><span class="token punctuation">(</span>l_osd_hb_to<span class="token punctuation">,</span> heartbeat_peers<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 有个情况是就一个OSD，那就等着OSDMap更新吧。</span>
  <span class="token comment">// hmm.. am i all alone?</span>
  <span class="token function">dout</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"heartbeat lonely?"</span> <span class="token operator">&lt;&lt;</span> dendl<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>heartbeat_peers<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>now <span class="token operator">-</span> last_mon_heartbeat <span class="token operator">></span> cct<span class="token operator">-></span>_conf<span class="token operator">-></span>osd_mon_heartbeat_interval <span class="token operator">&amp;&amp;</span> <span class="token function">is_active</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      last_mon_heartbeat <span class="token operator">=</span> now<span class="token punctuation">;</span>
      <span class="token function">dout</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"i have no heartbeat peers; checking mon for new map"</span> <span class="token operator">&lt;&lt;</span> dendl<span class="token punctuation">;</span>
      <span class="token function">osdmap_subscribe</span><span class="token punctuation">(</span><span class="token function">get_osdmap_epoch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">dout</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"heartbeat done"</span> <span class="token operator">&lt;&lt;</span> dendl<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="心跳对象确定"><a href="#心跳对象确定" class="headerlink" title="心跳对象确定"></a>心跳对象确定</h3><p>心跳逻辑还是比较好理解的，基本就是个for循环，但是有个小细节，就是<code>heartbeat_peers</code>哪来的？哪些OSD会被放入到这个心跳列表？是所有的OSD么？这个列表的初始化在<code>OSD::maybe_update_heartbeat_peers()</code>:</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">
<span class="token keyword">void</span> <span class="token class-name">OSD</span><span class="token double-colon punctuation">::</span><span class="token function">maybe_update_heartbeat_peers</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
<span class="token comment">// ...</span>

  <span class="token comment">// 首先，把所有OSD负责的PG的副本OSD，加到列表里</span>
  <span class="token comment">// build heartbeat from set</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_active</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    vector<span class="token operator">&lt;</span>PGRef<span class="token operator">></span> pgs<span class="token punctuation">;</span>
    <span class="token function">_get_pgs</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pgs<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> pg <span class="token operator">:</span> pgs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      pg<span class="token operator">-></span><span class="token function">with_heartbeat_peers</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> peer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">get_osdmap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">is_up</span><span class="token punctuation">(</span>peer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	    <span class="token function">_add_heartbeat_peer</span><span class="token punctuation">(</span>peer<span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">// 然后再看看OSDMap，把前后相邻的OSD先算出来</span>
  <span class="token comment">// include next and previous up osds to ensure we have a fully-connected set</span>
  set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> want<span class="token punctuation">,</span> extras<span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token keyword">int</span> next <span class="token operator">=</span> <span class="token function">get_osdmap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">get_next_up_osd_after</span><span class="token punctuation">(</span>whoami<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>next <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span>
    want<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> prev <span class="token operator">=</span> <span class="token function">get_osdmap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">get_previous_up_osd_before</span><span class="token punctuation">(</span>whoami<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>prev <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> prev <span class="token operator">!=</span> next<span class="token punctuation">)</span>
    want<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>prev<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 根据配置，从OSDMap里随机找一些OSD</span>
  <span class="token comment">// make sure we have at least **min_down** osds coming from different</span>
  <span class="token comment">// subtree level (e.g., hosts) for fast failure detection.</span>
  <span class="token keyword">auto</span> min_down <span class="token operator">=</span> cct<span class="token operator">-></span>_conf<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">get_val</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">uint64_t</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token string">"mon_osd_min_down_reporters"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">auto</span> subtree <span class="token operator">=</span> cct<span class="token operator">-></span>_conf<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">get_val</span><span class="token generic class-name"><span class="token operator">&lt;</span>string<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token string">"mon_osd_reporter_subtree_level"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">auto</span> limit <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">max</span><span class="token punctuation">(</span>min_down<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">uint64_t</span><span class="token punctuation">)</span>cct<span class="token operator">-></span>_conf<span class="token operator">-></span>osd_heartbeat_min_peers<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">get_osdmap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">get_random_up_osds_by_subtree</span><span class="token punctuation">(</span>
    whoami<span class="token punctuation">,</span> subtree<span class="token punctuation">,</span> limit<span class="token punctuation">,</span> want<span class="token punctuation">,</span> <span class="token operator">&amp;</span>want<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 把这些OSD全加到extras列表里</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator p <span class="token operator">=</span> want<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> p <span class="token operator">!=</span> want<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">dout</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" adding neighbor peer osd."</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>p <span class="token operator">&lt;&lt;</span> dendl<span class="token punctuation">;</span>
    extras<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">_add_heartbeat_peer</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">// 二次确认一下，如果有非UP的OSD，就从列表里去掉</span>
  <span class="token comment">// remove down peers; enumerate extras</span>
  map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span>HeartbeatInfo<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator p <span class="token operator">=</span> heartbeat_peers<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> heartbeat_peers<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">get_osdmap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">is_up</span><span class="token punctuation">(</span>p<span class="token operator">-></span>first<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">int</span> o <span class="token operator">=</span> p<span class="token operator">-></span>first<span class="token punctuation">;</span>
      <span class="token operator">++</span>p<span class="token punctuation">;</span>
      <span class="token function">_remove_heartbeat_peer</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">continue</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">-></span>second<span class="token punctuation">.</span>epoch <span class="token operator">&lt;</span> <span class="token function">get_osdmap_epoch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      extras<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>p<span class="token operator">-></span>first<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token operator">++</span>p<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">// 下面就是根据配置调整心跳列表OSD的数量，让数量保持在一个合理的值</span>
  <span class="token comment">// too few?</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> n <span class="token operator">=</span> next<span class="token punctuation">;</span> n <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>heartbeat_peers<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> cct<span class="token operator">-></span>_conf<span class="token operator">-></span>osd_heartbeat_min_peers<span class="token punctuation">)</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>extras<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>want<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> n <span class="token operator">!=</span> whoami<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">dout</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" adding random peer osd."</span> <span class="token operator">&lt;&lt;</span> n <span class="token operator">&lt;&lt;</span> dendl<span class="token punctuation">;</span>
      extras<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">_add_heartbeat_peer</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    n <span class="token operator">=</span> <span class="token function">get_osdmap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">get_next_up_osd_after</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> next<span class="token punctuation">)</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token comment">// came full circle; stop</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">// too many?</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator p <span class="token operator">=</span> extras<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>heartbeat_peers<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> cct<span class="token operator">-></span>_conf<span class="token operator">-></span>osd_heartbeat_min_peers <span class="token operator">&amp;&amp;</span> p <span class="token operator">!=</span> extras<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token operator">++</span>p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>want<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token keyword">continue</span><span class="token punctuation">;</span>
    <span class="token function">_remove_heartbeat_peer</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">dout</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"maybe_update_heartbeat_peers "</span> <span class="token operator">&lt;&lt;</span> heartbeat_peers<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" peers, extras "</span> <span class="token operator">&lt;&lt;</span> extras <span class="token operator">&lt;&lt;</span> dendl<span class="token punctuation">;</span>

  <span class="token comment">// clean up stale failure pending</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> it <span class="token operator">=</span> failure_pending<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> failure_pending<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>heartbeat_peers<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>it<span class="token operator">-></span>first<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">send_still_alive</span><span class="token punctuation">(</span><span class="token function">get_osdmap_epoch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> it<span class="token operator">-></span>first<span class="token punctuation">,</span> it<span class="token operator">-></span>second<span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>
      failure_pending<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>it<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      it<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="心跳接收"><a href="#心跳接收" class="headerlink" title="心跳接收"></a>心跳接收</h3><p>在OSD初始化的一开始，我们已经知道4个心跳相关Messenger注册了一个回调<code>heartbeat_dispatcher</code>用于处理收到的请求。这是封装后的dispatcher，最终会执行<code>osd-&gt;heartbeat_dispatch(m)</code>，这个<code>heartbeat_dispatch</code>也定义在<code>src/osd/OSD.cc</code>:</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token class-name">OSD</span><span class="token double-colon punctuation">::</span><span class="token function">heartbeat_dispatch</span><span class="token punctuation">(</span>Message <span class="token operator">*</span>m<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
  <span class="token function">dout</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"heartbeat_dispatch "</span> <span class="token operator">&lt;&lt;</span> m <span class="token operator">&lt;&lt;</span> dendl<span class="token punctuation">;</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>m<span class="token operator">-></span><span class="token function">get_type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

<span class="token comment">// ...</span>

<span class="token comment">// 如果是MSG_OSD_PING类型MSG继续调用handle_osd_ping</span>
  <span class="token keyword">case</span> MSG_OSD_PING<span class="token operator">:</span>
    <span class="token function">handle_osd_ping</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>MOSDPing<span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">OSD</span><span class="token double-colon punctuation">::</span><span class="token function">handle_osd_ping</span><span class="token punctuation">(</span>MOSDPing <span class="token operator">*</span>m<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">// ...</span>

    <span class="token keyword">switch</span> <span class="token punctuation">(</span>m<span class="token operator">-></span>op<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
    <span class="token comment">// 收到PING包</span>
    <span class="token keyword">case</span> MOSDPing<span class="token double-colon punctuation">::</span>PING<span class="token operator">:</span>
    <span class="token punctuation">&#123;</span>

        <span class="token comment">// 发送回包</span>
        Message <span class="token operator">*</span>r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">MOSDPing</span><span class="token punctuation">(</span>monc<span class="token operator">-></span><span class="token function">get_fsid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                                  curmap<span class="token operator">-></span><span class="token function">get_epoch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                                  MOSDPing<span class="token double-colon punctuation">::</span>PING_REPLY<span class="token punctuation">,</span>
                                  m<span class="token operator">-></span>ping_stamp<span class="token punctuation">,</span>
                                  m<span class="token operator">-></span>mono_ping_stamp<span class="token punctuation">,</span>
                                  mnow<span class="token punctuation">,</span>
                                  service<span class="token punctuation">.</span><span class="token function">get_up_epoch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                                  cct<span class="token operator">-></span>_conf<span class="token operator">-></span>osd_heartbeat_min_size<span class="token punctuation">,</span>
                                  sender_delta_ub<span class="token punctuation">)</span><span class="token punctuation">;</span>
        con<span class="token operator">-></span><span class="token function">send_message</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// ...</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>curmap<span class="token operator">-></span><span class="token function">exists</span><span class="token punctuation">(</span>from<span class="token punctuation">)</span> <span class="token operator">||</span>
                 curmap<span class="token operator">-></span><span class="token function">get_down_at</span><span class="token punctuation">(</span>from<span class="token punctuation">)</span> <span class="token operator">></span> m<span class="token operator">-></span>map_epoch<span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token comment">/*
			 * 如果对端异常，发送个MOSDPing::YOU_DIED包
			 * tell them they have died
			 */</span>
            Message <span class="token operator">*</span>r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">MOSDPing</span><span class="token punctuation">(</span>monc<span class="token operator">-></span><span class="token function">get_fsid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                                      curmap<span class="token operator">-></span><span class="token function">get_epoch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                                      MOSDPing<span class="token double-colon punctuation">::</span>YOU_DIED<span class="token punctuation">,</span>
                                      m<span class="token operator">-></span>ping_stamp<span class="token punctuation">,</span>
                                      m<span class="token operator">-></span>mono_ping_stamp<span class="token punctuation">,</span>
                                      mnow<span class="token punctuation">,</span>
                                      service<span class="token punctuation">.</span><span class="token function">get_up_epoch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                                      cct<span class="token operator">-></span>_conf<span class="token operator">-></span>osd_heartbeat_min_size<span class="token punctuation">)</span><span class="token punctuation">;</span>
            con<span class="token operator">-></span><span class="token function">send_message</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>

    <span class="token comment">/* 收到PING回包 */</span>
    <span class="token keyword">case</span> MOSDPing<span class="token double-colon punctuation">::</span>PING_REPLY<span class="token operator">:</span>
    <span class="token punctuation">&#123;</span>
        map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> HeartbeatInfo<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator i <span class="token operator">=</span> heartbeat_peers<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>from<span class="token punctuation">)</span><span class="token punctuation">;</span>

		  <span class="token comment">// 如果在心跳列表里</span>
      <span class="token comment">// 根据连接更新前后端的上次心跳时间</span>
      <span class="token comment">// 如果只有后端网络，则前后端一起更新，如果前后端网络都有，则各自更新各自的</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> heartbeat_peers<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">auto</span> acked <span class="token operator">=</span> i<span class="token operator">-></span>second<span class="token punctuation">.</span>ping_history<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>m<span class="token operator">-></span>ping_stamp<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>acked <span class="token operator">!=</span> i<span class="token operator">-></span>second<span class="token punctuation">.</span>ping_history<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">&#123;</span>
                <span class="token keyword">int</span> <span class="token operator">&amp;</span>unacknowledged <span class="token operator">=</span> acked<span class="token operator">-></span>second<span class="token punctuation">.</span>second<span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>con <span class="token operator">==</span> i<span class="token operator">-></span>second<span class="token punctuation">.</span>con_back<span class="token punctuation">)</span>
                <span class="token punctuation">&#123;</span>
 
                    i<span class="token operator">-></span>second<span class="token punctuation">.</span>last_rx_back <span class="token operator">=</span> now<span class="token punctuation">;</span>
                    <span class="token function">ceph_assert</span><span class="token punctuation">(</span>unacknowledged <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token operator">--</span>unacknowledged<span class="token punctuation">;</span>
                    <span class="token comment">/* if there is no front con, set both stamps. */</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">-></span>second<span class="token punctuation">.</span>con_front <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
                    <span class="token punctuation">&#123;</span>
                        i<span class="token operator">-></span>second<span class="token punctuation">.</span>last_rx_front <span class="token operator">=</span> now<span class="token punctuation">;</span>
                        <span class="token function">ceph_assert</span><span class="token punctuation">(</span>unacknowledged <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token operator">--</span>unacknowledged<span class="token punctuation">;</span>
                    <span class="token punctuation">&#125;</span>
                <span class="token punctuation">&#125;</span>
                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>con <span class="token operator">==</span> i<span class="token operator">-></span>second<span class="token punctuation">.</span>con_front<span class="token punctuation">)</span>
                <span class="token punctuation">&#123;</span>
                    <span class="token function">dout</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"handle_osd_ping got reply from osd."</span> <span class="token operator">&lt;&lt;</span> from
                             <span class="token operator">&lt;&lt;</span> <span class="token string">" first_tx "</span> <span class="token operator">&lt;&lt;</span> i<span class="token operator">-></span>second<span class="token punctuation">.</span>first_tx
                             <span class="token operator">&lt;&lt;</span> <span class="token string">" last_tx "</span> <span class="token operator">&lt;&lt;</span> i<span class="token operator">-></span>second<span class="token punctuation">.</span>last_tx
                             <span class="token operator">&lt;&lt;</span> <span class="token string">" last_rx_back "</span> <span class="token operator">&lt;&lt;</span> i<span class="token operator">-></span>second<span class="token punctuation">.</span>last_rx_back
                             <span class="token operator">&lt;&lt;</span> <span class="token string">" last_rx_front "</span> <span class="token operator">&lt;&lt;</span> i<span class="token operator">-></span>second<span class="token punctuation">.</span>last_rx_front
                             <span class="token operator">&lt;&lt;</span> <span class="token string">" -> "</span> <span class="token operator">&lt;&lt;</span> now
                             <span class="token operator">&lt;&lt;</span> dendl<span class="token punctuation">;</span>
                    i<span class="token operator">-></span>second<span class="token punctuation">.</span>last_rx_front <span class="token operator">=</span> now<span class="token punctuation">;</span>
                    <span class="token function">ceph_assert</span><span class="token punctuation">(</span>unacknowledged <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token operator">--</span>unacknowledged<span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>

<span class="token comment">// ...还会记录一些历史信息，这里不分析了。</span>

                <span class="token comment">/* 如果Peer状态正常，清除掉之前不正常的状态 */</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">-></span>second<span class="token punctuation">.</span><span class="token function">is_healthy</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">&#123;</span>
                    <span class="token comment">/* Cancel false reports */</span>
                    <span class="token keyword">auto</span> failure_queue_entry <span class="token operator">=</span> failure_queue<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>from<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>failure_queue_entry <span class="token operator">!=</span> failure_queue<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token punctuation">&#123;</span>
                        <span class="token function">dout</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"handle_osd_ping canceling queued "</span>
                                 <span class="token operator">&lt;&lt;</span> <span class="token string">"failure report for osd."</span> <span class="token operator">&lt;&lt;</span> from <span class="token operator">&lt;&lt;</span> dendl<span class="token punctuation">;</span>
                        failure_queue<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>failure_queue_entry<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">&#125;</span>

                    <span class="token keyword">auto</span> failure_pending_entry <span class="token operator">=</span> failure_pending<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>from<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>failure_pending_entry <span class="token operator">!=</span> failure_pending<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token punctuation">&#123;</span>
                        <span class="token function">dout</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"handle_osd_ping canceling in-flight "</span>
                                 <span class="token operator">&lt;&lt;</span> <span class="token string">"failure report for osd."</span> <span class="token operator">&lt;&lt;</span> from <span class="token operator">&lt;&lt;</span> dendl<span class="token punctuation">;</span>
                        <span class="token function">send_still_alive</span><span class="token punctuation">(</span>curmap<span class="token operator">-></span><span class="token function">get_epoch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                                         from<span class="token punctuation">,</span>
                                         failure_pending_entry<span class="token operator">-></span>second<span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        failure_pending<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>failure_pending_entry<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">&#125;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">else</span>
            <span class="token punctuation">&#123;</span>
                <span class="token comment">/* old replies, deprecated by newly sent pings. */</span>
                <span class="token function">dout</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"handle_osd_ping no pending ping(sent at "</span> <span class="token operator">&lt;&lt;</span> m<span class="token operator">-></span>ping_stamp
                         <span class="token operator">&lt;&lt;</span> <span class="token string">") is found, treat as covered by newly sent pings "</span>
                         <span class="token operator">&lt;&lt;</span> <span class="token string">"and ignore"</span>
                         <span class="token operator">&lt;&lt;</span> dendl<span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>

    <span class="token punctuation">&#125;</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>

    <span class="token comment">/* 收到MOSDPing::YOU_DIED包，更新osdmap */</span>
    <span class="token keyword">case</span> MOSDPing<span class="token double-colon punctuation">::</span>YOU_DIED<span class="token operator">:</span>
        <span class="token function">dout</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"handle_osd_ping "</span> <span class="token operator">&lt;&lt;</span> m<span class="token operator">-></span><span class="token function">get_source_inst</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                 <span class="token operator">&lt;&lt;</span> <span class="token string">" says i am down in "</span> <span class="token operator">&lt;&lt;</span> m<span class="token operator">-></span>map_epoch <span class="token operator">&lt;&lt;</span> dendl<span class="token punctuation">;</span>
        <span class="token function">osdmap_subscribe</span><span class="token punctuation">(</span>curmap<span class="token operator">-></span><span class="token function">get_epoch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    heartbeat_lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    m<span class="token operator">-></span><span class="token function">put</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h3 id="超时检测和上报"><a href="#超时检测和上报" class="headerlink" title="超时检测和上报"></a>超时检测和上报</h3><p>心跳流程分析的差不多了，该进行心跳的超时检测和信息上报了。</p>
<p>心跳的超时检测，是在<code>OSD::heartbeat_check()</code>方法里检测的：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token class-name">OSD</span><span class="token double-colon punctuation">::</span><span class="token function">heartbeat_check</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">ceph_assert</span><span class="token punctuation">(</span><span class="token function">ceph_mutex_is_locked</span><span class="token punctuation">(</span>heartbeat_lock<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    utime_t now <span class="token operator">=</span> <span class="token function">ceph_clock_now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// check for incoming heartbeats (move me elsewhere?)</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> HeartbeatInfo<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator p <span class="token operator">=</span> heartbeat_peers<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         p <span class="token operator">!=</span> heartbeat_peers<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token operator">++</span>p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 如果一个心跳还没发呢，先跳过</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">-></span>second<span class="token punctuation">.</span>first_tx <span class="token operator">==</span> <span class="token function">utime_t</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token function">dout</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"heartbeat_check we haven't sent ping to osd."</span> <span class="token operator">&lt;&lt;</span> p<span class="token operator">-></span>first
                     <span class="token operator">&lt;&lt;</span> <span class="token string">" yet, skipping"</span> <span class="token operator">&lt;&lt;</span> dendl<span class="token punctuation">;</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token comment">// 如果有发生超时的情况</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">-></span>second<span class="token punctuation">.</span><span class="token function">is_unhealthy</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            utime_t oldest_deadline <span class="token operator">=</span> p<span class="token operator">-></span>second<span class="token punctuation">.</span>ping_history<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span>second<span class="token punctuation">.</span>first<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">-></span>second<span class="token punctuation">.</span>last_rx_back <span class="token operator">==</span> <span class="token function">utime_t</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span>
                p<span class="token operator">-></span>second<span class="token punctuation">.</span>last_rx_front <span class="token operator">==</span> <span class="token function">utime_t</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token comment">// fail</span>
                <span class="token comment">// 一个返回都没收到，扔failure_queue队列里</span>
                failure_queue<span class="token punctuation">[</span>p<span class="token operator">-></span>first<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token operator">-></span>second<span class="token punctuation">.</span>first_tx<span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                <span class="token comment">// fail</span>
                <span class="token comment">// 收到过返回，但是依然超时了，扔failure_queue队列里</span>
                failure_queue<span class="token punctuation">[</span>p<span class="token operator">-></span>first<span class="token punctuation">]</span> <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">min</span><span class="token punctuation">(</span>p<span class="token operator">-></span>second<span class="token punctuation">.</span>last_rx_back<span class="token punctuation">,</span> p<span class="token operator">-></span>second<span class="token punctuation">.</span>last_rx_front<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这个检测还是比较简单的，那么什么时候上报到Monitor呢？我们慢慢来：</p>
<p>在<code>OSD:init()</code>阶段，做了这样一件事：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token class-name">OSD</span><span class="token double-colon punctuation">::</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
  <span class="token comment">// ...</span>

  tick_timer_without_osd_lock<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// ...</span>

  <span class="token punctuation">&#123;</span>
    std<span class="token double-colon punctuation">::</span>lock_guard <span class="token function">l</span><span class="token punctuation">(</span>tick_timer_lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 定时执行一下C_Tick_WithoutOSDLock</span>
    tick_timer_without_osd_lock<span class="token punctuation">.</span><span class="token function">add_event_after</span><span class="token punctuation">(</span><span class="token function">get_tick_interval</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
						<span class="token keyword">new</span> <span class="token function">C_Tick_WithoutOSDLock</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name">OSD</span><span class="token operator">:</span><span class="token base-clause"><span class="token operator">:</span><span class="token class-name">C_Tick_WithoutOSDLock</span> <span class="token operator">:</span> <span class="token keyword">public</span> <span class="token class-name">Context</span></span> <span class="token punctuation">&#123;</span>
  OSD <span class="token operator">*</span>osd<span class="token punctuation">;</span>
  <span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token keyword">explicit</span> <span class="token function">C_Tick_WithoutOSDLock</span><span class="token punctuation">(</span>OSD <span class="token operator">*</span>o<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">osd</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
  <span class="token keyword">void</span> <span class="token function">finish</span><span class="token punctuation">(</span><span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token keyword">override</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 实际执行的是OSD::tick_without_osd_lock()</span>
    osd<span class="token operator">-></span><span class="token function">tick_without_osd_lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在<code>OSD::tick_without_osd_lock()</code>中，做了很多事情，其中就包括OSD心跳超时的检测和Monitor的上报：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token class-name">OSD</span><span class="token double-colon punctuation">::</span><span class="token function">tick_without_osd_lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
  <span class="token comment">// ...</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_active</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">is_waiting_for_healthy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">&#123;</span>
      std<span class="token double-colon punctuation">::</span>lock_guard l<span class="token punctuation">&#123;</span>heartbeat_lock<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
      <span class="token comment">// 检测心跳超时</span>
      <span class="token function">heartbeat_check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    map_lock<span class="token punctuation">.</span><span class="token function">lock_shared</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>lock_guard <span class="token function">l</span><span class="token punctuation">(</span>mon_report_lock<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// mon report?</span>
    <span class="token comment">// 根据情况上报Monitor，最长不超过osd_mon_report_interval</span>
    utime_t now <span class="token operator">=</span> <span class="token function">ceph_clock_now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>service<span class="token punctuation">.</span><span class="token function">need_fullness_update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span>
	now <span class="token operator">-</span> last_mon_report <span class="token operator">></span> cct<span class="token operator">-></span>_conf<span class="token operator">-></span>osd_mon_report_interval<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      last_mon_report <span class="token operator">=</span> now<span class="token punctuation">;</span>
      <span class="token function">send_full_update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 上报失败的OSD</span>
      <span class="token function">send_failures</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">// 等待下次tick</span>
  tick_timer_without_osd_lock<span class="token punctuation">.</span><span class="token function">add_event_after</span><span class="token punctuation">(</span><span class="token function">get_tick_interval</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
					      <span class="token keyword">new</span> <span class="token function">C_Tick_WithoutOSDLock</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>再看看<code>OSD::send_failures()</code>:</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token class-name">OSD</span><span class="token double-colon punctuation">::</span><span class="token function">send_failures</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
  <span class="token comment">// ...</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>failure_queue<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">int</span> osd <span class="token operator">=</span> failure_queue<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span>first<span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>failure_pending<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>osd<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          <span class="token keyword">int</span> failed_for <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">(</span>now <span class="token operator">-</span> failure_queue<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token comment">// 给Monitor发个MOSDFailure消息，带上失效OSD的各种信息</span>
          monc<span class="token operator">-></span><span class="token function">send_mon_message</span><span class="token punctuation">(</span>
              <span class="token keyword">new</span> <span class="token function">MOSDFailure</span><span class="token punctuation">(</span>
                  monc<span class="token operator">-></span><span class="token function">get_fsid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                  osd<span class="token punctuation">,</span>
                  osdmap<span class="token operator">-></span><span class="token function">get_addrs</span><span class="token punctuation">(</span>osd<span class="token punctuation">)</span><span class="token punctuation">,</span>
                  failed_for<span class="token punctuation">,</span>
                  osdmap<span class="token operator">-></span><span class="token function">get_epoch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          failure_pending<span class="token punctuation">[</span>osd<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">make_pair</span><span class="token punctuation">(</span>failure_queue<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span>second<span class="token punctuation">,</span>
                                            osdmap<span class="token operator">-></span><span class="token function">get_addrs</span><span class="token punctuation">(</span>osd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      failure_queue<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>osd<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>到此，OSD针对心跳的部分就基本结束了。剩下来就要看Monitor收到MOSDFailure消息之后怎么处理了。</p>
]]></content>
      <categories>
        <category>Ceph</category>
      </categories>
      <tags>
        <tag>Ceph</tag>
        <tag>源码分析</tag>
        <tag>OSD心跳</tag>
      </tags>
  </entry>
  <entry>
    <title>Ceph中一些PG相关的状态说明和基本概念说明</title>
    <url>/2018/07/06/ceph-pg-states-concepts/</url>
    <content><![CDATA[<p>最近公司有个Ceph集群出了点问题，于是也参与了修复的过程，过程中最让人头疼的就是一堆不明所以的状态了，所以看了看文档，也找了一些参考，<br>整理了一下Ceph PG的一些状态以及相关的概念说明，做了一个中英文的对照版本：</p>
<h2 id="Placement-Group-States（PG状态）"><a href="#Placement-Group-States（PG状态）" class="headerlink" title="Placement Group States（PG状态）"></a>Placement Group States（PG状态）</h2><p>当检查一个集群的状态时（执行<code>ceph -w</code>或者<code>ceph -s</code>），Ceph会汇报当前PG的状态，每个PG会有一个或多个状态，最优的PG状态是<code>active + clean</code>。<br>下面是所有PG状态的具体解释：</p>
<h4 id="creating"><a href="#creating" class="headerlink" title="creating"></a><em>creating</em></h4><pre><code>Ceph is still creating the placement group.
Ceph 仍在创建PG。
</code></pre>
<h4 id="activating"><a href="#activating" class="headerlink" title="activating"></a><em>activating</em></h4><pre><code>The placement group is peered but not yet active.
PG已经互联，但是还没有active。
</code></pre>
<h4 id="active"><a href="#active" class="headerlink" title="active"></a><em>active</em></h4><pre><code>Ceph will process requests to the placement group.
Ceph 可处理到此PG的请求。
</code></pre>
<h4 id="clean"><a href="#clean" class="headerlink" title="clean"></a><em>clean</em></h4><pre><code>Ceph replicated all objects in the placement group the correct
number of times.
PG内所有的对象都被正确的复制了对应的份数。
</code></pre>
<h4 id="down"><a href="#down" class="headerlink" title="down"></a><em>down</em></h4><pre><code>A replica with necessary data is down, so the placement group is
offline.
一个包含必备数据的副本离线，所以PG也离线了。
</code></pre>
<h4 id="scrubbing"><a href="#scrubbing" class="headerlink" title="scrubbing"></a><em>scrubbing</em></h4><pre><code>Ceph is checking the placement group metadata for inconsistencies.
Ceph 正在检查PG metadata的一致性。
</code></pre>
<h4 id="deep"><a href="#deep" class="headerlink" title="deep"></a><em>deep</em></h4><pre><code>Ceph is checking the placement group data against stored checksums.
Ceph 正在检查PG数据和checksums的一致性。
</code></pre>
<h4 id="degraded"><a href="#degraded" class="headerlink" title="degraded"></a><em>degraded</em></h4><pre><code>Ceph has not replicated some objects in the placement group the
correct number of times yet.
PG中的一些对象还没有被复制到规定的份数。
</code></pre>
<h4 id="inconsistent"><a href="#inconsistent" class="headerlink" title="inconsistent"></a><em>inconsistent</em></h4><pre><code>Ceph detects inconsistencies in the one or more replicas of an
object in the placement group (e.g. objects are the wrong size,
objects are missing from one replica *after* recovery finished,
etc.).
Ceph检测到PG中对象的一份或多份数据不一致（比如对象大学不一直，或者恢复成功后对象依然没有等）
</code></pre>
<h4 id="peering"><a href="#peering" class="headerlink" title="peering"></a><em>peering</em></h4><pre><code>The placement group is undergoing the peering process
PG正在互联过程中。
</code></pre>
<span id="more"></span>

<h4 id="repair"><a href="#repair" class="headerlink" title="repair"></a><em>repair</em></h4><pre><code>Ceph is checking the placement group and repairing any
inconsistencies it finds (if possible).
Ceph正在检查PG并且修复所有发现的不一致情况（如果有的话）。
</code></pre>
<h4 id="recovering"><a href="#recovering" class="headerlink" title="recovering"></a><em>recovering</em></h4><pre><code>Ceph is migrating/synchronizing objects and their replicas.
Ceph正在迁移/同步对象和其副本。
</code></pre>
<h4 id="forced-recovery"><a href="#forced-recovery" class="headerlink" title="forced_recovery"></a><em>forced_recovery</em></h4><pre><code>High recovery priority of that PG is enforced by user.
用户指定的PG高优先级恢复
</code></pre>
<h4 id="recovery-wait"><a href="#recovery-wait" class="headerlink" title="recovery_wait"></a><em>recovery_wait</em></h4><pre><code>The placement group is waiting in line to start recover.
PG正在等待恢复被调度执行。
</code></pre>
<h4 id="recovery-toofull"><a href="#recovery-toofull" class="headerlink" title="recovery_toofull"></a><em>recovery_toofull</em></h4><pre><code>A recovery operation is waiting because the destination OSD is over
its full ratio.
恢复操作因为目标OSD容量超过指标而挂起。
</code></pre>
<h4 id="recovery-unfound"><a href="#recovery-unfound" class="headerlink" title="recovery_unfound"></a><em>recovery_unfound</em></h4><pre><code>Recovery stopped due to unfound objects.
恢复因为没有找到对应对象而停止。
</code></pre>
<h4 id="backfilling"><a href="#backfilling" class="headerlink" title="backfilling"></a><em>backfilling</em></h4><pre><code>Ceph is scanning and synchronizing the entire contents of a
placement group instead of inferring what contents need to be
synchronized from the logs of recent operations. Backfill is a
special case of recovery.
Ceph正常扫描并同步整个PG的数据，而不是从最近的操作日志中推断需要同步的数据，Backfill（回填）是恢复的一个特殊状态。
</code></pre>
<h4 id="forced-backfill"><a href="#forced-backfill" class="headerlink" title="forced_backfill"></a><em>forced_backfill</em></h4><pre><code>High backfill priority of that PG is enforced by user.
用户指定的高优先级backfill。
</code></pre>
<h4 id="backfill-wait"><a href="#backfill-wait" class="headerlink" title="backfill_wait"></a><em>backfill_wait</em></h4><pre><code>The placement group is waiting in line to start backfill.
PG正在等待backfill被调度执行。
</code></pre>
<h4 id="backfill-toofull"><a href="#backfill-toofull" class="headerlink" title="backfill_toofull"></a><em>backfill_toofull</em></h4><pre><code>A backfill operation is waiting because the destination OSD is over
its full ratio.
backfill操作因为目标OSD容量超过指标而挂起。
</code></pre>
<h4 id="backfill-unfound"><a href="#backfill-unfound" class="headerlink" title="backfill_unfound"></a><em>backfill_unfound</em></h4><pre><code>Backfill stopped due to unfound objects.
Backfill因为没有找到对应对象而停止。
</code></pre>
<h4 id="incomplete"><a href="#incomplete" class="headerlink" title="incomplete"></a><em>incomplete</em></h4><pre><code>Ceph detects that a placement group is missing information about
writes that may have occurred, or does not have any healthy copies.
If you see this state, try to start any failed OSDs that may contain
the needed information. In the case of an erasure coded pool
temporarily reducing min\_size may allow recovery.
Ceph 探测到某一PG可能丢失了写入信息，或者没有健康的副本。如果你看到了这个状态，尝试启动有可能包含所需信息的失败OSD，
如果是erasure coded pool的话，临时调整一下`min_size`也可能完成恢复。
</code></pre>
<h4 id="stale"><a href="#stale" class="headerlink" title="stale"></a><em>stale</em></h4><pre><code>The placement group is in an unknown state - the monitors have not
received an update for it since the placement group mapping changed.
PG状态未知，从PG mapping更新后Monitor一直没有收到更新。
</code></pre>
<h4 id="remapped"><a href="#remapped" class="headerlink" title="remapped"></a><em>remapped</em></h4><pre><code>The placement group is temporarily mapped to a different set of OSDs
from what CRUSH specified.
PG被临时分配到了和CRUSH所指定的不同的OSD上。
</code></pre>
<h4 id="undersized"><a href="#undersized" class="headerlink" title="undersized"></a><em>undersized</em></h4><pre><code>The placement group has fewer copies than the configured pool
replication level.
该PG的副本数量小于存储池所配置的副本数量。
</code></pre>
<h4 id="peered"><a href="#peered" class="headerlink" title="peered"></a><em>peered</em></h4><pre><code>The placement group has peered, but cannot serve client IO due to
not having enough copies to reach the pool\&#39;s configured min\_size
parameter. Recovery may occur in this state, so the pg may heal up
to min\_size eventually.
PG已互联，但是不能向客户端提供服务，因为其副本数没达到本存储池的配置值（ min_size 参数）。
在此状态下恢复会进行，所以此PG最终能达到 min_size 。
</code></pre>
<h4 id="snaptrim"><a href="#snaptrim" class="headerlink" title="snaptrim"></a><em>snaptrim</em></h4><pre><code>Trimming snaps.
正在对快照做Trim操作。
</code></pre>
<h4 id="snaptrim-Wait"><a href="#snaptrim-Wait" class="headerlink" title="snaptrim_Wait"></a><em>snaptrim_Wait</em></h4><pre><code>Queued to trim snaps.
Trim操作等待被调度执行
</code></pre>
<h4 id="snaptrim-Error"><a href="#snaptrim-Error" class="headerlink" title="snaptrim_Error"></a><em>snaptrim_Error</em></h4><pre><code>Error stopped trimming snaps.
Trim操作因为错误而停止
</code></pre>
<h2 id="Placement-Group-Concepts（PG相关概念）"><a href="#Placement-Group-Concepts（PG相关概念）" class="headerlink" title="Placement Group Concepts（PG相关概念）"></a>Placement Group Concepts（PG相关概念）</h2><p>When you execute commands like <code>ceph -w</code>, <code>ceph osd dump</code>, and other<br>commands related to placement groups, Ceph may return values using some<br>of the following terms:<br>当执行诸如<code>ceph -w</code>、<code>ceph osd dump</code>及其他和归置组相关的命令时， Ceph 会返回下列术语：</p>
<h4 id="Peering-建立互联"><a href="#Peering-建立互联" class="headerlink" title="Peering (建立互联)"></a><em>Peering</em> (<em>建立互联</em>)</h4><pre><code>The process of bringing all of the OSDs that store a Placement Group
(PG) into agreement about the state of all of the objects (and their
metadata) in that PG. Note that agreeing on the state does not mean
that they all have the latest contents.
表示所有存储PG数据的OSD达成对PG中所有对象（和元数据）共识的过程。
需要注意的是达成共识并不代表他们都拥有最新的数据。
</code></pre>
<h4 id="Acting-Set-在任集合"><a href="#Acting-Set-在任集合" class="headerlink" title="Acting Set (在任集合)"></a><em>Acting Set</em> (<em>在任集合</em>)</h4><pre><code>The ordered list of OSDs who are (or were as of some epoch)
responsible for a particular placement group.
一个OSD的有序集合，他们为一个PG（或者一些版本）负责。
</code></pre>
<h4 id="Up-Set-当选集合"><a href="#Up-Set-当选集合" class="headerlink" title="Up Set (当选集合)"></a><em>Up Set</em> (<em>当选集合</em>)</h4><pre><code>The ordered list of OSDs responsible for a particular placement
group for a particular epoch according to CRUSH. Normally this is
the same as the *Acting Set*, except when the *Acting Set* has been
explicitly overridden via `pg_temp` in the OSD Map.
一列有序OSD ，它们依据 CRUSH 算法为某一PG的特定元版本负责。
它通常和*Acting Set*相同，除非*Acting Set*被OSD map中的`pg_temp`显式地覆盖了。
</code></pre>
<h4 id="Current-Interval-or-Past-Interval"><a href="#Current-Interval-or-Past-Interval" class="headerlink" title="Current Interval or Past Interval"></a><em>Current Interval</em> or <em>Past Interval</em></h4><pre><code>A sequence of OSD map epochs during which the *Acting Set* and *Up
Set* for particular placement group do not change.
某一PG所在*Acting Set*和*Up Set*未更改时的一系列OSD map元版本。
</code></pre>
<h4 id="Primary-主-OSD"><a href="#Primary-主-OSD" class="headerlink" title="Primary (主 OSD)"></a><em>Primary</em> (<em>主 OSD</em>)</h4><pre><code>The member (and by convention first) of the *Acting Set*, that is
responsible for coordination peering, and is the only OSD that will
accept client-initiated writes to objects in a placement group.
*Acting Set*的成员（按惯例为第一个），它负责协调互联，并且是PG内惟一接受客户端初始写入的OSD。
</code></pre>
<h4 id="Replica-副本-OSD"><a href="#Replica-副本-OSD" class="headerlink" title="Replica (副本 OSD)"></a><em>Replica</em> (<em>副本 OSD</em>)</h4><pre><code>A non-primary OSD in the *Acting Set* for a placement group (and who
has been recognized as such and *activated* by the primary).
PG的*Acting Set*内不是主OSD的其它OSD ，它们被同等对待、由主OSD激活。
</code></pre>
<h4 id="Stray-彷徨-OSD"><a href="#Stray-彷徨-OSD" class="headerlink" title="Stray (彷徨 OSD)"></a><em>Stray</em> (<em>彷徨 OSD</em>)</h4><pre><code>An OSD that is not a member of the current *Acting Set*, but has not
yet been told that it can delete its copies of a particular
placement group.
不在PG的当前*Acting Set*中，但是还没有被告知要删除其副本的OSD。
</code></pre>
<h4 id="Recovery-恢复"><a href="#Recovery-恢复" class="headerlink" title="Recovery (恢复)"></a><em>Recovery</em> (<em>恢复</em>)</h4><pre><code>Ensuring that copies of all of the objects in a placement group are
on all of the OSDs in the *Acting Set*. Once *Peering* has been
performed, the *Primary* can start accepting write operations, and
*Recovery* can proceed in the background.
确保*Acting Set*内、PG中的所有对象的副本都存在于所有OSD上。
一旦互联完成，主OSD就以接受写操作，且恢复进程可在后台进行。
</code></pre>
<h4 id="PG-Info-PG-信息"><a href="#PG-Info-PG-信息" class="headerlink" title="PG Info (PG 信息)"></a><em>PG Info</em> (<em>PG 信息</em>)</h4><pre><code>Basic metadata about the placement group\&#39;s creation epoch, the
version for the most recent write to the placement group, *last
epoch started*, *last epoch clean*, and the beginning of the
*current interval*. Any inter-OSD communication about placement
groups includes the *PG Info*, such that any OSD that knows a
placement group exists (or once existed) also has a lower bound on
*last epoch clean* or *last epoch started*.
基本元数据，关于PG创建元版本、PG的最新写版本、最近的开始元版本（last epoch started）、
最近的干净元版本（last epoch clean）、和当前间隔（current interval）的起点。 
OSD间关于PG的任何通讯都包含PG Info，这样任何知道PG存在（或曾经存在）的OSD也必定有last epoch clean或last epoch started的下限。
</code></pre>
<h5 id="PG-Log-PG-日志"><a href="#PG-Log-PG-日志" class="headerlink" title="PG Log (PG 日志)"></a><em>PG Log</em> (<em>PG 日志</em>)</h5><pre><code>A list of recent updates made to objects in a placement group. Note
that these logs can be truncated after all OSDs in the *Acting Set*
have acknowledged up to a certain point.
PG内对象的一系列最近更新。需要注意的是这些日志在*Acting Set*内的所有OSD确认更新到某点后可以删除。
</code></pre>
<h4 id="Missing-Set-缺失集合"><a href="#Missing-Set-缺失集合" class="headerlink" title="Missing Set (缺失集合)"></a><em>Missing Set</em> (<em>缺失集合</em>)</h4><pre><code>Each OSD notes update log entries and if they imply updates to the
contents of an object, adds that object to a list of needed updates.
This list is called the *Missing Set* for that `&lt;OSD,PG&gt;`.
每个OSD都会记录更新日志，而且如果它们包含对象内容的更新，
会把那个对象加入一个待更新列表，这个列表叫做那个`&lt;OSD,PG&gt;`的*Missing Set*。
</code></pre>
<h4 id="Authoritative-History-权威历史"><a href="#Authoritative-History-权威历史" class="headerlink" title="Authoritative History (权威历史)"></a><em>Authoritative History</em> (<em>权威历史</em>)</h4><pre><code>A complete, and fully ordered set of operations that, if performed,
would bring an OSD\&#39;s copy of a placement group up to date.
一个完整、完全有序的操作集合，如果再次执行，可把一个OSD上的PG副本还原到最新。
</code></pre>
<h4 id="Epoch-元版本"><a href="#Epoch-元版本" class="headerlink" title="Epoch (元版本)"></a><em>Epoch</em> (<em>元版本</em>)</h4><pre><code>A (monotonically increasing) OSD map version number
一个（单调递增的）OSD map版本号。
</code></pre>
<h4 id="Last-Epoch-Start-最新起始元版本"><a href="#Last-Epoch-Start-最新起始元版本" class="headerlink" title="Last Epoch Start (最新起始元版本)"></a><em>Last Epoch Start</em> (<em>最新起始元版本</em>)</h4><pre><code>The last epoch at which all nodes in the *Acting Set* for a
particular placement group agreed on an *Authoritative History*. At
this point, *Peering* is deemed to have been successful.
 一最新元版本，在这点上，PG所对应*Acting Set*内的所有节点都对权威历史达成了一致、
 并且互联被认为成功了。
</code></pre>
<h4 id="up-thru-领导拍板"><a href="#up-thru-领导拍板" class="headerlink" title="up_thru (领导拍板)"></a><em>up_thru</em> (<em>领导拍板</em>)</h4><pre><code>Before a *Primary* can successfully complete the *Peering* process,
it must inform a monitor that is alive through the current OSD map
*Epoch* by having the monitor set its *up\_thru* in the osd map.
This helps *Peering* ignore previous *Acting Sets* for which
*Peering* never completed after certain sequences of failures, such
as the second interval below:

-   *acting set* = \[A,B\]
-   *acting set* = \[A\]
-   *acting set* = \[\] very shortly after (e.g., simultaneous
    failure, but staggered detection)
-   *acting set* = \[B\] (B restarts, A does not)
主OSD要想成功完成互联，它必须通过当前OSD map元版本通知一个Monitor，让此Monitor在OSD map中设置其up_thru。
这会使互联进程忽略之前的*Acting Set*，因为它经历特定顺序的失败后一直不能互联，比如像下面的第二周期：

acting set = [A,B]
acting set = [A]
acting set = [] 之后很短时间（例如同时失败、但探测是交叉的）
acting set = [B] （ B 重启了、但 A 没有）
</code></pre>
<h4 id="Last-Epoch-Clean-最新干净元版本"><a href="#Last-Epoch-Clean-最新干净元版本" class="headerlink" title="Last Epoch Clean (最新干净元版本)"></a><em>Last Epoch Clean</em> (<em>最新干净元版本</em>)</h4><pre><code>The last *Epoch* at which all nodes in the *Acting set* for a
particular placement group were completely up to date (both
placement group logs and object contents). At this point, *recovery*
is deemed to have been completed.
最近的Epoch，这时某一特定PG所在*Acting Set*内的所有节点都全部更新了（包括PG日志和对象内容）。
在这点上，恢复被认为已完成。
</code></pre>
<p>参考：</p>
<ol>
<li><a href="https://github.com/ceph/ceph/blob/v14.0.0/doc/rados/operations/pg-states.rst">https://github.com/ceph/ceph/blob/v14.0.0/doc/rados/operations/pg-states.rst</a></li>
<li><a href="http://docs.ceph.org.cn/rados/operations/pg-states/">http://docs.ceph.org.cn/rados/operations/pg-states/</a></li>
<li><a href="https://github.com/ceph/ceph/blob/v14.0.0/doc/rados/operations/pg-concepts.rst">https://github.com/ceph/ceph/blob/v14.0.0/doc/rados/operations/pg-concepts.rst</a></li>
<li><a href="http://docs.ceph.org.cn/rados/operations/pg-concepts/">http://docs.ceph.org.cn/rados/operations/pg-concepts/</a></li>
</ol>
]]></content>
      <categories>
        <category>Ceph</category>
      </categories>
      <tags>
        <tag>Ceph</tag>
        <tag>PG States</tag>
        <tag>PG Concepts</tag>
      </tags>
  </entry>
  <entry>
    <title>Cgroups Memory子系统数据不正确的问题</title>
    <url>/2015/03/25/cgroups-memory-fuzzy-usage/</url>
    <content><![CDATA[<p>工作中，需要对单个MySQL进程进行限制，并且对MySQL进程消耗的IO，CPU Time，Memory等进行统计，首先想到的就是使用Cgroups对进程进行限制，同时，Cgroups提供的一些接口，也可以非常方便地读取到进程消耗的IO，CPU Time， Memory等数据。</p>
<p>但是在实现自动化之后（使用了自己编写的一套管理程序来对MySQL进程进行管理），却发现了一个非常奇怪的问题：从Cgroups中读取的进程Memory消耗完全是一个不正确的值，使用ps命令查看到的MySQL进程内存大概是2G左右，可是通过读取memory子系统下memory.usage_in_bytes接口获得的数据大概只有几十KB，基本上是一个完全不相干的数值，这个就非常的奇怪了，虽然在<a href="https://www.kernel.org/doc/Documentation/cgroups/memory.txt">官方的文档</a>中</p>
<span id="more"></span>
<blockquote>
<p>For efficiency, as other kernel components, memory cgroup uses some optimization<br>to avoid unnecessary cacheline false sharing. usage_in_bytes is affected by the<br>method and doesn’t show ‘exact’ value of memory (and swap) usage, it’s a fuzz<br>value for efficient access. (Of course, when necessary, it’s synchronized.)<br>If you want to know more exact memory usage, you should use RSS+CACHE(+SWAP)<br>value in memory.stat(see 5.2).</p>
</blockquote>
<p>也说明了这个数值不一定精确，而且是异步更新的，但是无论如何，差距如此之大肯定是有问题的。并且，在 memory.stat接口中获取的数据，也是不正确的数值。</p>
<p>这个问题还是很困扰的，如果无法找到原因，那这种统计方法就失效了，是个很大的问题。</p>
<p>于是开始考虑是不是使用方法的问题，由于我们一开始的逻辑，是等MySQL启动完成之后，读取MySQL的Pid文件获得进程的PID，再将这个PID填入到memory子系统的tasks接口中，很自然的，就会想到是不是只有在填入PID之后，Cgroups才会开始记录程序消耗的内存数据。</p>
<p>于是就做个实验验证一下：测试的代码如下。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">char</span><span class="token operator">*</span> a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">100</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"100M\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">char</span><span class="token operator">*</span> b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">100</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"200M\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">char</span><span class="token operator">*</span> c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">100</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"300M\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">char</span><span class="token operator">*</span> d <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">100</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"400M\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token function">free</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"300M\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">free</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"200M\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">free</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"100M\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">free</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"0M\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>程序比较简单，一步一步申请100M内存，直到400M，再一步步释放申请的内存。<br>编译运行，并将进程的PID加入到Cgroups中，如果Cgroups会统计程序开始申请的内存的话，那么memory.usage_in_bytes的数据应该会从100M递增到400M，然后再递减到0。</p>
<p>但是事实上，因为程序刚开始就会申请100M的内存，所以memory.usage_in_bytes的数据会从0M递增到300M，再递减到0。因为刚开始申请的那100M内存不会被Cgroups所记录。</p>
<p>最终，是通过实验的方式证明了Cgroups的一个猜想，下面还是要对Cgroups的代码进行一下分析，从实现上来证实这个假设。</p>
<p>那么怎么解决这个问题呢？幸好Cgroups会自动记录父进程的子进程的资源申请和释放的情况，所以这件事就好办了，利用一个shell脚本启动MySQL，并在shell脚本的一开始就获取脚本执行的PID，并把PID填入Cgroups的接口中，这样，由shell启动的MySQL会自动的在Cgroups的管理之下，那么对于资源的使用就是准确的数值了。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Cgroups</tag>
        <tag>Memory</tag>
        <tag>memory.usage_in_bytes</tag>
        <tag>数据不准确</tag>
      </tags>
  </entry>
  <entry>
    <title>在CentOS下配置DDNS并实现动态更新</title>
    <url>/2014/11/23/centos-ddns/</url>
    <content><![CDATA[<p>由于项目需要，最近在CentOS 6系统中配置了一个DDNS(Dynamic DNS)服务器,<br>从而实现了动态对域名的添加删除等操作，记录一下步骤，备忘。</p>
<span id="more"></span>

<h3 id="第一步-安装BIND"><a href="#第一步-安装BIND" class="headerlink" title="第一步 安装BIND"></a>第一步 安装BIND</h3><p>BIND全称是Berkeley Internet Name Daemon，是现今互联网上最常用的DNS服务<br>器软件，现在由互联网系统协会(Internet Systems Consortium)负责开发与维护。</p>
<p>在CentOS上安装BIND非常的简单，只需要使用root权限执行：</p>
<pre><code>yum install bind bind-utils
</code></pre>
<p>就可以安装好BIND以及DNS相关的一些工具，包括dig以及nsupdate等，需要注意的是，在CentOS上，BIND实际的服务名是named，因此需要使用：</p>
<pre><code>service named start|stop|restart
</code></pre>
<p>来对BIND进行操作。</p>
<h3 id="第二步-配置静态DNS"><a href="#第二步-配置静态DNS" class="headerlink" title="第二步 配置静态DNS"></a>第二步 配置静态DNS</h3><p>在配置动态DNS之前，首先配置一个静态的DNS，来测试一下BIND能否正常工作。<br>打开&#x2F;etc&#x2F;named.conf文件：</p>
<pre><code>vim /etc/named.conf
</code></pre>
<p>在文件的末尾，加上：</p>
<blockquote><p>zone “mytest.com” IN {<br>    type master;<br>    file “mytest.com”;<br>    allow-update { none; };<br>};</p>
</blockquote>
<p>这里，声明了一个新的zone：”mytest.com”，并且指明了zone文件为”mytest.com”，根据文件上方指定的目录，默认的zone文件存放在&#x2F;var&#x2F;named目录下。<br>因此，我们需要在这个目录下，新建一个”mytest.com”文件，用来存放zone描述。</p>
<pre><code>vim /var/named/mytest.com
</code></pre>
<p>在文件中输入以下内容：</p>
<blockquote><p>$TTL 1D  ;声明了TTL时间为1天<br>@       IN SOA  @ mytest.com. (<br>                            0       ; serial<br>                            1D      ; refresh<br>                            1H      ; retry<br>                            1W      ; expire<br>                            3H )    ; minimum<br>$ORIGIN mytest.com.  ;表示接下来的配置都已mytest.com.为根<br>                     ;如果不写这一行，就需要写全整个域名<br>                     ;如test1.mytest.com.而不是下面的test1<br>        NS      @           ;NS记录，指向根<br>@       A       127.0.0.1   ;根，指向127.0.0.1<br>test1   A       1.1.1.1     ;A记录test1，指向1.1.1.1<br>test2   A       2.2.2.2     ;A记录test2，指向2.2.2.2</p>
</blockquote>
<p>保存文件，需要注意的是，named运行时是以named组的named用户来执行的，因此必须给named这个用户访问&#x2F;var&#x2F;named&#x2F;mytest.com这个文件的权限，我们直接把这个文件的所有者设置为named。</p>
<pre><code>chown named:named /var/named/mytest.com
</code></pre>
<p>好了，设置完成，启动named。</p>
<pre><code>service named start
</code></pre>
<p>启动完成之后，来测试一下：</p>
<pre><code>dig test1.mytest.com @127.0.0.1
</code></pre>
<p>看一下结果：</p>
<pre><code>...
;; ANSWER SECTION:
test1.mytest.com.       86400   IN      A       1.1.1.1
...
</code></pre>
<p>指向了1.1.1.1，说明静态DNS配置成功。</p>
<h3 id="第三步-配置动态DNS"><a href="#第三步-配置动态DNS" class="headerlink" title="第三步 配置动态DNS"></a>第三步 配置动态DNS</h3><p>首先，我们需要生成一个Key，用于更新记录的授权。这里使用了HMAC-MD5算法来生成Key。运行：</p>
<pre><code>dnssec-keygen -r /dev/urandom -a HMAC-MD5 -b 512 -n HOST mytest.com
</code></pre>
<p>会得到2个文件，分别以.key和.private结尾：</p>
<pre><code>Kmytest.com.+157+54894.key  Kmytest.com.+157+54894.private
</code></pre>
<p>我们需要的是.private Key的内容：</p>
<blockquote><p>Private-key-format: v1.3<br>Algorithm: 157 (HMAC_MD5)<br>Key: Tf2lJsSSrSMcu2RvfnLWqwno9drVpQFLk8XkR7BIYWuQF17q&#x2F;miYa6HfDhDaUCH2x4Bc3ea&#x2F;Q6Bntod9&#x2F;sLGdg&#x3D;&#x3D;<br>Bits: AAA&#x3D;<br>Created: 20141206031434<br>Publish: 20141206031434<br>Activate: 20141206031434</p>
</blockquote>;
<p>在&#x2F;etc&#x2F;named.conf中，zone “mytest.com”之前加上：</p>
<blockquote><p>key “mytestcom” {<br>    algorithm hmac-md5;<br>    secret “Tf2lJsSSrSMcu2RvfnLWqwno9drVpQFLk8XkR7BIYWuQF17q&#x2F;miYa6HfDhDaUCH2x4Bc3ea&#x2F;Q6Bntod9&#x2F;sLGdg&#x3D;&#x3D;”;<br>};</p>
</blockquote>

<p>其中key的名字随便起，secret就是刚刚生成的Key那个字段。<br>然后继续修改文件末尾zone的定义：</p>
<blockquote><p>zone “mytest.com” IN {<br>    type master;<br>    file “mytest.com”;<br>    allow-update { key mytestcom; };</p>
</blockquote>

<p>允许mytestcom的key对zone进行更新。<br>同时，由于动态更新需要在&#x2F;var&#x2F;named写入jnl文件。所以需要将&#x2F;var&#x2F;named的所有者更改为named：</p>
<pre><code>chown named:named /var/named
</code></pre>
<p>同时，selinux也有可能限制named写入文件，需要关闭：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># setsebool named_write_master_zones true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>设置完成后。重启named:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># service named restart</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="第四步-动态更新DNS"><a href="#第四步-动态更新DNS" class="headerlink" title="第四步 动态更新DNS"></a>第四步 动态更新DNS</h3><p>使用nsupdate命令对DNS进行更新：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># nsupdate</span>
<span class="token operator">></span> server <span class="token number">127.0</span>.0.1 <span class="token number">53</span>
<span class="token operator">></span> zone mytest.com
<span class="token operator">></span> key mytestcom Tf2lJsSSrSMcu2RvfnLWqwno9drVpQFLk8XkR7BIYWuQF17q/miYa6HfDhDaUCH2x4Bc3ea/Q6Bntod9/sLGdg<span class="token operator">==</span>
<span class="token operator">></span> update <span class="token function">add</span> test3.mytest.com <span class="token number">600</span> A <span class="token number">3.3</span>.3.3
<span class="token operator">></span> send<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>完成后使用dig测试一下：</p>
<pre><code>dig test3.mytest.com @127.0.0.1
</code></pre>
<p>结果：</p>
<pre><code>;; ANSWER SECTION:
test3.mytest.com.       600     IN      A       3.3.3.3
</code></pre>
<p>成功！</p>
]]></content>
      <categories>
        <category>Linux部署</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>BIND</tag>
        <tag>DDNS</tag>
      </tags>
  </entry>
  <entry>
    <title>利用Cgroups的pids子系统限制进程(线程)数量</title>
    <url>/2017/04/25/cgroups-pids-controller/</url>
    <content><![CDATA[<p>在Linux Kernel 4.3中，引入了一个新的cgroups子系统<code>pids</code>，通过这个子系统，可以实现对某个控制组中进程和线程的总数进行限制。<br>使用前，首先需要挂载该子系统（对于很多的发行版，默认是会挂载的）：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@test ~<span class="token punctuation">]</span><span class="token comment"># mkdir -p /sys/fs/cgroup/pids</span>
<span class="token punctuation">[</span>root@test ~<span class="token punctuation">]</span><span class="token comment"># mount -t cgroup -o pids none /sys/fs/cgroup/pids</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>首先创建一个新的控制组<code>test_max_proc</code>:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@test ~<span class="token punctuation">]</span><span class="token comment"># mkdir /sys/fs/cgroup/pids/test_max_proc</span>
<span class="token punctuation">[</span>root@test ~<span class="token punctuation">]</span><span class="token comment"># ls -l /sys/fs/cgroup/pids/test_max_proc/</span>
total <span class="token number">0</span>
-rw-r--r-- <span class="token number">1</span> root root <span class="token number">0</span> Apr <span class="token number">26</span> 09:11 cgroup.clone_children
-rw-r--r-- <span class="token number">1</span> root root <span class="token number">0</span> Apr <span class="token number">26</span> 09:11 cgroup.procs
-rw-r--r-- <span class="token number">1</span> root root <span class="token number">0</span> Apr <span class="token number">26</span> 09:11 notify_on_release
-r--r--r-- <span class="token number">1</span> root root <span class="token number">0</span> Apr <span class="token number">26</span> 09:11 pids.current
-r--r--r-- <span class="token number">1</span> root root <span class="token number">0</span> Apr <span class="token number">26</span> 09:11 pids.events
-rw-r--r-- <span class="token number">1</span> root root <span class="token number">0</span> Apr <span class="token number">26</span> 09:11 pids.max
-rw-r--r-- <span class="token number">1</span> root root <span class="token number">0</span> Apr <span class="token number">26</span> 09:11 tasks<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>其中，<code>pids.max</code>控制该组中最多可以拥有的进程数，其中线程也包含在其中。<code>pids.current</code>存储了当前控制组的进程(线程)总数。<code>cgroup.procs</code>是需要限制的进程pid。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@test ~<span class="token punctuation">]</span><span class="token comment"># echo 2 > /sys/fs/cgroup/pids/test_max_proc/pids.max</span>
<span class="token punctuation">[</span>root@test ~<span class="token punctuation">]</span><span class="token comment"># echo $$ > /sys/fs/cgroup/pids/test_max_proc/cgroup.procs</span>
<span class="token punctuation">[</span>root@test ~<span class="token punctuation">]</span><span class="token comment"># cat /sys/fs/cgroup/pids/parent/pids.current</span>
<span class="token number">2</span>
<span class="token punctuation">[</span>root@test ~<span class="token punctuation">]</span><span class="token comment"># /bin/echo "Here's some processes for you." | cat</span>
bash: fork: retry: Resource temporarily unavailable
bash: fork: retry: Resource temporarily unavailable
bash: fork: retry: Resource temporarily unavailable<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看到限制生效了。由于Linux的线程也是类似进程的实现，因此，当程序有多个线程时，进程和线程的总数也不能超过设定的值</p>
<p>参考：</p>
<ol>
<li><a href="http://man7.org/linux/man-pages/man7/cgroups.7.html">http://man7.org/linux/man-pages/man7/cgroups.7.html</a></li>
<li><a href="https://www.kernel.org/doc/Documentation/cgroup-v1/pids.txt">https://www.kernel.org/doc/Documentation/cgroup-v1/pids.txt</a></li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>cgroups</tag>
        <tag>pids</tag>
        <tag>进程数量限制</tag>
      </tags>
  </entry>
  <entry>
    <title>CNI Plugin Bridge代码解析</title>
    <url>/2018/01/23/cni-bridge-host-local/</url>
    <content><![CDATA[<p>在CNI所以默认提供的Plugin中，<code>bridge</code>应该算是最简单的插件了，针对IPAM Plugin，最简单的应该是<code>host-local</code>，这两个插件也是Kubernetes网络<code>kubenet</code>需要的两个插件。所以这里看一下这两个插件的代码。</p>
<p>所有官方维护的代码，都开源在<a href="https://github.com/containernetworking/plugins">containernetworking&#x2F;plugins</a>项目中了。</p>
<p>其中<code>bridge</code>的代码在<code>plugins/main/bridge</code>目录，最重要的是<code>cmdAdd</code>和<code>cmdDel</code>两个函数，对应CNI SPEC中的ADD和DEL两个主要操作。主要来看一下<code>cmdAdd</code>的实现，精简（删除一些错误处理）后的代码如下：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">cmdAdd</span><span class="token punctuation">(</span>args <span class="token operator">*</span>skel<span class="token punctuation">.</span>CmdArgs<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>
	n<span class="token punctuation">,</span> cniVersion<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">loadNetConf</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>StdinData<span class="token punctuation">)</span>

	<span class="token keyword">if</span> n<span class="token punctuation">.</span>IsDefaultGW <span class="token punctuation">&#123;</span>
		n<span class="token punctuation">.</span>IsGW <span class="token operator">=</span> <span class="token boolean">true</span>
	<span class="token punctuation">&#125;</span>

	br<span class="token punctuation">,</span> brInterface<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">setupBridge</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> err
	<span class="token punctuation">&#125;</span>

	netns<span class="token punctuation">,</span> err <span class="token operator">:=</span> ns<span class="token punctuation">.</span><span class="token function">GetNS</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>Netns<span class="token punctuation">)</span>
	<span class="token keyword">defer</span> netns<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	hostInterface<span class="token punctuation">,</span> containerInterface<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">setupVeth</span><span class="token punctuation">(</span>netns<span class="token punctuation">,</span> br<span class="token punctuation">,</span> args<span class="token punctuation">.</span>IfName<span class="token punctuation">,</span> n<span class="token punctuation">.</span>MTU<span class="token punctuation">,</span> n<span class="token punctuation">.</span>HairpinMode<span class="token punctuation">)</span>

	r<span class="token punctuation">,</span> err <span class="token operator">:=</span> ipam<span class="token punctuation">.</span><span class="token function">ExecAdd</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>IPAM<span class="token punctuation">.</span>Type<span class="token punctuation">,</span> args<span class="token punctuation">.</span>StdinData<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> err
	<span class="token punctuation">&#125;</span>

	result<span class="token punctuation">,</span> err <span class="token operator">:=</span> current<span class="token punctuation">.</span><span class="token function">NewResultFromResult</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>

	<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>IPs<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"IPAM plugin returned missing IP config"</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	result<span class="token punctuation">.</span>Interfaces <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>current<span class="token punctuation">.</span>Interface<span class="token punctuation">&#123;</span>brInterface<span class="token punctuation">,</span> hostInterface<span class="token punctuation">,</span> containerInterface<span class="token punctuation">&#125;</span>

	gwsV4<span class="token punctuation">,</span> gwsV6<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">calcGateways</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> n<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> err
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">if</span> err <span class="token operator">:=</span> netns<span class="token punctuation">.</span><span class="token function">Do</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span><span class="token boolean">_</span> ns<span class="token punctuation">.</span>NetNS<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>
		contVeth<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">InterfaceByName</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>IfName<span class="token punctuation">)</span>

		<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ipc <span class="token operator">:=</span> <span class="token keyword">range</span> result<span class="token punctuation">.</span>IPs <span class="token punctuation">&#123;</span>
			<span class="token keyword">if</span> ipc<span class="token punctuation">.</span>Version <span class="token operator">==</span> <span class="token string">"6"</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>n<span class="token punctuation">.</span>HairpinMode <span class="token operator">||</span> n<span class="token punctuation">.</span>PromiscMode<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
				<span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">disableIPV6DAD</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>IfName<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
					<span class="token keyword">return</span> err
				<span class="token punctuation">&#125;</span>
				<span class="token keyword">break</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>

		<span class="token keyword">if</span> err <span class="token operator">:=</span> ipam<span class="token punctuation">.</span><span class="token function">ConfigureIface</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>IfName<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">return</span> err
		<span class="token punctuation">&#125;</span>

		<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ipc <span class="token operator">:=</span> <span class="token keyword">range</span> result<span class="token punctuation">.</span>IPs <span class="token punctuation">&#123;</span>
			<span class="token keyword">if</span> ipc<span class="token punctuation">.</span>Version <span class="token operator">==</span> <span class="token string">"4"</span> <span class="token punctuation">&#123;</span>
				<span class="token boolean">_</span> <span class="token operator">=</span> arping<span class="token punctuation">.</span><span class="token function">GratuitousArpOverIface</span><span class="token punctuation">(</span>ipc<span class="token punctuation">.</span>Address<span class="token punctuation">.</span>IP<span class="token punctuation">,</span> <span class="token operator">*</span>contVeth<span class="token punctuation">)</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> err
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">if</span> n<span class="token punctuation">.</span>IsGW <span class="token punctuation">&#123;</span>
		<span class="token keyword">var</span> firstV4Addr net<span class="token punctuation">.</span>IP
		<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> gws <span class="token operator">:=</span> <span class="token keyword">range</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>gwInfo<span class="token punctuation">&#123;</span>gwsV4<span class="token punctuation">,</span> gwsV6<span class="token punctuation">&#125;</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> gw <span class="token operator">:=</span> <span class="token keyword">range</span> gws<span class="token punctuation">.</span>gws <span class="token punctuation">&#123;</span>
				<span class="token keyword">if</span> gw<span class="token punctuation">.</span>IP<span class="token punctuation">.</span><span class="token function">To4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> firstV4Addr <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
					firstV4Addr <span class="token operator">=</span> gw<span class="token punctuation">.</span>IP
				<span class="token punctuation">&#125;</span>

				err <span class="token operator">=</span> <span class="token function">ensureBridgeAddr</span><span class="token punctuation">(</span>br<span class="token punctuation">,</span> gws<span class="token punctuation">.</span>family<span class="token punctuation">,</span> <span class="token operator">&amp;</span>gw<span class="token punctuation">,</span> n<span class="token punctuation">.</span>ForceAddress<span class="token punctuation">)</span>
				<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
					<span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"failed to set bridge addr: %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
				<span class="token punctuation">&#125;</span>
			<span class="token punctuation">&#125;</span>

			<span class="token keyword">if</span> gws<span class="token punctuation">.</span>gws <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
				<span class="token keyword">if</span> err <span class="token operator">=</span> <span class="token function">enableIPForward</span><span class="token punctuation">(</span>gws<span class="token punctuation">.</span>family<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
					<span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"failed to enable forwarding: %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
				<span class="token punctuation">&#125;</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">if</span> n<span class="token punctuation">.</span>IPMasq <span class="token punctuation">&#123;</span>
		chain <span class="token operator">:=</span> utils<span class="token punctuation">.</span><span class="token function">FormatChainName</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> args<span class="token punctuation">.</span>ContainerID<span class="token punctuation">)</span>
		comment <span class="token operator">:=</span> utils<span class="token punctuation">.</span><span class="token function">FormatComment</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> args<span class="token punctuation">.</span>ContainerID<span class="token punctuation">)</span>
		<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ipc <span class="token operator">:=</span> <span class="token keyword">range</span> result<span class="token punctuation">.</span>IPs <span class="token punctuation">&#123;</span>
			<span class="token keyword">if</span> err <span class="token operator">=</span> ip<span class="token punctuation">.</span><span class="token function">SetupIPMasq</span><span class="token punctuation">(</span>ip<span class="token punctuation">.</span><span class="token function">Network</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ipc<span class="token punctuation">.</span>Address<span class="token punctuation">)</span><span class="token punctuation">,</span> chain<span class="token punctuation">,</span> comment<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
				<span class="token keyword">return</span> err
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>

	br<span class="token punctuation">,</span> err <span class="token operator">=</span> <span class="token function">bridgeByName</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>BrName<span class="token punctuation">)</span>

	brInterface<span class="token punctuation">.</span>Mac <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">Attrs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>HardwareAddr<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	result<span class="token punctuation">.</span>DNS <span class="token operator">=</span> n<span class="token punctuation">.</span>DNS

	<span class="token keyword">return</span> types<span class="token punctuation">.</span><span class="token function">PrintResult</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> cniVersion<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<span id="more"></span>
<p>主要的就是几大步，首先，调用<code>setupBridge</code>确保机器上有对应的<code>bridge</code>，然后再调用<code>setupVeth</code>在容器对应的namespace下创建好虚拟网络接口。创建完成，就需要通过<code>ipam.ExecAdd(n.IPAM.Type, args.StdinData)</code>向IPAM插件获取IP地址了。<br>拿到了IP地址，就会根据IP地址计算对应的路由和网关，然后调用<code>ipam.ConfigureIface(args.IfName, result)</code>将IP地址设置到对应的虚拟网络接口上，同时，还需要将主机上的<code>bridge</code>加上网关的IP，并且开启主机的<code>ip_forward</code>,<br>最后再调用<code>ip.SetupIPMasq(ip.Network(&amp;ipc.Address), chain, comment)</code>加上IP转发规则，一切正常，按要求输出结果到<code>stdout</code>整个<code>Add</code>操作结束。</p>
<p>而对于IPAM host-local插件，其代码在<code>plugins/ipam/host-local</code>目录下，主要逻辑同样比较简单，精简后的<code>cmdAdd</code>函数如下：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">cmdAdd</span><span class="token punctuation">(</span>args <span class="token operator">*</span>skel<span class="token punctuation">.</span>CmdArgs<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>
	ipamConf<span class="token punctuation">,</span> confVersion<span class="token punctuation">,</span> err <span class="token operator">:=</span> allocator<span class="token punctuation">.</span><span class="token function">LoadIPAMConfig</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>StdinData<span class="token punctuation">,</span> args<span class="token punctuation">.</span>Args<span class="token punctuation">)</span>

	result <span class="token operator">:=</span> <span class="token operator">&amp;</span>current<span class="token punctuation">.</span>Result<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

	<span class="token keyword">if</span> ipamConf<span class="token punctuation">.</span>ResolvConf <span class="token operator">!=</span> <span class="token string">""</span> <span class="token punctuation">&#123;</span>
		dns<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">parseResolvConf</span><span class="token punctuation">(</span>ipamConf<span class="token punctuation">.</span>ResolvConf<span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">return</span> err
		<span class="token punctuation">&#125;</span>
		result<span class="token punctuation">.</span>DNS <span class="token operator">=</span> <span class="token operator">*</span>dns
	<span class="token punctuation">&#125;</span>

	store<span class="token punctuation">,</span> err <span class="token operator">:=</span> disk<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>ipamConf<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> ipamConf<span class="token punctuation">.</span>DataDir<span class="token punctuation">)</span>
	<span class="token keyword">defer</span> store<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	allocs <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>allocator<span class="token punctuation">.</span>IPAllocator<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

	requestedIPs <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>net<span class="token punctuation">.</span>IP<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">//net.IP cannot be a key</span>

	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ip <span class="token operator">:=</span> <span class="token keyword">range</span> ipamConf<span class="token punctuation">.</span>IPArgs <span class="token punctuation">&#123;</span>
		requestedIPs<span class="token punctuation">[</span>ip<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> ip
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">for</span> idx<span class="token punctuation">,</span> rangeset <span class="token operator">:=</span> <span class="token keyword">range</span> ipamConf<span class="token punctuation">.</span>Ranges <span class="token punctuation">&#123;</span>
		allocator <span class="token operator">:=</span> allocator<span class="token punctuation">.</span><span class="token function">NewIPAllocator</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rangeset<span class="token punctuation">,</span> store<span class="token punctuation">,</span> idx<span class="token punctuation">)</span>

		<span class="token comment">// Check to see if there are any custom IPs requested in this range.</span>
		<span class="token keyword">var</span> requestedIP net<span class="token punctuation">.</span>IP
		<span class="token keyword">for</span> k<span class="token punctuation">,</span> ip <span class="token operator">:=</span> <span class="token keyword">range</span> requestedIPs <span class="token punctuation">&#123;</span>
			<span class="token keyword">if</span> rangeset<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
				requestedIP <span class="token operator">=</span> ip
				<span class="token function">delete</span><span class="token punctuation">(</span>requestedIPs<span class="token punctuation">,</span> k<span class="token punctuation">)</span>
				<span class="token keyword">break</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>

		ipConf<span class="token punctuation">,</span> err <span class="token operator">:=</span> allocator<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>ContainerID<span class="token punctuation">,</span> requestedIP<span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
			<span class="token comment">// Deallocate all already allocated IPs</span>
			<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> alloc <span class="token operator">:=</span> <span class="token keyword">range</span> allocs <span class="token punctuation">&#123;</span>
				<span class="token boolean">_</span> <span class="token operator">=</span> alloc<span class="token punctuation">.</span><span class="token function">Release</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>ContainerID<span class="token punctuation">)</span>
			<span class="token punctuation">&#125;</span>
			<span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"failed to allocate for range %d: %v"</span><span class="token punctuation">,</span> idx<span class="token punctuation">,</span> err<span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span>

		allocs <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>allocs<span class="token punctuation">,</span> allocator<span class="token punctuation">)</span>

		result<span class="token punctuation">.</span>IPs <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>IPs<span class="token punctuation">,</span> ipConf<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">// If an IP was requested that wasn't fulfilled, fail</span>
	<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>requestedIPs<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> alloc <span class="token operator">:=</span> <span class="token keyword">range</span> allocs <span class="token punctuation">&#123;</span>
			<span class="token boolean">_</span> <span class="token operator">=</span> alloc<span class="token punctuation">.</span><span class="token function">Release</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>ContainerID<span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span>
		errstr <span class="token operator">:=</span> <span class="token string">"failed to allocate all requested IPs:"</span>
		<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ip <span class="token operator">:=</span> <span class="token keyword">range</span> requestedIPs <span class="token punctuation">&#123;</span>
			errstr <span class="token operator">=</span> errstr <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> ip<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span>errstr<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	result<span class="token punctuation">.</span>Routes <span class="token operator">=</span> ipamConf<span class="token punctuation">.</span>Routes

	<span class="token keyword">return</span> types<span class="token punctuation">.</span><span class="token function">PrintResult</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> confVersion<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>主要逻辑就是<code>allocator.LoadIPAMConfig</code>读取IPAM的配置，得到需要分配的IP段，然后针对每个IP段，调用<code>allocator.Get</code>获取IP地址，再做一些相应的判断等操作，最后输出结果。</p>
<p>其中<code>allocator</code>需要一个Store实例用来存储已经分配的IP地址信息，默认使用的是<code>plugins/ipam/host-local/backend/disk/backend.go</code>将信息存到磁盘上，实现很简单，就是每个IP存一个文件，文件内容就是<code>ContainerID</code>。</p>
<p>有<code>bridge</code>和<code>host-local</code>配合，<code>kubenet</code>就可以正常工作了，但是如果引入更复杂的网络结构，就需要使用更复杂的CNI插件了。</p>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Bridge</tag>
        <tag>CNI</tag>
      </tags>
  </entry>
  <entry>
    <title>容器网络接口(CNI) Plugin SPEC介绍</title>
    <url>/2018/01/22/cni-spec/</url>
    <content><![CDATA[<p>本文主要介绍一下容器网络接口(CNI) 的SPEC，主要参考<a href="https://github.com/containernetworking/cni/blob/spec-v0.3.1/SPEC.md">SPEC v0.3.1</a>，以及目前<a href="https://github.com/containernetworking/cni/blob/525880d8bc1cdb7250c59a1296c1a7427305af74/SPEC.md">最新的SPEC</a>，目前新SPEC针对v0.3.1版本改动不是很大，特别是相关接口输入输出方面，因此可以看作是一样的。</p>
<h2 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h2><p>所有的CNI Plugin，都必须实现为可以被容器管理系统（如rtk、Kubernetes等）调用的可执行文件。<br>CNI插件负责将网络接口插入容器网络命名空间（例如veth pair的其中一端），并在主机上进行任何必要的改变（例如将veth pair的另一端连接到网桥）。然后应该将IP分配给接口，并通过调用适当的IPAM插件将与“IP地址管理”部分一致的IP地址分配给该网络接口，并设置好对应的路由。</p>
<h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><p>所有的CNI Plugin必须实现以下操作：</p>
<ul>
<li><p>添加一个容器到网络</p>
<ul>
<li>Parameters:<ul>
<li><strong>Version</strong>. The version of CNI spec that the caller is using (container management system or the invoking plugin).</li>
<li><strong>Container ID</strong>. A unique plaintext identifier for a container, allocated by the runtime. Must not be empty.</li>
<li><strong>Network namespace path</strong>. This represents the path to the network namespace to be added, i.e. &#x2F;proc&#x2F;[pid]&#x2F;ns&#x2F;net or a bind-mount&#x2F;link to it.</li>
<li><strong>Network configuration</strong>. This is a JSON document describing a network to which a container can be joined. The schema is described below.</li>
<li><strong>Extra arguments</strong>. This provides an alternative mechanism to allow simple configuration of CNI plugins on a per-container basis.</li>
<li><strong>Name of the interface inside the container</strong>. This is the name that should be assigned to the interface created inside the container (network namespace); consequently it must comply with the standard Linux restrictions on interface names.</li>
</ul>
</li>
<li>Result:<ul>
<li><strong>Interfaces list</strong>. Depending on the plugin, this can include the sandbox (eg, container or hypervisor) interface name and&#x2F;or the host interface name, the hardware addresses of each interface, and details about the sandbox (if any) the interface is in.</li>
<li><strong>IP configuration assigned to each interface</strong>. The IPv4 and&#x2F;or IPv6 addresses, gateways, and routes assigned to sandbox and&#x2F;or host interfaces.</li>
<li><strong>DNS information</strong>. Dictionary that includes DNS information for nameservers, domain, search domains and options.</li>
</ul>
</li>
</ul>
</li>
<li><p>从网络中删除一个容器</p>
<ul>
<li>Parameters:<ul>
<li><strong>Version</strong>. The version of CNI spec that the caller is using (container management system or the invoking plugin).</li>
<li><strong>Container ID</strong>, as defined above.</li>
<li><strong>Network namespace path</strong>, as defined above.</li>
<li><strong>Network configuration</strong>, as defined above.</li>
<li><strong>Extra arguments</strong>, as defined above.</li>
<li><strong>Name of the interface inside the container</strong>, as defined above.</li>
</ul>
</li>
<li>All parameters should be the same as those passed to the corresponding add operation.</li>
<li>A delete operation should release all resources held by the supplied containerid in the configured network.</li>
</ul>
</li>
<li><p>报告插件支持的CNI版本</p>
<ul>
<li><p>Parameters: NONE.</p>
</li>
<li><p>Result: information about the CNI spec versions supported by the plugin</p>
  <pre class="line-numbers language-none"><code class="language-none">&#123;
  &quot;cniVersion&quot;: &quot;0.3.1&quot;, &#x2F;&#x2F; the version of the CNI spec in use for this output
  &quot;supportedVersions&quot;: [ &quot;0.1.0&quot;, &quot;0.2.0&quot;, &quot;0.3.0&quot;, &quot;0.3.1&quot; ] &#x2F;&#x2F; the list of CNI spec versions that this plugin supports
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
</li>
</ul>
<span id="more"></span>

<p>容器运行环境需要根据网络种类的名称去对应的目录列表中寻找同名的可执行文件，一旦找到，就需要在执行时传入以下的环境变量：</p>
<ul>
<li><code>CNI_COMMAND</code>: indicates the desired operation; <code>ADD</code>, <code>DEL</code> or <code>VERSION</code>.</li>
<li><code>CNI_CONTAINERID</code>: Container ID</li>
<li><code>CNI_NETNS</code>: Path to network namespace file</li>
<li><code>CNI_IFNAME</code>: Interface name to set up; if the plugin is unable to use this interface name it must return an error</li>
<li><code>CNI_ARGS</code>: Extra arguments passed in by the user at invocation time. Alphanumeric key-value pairs separated by semicolons; for example, “FOO&#x3D;BAR;ABC&#x3D;123”</li>
<li><code>CNI_PATH</code>: List of paths to search for CNI plugin executables. Paths are separated by an OS-specific list separator; for example ‘:’ on Linux and ‘;’ on Windows</li>
</ul>
<p>JSON格式的网络配置通过stdin输入，这意味着不会和磁盘或者文件绑定，在调用之间也可以进行修改。</p>
<h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p>IPAM Plugin应该返回一个<code>Result</code>结构，具体参考下文。</p>
<p>所有的Plugin在调用成功时应该返回<code>code 0</code>，并且当操作为<code>ADD</code>时，需要将下面的JSON输出到<code>stdout</code>中。 其中<code>ips</code>和<code>dns</code>应该和IPAM plugin的输出相同，除此之外Plugin需要将IPAM Plugin返回的IP地址设置到对应的接口上，因为IPAM Plugin并不知道具体的接口是什么。</p>
<pre class="line-numbers language-none"><code class="language-none">&#123;
  &quot;cniVersion&quot;: &quot;0.3.1&quot;,
  &quot;interfaces&quot;: [                                            (this key omitted by IPAM plugins)
      &#123;
          &quot;name&quot;: &quot;&lt;name&gt;&quot;,
          &quot;mac&quot;: &quot;&lt;MAC address&gt;&quot;,                            (required if L2 addresses are meaningful)
          &quot;sandbox&quot;: &quot;&lt;netns path or hypervisor identifier&gt;&quot; (required for container&#x2F;hypervisor interfaces, empty&#x2F;omitted for host interfaces)
      &#125;
  ],
  &quot;ips&quot;: [
      &#123;
          &quot;version&quot;: &quot;&lt;4-or-6&gt;&quot;,
          &quot;address&quot;: &quot;&lt;ip-and-prefix-in-CIDR&gt;&quot;,
          &quot;gateway&quot;: &quot;&lt;ip-address-of-the-gateway&gt;&quot;,          (optional)
          &quot;interface&quot;: &lt;numeric index into &#39;interfaces&#39; list&gt;
      &#125;,
      ...
  ],
  &quot;routes&quot;: [                                                (optional)
      &#123;
          &quot;dst&quot;: &quot;&lt;ip-and-prefix-in-cidr&gt;&quot;,
          &quot;gw&quot;: &quot;&lt;ip-of-next-hop&gt;&quot;                           (optional)
      &#125;,
      ...
  ]
  &quot;dns&quot;: &#123;
    &quot;nameservers&quot;: &lt;list-of-nameservers&gt;                     (optional)
    &quot;domain&quot;: &lt;name-of-local-domain&gt;                         (optional)
    &quot;search&quot;: &lt;list-of-additional-search-domains&gt;            (optional)
    &quot;options&quot;: &lt;list-of-options&gt;                             (optional)
  &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>cniVersion</code> 描述了Plugin使用的<a href="http://semver.org/">Semantic Version 2.0</a>描述的CNI SPEC版本。<br><code>interfaces</code> 描述了Plugin创建的网络接口<br>如果环境变量<code>CNI_IFNAME</code>存在，则PLugin必须使用其指定的接口名称，如果无法设置，则返回错误。</p>
<ul>
<li><code>mac</code> (string): 接口的MAC地址。如果MAC地址是没有意义的，可以不用指定。</li>
<li><code>sandbox</code> (string): 基于容器&#x2F;namespace的运行环境需要返回网络命名空间的全路径。基于虚拟机的，需要返回虚拟化容器的唯一ID。针对在沙箱或者虚拟机中创建的接口，必须指定此项目。</li>
</ul>
<p><code>ips</code>是所有IP的列表<br><code>dns</code>是DNS配置，以上两个结构参考下面的信息。</p>
<p>规范并不指定Plugin对DNS信息的处理方式，比如生成一个<code>/etc/resolv.conf</code>或者使用一个DNS转发器都是可以的。</p>
<p>如果出现错误，则必须返回一个非0的返回值，并且将如下的JSON输出到stdout。</p>
<pre class="line-numbers language-none"><code class="language-none">&#123;
  &quot;cniVersion&quot;: &quot;0.3.1&quot;,
  &quot;code&quot;: &lt;numeric-error-code&gt;,
  &quot;msg&quot;: &lt;short-error-message&gt;,
  &quot;details&quot;: &lt;long-error-message&gt; (optional)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>cniVersion</code> 描述了Plugin使用的<a href="http://semver.org/">Semantic Version 2.0</a>描述的CNI SPEC版本。<br>0-99的错误码保留为常用的错误，具体见下文，100以上的可以作为Plugin自定义的错误输出。</p>
<p>需要说明的是，stderr可以作为日志等非结构化内容的输出。</p>
<h2 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h2><p>网络配置以JSON格式描述。具体的配置可以存在磁盘中，或者由运行环境生成. 以下的字段是通用的，且具有以下含义：</p>
<ul>
<li><code>cniVersion</code> (string): <a href="http://semver.org/">Semantic Version 2.0</a> of CNI specification to which this configuration conforms.</li>
<li><code>name</code> (string): Network name. This should be unique across all containers on the host (or other administrative domain).</li>
<li><code>type</code> (string): Refers to the filename of the CNI plugin executable.</li>
<li><code>args</code> (dictionary): Optional additional arguments provided by the container runtime. For example a dictionary of labels could be passed to CNI plugins by adding them to a labels field under <code>args</code>.</li>
<li><code>ipMasq</code> (boolean): Optional (if supported by the plugin). Set up an IP masquerade on the host for this network. This is necessary if the host will act as a gateway to subnets that are not able to route to the IP assigned to the container.</li>
<li><code>ipam</code>: Dictionary with IPAM specific values:<ul>
<li><code>type</code> (string): Refers to the filename of the IPAM plugin executable.</li>
</ul>
</li>
<li><code>dns</code>: Dictionary with DNS specific values:<ul>
<li><code>nameservers</code> (list of strings): list of a priority-ordered list of DNS nameservers that this network is aware of. Each entry in the list is a string containing either an IPv4 or an IPv6 address.</li>
<li><code>domain</code> (string): the local domain used for short hostname lookups.</li>
<li><code>search</code> (list of strings): list of priority ordered search domains for short hostname lookups. Will be preferred over <code>domain</code> by most resolvers.</li>
<li><code>options</code> (list of strings): list of options that can be passed to the resolver</li>
</ul>
</li>
</ul>
<p>Plugin可以定义而外的附加字段，并且在接受到不认识的字段后可以返回错误，唯一的例外是<code>args</code>字段，如果Plugin不认识其中的某些字段，则应该直接忽略。</p>
<h2 id="网络配置例子"><a href="#网络配置例子" class="headerlink" title="网络配置例子"></a>网络配置例子</h2><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token property">"cniVersion"</span><span class="token operator">:</span> <span class="token string">"0.3.1"</span><span class="token punctuation">,</span>
  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"dbnet"</span><span class="token punctuation">,</span>
  <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"bridge"</span><span class="token punctuation">,</span>
  <span class="token comment">// type (plugin) specific</span>
  <span class="token property">"bridge"</span><span class="token operator">:</span> <span class="token string">"cni0"</span><span class="token punctuation">,</span>
  <span class="token property">"ipam"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"host-local"</span><span class="token punctuation">,</span>
    <span class="token comment">// ipam specific</span>
    <span class="token property">"subnet"</span><span class="token operator">:</span> <span class="token string">"10.1.0.0/16"</span><span class="token punctuation">,</span>
    <span class="token property">"gateway"</span><span class="token operator">:</span> <span class="token string">"10.1.0.1"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token property">"dns"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token property">"nameservers"</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">"10.1.0.1"</span> <span class="token punctuation">]</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token property">"cniVersion"</span><span class="token operator">:</span> <span class="token string">"0.3.1"</span><span class="token punctuation">,</span>
  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"pci"</span><span class="token punctuation">,</span>
  <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"ovs"</span><span class="token punctuation">,</span>
  <span class="token comment">// type (plugin) specific</span>
  <span class="token property">"bridge"</span><span class="token operator">:</span> <span class="token string">"ovs0"</span><span class="token punctuation">,</span>
  <span class="token property">"vxlanID"</span><span class="token operator">:</span> <span class="token number">42</span><span class="token punctuation">,</span>
  <span class="token property">"ipam"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"dhcp"</span><span class="token punctuation">,</span>
    <span class="token property">"routes"</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token punctuation">&#123;</span> <span class="token property">"dst"</span><span class="token operator">:</span> <span class="token string">"10.3.0.0/16"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token property">"dst"</span><span class="token operator">:</span> <span class="token string">"10.4.0.0/16"</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">]</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">// args may be ignored by plugins</span>
  <span class="token property">"args"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token property">"labels"</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token property">"appVersion"</span> <span class="token operator">:</span> <span class="token string">"1.0"</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token property">"cniVersion"</span><span class="token operator">:</span> <span class="token string">"0.3.1"</span><span class="token punctuation">,</span>
  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"wan"</span><span class="token punctuation">,</span>
  <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"macvlan"</span><span class="token punctuation">,</span>
  <span class="token comment">// ipam specific</span>
  <span class="token property">"ipam"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"dhcp"</span><span class="token punctuation">,</span>
    <span class="token property">"routes"</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token punctuation">&#123;</span> <span class="token property">"dst"</span><span class="token operator">:</span> <span class="token string">"10.0.0.0/8"</span><span class="token punctuation">,</span> <span class="token property">"gw"</span><span class="token operator">:</span> <span class="token string">"10.0.0.1"</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">]</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token property">"dns"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token property">"nameservers"</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">"10.0.0.1"</span> <span class="token punctuation">]</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="网络配置列表"><a href="#网络配置列表" class="headerlink" title="网络配置列表"></a>网络配置列表</h2><p>网络配置列表提供了针对一个容器按顺序运行多个CNI plugin的途径，将每个Plugin的结果传递到下一个Plugin。这个列表包含了几个字段，以及一个或多个上述CNI网络配置的列表。</p>
<p>网络配置列表以JSON格式描述。具体的配置可以存在磁盘中，或者由运行环境生成. 以下的字段是通用的，且具有以下下含义：</p>
<ul>
<li><code>cniVersion</code> (string): <a href="http://semver.org/">Semantic Version 2.0</a> of CNI specification to which this configuration list and all the individual configurations conform.</li>
<li><code>name</code> (string): Network name. This should be unique across all containers on the host (or other administrative domain).</li>
<li><code>plugins</code> (list): A list of standard CNI network configuration dictionaries (see above).</li>
</ul>
<p>当执行一个plugin列表时, 运行环境必须将列表里各个网络配置中的<code>name</code>和<code>cniVersion</code>字段替换成列表本身配置的<code>name</code>和<code>cniVersion</code>字段，这样是为了避免因为列表中各项配置不同导致的版本冲突。<br>运行环境也应该将capability相关的配置作为上层配置<code>runtimeConfig</code>中的<code>capabilities</code>配置传递给支持特定能力的Plugin。</p>
<p>针对ADD操作, 运行环境必须在调用第一个Plugin之后添加一个<code>prevResult</code>字段到配置中，该字段必须是之前一个Plugin的输出，且必须是JSON格式。</p>
<p>运行环境也必须保持执行每个Plugin时的环境变量一致。</p>
<p>针对删除操作，运行环境必须按照逆序执行每个Plugin。</p>
<h3 id="网络配置列表的错误处理"><a href="#网络配置列表的错误处理" class="headerlink" title="网络配置列表的错误处理"></a>网络配置列表的错误处理</h3><p>当执行过程中遇到错误时，运行环境必须停止运行接下来的Plugin。</p>
<p>如果是ADD操作失败了，如果运行环境决定处理错误，则需要按逆序执行DEL操作，即使该Plugin没有在ADD操作中被调用。</p>
<p>PLugin应该完成一个DEL操作，即使对应的资源不存在。</p>
<h3 id="网络配置列表的例子"><a href="#网络配置列表的例子" class="headerlink" title="网络配置列表的例子"></a>网络配置列表的例子</h3><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token property">"cniVersion"</span><span class="token operator">:</span> <span class="token string">"0.3.1"</span><span class="token punctuation">,</span>
  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"dbnet"</span><span class="token punctuation">,</span>
  <span class="token property">"plugins"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">&#123;</span>
      <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"bridge"</span><span class="token punctuation">,</span>
      <span class="token comment">// type (plugin) specific</span>
      <span class="token property">"bridge"</span><span class="token operator">:</span> <span class="token string">"cni0"</span><span class="token punctuation">,</span>
      <span class="token comment">// args may be ignored by plugins</span>
      <span class="token property">"args"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token property">"labels"</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span>
            <span class="token property">"appVersion"</span> <span class="token operator">:</span> <span class="token string">"1.0"</span>
        <span class="token punctuation">&#125;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token property">"ipam"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"host-local"</span><span class="token punctuation">,</span>
        <span class="token comment">// ipam specific</span>
        <span class="token property">"subnet"</span><span class="token operator">:</span> <span class="token string">"10.1.0.0/16"</span><span class="token punctuation">,</span>
        <span class="token property">"gateway"</span><span class="token operator">:</span> <span class="token string">"10.1.0.1"</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token property">"dns"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token property">"nameservers"</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">"10.1.0.1"</span> <span class="token punctuation">]</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span>
      <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"tuning"</span><span class="token punctuation">,</span>
      <span class="token property">"sysctl"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token property">"net.core.somaxconn"</span><span class="token operator">:</span> <span class="token string">"500"</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="运行环境执行网络配置列表的例子"><a href="#运行环境执行网络配置列表的例子" class="headerlink" title="运行环境执行网络配置列表的例子"></a>运行环境执行网络配置列表的例子</h3><p>需要注意的是运行环境添加了<code>cniVersion</code> 和 <code>name</code>字段来保证一致性。</p>
<ol>
<li>首先使用下面的JSON调用<code>bridge</code> plugin：</li>
</ol>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token property">"cniVersion"</span><span class="token operator">:</span> <span class="token string">"0.3.1"</span><span class="token punctuation">,</span>
  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"dbnet"</span><span class="token punctuation">,</span>
  <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"bridge"</span><span class="token punctuation">,</span>
  <span class="token property">"bridge"</span><span class="token operator">:</span> <span class="token string">"cni0"</span><span class="token punctuation">,</span>
  <span class="token property">"args"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token property">"labels"</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token property">"appVersion"</span> <span class="token operator">:</span> <span class="token string">"1.0"</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token property">"ipam"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"host-local"</span><span class="token punctuation">,</span>
    <span class="token comment">// ipam specific</span>
    <span class="token property">"subnet"</span><span class="token operator">:</span> <span class="token string">"10.1.0.0/16"</span><span class="token punctuation">,</span>
    <span class="token property">"gateway"</span><span class="token operator">:</span> <span class="token string">"10.1.0.1"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token property">"dns"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token property">"nameservers"</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">"10.1.0.1"</span> <span class="token punctuation">]</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li>然后使用下面的JSON调用 <code>tuning</code> Plugin，<code>prevResult</code>字段内容为上一步<code>bridge</code> Plugin的输出:</li>
</ol>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token property">"cniVersion"</span><span class="token operator">:</span> <span class="token string">"0.3.1"</span><span class="token punctuation">,</span>
  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"dbnet"</span><span class="token punctuation">,</span>
  <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"tuning"</span><span class="token punctuation">,</span>
  <span class="token property">"sysctl"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token property">"net.core.somaxconn"</span><span class="token operator">:</span> <span class="token string">"500"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token property">"prevResult"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token property">"ips"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">&#123;</span>
          <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"4"</span><span class="token punctuation">,</span>
          <span class="token property">"address"</span><span class="token operator">:</span> <span class="token string">"10.0.0.5/32"</span><span class="token punctuation">,</span>
          <span class="token property">"interface"</span><span class="token operator">:</span> <span class="token number">0</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">"dns"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      <span class="token property">"nameservers"</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">"10.1.0.1"</span> <span class="token punctuation">]</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>对于上面的列表，容器运行环境按下面的步骤执行DEL操作，需要注意的是已经不需要<code>prevResult</code>字段了，并且所有操作都是逆序的。</p>
<ol>
<li>首先使用下面的JSON调用<code>tuning</code> Plugin：</li>
</ol>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token property">"cniVersion"</span><span class="token operator">:</span> <span class="token string">"0.3.1"</span><span class="token punctuation">,</span>
  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"dbnet"</span><span class="token punctuation">,</span>
  <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"tuning"</span><span class="token punctuation">,</span>
  <span class="token property">"sysctl"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token property">"net.core.somaxconn"</span><span class="token operator">:</span> <span class="token string">"500"</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li>然后使用下面的JSON调用<code>bridge</code> Plugin：</li>
</ol>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token property">"cniVersion"</span><span class="token operator">:</span> <span class="token string">"0.3.1"</span><span class="token punctuation">,</span>
  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"dbnet"</span><span class="token punctuation">,</span>
  <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"bridge"</span><span class="token punctuation">,</span>
  <span class="token property">"bridge"</span><span class="token operator">:</span> <span class="token string">"cni0"</span><span class="token punctuation">,</span>
  <span class="token property">"args"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token property">"labels"</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token property">"appVersion"</span> <span class="token operator">:</span> <span class="token string">"1.0"</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token property">"ipam"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"host-local"</span><span class="token punctuation">,</span>
    <span class="token comment">// ipam specific</span>
    <span class="token property">"subnet"</span><span class="token operator">:</span> <span class="token string">"10.1.0.0/16"</span><span class="token punctuation">,</span>
    <span class="token property">"gateway"</span><span class="token operator">:</span> <span class="token string">"10.1.0.1"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token property">"dns"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token property">"nameservers"</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">"10.1.0.1"</span> <span class="token punctuation">]</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="IP分配"><a href="#IP分配" class="headerlink" title="IP分配"></a>IP分配</h2><p>作为操作的一部分，CNI plugin需要针对网络接口分配（维护）IP地址，并且需要设置必要的路由信息。</p>
<p>为了减少负担并将IP管理策略和CNI Plugin分离开，我们设计了IP地址管理插件（IPAM plugin），CNI Plugin负责在执行过程中调用IP地址管理插件，IPAM Plugin将确定IP和子网，网关还有路由，并将信息返回给主插件，IPAM plugin可能会通过某个协议获取这些数据（dhcp等），并将数据存在本地磁盘配置文件中的ipam节。</p>
<h3 id="IP地址管理-IPAM-接口"><a href="#IP地址管理-IPAM-接口" class="headerlink" title="IP地址管理 (IPAM) 接口"></a>IP地址管理 (IPAM) 接口</h3><p>和CNI plugins一样，IPAM plugin也是作为可执行文件调用的。同样也是会在一系列路径下需要对应的可执行文件，同样会接受所有CNI plugin使用的环境变量，网络配置也是通过stdin进行传递。</p>
<p>调用成功必须返回code 0，并且如下的结构要打印到stdout中（针对ADD操作）</p>
<pre class="line-numbers language-none"><code class="language-none">&#123;
  &quot;cniVersion&quot;: &quot;0.3.1&quot;,
  &quot;ips&quot;: [
      &#123;
          &quot;version&quot;: &quot;&lt;4-or-6&gt;&quot;,
          &quot;address&quot;: &quot;&lt;ip-and-prefix-in-CIDR&gt;&quot;,
          &quot;gateway&quot;: &quot;&lt;ip-address-of-the-gateway&gt;&quot;  (optional)
      &#125;,
      ...
  ],
  &quot;routes&quot;: [                                       (optional)
      &#123;
          &quot;dst&quot;: &quot;&lt;ip-and-prefix-in-cidr&gt;&quot;,
          &quot;gw&quot;: &quot;&lt;ip-of-next-hop&gt;&quot;                  (optional)
      &#125;,
      ...
  ]
  &quot;dns&quot;: &#123;
    &quot;nameservers&quot;: &lt;list-of-nameservers&gt;            (optional)
    &quot;domain&quot;: &lt;name-of-local-domain&gt;                (optional)
    &quot;search&quot;: &lt;list-of-search-domains&gt;              (optional)
    &quot;options&quot;: &lt;list-of-options&gt;                    (optional)
  &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>需要注意的是和CNI plugin不同，IPAM plugin不需要在<code>Result</code>中返回<code>interfaces</code>，因为IPAM plugin不关心调用者配置的网络接口是什么（除了像<code>dhcp</code>等需要知道的plugin）</p>
<p><code>cniVersion</code> specifies a <a href="http://semver.org/">Semantic Version 2.0</a> of CNI specification used by the plugin.</p>
<p>The <code>ips</code> field is a list of IP configuration information.</p>
<p>The <code>dns</code> field contains a dictionary consisting of common DNS information.</p>
<p>错误和日志的处理方式同CNI plugin。</p>
<p>IPAM plugin examples:</p>
<ul>
<li><strong>host-local</strong>: Select an unused (by other containers on the same host) IP within the specified range.</li>
<li><strong>dhcp</strong>: Use DHCP protocol to acquire and maintain a lease. The DHCP requests will be sent via the created container interface; therefore, the associated network must support broadcast.</li>
</ul>
<h3 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h3><ul>
<li>Routes are expected to be added with a 0 metric.</li>
<li>A default route may be specified via “0.0.0.0&#x2F;0”. Since another network might have already configured the default route, the CNI plugin should be prepared to skip over its default route definition.</li>
</ul>
<h3 id="常用数据结构"><a href="#常用数据结构" class="headerlink" title="常用数据结构"></a>常用数据结构</h3><h3 id="IPs"><a href="#IPs" class="headerlink" title="IPs"></a>IPs</h3><pre class="line-numbers language-none"><code class="language-none">&quot;ips&quot;: [
    &#123;
        &quot;version&quot;: &quot;&lt;4-or-6&gt;&quot;,
        &quot;address&quot;: &quot;&lt;ip-and-prefix-in-CIDR&gt;&quot;,
        &quot;gateway&quot;: &quot;&lt;ip-address-of-the-gateway&gt;&quot;,      (optional)
        &quot;interface&quot;: &lt;numeric index into &#39;interfaces&#39; list&gt; (not required for IPAM plugins)
    &#125;,
    ...
]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>ips</code>字段是一个IP信息的列表，每个项都是描述一个网络接口的IP配置的。<br>针对多个网络接口，或者针对一个接口的多个IP配置会作为独立的IP信息放入列表中。<br>所有的IP配置字段如下：</p>
<ul>
<li><code>version</code> (string): either “4” or “6” and corresponds to the IP version of the addresses in the entry.<br> All IP addresses and gateways provided must be valid for the given <code>version</code>.</li>
<li><code>address</code> (string): an IP address in CIDR notation (eg “192.168.1.3&#x2F;24”).</li>
<li><code>gateway</code> (string): the default gateway for this subnet, if one exists.<br> It does not instruct the CNI plugin to add any routes with this gateway: routes to add are specified separately via the <code>routes</code> field.<br> An example use of this value is for the CNI <code>bridge</code> plugin to add this IP address to the Linux bridge to make it a gateway.</li>
<li><code>interface</code> (uint): the index into the <code>interfaces</code> list for a <a href="#result">CNI Plugin Result</a> indicating which interface this IP configuration should be applied to.<br> IPAM plugins should not return this key since they have no information about network interfaces.</li>
</ul>
<h3 id="Routes"><a href="#Routes" class="headerlink" title="Routes"></a>Routes</h3><pre class="line-numbers language-none"><code class="language-none">&quot;routes&quot;: [
    &#123;
        &quot;dst&quot;: &quot;&lt;ip-and-prefix-in-cidr&gt;&quot;,
        &quot;gw&quot;: &quot;&lt;ip-of-next-hop&gt;&quot;               (optional)
    &#125;,
    ...
]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>Each <code>routes</code> entry is a dictionary with the following fields.  All IP addresses in the <code>routes</code> entry must be the same IP version, either 4 or 6.<ul>
<li><code>dst</code> (string): destination subnet specified in CIDR notation.</li>
<li><code>gw</code> (string): IP of the gateway. If omitted, a default gateway is assumed (as determined by the CNI plugin).</li>
</ul>
</li>
</ul>
<h3 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h3><pre class="line-numbers language-none"><code class="language-none">&quot;dns&quot;: &#123;
  &quot;nameservers&quot;: &lt;list-of-nameservers&gt;                 (optional)
  &quot;domain&quot;: &lt;name-of-local-domain&gt;                     (optional)
  &quot;search&quot;: &lt;list-of-additional-search-domains&gt;        (optional)
  &quot;options&quot;: &lt;list-of-options&gt;                         (optional)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>The <code>dns</code> field contains a dictionary consisting of common DNS information.</p>
<ul>
<li><code>nameservers</code> (list of strings): list of a priority-ordered list of DNS nameservers that this network is aware of. Each entry in the list is a string containing either an IPv4 or an IPv6 address.</li>
<li><code>domain</code> (string): the local domain used for short hostname lookups.</li>
<li><code>search</code> (list of strings): list of priority ordered search domains for short hostname lookups. Will be preferred over <code>domain</code> by most resolvers.</li>
<li><code>options</code> (list of strings): list of options that can be passed to the resolver.<br>See <a href="#result">CNI Plugin Result</a> section for more information.</li>
</ul>
<h2 id="常用错误码"><a href="#常用错误码" class="headerlink" title="常用错误码"></a>常用错误码</h2><p>Error codes 1-99 must not be used other than as specified here.</p>
<ul>
<li><code>1</code> - Incompatible CNI version</li>
<li><code>2</code> - Unsupported field in network configuration. The error message must contain the key and value of the unsupported field.</li>
</ul>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>CNI</tag>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>再谈CPU的电源管理（如何做到稳定全核睿频？）</title>
    <url>/2020/07/17/cpu-idle-time-managment/</url>
    <content><![CDATA[<p>在之前的一篇Blog：<a href="/2020/02/26/cpu-power-management/"> 服务器的能耗控制以及高性能模式配置（Dell）</a>中，说到在Dell的服务器BIOS中打开Performance模式。就可以实现真正非软件管理的高性能模式，让CPU时刻处在最高性能状态上。但是呢，最近的一批机器，升级到CentOS 7.7系统之后，这个行为发生了一些变化，而针对这批机器的两个供应商的表现呢，也不完全一致，这个现象驱使我研究了一下到底怎么样设置，可以实现期望的运行状态。也就是说，希望CPU稳定的运行在全核睿频上，既不需要他提升单核频率到单核睿频，也不希望他降频，这样，至少在我们当前的业务场景下，能获得比较稳定的性能预期。</p>
<span id="more"></span>

<p>首先呢，当我们升级到CentOS 7.7系统之后，执行<code>cpupower frequency-set -g performance</code>或者<code>cpupower frequency-info</code>的时候，不再像之前那样报错了，也就是说，系统能正确加载频率调整驱动，只是加载的驱动从原来的<code>acpi-cpufreq</code>变成了现在的<code>intel_pstate</code>，这是什么原因呢？</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">~<span class="token punctuation">]</span><span class="token comment"># cpupower frequency-info</span>
analyzing CPU <span class="token number">0</span>:
  driver: intel_pstate
  CPUs <span class="token function">which</span> run at the same hardware frequency: <span class="token number">0</span>
  CPUs <span class="token function">which</span> need to have their frequency coordinated by software: <span class="token number">0</span>
  maximum transition latency:  Cannot determine or is not supported.
  hardware limits: <span class="token number">1000</span> MHz - <span class="token number">4.00</span> GHz
  available cpufreq governors: performance powersave
  current policy: frequency should be within <span class="token number">1000</span> MHz and <span class="token number">4.00</span> GHz.
                  The governor <span class="token string">"performance"</span> may decide <span class="token function">which</span> speed to use
                  within this range.
  current CPU frequency: <span class="token number">3.20</span> GHz <span class="token punctuation">(</span>asserted by call to hardware<span class="token punctuation">)</span>
  boost state support:
    Supported: <span class="token function">yes</span>
    Active: <span class="token function">yes</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>于是就去查询了CentOS或者说Redhat 7.7的Release Note，以及咨询了一下厂商，发现CentOS 7.7的kernel有个修改，<a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/7.7_release_notes/bug_fixes#bug-fix_kernel">The intel_pstate driver loads on the Intel Skylake-X systems with HWP disabled</a>：也就是说在之前的版本里，如果关闭了HWP(Hardware-Controlled Performance States，BIOS里设置Performance模式会关闭HWP)，则<code>intel_pstate</code>驱动就不会加载，而切换到7.7之后，这个问题被修复，也就是说在7.7里，内核会加载<code>intel_pstate</code>驱动，这也是为什么<code>cpupower</code>命令可以正常的原因。</p>
<p>具体到这个修改很简单，其实就是这个patch：[cpufreq: intel_pstate: Add Skylake servers support](cpufreq: intel_pstate: Add Skylake servers support)，这个patch是在Linux 4.18版本被merge到主线的，也就说，如果用主线内核，前后版本跨4.18，也会遇到同样的问题。</p>
<p>再看看<code>intel_pstate</code>驱动，如其名，是用来控制CPU的P-State的，那什么是P-State？Intel有个Slide：<a href="https://events.static.linuxfound.org/sites/events/files/slides/LinuxConEurope_2015.pdf">Balancing Power and Performance in the Linux Kernel</a>简单介绍了P-State和<code>intel_pstate</code>驱动的工作原理。这里我们就不深入了，实际上仅仅通过系统设置只能控制到一部分频率区间，真正的频率还是由硬件决定的，在没有HWP和有HWP支持的情况下，会有不同的寄存器组合，来给硬件提示当前的性能偏好，具体的需要参考Intel的<a href="https://software.intel.com/sites/default/files/managed/39/c5/325462-sdm-vol-1-2abcd-3abcd.pdf">Intel® 64 and IA-32 Architectures Software Developer’s Manual</a>的<code>POWER AND THERMAL MANAGEMENT</code>部分了。有点复杂，而且我也没有完全弄明白，这里就不分析了。</p>
<p>所以呢，我们能做的事情很简单，就是执行<code>cpupower frequency-set -g performance</code>，告诉<code>intel_pstate</code>驱动当前需要使用最高性能模式就好了。</p>
<p>但是事情往往没有这么简单，按照上面的分析，设置高性能模式应该就可以获得稳定的CPU频率了，然而在一台测试机器上设置之后，使用<code>turbostat</code>命令依然观察到比较明显的降频：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">~<span class="token punctuation">]</span><span class="token comment"># turbostat</span>
Package Core    CPU     Avg_MHz Busy%   Bzy_MHz TSC_MHz IRQ     SMI     POLL    C1      C1E     C6      POLL%   C1%     C1E%    C6%     CPU%c1  CPU%c6  CoreTmp PkgTmp  PkgWatt RAMWatt PKG_%R
AM_%
-       -       -       <span class="token number">2</span>       <span class="token number">0.08</span>    <span class="token number">2284</span>    <span class="token number">2395</span>    <span class="token number">5790</span>    <span class="token number">0</span>       <span class="token number">1</span>       <span class="token number">104</span>     <span class="token number">2991</span>    <span class="token number">6482</span>    <span class="token number">0.00</span>    <span class="token number">0.10</span>    <span class="token number">3.81</span>    <span class="token number">96.02</span>   <span class="token number">9.98</span>    <span class="token number">89.93</span>   <span class="token number">60</span>      <span class="token number">61</span>      <span class="token number">79.09</span>   <span class="token number">83.82</span>   <span class="token number">0.00</span> <span class="token number">0</span>
.00
<span class="token number">0</span>       <span class="token number">0</span>       <span class="token number">0</span>       <span class="token number">7</span>       <span class="token number">0.33</span>    <span class="token number">2181</span>    <span class="token number">2395</span>    <span class="token number">139</span>     <span class="token number">0</span>       <span class="token number">0</span>       <span class="token number">2</span>       <span class="token number">26</span>      <span class="token number">253</span>     <span class="token number">0.00</span>    <span class="token number">0.00</span>    <span class="token number">0.52</span>    <span class="token number">99.17</span>   <span class="token number">5.03</span>    <span class="token number">94.64</span>   <span class="token number">53</span>      <span class="token number">56</span>      <span class="token number">40.44</span>   <span class="token number">41.06</span>   <span class="token number">0.00</span> <span class="token number">0</span>
.00
<span class="token number">0</span>       <span class="token number">0</span>       <span class="token number">48</span>      <span class="token number">0</span>       <span class="token number">0.01</span>    <span class="token number">2033</span>    <span class="token number">2395</span>    <span class="token number">11</span>      <span class="token number">0</span>       <span class="token number">0</span>       <span class="token number">0</span>       <span class="token number">2</span>       <span class="token number">11</span>      <span class="token number">0.00</span>    <span class="token number">0.00</span>    <span class="token number">0.01</span>    <span class="token number">100.01</span>  <span class="token number">5.35</span>
<span class="token number">0</span>       <span class="token number">1</span>       <span class="token number">4</span>       <span class="token number">2</span>       <span class="token number">0.11</span>    <span class="token number">2107</span>    <span class="token number">2395</span>    <span class="token number">74</span>      <span class="token number">0</span>       <span class="token number">0</span>       <span class="token number">0</span>       <span class="token number">7</span>       <span class="token number">94</span>      <span class="token number">0.00</span>    <span class="token number">0.00</span>    <span class="token number">0.09</span>    <span class="token number">99.83</span>   <span class="token number">2.25</span>    <span class="token number">97.64</span>   <span class="token number">52</span>
<span class="token number">0</span>       <span class="token number">1</span>       <span class="token number">52</span>      <span class="token number">2</span>       <span class="token number">0.05</span>    <span class="token number">3213</span>    <span class="token number">2395</span>    <span class="token number">18</span>      <span class="token number">0</span>       <span class="token number">0</span>       <span class="token number">0</span>       <span class="token number">4</span>       <span class="token number">25</span>      <span class="token number">0.00</span>    <span class="token number">0.00</span>    <span class="token number">0.01</span>    <span class="token number">99.97</span>   <span class="token number">2.31</span>
<span class="token number">0</span>       <span class="token number">2</span>       <span class="token number">8</span>       <span class="token number">5</span>       <span class="token number">0.19</span>    <span class="token number">2844</span>    <span class="token number">2395</span>    <span class="token number">85</span>      <span class="token number">0</span>       <span class="token number">0</span>       <span class="token number">5</span>       <span class="token number">40</span>      <span class="token number">119</span>     <span class="token number">0.00</span>    <span class="token number">0.02</span>    <span class="token number">0.29</span>    <span class="token number">99.53</span>   <span class="token number">2.87</span>    <span class="token number">96.94</span>   <span class="token number">52</span>
<span class="token number">0</span>       <span class="token number">2</span>       <span class="token number">56</span>      <span class="token number">0</span>       <span class="token number">0.02</span>    <span class="token number">1494</span>    <span class="token number">2395</span>    <span class="token number">33</span>      <span class="token number">0</span>       <span class="token number">0</span>       <span class="token number">0</span>       <span class="token number">1</span>       <span class="token number">29</span>      <span class="token number">0.00</span>    <span class="token number">0.00</span>    <span class="token number">0.00</span>    <span class="token number">100.01</span>  <span class="token number">3.05</span>
<span class="token number">0</span>       <span class="token number">3</span>       <span class="token number">12</span>      <span class="token number">3</span>       <span class="token number">0.16</span>    <span class="token number">1989</span>    <span class="token number">2395</span>    <span class="token number">56</span>      <span class="token number">0</span>       <span class="token number">0</span>       <span class="token number">7</span>       <span class="token number">11</span>      <span class="token number">146</span>     <span class="token number">0.00</span>    <span class="token number">0.61</span>    <span class="token number">0.58</span>    <span class="token number">98.67</span>   <span class="token number">4.79</span>    <span class="token number">95.05</span>   <span class="token number">48</span>
<span class="token number">0</span>       <span class="token number">3</span>       <span class="token number">60</span>      <span class="token number">1</span>       <span class="token number">0.05</span>    <span class="token number">2429</span>    <span class="token number">2395</span>    <span class="token number">28</span>      <span class="token number">0</span>       <span class="token number">0</span>       <span class="token number">0</span>       <span class="token number">1</span>       <span class="token number">38</span>      <span class="token number">0.00</span>    <span class="token number">0.00</span>    <span class="token number">0.00</span>    <span class="token number">99.98</span>   <span class="token number">4.90</span>
<span class="token number">0</span>       <span class="token number">4</span>       <span class="token number">10</span>      <span class="token number">3</span>       <span class="token number">0.11</span>    <span class="token number">2856</span>    <span class="token number">2395</span>    <span class="token number">25</span>      <span class="token number">0</span>       <span class="token number">0</span>       <span class="token number">0</span>       <span class="token number">3</span>       <span class="token number">76</span>      <span class="token number">0.00</span>    <span class="token number">0.00</span>    <span class="token number">0.03</span>    <span class="token number">99.89</span>   <span class="token number">1.29</span>    <span class="token number">98.60</span>   <span class="token number">48</span>
<span class="token number">0</span>       <span class="token number">4</span>       <span class="token number">58</span>      <span class="token number">0</span>       <span class="token number">0.01</span>    <span class="token number">2520</span>    <span class="token number">2395</span>    <span class="token number">9</span>       <span class="token number">0</span>       <span class="token number">0</span>       <span class="token number">0</span>       <span class="token number">0</span>       <span class="token number">10</span>      <span class="token number">0.00</span>    <span class="token number">0.00</span>    <span class="token number">0.00</span>    <span class="token number">100.02</span>  <span class="token number">1.39</span>
<span class="token number">0</span>       <span class="token number">5</span>       <span class="token number">6</span>       <span class="token number">4</span>       <span class="token number">0.17</span>    <span class="token number">2404</span>    <span class="token number">2395</span>    <span class="token number">99</span>      <span class="token number">0</span>       <span class="token number">0</span>       <span class="token number">3</span>       <span class="token number">15</span>      <span class="token number">140</span>     <span class="token number">0.00</span>    <span class="token number">0.79</span>    <span class="token number">0.07</span>    <span class="token number">98.99</span>   <span class="token number">3.45</span>    <span class="token number">96.38</span>   <span class="token number">50</span>
<span class="token number">0</span>       <span class="token number">5</span>       <span class="token number">54</span>      <span class="token number">0</span>       <span class="token number">0.01</span>    <span class="token number">2149</span>    <span class="token number">2395</span>    <span class="token number">11</span>      <span class="token number">0</span>       <span class="token number">0</span>       <span class="token number">0</span>       <span class="token number">2</span>       <span class="token number">10</span>      <span class="token number">0.00</span>    <span class="token number">0.00</span>    <span class="token number">0.01</span>    <span class="token number">100.01</span>  <span class="token number">3.61</span>
<span class="token number">0</span>       <span class="token number">6</span>       <span class="token number">2</span>       <span class="token number">8</span>       <span class="token number">0.34</span>    <span class="token number">2274</span>    <span class="token number">2395</span>    <span class="token number">96</span>      <span class="token number">0</span>       <span class="token number">0</span>       <span class="token number">6</span>       <span class="token number">28</span>      <span class="token number">263</span>     <span class="token number">0.00</span>    <span class="token number">0.11</span>    <span class="token number">4.54</span>    <span class="token number">95.03</span>   <span class="token number">11.11</span>   <span class="token number">88.56</span>   <span class="token number">51</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看到<code>Bzy_MHz</code>这一列的数据，高低不齐，并且显著低于预期的3.2GHz的全核睿频频率。再看一台正常的机器的结果：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Package Core    CPU     Avg_MHz Busy%   Bzy_MHz TSC_MHz IRQ     SMI     CPU%c1  CPU%c6  CoreTmp PkgTmp  Pkg%pc2 Pkg%pc6 PkgWatt RAMWatt PKG_%   RAM_%
-       -       -       <span class="token number">93</span>      <span class="token number">2.90</span>    <span class="token number">3200</span>    <span class="token number">2494</span>    <span class="token number">52874</span>   <span class="token number">0</span>       <span class="token number">97.10</span>   <span class="token number">0.00</span>    <span class="token number">58</span>      <span class="token number">58</span>      <span class="token number">0.00</span>    <span class="token number">0.00</span>    <span class="token number">146.46</span>  <span class="token number">86.52</span>   <span class="token number">0.00</span>    <span class="token number">0.00</span>
<span class="token number">0</span>       <span class="token number">0</span>       <span class="token number">0</span>       <span class="token number">3193</span>    <span class="token number">100.00</span>  <span class="token number">3200</span>    <span class="token number">2494</span>    <span class="token number">5050</span>    <span class="token number">0</span>       <span class="token number">0.00</span>    <span class="token number">0.00</span>    <span class="token number">58</span>      <span class="token number">58</span>      <span class="token number">0.00</span>    <span class="token number">0.00</span>    <span class="token number">79.50</span>   <span class="token number">42.71</span>   <span class="token number">0.00</span>    <span class="token number">0.00</span>
<span class="token number">0</span>       <span class="token number">0</span>       <span class="token number">40</span>      <span class="token number">1</span>       <span class="token number">0.04</span>    <span class="token number">3200</span>    <span class="token number">2494</span>    <span class="token number">9</span>       <span class="token number">0</span>       <span class="token number">99.96</span>
<span class="token number">0</span>       <span class="token number">1</span>       <span class="token number">1</span>       <span class="token number">3193</span>    <span class="token number">100.00</span>  <span class="token number">3200</span>    <span class="token number">2494</span>    <span class="token number">5034</span>    <span class="token number">0</span>       <span class="token number">0.00</span>    <span class="token number">0.00</span>    <span class="token number">56</span>
<span class="token number">0</span>       <span class="token number">1</span>       <span class="token number">41</span>      <span class="token number">0</span>       <span class="token number">0.00</span>    <span class="token number">3201</span>    <span class="token number">2494</span>    <span class="token number">11</span>      <span class="token number">0</span>       <span class="token number">100.00</span>
<span class="token number">0</span>       <span class="token number">2</span>       <span class="token number">2</span>       <span class="token number">66</span>      <span class="token number">2.08</span>    <span class="token number">3200</span>    <span class="token number">2494</span>    <span class="token number">5267</span>    <span class="token number">0</span>       <span class="token number">97.92</span>   <span class="token number">0.00</span>    <span class="token number">45</span>
<span class="token number">0</span>       <span class="token number">2</span>       <span class="token number">42</span>      <span class="token number">2</span>       <span class="token number">0.06</span>    <span class="token number">3200</span>    <span class="token number">2494</span>    <span class="token number">26</span>      <span class="token number">0</span>       <span class="token number">99.94</span>
<span class="token number">0</span>       <span class="token number">3</span>       <span class="token number">3</span>       <span class="token number">8</span>       <span class="token number">0.24</span>    <span class="token number">3200</span>    <span class="token number">2494</span>    <span class="token number">459</span>     <span class="token number">0</span>       <span class="token number">99.76</span>   <span class="token number">0.00</span>    <span class="token number">47</span>
<span class="token number">0</span>       <span class="token number">3</span>       <span class="token number">43</span>      <span class="token number">84</span>      <span class="token number">2.63</span>    <span class="token number">3200</span>    <span class="token number">2494</span>    <span class="token number">663</span>     <span class="token number">0</span>       <span class="token number">97.37</span>
<span class="token number">0</span>       <span class="token number">4</span>       <span class="token number">4</span>       <span class="token number">30</span>      <span class="token number">0.94</span>    <span class="token number">3200</span>    <span class="token number">2494</span>    <span class="token number">582</span>     <span class="token number">0</span>       <span class="token number">99.06</span>   <span class="token number">0.00</span>    <span class="token number">45</span>
<span class="token number">0</span>       <span class="token number">4</span>       <span class="token number">44</span>      <span class="token number">17</span>      <span class="token number">0.53</span>    <span class="token number">3200</span>    <span class="token number">2494</span>    <span class="token number">319</span>     <span class="token number">0</span>       <span class="token number">99.47</span>
<span class="token number">0</span>       <span class="token number">8</span>       <span class="token number">5</span>       <span class="token number">16</span>      <span class="token number">0.51</span>    <span class="token number">3200</span>    <span class="token number">2494</span>    <span class="token number">731</span>     <span class="token number">0</span>       <span class="token number">99.49</span>   <span class="token number">0.00</span>    <span class="token number">45</span>
<span class="token number">0</span>       <span class="token number">8</span>       <span class="token number">45</span>      <span class="token number">2</span>       <span class="token number">0.06</span>    <span class="token number">3200</span>    <span class="token number">2494</span>    <span class="token number">95</span>      <span class="token number">0</span>       <span class="token number">99.94</span>
<span class="token number">0</span>       <span class="token number">9</span>       <span class="token number">6</span>       <span class="token number">7</span>       <span class="token number">0.21</span>    <span class="token number">3200</span>    <span class="token number">2494</span>    <span class="token number">273</span>     <span class="token number">0</span>       <span class="token number">99.79</span>   <span class="token number">0.00</span>    <span class="token number">48</span>
<span class="token number">0</span>       <span class="token number">9</span>       <span class="token number">46</span>      <span class="token number">3</span>       <span class="token number">0.09</span>    <span class="token number">3200</span>    <span class="token number">2494</span>    <span class="token number">62</span>      <span class="token number">0</span>       <span class="token number">99.91</span>
<span class="token number">0</span>       <span class="token number">10</span>      <span class="token number">7</span>       <span class="token number">7</span>       <span class="token number">0.23</span>    <span class="token number">3200</span>    <span class="token number">2494</span>    <span class="token number">376</span>     <span class="token number">0</span>       <span class="token number">99.77</span>   <span class="token number">0.00</span>    <span class="token number">47</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>仔细看一下两台机器的区别，发现出现降频的机器多出了很多状态：<code>POLL</code>、<code>C1</code>、<code>C1E</code>、<code>C6</code>，而且对比<code>CPU%c6</code>这一列，一个大部分都在C6状态，而另外一个从不进入C6状态。那么很有可能就是因为这边的不同导致的频率的不同。</p>
<p>首先先说明一下C-States，Redhat有个KB：<a href="https://access.redhat.com/solutions/202743">What are CPU “C-states” and how to disable them if needed?</a>做了比较详细解释，或者也可以看<a href="https://zhuanlan.zhihu.com/p/25675639">CPU省电的秘密（二）：CStates</a>这篇，简单来说，C-States代表着CPU的工作状态，C0代表CPU处于正常运行状态，C1和以上代表CPU处于空闲状态，数字越大，CPU越省电，当然省电还是有副作用的，也就是会导致频率降低，并且从省电状态恢复到工作状态花费的时间越长。根据<a href="https://community.intel.com/t5/Software-Tuning-Performance/Monitoring-C1-and-C1E-core-c-state/m-p/1067363/highlight/true#M5233">Intel的这个帖子</a>里的说法：</p>
<ul>
<li>state0 “POLL” (cpu spin-waits because it is expected to get more work very soon – &lt; 10 microseconds)</li>
<li>state1 “C1-SKX” – default behavior of MWAIT with argument EAX&#x3D;0x00 – has 2 microsecond wakeup latency</li>
<li>state2 “C1E-SKX” – MWAIT with argument EAX&#x3D;0x01 – has 10 microsecond wakeup latency and drops core to maximum efficiency frequency</li>
<li>state3 “C6-SKX” – MWAIT with argument EAX&#x3D;0x20 – has 133 microsecond wakeup latency and turns off core (allowing more power to other cores)</li>
</ul>
<p>进入C1E就意味着CPU会降频到最高效率频率，并且恢复需要10us，而进入C6状态意味着核心关闭，并且从C6状态恢复需要133us。具体支持的状态信息可以在<code>/sys/devices/system/cpu/cpu0/cpuidle/state*/</code>中看到：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>/sys/devices/system/cpu/cpu0/cpuidle<span class="token punctuation">]</span><span class="token comment"># ls</span>
<span class="token function">ls</span> *
state0:
desc  disable  latency  name  power  <span class="token function">time</span>  usage

state1:
desc  disable  latency  name  power  <span class="token function">time</span>  usage

state2:
desc  disable  latency  name  power  <span class="token function">time</span>  usage

state3:
desc  disable  latency  name  power  <span class="token function">time</span>  usage
<span class="token punctuation">[</span>/sys/devices/system/cpu/cpu0/cpuidle<span class="token punctuation">]</span><span class="token comment"># cat state3/latency </span>
<span class="token number">133</span>
<span class="token punctuation">[</span>root@yf-10-79-73-80.yfvm-1.node.kubernetes /sys/devices/system/cpu/cpu0/cpuidle<span class="token punctuation">]</span><span class="token comment"># cat state3/desc </span>
MWAIT 0x20
<span class="token punctuation">[</span>root@yf-10-79-73-80.yfvm-1.node.kubernetes /sys/devices/system/cpu/cpu0/cpuidle<span class="token punctuation">]</span><span class="token comment"># cat state3/name </span>
C6-SKX<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>到这里，就会有两个问题了，第一：这些状态到底是怎么管理的？第二：如何关闭或者不进入这些状态呢？</p>
<p>从路径中可以看到，这些状态是由<code>cpuidle</code>驱动报告给操作系统的，具体使用的驱动可以在<code>/sys/devices/system/cpu/cpuidle/current_driver</code>这个文件中看到，出现降频的机器，用的驱动是<code>intel_idle</code>，而不降频的机器，这个驱动是<code>none</code>，也就是没加载。</p>
<p>为什么一个加载另一个却没加载呢？原因出在了<code>mwait</code>上，简单看了一下这个驱动加载的代码：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">int</span> __init <span class="token function">intel_idle_probe</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">int</span> eax<span class="token punctuation">,</span> ebx<span class="token punctuation">,</span> ecx<span class="token punctuation">;</span>
	<span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">x86_cpu_id</span> <span class="token operator">*</span>id<span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>max_cstate <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token function">pr_debug</span><span class="token punctuation">(</span>PREFIX <span class="token string">"disabled\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span>EPERM<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	id <span class="token operator">=</span> <span class="token function">x86_match_cpu</span><span class="token punctuation">(</span>intel_idle_ids<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>boot_cpu_data<span class="token punctuation">.</span>x86_vendor <span class="token operator">==</span> X86_VENDOR_INTEL <span class="token operator">&amp;&amp;</span>
		    boot_cpu_data<span class="token punctuation">.</span>x86 <span class="token operator">==</span> <span class="token number">6</span><span class="token punctuation">)</span>
			<span class="token function">pr_debug</span><span class="token punctuation">(</span>PREFIX <span class="token string">"does not run on family %d model %d\n"</span><span class="token punctuation">,</span>
				boot_cpu_data<span class="token punctuation">.</span>x86<span class="token punctuation">,</span> boot_cpu_data<span class="token punctuation">.</span>x86_model<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span>ENODEV<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>boot_cpu_data<span class="token punctuation">.</span>cpuid_level <span class="token operator">&lt;</span> CPUID_MWAIT_LEAF<span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token operator">-</span>ENODEV<span class="token punctuation">;</span>

	<span class="token function">cpuid</span><span class="token punctuation">(</span>CPUID_MWAIT_LEAF<span class="token punctuation">,</span> <span class="token operator">&amp;</span>eax<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ebx<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ecx<span class="token punctuation">,</span> <span class="token operator">&amp;</span>mwait_substates<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>ecx <span class="token operator">&amp;</span> CPUID5_ECX_EXTENSIONS_SUPPORTED<span class="token punctuation">)</span> <span class="token operator">||</span>
	    <span class="token operator">!</span><span class="token punctuation">(</span>ecx <span class="token operator">&amp;</span> CPUID5_ECX_INTERRUPT_BREAK<span class="token punctuation">)</span> <span class="token operator">||</span>
	    <span class="token operator">!</span>mwait_substates<span class="token punctuation">)</span>
			<span class="token keyword">return</span> <span class="token operator">-</span>ENODEV<span class="token punctuation">;</span>

	<span class="token function">pr_debug</span><span class="token punctuation">(</span>PREFIX <span class="token string">"MWAIT substates: 0x%x\n"</span><span class="token punctuation">,</span> mwait_substates<span class="token punctuation">)</span><span class="token punctuation">;</span>

	icpu <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">idle_cpu</span> <span class="token operator">*</span><span class="token punctuation">)</span>id<span class="token operator">-></span>driver_data<span class="token punctuation">;</span>
	cpuidle_state_table <span class="token operator">=</span> icpu<span class="token operator">-></span>state_table<span class="token punctuation">;</span>

	<span class="token function">pr_debug</span><span class="token punctuation">(</span>PREFIX <span class="token string">"v"</span> INTEL_IDLE_VERSION
		<span class="token string">" model 0x%X\n"</span><span class="token punctuation">,</span> boot_cpu_data<span class="token punctuation">.</span>x86_model<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>代码里会通过cpuid查询<code>CPUID_MWAIT_LEAF</code>也就是<code>Monitor/MWait</code>的支持，如果不支持，就不会加载驱动了。而出现降频的机器上执行<code>cpuid -1 -l5 -s5</code>：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">~<span class="token punctuation">]</span><span class="token comment"># cpuid -1 -l5 -s5</span>
Disclaimer: cpuid may not support decoding of all cpuid registers.
CPU:
   MONITOR/MWAIT <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>:
      smallest monitor-line size <span class="token punctuation">(</span>bytes<span class="token punctuation">)</span>       <span class="token operator">=</span> 0x40 <span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span>
      largest monitor-line size <span class="token punctuation">(</span>bytes<span class="token punctuation">)</span>        <span class="token operator">=</span> 0x40 <span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span>
      enum of Monitor-MWAIT exts supported     <span class="token operator">=</span> <span class="token boolean">true</span>
      supports intrs as break-event <span class="token keyword">for</span> MWAIT  <span class="token operator">=</span> <span class="token boolean">true</span>
      number of C0 sub C-states using MWAIT    <span class="token operator">=</span> 0x0 <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
      number of C1 sub C-states using MWAIT    <span class="token operator">=</span> 0x2 <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
      number of C2 sub C-states using MWAIT    <span class="token operator">=</span> 0x0 <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
      number of C3 sub C-states using MWAIT    <span class="token operator">=</span> 0x2 <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
      number of C4 sub C-states using MWAIT    <span class="token operator">=</span> 0x0 <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
      number of C5 sub C-states using MWAIT    <span class="token operator">=</span> 0x0 <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
      number of C6 sub C-states using MWAIT    <span class="token operator">=</span> 0x0 <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
      number of C7 sub C-states using MWAIT    <span class="token operator">=</span> 0x0 <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>发现<code>enum of Monitor-MWAIT exts supported</code>和<code>supports intrs as break-event for MWAIT</code>都是支持的，那应该是BIOS里没有关闭<code>MONITOR/MWAIT</code>相关选项，于是乎进入BIOS，关闭了<code>MONITOR/MWAIT</code>之后，发现cpuid依然显示支持！难道是厂商BIOS有问题？至少这个选项上是不符合预期的，而且其他厂家是可以正常关闭的。不过已经没办法去把所有的BIOS刷到最新了，只能等着后期再测试了。</p>
<p>接下来就是第二个问题了，如何关闭这些状态，或者阻止操作系统进入这些状态呢？在上面的文件系统里，可以看到每个状态都有关disable接口，简单的，如果不想进入到这个状态，就直接<code>echo 1 &gt; disable</code>就可以了，针对这台机器，把state3、state2全部关闭，就可以实现稳定频率：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">~<span class="token punctuation">]</span><span class="token comment"># turbostat</span>
Package Core    CPU     Avg_MHz Busy%   Bzy_MHz TSC_MHz IRQ     SMI     POLL    C1      C1E     C6      POLL%   C1%     C1E%    C6%     CPU%c1  CPU%c6  CoreTmp PkgTmp  PkgWatt RAMWatt PKG_%R
AM_%
-       -       -       <span class="token number">8</span>       <span class="token number">0.26</span>    <span class="token number">3200</span>    <span class="token number">2394</span>    <span class="token number">11035</span>   <span class="token number">0</span>       <span class="token number">31</span>      <span class="token number">17266</span>   <span class="token number">0</span>       <span class="token number">0</span>       <span class="token number">0.16</span>    <span class="token number">99.74</span>   <span class="token number">0.00</span>    <span class="token number">0.00</span>    <span class="token number">99.74</span>   <span class="token number">0.00</span>    <span class="token number">64</span>      <span class="token number">64</span>      <span class="token number">125.62</span>  <span class="token number">83.98</span>   <span class="token number">0.00</span> <span class="token number">0</span>
.00
<span class="token number">0</span>       <span class="token number">0</span>       <span class="token number">0</span>       <span class="token number">8</span>       <span class="token number">0.27</span>    <span class="token number">3200</span>    <span class="token number">2395</span>    <span class="token number">247</span>     <span class="token number">0</span>       <span class="token number">2</span>       <span class="token number">376</span>     <span class="token number">0</span>       <span class="token number">0</span>       <span class="token number">0.00</span>    <span class="token number">99.75</span>   <span class="token number">0.00</span>    <span class="token number">0.00</span>    <span class="token number">99.73</span>   <span class="token number">0.00</span>    <span class="token number">57</span>      <span class="token number">58</span>      <span class="token number">61.53</span>   <span class="token number">40.83</span>   <span class="token number">0.00</span> <span class="token number">0</span>
.00
<span class="token number">0</span>       <span class="token number">0</span>       <span class="token number">48</span>      <span class="token number">1</span>       <span class="token number">0.02</span>    <span class="token number">3200</span>    <span class="token number">2395</span>    <span class="token number">18</span>      <span class="token number">0</span>       <span class="token number">0</span>       <span class="token number">23</span>      <span class="token number">0</span>       <span class="token number">0</span>       <span class="token number">0.00</span>    <span class="token number">99.99</span>   <span class="token number">0.00</span>    <span class="token number">0.00</span>    <span class="token number">99.98</span>
<span class="token number">0</span>       <span class="token number">1</span>       <span class="token number">4</span>       <span class="token number">6</span>       <span class="token number">0.18</span>    <span class="token number">3200</span>    <span class="token number">2395</span>    <span class="token number">240</span>     <span class="token number">0</span>       <span class="token number">0</span>       <span class="token number">322</span>     <span class="token number">0</span>       <span class="token number">0</span>       <span class="token number">0.00</span>    <span class="token number">99.83</span>   <span class="token number">0.00</span>    <span class="token number">0.00</span>    <span class="token number">99.82</span>   <span class="token number">0.00</span>    <span class="token number">55</span>
<span class="token number">0</span>       <span class="token number">1</span>       <span class="token number">52</span>      <span class="token number">4</span>       <span class="token number">0.14</span>    <span class="token number">3200</span>    <span class="token number">2395</span>    <span class="token number">150</span>     <span class="token number">0</span>       <span class="token number">0</span>       <span class="token number">340</span>     <span class="token number">0</span>       <span class="token number">0</span>       <span class="token number">0.00</span>    <span class="token number">99.87</span>   <span class="token number">0.00</span>    <span class="token number">0.00</span>    <span class="token number">99.86</span>
<span class="token number">0</span>       <span class="token number">2</span>       <span class="token number">8</span>       <span class="token number">2</span>       <span class="token number">0.06</span>    <span class="token number">3200</span>    <span class="token number">2395</span>    <span class="token number">90</span>      <span class="token number">0</span>       <span class="token number">0</span>       <span class="token number">132</span>     <span class="token number">0</span>       <span class="token number">0</span>       <span class="token number">0.00</span>    <span class="token number">99.95</span>   <span class="token number">0.00</span>    <span class="token number">0.00</span>    <span class="token number">99.94</span>   <span class="token number">0.00</span>    <span class="token number">55</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看到关闭这两个状态之后，频率直接被锁在了3.2Ghz上。效果非常好。</p>
<p>但是这个方法始终感觉有点tricky。查询了一些资料，发现内核对外提供了一个接口<code>/dev/cpu_dma_latency</code>，这个接口是Kernel <a href="https://www.kernel.org/doc/Documentation/power/pm_qos_interface.txt">PM Quality Of Service Interface</a>的一部分，简单来说，可以通过这个接口，声明对系统延迟的容忍度，如果一个C-state的延迟超过了容忍度，则内核就不会进入到这个C-state。怎么设置呢，这是一个二进制接口，echo就不行了，必须写代码了，可以参考<a href="https://gist.github.com/SaveTheRbtz/f5e8d1ca7b55b6a7897b">这个Gist</a>：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token class-name">int32_t</span> v<span class="token punctuation">;</span>
	<span class="token keyword">int</span> fd<span class="token punctuation">;</span>

<span class="token comment">// ...</span>
	v <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"setting latency to %d.%.6d seconds\n"</span><span class="token punctuation">,</span> v<span class="token operator">/</span><span class="token number">1000000</span><span class="token punctuation">,</span> v <span class="token operator">%</span> <span class="token number">1000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/dev/cpu_dma_latency"</span><span class="token punctuation">,</span> O_WRONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>fd <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"open /dev/cpu_dma_latency"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">write</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>v<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"write to /dev/cpu_dma_latency"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>通过程序，写入个1就可以了，需要注意的是，必须一直保持这个fd打开，如果关闭了，那又会自动变成默认值了。为什么设置成1呢？因为这是最小的int值了，如果设置成0，意味着CPU必须一直是C0状态才能满足，设置为0，就和在内核启动参数上添加<code>idle=poll</code>是一样了。</p>
<p>还有更简单的办法，使用tuned，在我们用的CentOS 7里，自带了tuned，通过设置tuned，可以获得想要的性能结果：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">~<span class="token punctuation">]</span><span class="token comment"># tuned-adm profile</span>
Available profiles:
- balanced                    - General non-specialized tuned profile
- desktop                     - Optimize <span class="token keyword">for</span> the desktop use-case
- hpc-compute                 - Optimize <span class="token keyword">for</span> HPC compute workloads
- latency-performance         - Optimize <span class="token keyword">for</span> deterministic performance at the cost of increased power consumption
- network-latency             - Optimize <span class="token keyword">for</span> deterministic performance at the cost of increased power consumption, focused on low latency network performance
- network-throughput          - Optimize <span class="token keyword">for</span> streaming network throughput, generally only necessary on older CPUs or 40G+ networks
- powersave                   - Optimize <span class="token keyword">for</span> low power consumption
- throughput-performance      - Broadly applicable tuning that provides excellent performance across a variety of common server workloads
- virtual-guest               - Optimize <span class="token keyword">for</span> running inside a virtual guest
- virtual-host                - Optimize <span class="token keyword">for</span> running KVM guests
Current active profile: powersave
~<span class="token punctuation">]</span><span class="token comment"># tuned-adm profile latency-performance</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>使用<code>tuned-adm profile latency-performance</code>设置性能模式为<code>latency-performance</code>，也就做了上面最重要的两个事情<code>cpupower frequency-set -g performance</code>以及<code>write 1 to /dev/cpu_dma_latency</code>。当然，tuned默认的配置还会夹带一些其他的配置，可以根据情况删减，做成单独的custom配置使用。</p>
<p>说了半天，其实感觉也没有非常了解Intel以及Kernel针对电源管理上的处理，个人觉得当前的硬件和软件已经发展到一个很复杂的境地，要想全盘掌握还是比较困难，好在这段时间查询了这么多资料最终也算是比较圆满的解决问题了。还算一个比较好的结果吧。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>cpupower</tag>
        <tag>Turbo</tag>
        <tag>HWP</tag>
        <tag>CPUidle</tag>
        <tag>tuned</tag>
      </tags>
  </entry>
  <entry>
    <title>/proc/cpuinfo里的CPU型号怎么来的？</title>
    <url>/2020/12/17/cpuinfo-model-name/</url>
    <content><![CDATA[<p>今天有一件小事，勾起了我的好奇心。有个同事反馈说，我们虚拟的CPU主频较低，对性能有影响，于是就问了一下，怎么看主频的，很简单，看看<code>lscpu</code>里的<code>Model name:</code>字段就行了：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@<span class="token punctuation">]</span><span class="token comment"># lscpu</span>
Architecture:          x86_64
CPU op-mode<span class="token punctuation">(</span>s<span class="token punctuation">)</span>:        <span class="token number">32</span>-bit, <span class="token number">64</span>-bit
Byte Order:            Little Endian
<span class="token punctuation">..</span>.
Vendor ID:             GenuineIntel
CPU family:            <span class="token number">6</span>
Model:                 <span class="token number">85</span>
Model name:            Intel<span class="token punctuation">(</span>R<span class="token punctuation">)</span> Xeon<span class="token punctuation">(</span>R<span class="token punctuation">)</span> Gold 6240R CPU @ <span class="token number">2</span>.40GHz
Stepping:              <span class="token number">7</span>
CPU MHz:               <span class="token number">2394.374</span>
BogoMIPS:              <span class="token number">4788.74</span>
Hypervisor vendor:     KVM
Virtualization type:   full
<span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看到这台机器的<code>Model name:</code>是<code>Intel(R) Xeon(R) Gold 6240R CPU @ 2.40GHz</code>，@符号后面就是2.40GHz，也就是这颗CPU的基础频率，其实之前写过一个文章<a href="https://www.ichenfu.com/2020/07/17/cpu-idle-time-managment/">再谈CPU的电源管理（如何做到稳定全核睿频？）</a>，我们线上实际也是跑在睿频频率上的。实际这个@后面的频率并不能反映证实频率。</p>
<p>那么问题来了。这个<code>Model name</code>到底从哪读的？<span id="more"></span></p>
<p>其实如果有些基础的可能一开始就能猜到会不会是用<code>cpuid</code>指令去读取的，但是不着急，一点点跟着找找看看。</p>
<p>首先lscpu命令大部分数据都是从<code>/proc/cpuinfo</code>文件读取的，所以我们先看看这个文件：</p>
<pre class="line-numbers language-none"><code class="language-none">[root@~]# cat &#x2F;proc&#x2F;cpuinfo
processor       : 0
vendor_id       : GenuineIntel
cpu family      : 6
model           : 85
model name      : Intel(R) Xeon(R) Gold 6240R CPU @ 2.40GHz
stepping        : 7
microcode       : 0x500002c
cpu MHz         : 3199.951
cache size      : 36608 KB
physical id     : 0
siblings        : 48
core id         : 0
cpu cores       : 24
apicid          : 0
initial apicid  : 0
fpu             : yes
fpu_exception   : yes
cpuid level     : 22
wp              : yes
...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>确实也有model name，那么这个文件咋来的呢？一般情况下，<code>/proc</code>下面的文件都是内核虚拟出来的，那么直接找找这个文件的<a href="https://elixir.bootlin.com/linux/v5.10.1/source/fs/proc/cpuinfo.c">内核代码</a>就知道了：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">extern</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">seq_operations</span> cpuinfo_op<span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">cpuinfo_open</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">inode</span> <span class="token operator">*</span>inode<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>file<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token function">arch_freq_prepare_all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token function">seq_open</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token operator">&amp;</span>cpuinfo_op<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>再顺着找下cpuinfo_op的实现，需要说明的是，这个实现不同的平台长的不太一样，我们就看<a href="https://elixir.bootlin.com/linux/v5.10.1/source/arch/x86/kernel/cpu/proc.c#L61">x86的实现</a>就行了，毕竟我们现在用的就是x86：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">show_cpuinfo</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">seq_file</span> <span class="token operator">*</span>m<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>v<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">struct</span> <span class="token class-name">cpuinfo_x86</span> <span class="token operator">*</span>c <span class="token operator">=</span> v<span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">int</span> cpu<span class="token punctuation">;</span>
	<span class="token keyword">int</span> i<span class="token punctuation">;</span>

	cpu <span class="token operator">=</span> c<span class="token operator">-></span>cpu_index<span class="token punctuation">;</span>
	<span class="token function">seq_printf</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token string">"processor\t: %u\n"</span>
		   <span class="token string">"vendor_id\t: %s\n"</span>
		   <span class="token string">"cpu family\t: %d\n"</span>
		   <span class="token string">"model\t\t: %u\n"</span>
		   <span class="token string">"model name\t: %s\n"</span><span class="token punctuation">,</span>
		   cpu<span class="token punctuation">,</span>
		   c<span class="token operator">-></span>x86_vendor_id<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">?</span> c<span class="token operator">-></span>x86_vendor_id <span class="token operator">:</span> <span class="token string">"unknown"</span><span class="token punctuation">,</span>
		   c<span class="token operator">-></span>x86<span class="token punctuation">,</span>
		   c<span class="token operator">-></span>x86_model<span class="token punctuation">,</span>
		   c<span class="token operator">-></span>x86_model_id<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">?</span> c<span class="token operator">-></span>x86_model_id <span class="token operator">:</span> <span class="token string">"unknown"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>下面的代码不用管，最关键的model name是从<code>x86_model_id</code>里读到的，那么就简单了啊，看看谁去填充<code>x86_model_id</code>不就可以了么？</p>
<p>有工具的帮助，还是很容易找到的：代码在<a href="https://elixir.bootlin.com/linux/v5.10.1/source/arch/x86/kernel/cpu/common.c#L646">arch&#x2F;x86&#x2F;kernel&#x2F;cpu&#x2F;common.c#L646</a>：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">get_model_name</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">cpuinfo_x86</span> <span class="token operator">*</span>c<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span>v<span class="token punctuation">;</span>
	<span class="token keyword">char</span> <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token operator">*</span>q<span class="token punctuation">,</span> <span class="token operator">*</span>s<span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token operator">-></span>extended_cpuid_level <span class="token operator">&lt;</span> <span class="token number">0x80000004</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>

	v <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span>c<span class="token operator">-></span>x86_model_id<span class="token punctuation">;</span>
	<span class="token function">cpuid</span><span class="token punctuation">(</span><span class="token number">0x80000002</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">cpuid</span><span class="token punctuation">(</span><span class="token number">0x80000003</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">cpuid</span><span class="token punctuation">(</span><span class="token number">0x80000004</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	c<span class="token operator">-></span>x86_model_id<span class="token punctuation">[</span><span class="token number">48</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

	<span class="token comment">/* Trim whitespace */</span>
	p <span class="token operator">=</span> q <span class="token operator">=</span> s <span class="token operator">=</span> <span class="token operator">&amp;</span>c<span class="token operator">-></span>x86_model_id<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

	<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">*</span>p <span class="token operator">==</span> <span class="token char">' '</span><span class="token punctuation">)</span>
		p<span class="token operator">++</span><span class="token punctuation">;</span>

	<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token comment">/* Note the last non-whitespace index */</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isspace</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span>
			s <span class="token operator">=</span> q<span class="token punctuation">;</span>

		<span class="token operator">*</span>q<span class="token operator">++</span> <span class="token operator">=</span> <span class="token operator">*</span>p<span class="token operator">++</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token operator">*</span><span class="token punctuation">(</span>s <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>哦，确实和上面的猜想差不多，用了cpuid这个指令，从<code>0x80000002</code>读到<code>0x80000004</code>。但是仔细看这里有个小细节：x86_model_id的定义原本是<code>char x86_model_id[64];</code>是一个char类型数组，而cpuid的定义呢如下：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">cpuid</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> op<span class="token punctuation">,</span>
			 <span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span>eax<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span>ebx<span class="token punctuation">,</span>
			 <span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span>ecx<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span>edx<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token operator">*</span>eax <span class="token operator">=</span> op<span class="token punctuation">;</span>
	<span class="token operator">*</span>ecx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token function">__cpuid</span><span class="token punctuation">(</span>eax<span class="token punctuation">,</span> ebx<span class="token punctuation">,</span> ecx<span class="token punctuation">,</span> edx<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>几个返回值是<code>unsigned int *</code>类型，从名字就可以看出来，EAX，EBX，ECX，EDX这几个寄存器都是32位的。所以呢，在代码里先强制把x86_model_id转换成(unsigned int *)，这样相当于一次操作4个字节内容。</p>
<p>从<a href="http://www.flounder.com/cpuid_explorer2.htm#CPUID(0x80000002)">The CPUID Explorer</a>了解到：CPUID(0x80000002)..CPUID(0x80000004):就是Processor brand string。</p>
<p>既然看到这里，我们也自己试试呗，看看能不能自己读取并解析出来，我们也用<code>cpuid</code>命令获取寄存器里的原始内容：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@<span class="token punctuation">]</span><span class="token comment"># cpuid --one-cpu --raw --leaf=0x80000002</span>
CPU:
   0x80000002 0x00: <span class="token assign-left variable">eax</span><span class="token operator">=</span>0x65746e49 <span class="token assign-left variable">ebx</span><span class="token operator">=</span>0x2952286c <span class="token assign-left variable">ecx</span><span class="token operator">=</span>0x6f655820 <span class="token assign-left variable">edx</span><span class="token operator">=</span>0x2952286e
<span class="token punctuation">[</span>root@<span class="token punctuation">]</span><span class="token comment"># cpuid --one-cpu --raw --leaf=0x80000003</span>
CPU:
   0x80000003 0x00: <span class="token assign-left variable">eax</span><span class="token operator">=</span>0x6c6f4720 <span class="token assign-left variable">ebx</span><span class="token operator">=</span>0x32362064 <span class="token assign-left variable">ecx</span><span class="token operator">=</span>0x20523034 <span class="token assign-left variable">edx</span><span class="token operator">=</span>0x20555043
<span class="token punctuation">[</span>root@<span class="token punctuation">]</span><span class="token comment"># cpuid --one-cpu --raw --leaf=0x80000004</span>
CPU:
   0x80000004 0x00: <span class="token assign-left variable">eax</span><span class="token operator">=</span>0x2e322040 <span class="token assign-left variable">ebx</span><span class="token operator">=</span>0x48473034 <span class="token assign-left variable">ecx</span><span class="token operator">=</span>0x0000007a <span class="token assign-left variable">edx</span><span class="token operator">=</span>0x00000000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>需要说明的是，因为x86是<code>Little Endian</code>架构，也就是从寄存器读出来的int值是反过来的，那么<code>0x65746e49</code>实际应该表示成<code>0x496e7465</code>，我们一个个字节拼一下，再打印出来，看看对不对：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python3
<span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> <span class="token string">'\x49\x6e\x74\x65\x6c\x28\x52\x29\x20\x58\x65\x6f\x6e\x28\x52\x29\x20\x47\x6f\x6c\x64\x20\x36\x32\x34\x30\x52\x20\x43\x50\x55\x20\x40\x20\x32\x2e\x34\x30\x47\x48\x7a\x00'</span>
<span class="token operator">>></span><span class="token operator">></span> print<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
Intel<span class="token punctuation">(</span>R<span class="token punctuation">)</span> Xeon<span class="token punctuation">(</span>R<span class="token punctuation">)</span> Gold 6240R CPU @ <span class="token number">2</span>.40GHz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>嘿嘿，没问题！</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>cpuinfo</tag>
        <tag>cpuid</tag>
      </tags>
  </entry>
  <entry>
    <title>CVE-2016-3714 - ImageMagick漏洞分析和解决</title>
    <url>/2016/05/08/cve-2016-3714/</url>
    <content><![CDATA[<p>2016年5月3号，一个被广泛使用的图片处理库<code>ImageMagick</code>被爆出存在一处远程命令执行漏洞（CVE-2016–3714），当其处理的上传图片带有攻击代码时，攻击代码中的远程命令将会被执行，进而可能控制服务器。<br>这个漏洞被命名为ImageTragick，甚至还有了一个属于这个漏洞自己的网站（<a href="https://imagetragick.com/">https://imagetragick.com/）</a><br>同样，SAE上也是安装了这个库的，在PHP运行环境中，也是有PHP-Imagick这个扩展的，这就意味着SAE的PHP环境也是有相同的远程命令执行漏洞的。<br>因此SAE在第一时间修复了该漏洞，并执行了更严格的策略，和官方提供的解决方案相比，更加严格的杜绝了类似现象的发生。下面就来看看这个漏洞的产生，以及SAE是如何修复这个漏洞的。</p>
<span id="more"></span>

<h3 id="漏洞原因"><a href="#漏洞原因" class="headerlink" title="漏洞原因"></a>漏洞原因</h3><p>这个漏洞产生的原因，在ImageTragick的网站也是有说明，主要是由于一个<code>ImageMagick</code>有一个功能叫做delegate（委托），作用是调用外部的lib来处理文件。而调用外部lib的过程是使用系统的<code>system</code>命令来执行的（ <a href="https://github.com/ImageMagick/ImageMagick/blob/e93e339c0a44cec16c08d78241f7aa3754485004/MagickCore/delegate.c#L347">https://github.com/ImageMagick/ImageMagick/blob/e93e339c0a44cec16c08d78241f7aa3754485004/MagickCore/delegate.c#L347</a> ）<br>所有的委托都是在一个配置文件中指定的，默认的配置文件在<code>/etc/ImageMagick/delegates.xml</code>（不同的系统和版本位置有一定区别），其中：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delegatemap</span><span class="token punctuation">></span></span>
    ...
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delegate</span> <span class="token attr-name">decode</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https<span class="token punctuation">"</span></span> <span class="token attr-name">command</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token entity named-entity" title="&quot;">&amp;quot;</span>curl<span class="token entity named-entity" title="&quot;">&amp;quot;</span> -s -k -o <span class="token entity named-entity" title="&quot;">&amp;quot;</span>%o<span class="token entity named-entity" title="&quot;">&amp;quot;</span> <span class="token entity named-entity" title="&quot;">&amp;quot;</span>https:%M<span class="token entity named-entity" title="&quot;">&amp;quot;</span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    ...
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delegatemap</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在文件的注释里可以看到它定义了很多占位符，比如%i是输入的文件名，%l是图片exif label信息。而在后面command的位置，%i和%l等占位符被拼接在命令行中。这个漏洞也因此而来，被拼接后的命令行传入了系统的system函数，因此只需使用反引号（&#96;）或闭合双引号，就可以执行任意命令。<br>看官方给的poc：</p>
<pre><code>push graphic-context
viewbox 0 0 640 480
fill &#39;url(https://&quot;|id; &quot;)&#39;
pop graphic-context
</code></pre>
<p>就会在调用curl的同时，调用了<code>id</code>命令。于是漏洞就产生了。</p>
<h3 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h3><p>ImageTragick网站上给出了两种修复或者规避这个漏洞的方式：</p>
<ol>
<li>处理图片前，先检查图片的 “magic bytes”， 如果图片头不是你想要的格式，那么就不调用ImageMagick处理图片。</li>
<li>使用一个policy文件来禁止一些有问题的操作，这个文件默认位置在 &#x2F;etc&#x2F;ImageMagick&#x2F;policy.xml（不同的系统和版本位置有一定区别），可以按如下配置：</li>
</ol>
 <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>policymap</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>policy</span> <span class="token attr-name">domain</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>coder<span class="token punctuation">"</span></span> <span class="token attr-name">rights</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>none<span class="token punctuation">"</span></span> <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>EPHEMERAL<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>policy</span> <span class="token attr-name">domain</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>coder<span class="token punctuation">"</span></span> <span class="token attr-name">rights</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>none<span class="token punctuation">"</span></span> <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>URL<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>policy</span> <span class="token attr-name">domain</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>coder<span class="token punctuation">"</span></span> <span class="token attr-name">rights</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>none<span class="token punctuation">"</span></span> <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>HTTPS<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>policy</span> <span class="token attr-name">domain</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>coder<span class="token punctuation">"</span></span> <span class="token attr-name">rights</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>none<span class="token punctuation">"</span></span> <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>MVG<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>policy</span> <span class="token attr-name">domain</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>coder<span class="token punctuation">"</span></span> <span class="token attr-name">rights</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>none<span class="token punctuation">"</span></span> <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>MSL<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>policy</span> <span class="token attr-name">domain</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>coder<span class="token punctuation">"</span></span> <span class="token attr-name">rights</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>none<span class="token punctuation">"</span></span> <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>TEXT<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>policy</span> <span class="token attr-name">domain</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>coder<span class="token punctuation">"</span></span> <span class="token attr-name">rights</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>none<span class="token punctuation">"</span></span> <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>SHOW<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>policy</span> <span class="token attr-name">domain</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>coder<span class="token punctuation">"</span></span> <span class="token attr-name">rights</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>none<span class="token punctuation">"</span></span> <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>WIN<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>policy</span> <span class="token attr-name">domain</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>coder<span class="token punctuation">"</span></span> <span class="token attr-name">rights</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>none<span class="token punctuation">"</span></span> <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>PLT<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>policymap</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>当然，直接升级到最新版的<code>ImageMagick</code>，也是能解决这个问题的。</p>
<h3 id="SAE的做法"><a href="#SAE的做法" class="headerlink" title="SAE的做法"></a>SAE的做法</h3><p>和上面给的做法不同的是，SAE并没有升级<code>ImageMagick</code>版本，也没有配置policy文件，而是采取了一个稍微‘暴力’点的手段来解决这个漏洞。</p>
<p>SAE的PHP运行环境，是放在一个“沙箱”当中的，因此一般情况下，从php层面是无法突破这个沙箱的限制，去读取系统，或者是其他应用的文件的，但是也有例外，比如这次的漏洞，<code>ImageMagick</code>成功的突破了SAE沙箱的限制，不仅能够读取系统的文件，还可以运行外部命令，这对于SAE的安全性来说，是无法容忍的。<br>先说一下沙箱的原理，沙箱的原理，就是利用LD_PRELOAD这个环境变量，将很多的函数hook起来，替换为我们自己实现的一个版本，在这个版本里，可以进行一些权限的检查，判断是否通过，如果通过，则正常执行，否则就直接返回错误。从而保证整个系统的安全性。最简单的，我们可以把<code>open</code>这个函数hook起来，在里面判断每个应用是不是有权限去读写对应的文件，并根据判断结果放行或者拒绝。<br>上面说道<code>ImageMagick</code>使用的是<code>system</code>函数来执行外部命令，那么很简单，只需要将<code>system</code>函数hook住，判断是不是<code>ImageMagick</code>调用的，如果是，则直接拒绝，从根本上解决执行外部命令的问题。<br>但是，仅仅这样是不够的，为什么呢？来看一下PHP的源代码：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">DL_LOAD</span><span class="token expression"><span class="token punctuation">(</span>libname<span class="token punctuation">)</span>  <span class="token function">dlopen</span><span class="token punctuation">(</span>libname<span class="token punctuation">,</span> RTLD_LAZY <span class="token operator">|</span> RTLD_GLOBAL <span class="token operator">|</span> RTLD_DEEPBIND<span class="token punctuation">)</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>PHP在加载一个扩展时，会添加上<code>RTLD_DEEPBIND</code>这个参数，man中对这个参数的解释如下：</p>
<pre><code>RTLD_DEEPBIND (since glibc 2.3.4) Place the lookup scope of the symbols in this library ahead of the global scope.
This means that a self-contained library will use its own symbols in preference to global symbols with the same name
contained in libraries that have already been loaded. This flag is not specified in POSIX.1-2001.
</code></pre>
<p>意味着如果使用了这个参数，则程序在寻找符号时更倾向于使用自身的而不是全局空间中的，简单来说，就是LD_PRELOAD这种替换符号的形式对于使用RTLD_DEEPBIND加载的动态库文件是无效的。<br>因为这样，所以实际上<code>ImageMagick</code>调用的system并不是SAE沙箱中的system，而是系统中的system，那么如何解决？其实也很简单，把dlopen函数也hook住嘛，然后在这个函数里把RTLD_DEEPBIND参数去除掉，就可以了：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>so_name<span class="token punctuation">,</span> <span class="token string">"imagick.so"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                               
    flag <span class="token operator">=</span> flag <span class="token operator">&amp;</span> <span class="token operator">~</span>RTLD_DEEPBIND<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>使用这种做法，即使再出现类似的漏洞，对于SAE来说，也是安全的，因为有了沙箱的保护，只要不突破沙箱，就无法实现外部命令调用，或者任意读取文件等行为了。</p>
]]></content>
      <categories>
        <category>源码分析</category>
      </categories>
      <tags>
        <tag>CVE-2016-3714</tag>
        <tag>ImageMagick</tag>
        <tag>RTLD_DEEPBIND</tag>
      </tags>
  </entry>
  <entry>
    <title>再谈网卡的一致性命名</title>
    <url>/2020/11/10/consistent-network-device-naming/</url>
    <content><![CDATA[<p>针对网卡名字这个问题，其实之前也讨论过一次，主要是如何利用udev去重命名网卡，里面提到了新的一致性命名规则，但是没有细说。</p>
<p>当然肯定是遇到问题了，所以针对网卡命名的细节，需要再探讨一下。</p>
<p>其实目前大家还是更熟悉老的那种eth0,eth1…那种命名，目前我们大部分生产环境里也是这么用的。但是随着网卡数量越来越多（在我们使用的SR-IOV场景，加上VF虚拟网卡，机器上已经有超过16个网卡）这种命名规则已经不适应现代的硬件和操作系统了，所以最近我们也从老的命名方式，切换到操作系统默认的<a href="https://access.redhat.com/documentation/zh-cn/red_hat_enterprise_linux/7/html/networking_guide/ch-consistent_network_device_naming">一致网络设备命名</a>。</p>
<p>不过因此也带来了一些问题，发现不同厂商，或者不同机器会有命名不一致的情况，举个例子：</p>
<p>这是某台机器的网卡名字：</p>
<span id="more"></span>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@ ~<span class="token punctuation">]</span><span class="token comment"># ip addr</span>
<span class="token number">1</span>: lo: <span class="token operator">&lt;</span>LOOPBACK,UP,LOWER_UP<span class="token operator">></span> mtu <span class="token number">65536</span> qdisc noqueue state UNKNOWN group default qlen <span class="token number">1000</span>
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet <span class="token number">127.0</span>.0.1/8 scope <span class="token function">host</span> lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope <span class="token function">host</span>
       valid_lft forever preferred_lft forever
<span class="token number">2</span>: enp59s0f0: <span class="token operator">&lt;</span>BROADCAST,MULTICAST,SLAVE,UP,LOWER_UP<span class="token operator">></span> mtu <span class="token number">1500</span> qdisc mq master bond0 state UP group default qlen <span class="token number">1000</span>
    link/ether 0c:42:a1:b3:12:b8 brd ff:ff:ff:ff:ff:ff
<span class="token number">3</span>: enp59s0f1: <span class="token operator">&lt;</span>BROADCAST,MULTICAST,SLAVE,UP,LOWER_UP<span class="token operator">></span> mtu <span class="token number">1500</span> qdisc mq master bond0 state UP group default qlen <span class="token number">1000</span>
    link/ether 0c:42:a1:b3:12:b8 brd ff:ff:ff:ff:ff:ff<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>一块网卡的两个网口，被分别命名为<code>enp59s0f0</code>和<code>enp59s0f1</code>，这个还是挺容易理解的，通过网卡的PCIE地址进行命名，我们看下这块网卡的PCIE信息：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@ ~<span class="token punctuation">]</span><span class="token comment"># lspci |grep Mellanox</span>
3b:00.0 Ethernet controller: Mellanox Technologies MT27800 Family <span class="token punctuation">[</span>ConnectX-5<span class="token punctuation">]</span>
3b:00.1 Ethernet controller: Mellanox Technologies MT27800 Family <span class="token punctuation">[</span>ConnectX-5<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>针对<code>lspci</code>的输出，之前的文章<a href="https://www.ichenfu.com/2019/11/03/interpreting-the-output-of-lspci/">lspci命令输出的一些解释</a>也讨论过了：PCIE地址中总线编号<code>3b</code>对应到十进制就是59，后面的00.0和00.1分别对应设备编号0的第0和第1个Function，对应到网卡的名字，就是插在59总线的第0个插槽的第0个网口和第1个网口，因为网卡的插槽是不会变的，而且是个物理状态，自然网卡的名字就稳定了。</p>
<p>那么，按正常的理解，不同厂商之间，应该只是插槽不一样吧？然而却被事实打脸，换了一台机器，又是另外一个样子了：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@bx-10-13-207-38.chinaunicom-north-1.node.kubernetes ~<span class="token punctuation">]</span><span class="token comment"># ip addr</span>
<span class="token number">1</span>: lo: <span class="token operator">&lt;</span>LOOPBACK,UP,LOWER_UP<span class="token operator">></span> mtu <span class="token number">65536</span> qdisc noqueue state UNKNOWN group default qlen <span class="token number">1000</span>
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet <span class="token number">127.0</span>.0.1/8 scope <span class="token function">host</span> lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope <span class="token function">host</span>
       valid_lft forever preferred_lft forever
<span class="token number">2</span>: ens2f0: <span class="token operator">&lt;</span>BROADCAST,MULTICAST,SLAVE,UP,LOWER_UP<span class="token operator">></span> mtu <span class="token number">1500</span> qdisc mq master bond0 state UP group default qlen <span class="token number">1000</span>
    link/ether 04:3f:72:ac:f6:0e brd ff:ff:ff:ff:ff:ff
<span class="token number">3</span>: ens2f1: <span class="token operator">&lt;</span>BROADCAST,MULTICAST,SLAVE,UP,LOWER_UP<span class="token operator">></span> mtu <span class="token number">1500</span> qdisc mq master bond0 state UP group default qlen <span class="token number">1000</span>
    link/ether 04:3f:72:ac:f6:0e brd ff:ff:ff:ff:ff:ff<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如果还像上面那样理解这个名称的话，那应该网卡插在00总线的第2个插槽？因为总线是0所以省略了？然而继续被打脸：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@ ~<span class="token punctuation">]</span><span class="token comment"># lspci |grep Mellanox</span>
<span class="token number">86</span>:00.0 Ethernet controller: Mellanox Technologies MT27800 Family <span class="token punctuation">[</span>ConnectX-5<span class="token punctuation">]</span>
<span class="token number">86</span>:00.1 Ethernet controller: Mellanox Technologies MT27800 Family <span class="token punctuation">[</span>ConnectX-5<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>发现网卡插在<code>0x86</code>这个总线上，那换算成十进制应该是134啊？网卡名字不应该是<code>enp134s0f0</code>和<code>enp134s0f1</code>么，为啥变成<code>ens2f0</code>和<code>ens2f1</code>了？</p>
<p>于是乎，又翻开红帽的<a href="https://access.redhat.com/documentation/zh-cn/red_hat_enterprise_linux/7/html/networking_guide/sec-understanding_the_device_renaming_procedure">文档</a>，再仔细阅读一下:</p>
<blockquote><p>设备命名过程如下：<br>    1. &#x2F;usr&#x2F;lib&#x2F;udev&#x2F;rules.d&#x2F;60-net.rules文件中的规则会让 udev 帮助工具&#x2F;lib&#x2F;udev&#x2F;rename_device查看所有&#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-suffix文件。如果发现包含HWADDR条目的ifcfg文件与某个接口的MAC地址匹配，它会将该接口重命名为ifcfg文件中由DEVICE指令给出的名称。<br>    2. &#x2F;usr&#x2F;lib&#x2F;udev&#x2F;rules.d&#x2F;71-biosdevname.rules中的规则让biosdevname根据其命名策略重命名该接口，即在上一步中没有重命名该接口、已安装biosdevname、且未在boot命令行中将biosdevname&#x3D;0作为内核命令给出。<br>    3. &#x2F;lib&#x2F;udev&#x2F;rules.d&#x2F;75-net-description.rules中的规则让udev通过检查网络接口设备，填写内部udev设备属性值ID_NET_NAME_ONBOARD、ID_NET_NAME_SLOT、ID_NET_NAME_PATH。注：有些设备属性可能处于未定义状态。<br>    4. &#x2F;usr&#x2F;lib&#x2F;udev&#x2F;rules.d&#x2F;80-net-name-slot.rules中的规则让udev重命名该接口，优先顺序如下：ID_NET_NAME_ONBOARD、ID_NET_NAME_SLOT、ID_NET_NAME_PATH。并提供如下信息：没有在步骤 1 或 2 中重命名该接口，同时未给出内核参数net.ifnames&#x3D;0。如果一个参数未设定，则会按列表的顺序设定下一个。如果没有设定任何参数，则不会重命名该接口。</p>
</blockquote>

<p>再理理这个命名过程：</p>
<p>第1步先看看<code>/etc/sysconfig/network-scripts/</code>文件夹下有没有MAC地址匹配的配置文件，如果有，就按配置文件里的命名来。这里我们的系统不会命中。<br>第2步看是否使用<code>biosdevname</code>进行命名，这个是Dell的机器专属，不过我们统一给内核加上了<code>biosdevname=0</code>参数来统一Dell和其他厂商，所以这条应该也不会命中。<br>第3步是通过udev规则填一些env，暂时不涉及命名过程。<br>第4步是根据env进行重命名，并且有个优先顺序：ID_NET_NAME_ONBOARD、ID_NET_NAME_SLOT、ID_NET_NAME_PATH。</p>
<p>所以仔细点会发现，<code>enp59s0f0</code>这种命名规则是命中了<code>ID_NET_NAME_PATH</code>，是以PCI物理位置为规则命名；而<code>ens2f0</code>这种则是命中了<code>ID_NET_NAME_SLOT</code>，是以热插拔插槽索引号命名。</p>
<p>但是为什么会有这样的差异，依然不明朗，继续追踪，使用<code>udevadm info</code>命令看看能不能找到两者不同：</p>
<p>以<code>ID_NET_NAME_PATH</code>命名的机器：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@ ~<span class="token punctuation">]</span><span class="token comment"># udevadm info /sys/class/net/enp59s0f0</span>
P: /devices/pci0000:3a/0000:3a:00.0/0000:3b:00.0/net/enp59s0f0
E: <span class="token assign-left variable">DEVPATH</span><span class="token operator">=</span>/devices/pci0000:3a/0000:3a:00.0/0000:3b:00.0/net/enp59s0f0
E: <span class="token assign-left variable">ID_BUS</span><span class="token operator">=</span>pci
E: <span class="token assign-left variable">ID_MODEL_FROM_DATABASE</span><span class="token operator">=</span>MT27800 Family <span class="token punctuation">[</span>ConnectX-5<span class="token punctuation">]</span> <span class="token punctuation">(</span>ConnectX®-5 EN network interface card, <span class="token number">10</span>/25GbE dual-port SFP28, PCIe3.0 x8, tall bracket <span class="token punctuation">;</span> MCX512A-ACAT<span class="token punctuation">)</span>
E: <span class="token assign-left variable">ID_MODEL_ID</span><span class="token operator">=</span>0x1017
E: <span class="token assign-left variable">ID_NET_DRIVER</span><span class="token operator">=</span>mlx5_core
E: <span class="token assign-left variable">ID_NET_NAME_MAC</span><span class="token operator">=</span>enxb8599fbaa608
E: <span class="token assign-left variable">ID_NET_NAME_PATH</span><span class="token operator">=</span>enp59s0f0
E: <span class="token assign-left variable">ID_OUI_FROM_DATABASE</span><span class="token operator">=</span>Mellanox Technologies, Inc.
E: <span class="token assign-left variable">ID_PATH</span><span class="token operator">=</span>pci-0000:3b:00.0
E: <span class="token assign-left variable">ID_PATH_TAG</span><span class="token operator">=</span>pci-0000_3b_00_0
E: <span class="token assign-left variable">ID_PCI_CLASS_FROM_DATABASE</span><span class="token operator">=</span>Network controller
E: <span class="token assign-left variable">ID_PCI_SUBCLASS_FROM_DATABASE</span><span class="token operator">=</span>Ethernet controller
E: <span class="token assign-left variable">ID_VENDOR_FROM_DATABASE</span><span class="token operator">=</span>Mellanox Technologies
E: <span class="token assign-left variable">ID_VENDOR_ID</span><span class="token operator">=</span>0x15b3
E: <span class="token assign-left variable">IFINDEX</span><span class="token operator">=</span><span class="token number">6</span>
E: <span class="token assign-left variable">INTERFACE</span><span class="token operator">=</span>enp59s0f0
E: <span class="token assign-left variable">MAJOR</span><span class="token operator">=</span><span class="token number">0</span>
E: <span class="token assign-left variable">MINOR</span><span class="token operator">=</span><span class="token number">0</span>
E: <span class="token assign-left variable">SUBSYSTEM</span><span class="token operator">=</span>net
E: <span class="token assign-left variable">SYSTEMD_ALIAS</span><span class="token operator">=</span>/sys/subsystem/net/devices/enp59s0f0 /sys/subsystem/net/devices/enp59s0f0
E: <span class="token assign-left variable">TAGS</span><span class="token operator">=</span>:systemd:
E: <span class="token assign-left variable">UDEV_BIOSDEVNAME</span><span class="token operator">=</span><span class="token number">1</span>
E: <span class="token assign-left variable">USEC_INITIALIZED</span><span class="token operator">=</span><span class="token number">54242</span>
E: <span class="token assign-left variable">biosdevname</span><span class="token operator">=</span><span class="token number">0</span>
E: <span class="token assign-left variable">net.ifnames</span><span class="token operator">=</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>以<code>ID_NET_NAME_SLOT</code>命名的机器：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@ ~<span class="token punctuation">]</span><span class="token comment"># udevadm info /sys/class/net/ens2f0</span>
P: /devices/pci0000:85/0000:85:00.0/0000:86:00.0/net/ens2f0
E: <span class="token assign-left variable">DEVPATH</span><span class="token operator">=</span>/devices/pci0000:85/0000:85:00.0/0000:86:00.0/net/ens2f0
E: <span class="token assign-left variable">ID_BUS</span><span class="token operator">=</span>pci
E: <span class="token assign-left variable">ID_MODEL_FROM_DATABASE</span><span class="token operator">=</span>MT27800 Family <span class="token punctuation">[</span>ConnectX-5<span class="token punctuation">]</span> <span class="token punctuation">(</span>ConnectX®-5 EN network interface card, <span class="token number">10</span>/25GbE dual-port SFP28, PCIe3.0 x8, tall bracket <span class="token punctuation">;</span> MCX512A-ACAT<span class="token punctuation">)</span>
E: <span class="token assign-left variable">ID_MODEL_ID</span><span class="token operator">=</span>0x1017
E: <span class="token assign-left variable">ID_NET_DRIVER</span><span class="token operator">=</span>mlx5_core
E: <span class="token assign-left variable">ID_NET_NAME_MAC</span><span class="token operator">=</span>enx043f72acf60e
E: <span class="token assign-left variable">ID_NET_NAME_PATH</span><span class="token operator">=</span>enp134s0f0
E: <span class="token assign-left variable">ID_NET_NAME_SLOT</span><span class="token operator">=</span>ens2f0
E: <span class="token assign-left variable">ID_PATH</span><span class="token operator">=</span>pci-0000:86:00.0
E: <span class="token assign-left variable">ID_PATH_TAG</span><span class="token operator">=</span>pci-0000_86_00_0
E: <span class="token assign-left variable">ID_PCI_CLASS_FROM_DATABASE</span><span class="token operator">=</span>Network controller
E: <span class="token assign-left variable">ID_PCI_SUBCLASS_FROM_DATABASE</span><span class="token operator">=</span>Ethernet controller
E: <span class="token assign-left variable">ID_VENDOR_FROM_DATABASE</span><span class="token operator">=</span>Mellanox Technologies
E: <span class="token assign-left variable">ID_VENDOR_ID</span><span class="token operator">=</span>0x15b3
E: <span class="token assign-left variable">IFINDEX</span><span class="token operator">=</span><span class="token number">2</span>
E: <span class="token assign-left variable">INTERFACE</span><span class="token operator">=</span>ens2f0
E: <span class="token assign-left variable">SUBSYSTEM</span><span class="token operator">=</span>net
E: <span class="token assign-left variable">SYSTEMD_ALIAS</span><span class="token operator">=</span>/sys/subsystem/net/devices/ens2f0
E: <span class="token assign-left variable">TAGS</span><span class="token operator">=</span>:systemd:
E: <span class="token assign-left variable">UDEV_BIOSDEVNAME</span><span class="token operator">=</span><span class="token number">0</span>
E: <span class="token assign-left variable">USEC_INITIALIZED</span><span class="token operator">=</span><span class="token number">34864</span>
E: <span class="token assign-left variable">biosdevname</span><span class="token operator">=</span><span class="token number">0</span>
E: <span class="token assign-left variable">net.ifnames</span><span class="token operator">=</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>大部分都是一样的，但是以<code>ID_NET_NAME_SLOT</code>命名的机器，ID_NET_NAME_SLOT这个ENV不为空，而以<code>ID_NET_NAME_PATH</code>命名的机器直接就没有<code>ID_NET_NAME_SLOT</code>这个ENV。那么按照<code>/usr/lib/udev/rules.d/80-net-name-slot.rules</code>里的udev规则：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@ ~<span class="token punctuation">]</span><span class="token comment"># cat /usr/lib/udev/rules.d/80-net-name-slot.rules</span>
<span class="token comment"># do not edit this file, it will be overwritten on update</span>

ACTION<span class="token operator">!=</span><span class="token string">"add"</span>, <span class="token assign-left variable">GOTO</span><span class="token operator">=</span><span class="token string">"net_name_slot_end"</span>         <span class="token comment"># 如果不是设备添加操作，直接跳过</span>
SUBSYSTEM<span class="token operator">!=</span><span class="token string">"net"</span>, <span class="token assign-left variable">GOTO</span><span class="token operator">=</span><span class="token string">"net_name_slot_end"</span>      <span class="token comment"># 如果不是一个网络设备，直接跳过</span>
NAME<span class="token operator">!=</span><span class="token string">""</span>, <span class="token assign-left variable">GOTO</span><span class="token operator">=</span><span class="token string">"net_name_slot_end"</span>              <span class="token comment"># 如果已经有名字了，直接跳过</span>

IMPORT<span class="token punctuation">&#123;</span>cmdline<span class="token punctuation">&#125;</span><span class="token operator">=</span><span class="token string">"net.ifnames"</span>
ENV<span class="token punctuation">&#123;</span>net.ifnames<span class="token punctuation">&#125;</span><span class="token operator">==</span><span class="token string">"0"</span>, <span class="token assign-left variable">GOTO</span><span class="token operator">=</span><span class="token string">"net_name_slot_end"</span> <span class="token comment"># 如果内核参数里有net.ifnames=0，直接跳过</span>

<span class="token assign-left variable">NAME</span><span class="token operator">==</span><span class="token string">""</span>, ENV<span class="token punctuation">&#123;</span>ID_NET_NAME_ONBOARD<span class="token punctuation">&#125;</span><span class="token operator">!=</span><span class="token string">""</span>, <span class="token assign-left variable">NAME</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$env</span>&#123;ID_NET_NAME_ONBOARD&#125;"</span> <span class="token comment"># 没有名字，ID_NET_NAME_ONBOARD这个ENV存在，用ID_NET_NAME_ONBOARD作为名字</span>
<span class="token assign-left variable">NAME</span><span class="token operator">==</span><span class="token string">""</span>, ENV<span class="token punctuation">&#123;</span>ID_NET_NAME_SLOT<span class="token punctuation">&#125;</span><span class="token operator">!=</span><span class="token string">""</span>, <span class="token assign-left variable">NAME</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$env</span>&#123;ID_NET_NAME_SLOT&#125;"</span>       <span class="token comment"># 没有名字，ID_NET_NAME_SLOT这个ENV存在，用ID_NET_NAME_SLOT作为名字</span>
<span class="token assign-left variable">NAME</span><span class="token operator">==</span><span class="token string">""</span>, ENV<span class="token punctuation">&#123;</span>ID_NET_NAME_PATH<span class="token punctuation">&#125;</span><span class="token operator">!=</span><span class="token string">""</span>, <span class="token assign-left variable">NAME</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$env</span>&#123;ID_NET_NAME_PATH&#125;"</span>       <span class="token comment"># 没有名字，ID_NET_NAME_PATH这个ENV存在，用ID_NET_NAME_PATH作为名字</span>

<span class="token assign-left variable">LABEL</span><span class="token operator">=</span><span class="token string">"net_name_slot_end"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>和文档说的一样，如果<code>ENV&#123;ID_NET_NAME_SLOT&#125;</code>有值的话，那就直接用它了，就不会再用<code>ENV&#123;ID_NET_NAME_PATH&#125;</code>了。</p>
<p>那么问题来了，这些ENV又是咋来的？文档里说是在<code>/lib/udev/rules.d/75-net-description.rules</code>中设置的。那就看看这个文件：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@ ~<span class="token punctuation">]</span><span class="token comment"># cat /usr/lib/udev/rules.d/75-net-description.rules</span>
<span class="token comment"># do not edit this file, it will be overwritten on update</span>

<span class="token assign-left variable">ACTION</span><span class="token operator">==</span><span class="token string">"remove"</span>, <span class="token assign-left variable">GOTO</span><span class="token operator">=</span><span class="token string">"net_end"</span>
SUBSYSTEM<span class="token operator">!=</span><span class="token string">"net"</span>, <span class="token assign-left variable">GOTO</span><span class="token operator">=</span><span class="token string">"net_end"</span>

IMPORT<span class="token punctuation">&#123;</span>builtin<span class="token punctuation">&#125;</span><span class="token operator">=</span><span class="token string">"net_id"</span>            <span class="token comment"># 这些ENV应该是在这里设置的，因为没有其他显式赋值的地方了。</span>

<span class="token assign-left variable">SUBSYSTEMS</span><span class="token operator">==</span><span class="token string">"usb"</span>, IMPORT<span class="token punctuation">&#123;</span>builtin<span class="token punctuation">&#125;</span><span class="token operator">=</span><span class="token string">"usb_id"</span>, IMPORT<span class="token punctuation">&#123;</span>builtin<span class="token punctuation">&#125;</span><span class="token operator">=</span><span class="token string">"hwdb --subsystem=usb"</span>
<span class="token assign-left variable">SUBSYSTEMS</span><span class="token operator">==</span><span class="token string">"usb"</span>, <span class="token assign-left variable">GOTO</span><span class="token operator">=</span><span class="token string">"net_end"</span>

<span class="token assign-left variable">SUBSYSTEMS</span><span class="token operator">==</span><span class="token string">"pci"</span>, ENV<span class="token punctuation">&#123;</span>ID_BUS<span class="token punctuation">&#125;</span><span class="token operator">=</span><span class="token string">"pci"</span>, ENV<span class="token punctuation">&#123;</span>ID_VENDOR_ID<span class="token punctuation">&#125;</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$attr</span>&#123;vendor&#125;"</span>, ENV<span class="token punctuation">&#123;</span>ID_MODEL_ID<span class="token punctuation">&#125;</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$attr</span>&#123;device&#125;"</span>
<span class="token assign-left variable">SUBSYSTEMS</span><span class="token operator">==</span><span class="token string">"pci"</span>, IMPORT<span class="token punctuation">&#123;</span>builtin<span class="token punctuation">&#125;</span><span class="token operator">=</span><span class="token string">"hwdb --subsystem=pci"</span>

<span class="token assign-left variable">LABEL</span><span class="token operator">=</span><span class="token string">"net_end"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这里的<code>IMPORT&#123;builtin&#125;=&quot;net_id&quot;</code>是udev内部的实现。我们需要找到实现对应的代码了。</p>
<p>找了一下，代码在<a href="https://github.com/systemd/systemd/blob/v246/src/udev/udev-builtin.c">udev-builtin.c</a></p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">const</span> UdevBuiltin <span class="token operator">*</span><span class="token keyword">const</span> builtins<span class="token punctuation">[</span>_UDEV_BUILTIN_MAX<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">HAVE_BLKID</span></span>
        <span class="token punctuation">[</span>UDEV_BUILTIN_BLKID<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>udev_builtin_blkid<span class="token punctuation">,</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
        <span class="token punctuation">[</span>UDEV_BUILTIN_BTRFS<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>udev_builtin_btrfs<span class="token punctuation">,</span>
        <span class="token punctuation">[</span>UDEV_BUILTIN_HWDB<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>udev_builtin_hwdb<span class="token punctuation">,</span>
        <span class="token punctuation">[</span>UDEV_BUILTIN_INPUT_ID<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>udev_builtin_input_id<span class="token punctuation">,</span>
        <span class="token punctuation">[</span>UDEV_BUILTIN_KEYBOARD<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>udev_builtin_keyboard<span class="token punctuation">,</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">HAVE_KMOD</span></span>
        <span class="token punctuation">[</span>UDEV_BUILTIN_KMOD<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>udev_builtin_kmod<span class="token punctuation">,</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
        <span class="token punctuation">[</span>UDEV_BUILTIN_NET_ID<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>udev_builtin_net_id<span class="token punctuation">,</span>       <span class="token comment">// 就是这里</span>
        <span class="token punctuation">[</span>UDEV_BUILTIN_NET_LINK<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>udev_builtin_net_setup_link<span class="token punctuation">,</span>
        <span class="token punctuation">[</span>UDEV_BUILTIN_PATH_ID<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>udev_builtin_path_id<span class="token punctuation">,</span>
        <span class="token punctuation">[</span>UDEV_BUILTIN_USB_ID<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>udev_builtin_usb_id<span class="token punctuation">,</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">HAVE_ACL</span></span>
        <span class="token punctuation">[</span>UDEV_BUILTIN_UACCESS<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>udev_builtin_uaccess<span class="token punctuation">,</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>而<code>udev_builtin_net_id</code>的实现在<a href="https://github.com/systemd/systemd/blob/v246/src/udev/udev-builtin-net_id.c">udev-builtin-net_id.c</a>，这里不仔细分析了，就看看<code>ID_NET_NAME_SLOT</code>这个ENV：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">dev_pci_slot</span><span class="token punctuation">(</span>sd_device <span class="token operator">*</span>dev<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">netnames</span> <span class="token operator">*</span>names<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token comment">// ...</span>
        r <span class="token operator">=</span> <span class="token function">sd_device_get_sysname</span><span class="token punctuation">(</span>names<span class="token operator">-></span>pcidev<span class="token punctuation">,</span> <span class="token operator">&amp;</span>sysname<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span> r<span class="token punctuation">;</span>


        r <span class="token operator">=</span> <span class="token function">sd_device_get_syspath</span><span class="token punctuation">(</span>pci<span class="token punctuation">,</span> <span class="token operator">&amp;</span>syspath<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span> r<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">snprintf_ok</span><span class="token punctuation">(</span>slots<span class="token punctuation">,</span> <span class="token keyword">sizeof</span> slots<span class="token punctuation">,</span> <span class="token string">"%s/slots"</span><span class="token punctuation">,</span> syspath<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span> <span class="token operator">-</span>ENAMETOOLONG<span class="token punctuation">;</span>

        <span class="token comment">// 这里的slots对应'/sys/bus/pci/slots/'这个目录</span>
        dir <span class="token operator">=</span> <span class="token function">opendir</span><span class="token punctuation">(</span>slots<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dir<span class="token punctuation">)</span>
                <span class="token keyword">return</span> <span class="token operator">-</span>errno<span class="token punctuation">;</span>

        hotplug_slot_dev <span class="token operator">=</span> names<span class="token operator">-></span>pcidev<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>hotplug_slot_dev<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">sd_device_get_sysname</span><span class="token punctuation">(</span>hotplug_slot_dev<span class="token punctuation">,</span> <span class="token operator">&amp;</span>sysname<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
                        <span class="token keyword">continue</span><span class="token punctuation">;</span>
                <span class="token comment">// 遍历'/sys/bus/pci/slots/'目录</span>
                <span class="token function">FOREACH_DIRENT_ALL</span><span class="token punctuation">(</span>dent<span class="token punctuation">,</span> dir<span class="token punctuation">,</span> <span class="token keyword">break</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                        <span class="token keyword">unsigned</span> i<span class="token punctuation">;</span>
                        <span class="token keyword">char</span> str<span class="token punctuation">[</span>PATH_MAX<span class="token punctuation">]</span><span class="token punctuation">;</span>
                        _cleanup_free_ <span class="token keyword">char</span> <span class="token operator">*</span>address <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">dot_or_dot_dot</span><span class="token punctuation">(</span>dent<span class="token operator">-></span>d_name<span class="token punctuation">)</span><span class="token punctuation">)</span>
                                <span class="token keyword">continue</span><span class="token punctuation">;</span>

                        r <span class="token operator">=</span> <span class="token function">safe_atou_full</span><span class="token punctuation">(</span>dent<span class="token operator">-></span>d_name<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>
                                <span class="token keyword">continue</span><span class="token punctuation">;</span>

                        <span class="token comment">/* match slot address with device by stripping the function */</span>
                        <span class="token comment">// 如果有任何目录中'/sys/bus/pci/slots/&#123;xx&#125;/address'文件里的值和网卡的设备号对应的话，</span>
                        <span class="token comment">// 说明这块网卡是插在可热拔插插槽的，插槽号是&#123;xx&#125;</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">snprintf_ok</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token keyword">sizeof</span> str<span class="token punctuation">,</span> <span class="token string">"%s/%s/address"</span><span class="token punctuation">,</span> slots<span class="token punctuation">,</span> dent<span class="token operator">-></span>d_name<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
                            <span class="token function">read_one_line_file</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token operator">&amp;</span>address<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>
                            <span class="token function">startswith</span><span class="token punctuation">(</span>sysname<span class="token punctuation">,</span> address<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                                hotplug_slot <span class="token operator">=</span> i<span class="token punctuation">;</span>
                                <span class="token keyword">break</span><span class="token punctuation">;</span>
                        <span class="token punctuation">&#125;</span>
                <span class="token punctuation">&#125;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>hotplug_slot <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>
                        <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token comment">// 如果没有，则继续查询网卡的父设备</span>
                <span class="token comment">// 需要注意的是，新老版本的udev在这里的行为有些区别，高版本里会继续看网卡的父设备，</span>
                <span class="token comment">// 但是在CentOS 7使用的v219版本里，并不会去查找网卡的父设备，</span>
                <span class="token comment">// 所以会发现网卡名称在CentOS 8和CentOS 7之间也有可能会有一定的区别。</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">sd_device_get_parent_with_subsystem_devtype</span><span class="token punctuation">(</span>hotplug_slot_dev<span class="token punctuation">,</span> <span class="token string">"pci"</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>hotplug_slot_dev<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
                        <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token function">rewinddir</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>hotplug_slot <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                s <span class="token operator">=</span> names<span class="token operator">-></span>pci_slot<span class="token punctuation">;</span>
                l <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>names<span class="token operator">-></span>pci_slot<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>domain <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>
                        l <span class="token operator">=</span> <span class="token function">strpcpyf</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span> l<span class="token punctuation">,</span> <span class="token string">"P%d"</span><span class="token punctuation">,</span> domain<span class="token punctuation">)</span><span class="token punctuation">;</span>
                l <span class="token operator">=</span> <span class="token function">strpcpyf</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span> l<span class="token punctuation">,</span> <span class="token string">"s%d"</span><span class="token punctuation">,</span> hotplug_slot<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 如果是热拔插网卡，那名字就是s+插槽号</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>func <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token function">is_pci_multifunction</span><span class="token punctuation">(</span>names<span class="token operator">-></span>pcidev<span class="token punctuation">)</span><span class="token punctuation">)</span>
                        l <span class="token operator">=</span> <span class="token function">strpcpyf</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span> l<span class="token punctuation">,</span> <span class="token string">"f%d"</span><span class="token punctuation">,</span> func<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>port_name<span class="token punctuation">)</span>
                        l <span class="token operator">=</span> <span class="token function">strpcpyf</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span> l<span class="token punctuation">,</span> <span class="token string">"n%s"</span><span class="token punctuation">,</span> port_name<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>dev_port <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>
                        l <span class="token operator">=</span> <span class="token function">strpcpyf</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span> l<span class="token punctuation">,</span> <span class="token string">"d%lu"</span><span class="token punctuation">,</span> dev_port<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
                        names<span class="token operator">-></span>pci_slot<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>噢，发现区别了，<code>ens2f0</code>的网卡是插在热拔插2插槽的。再确认一下，看看机器上是不是有对应文件：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@ ~<span class="token punctuation">]</span><span class="token comment"># cat /sys/bus/pci/slots/2/address</span>
0000:86:00<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>发现地址确实是吻合的，而且名字和插槽号确实能对应上。</p>
<p>好吧，到这里问题算是解决了一半。至少知道了为啥网卡名字会不同了，但是也没办法去控制不同厂商去规定网卡地址必须一样了。所以呢，业务层还是需要针对这种场景去做些适配。或者，我们再自定义一个udev文件，另起门户，单独做一个我们自己的命名规则，将所有厂商给统一起来了。</p>
]]></content>
      <categories>
        <category>效率配置</category>
      </categories>
      <tags>
        <tag>udev</tag>
        <tag>一致网络设备命名</tag>
      </tags>
  </entry>
  <entry>
    <title>使用iptables结合ipset封锁国外的异常IP访问</title>
    <url>/2020/01/07/block-ips-outside-china-with-iptables-and-ipset/</url>
    <content><![CDATA[<p>最近遇到了网站不断被一些国外的IP扫描的问题，想了想，决定将所有非国内的客户端全部封锁，只允许国内的用户进行访问。</p>
<p>首先需要找到所有国内的IP段，这个比较简单，<code>ipip.net</code>的github提供了一个<a href="https://github.com/17mon/china_ip_list">china_ip_list</a>项目，记录了目前所有国内的IP地址段，每月更新。<br>这个列表可以通过<code>wget https://raw.githubusercontent.com/17mon/china_ip_list/master/china_ip_list.txt</code>直接进行下载。</p>
<p>有了IP列表，接下来的事情相对简单不少，虽然理论上可以通过iptables针对文件里的每一个IP段添加规则，但是这样会添加几千条规则，不是最优解，所以就借助ipset和iptables进行封锁。</p>
<span id="more"></span>
<p>首先，使用<code>ipset</code>创建一个集合，名字就叫<code>whitelist-china</code></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ipset create whitelist-china hash:net hashsize <span class="token number">10000</span> maxelem <span class="token number">1000000</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>然后，将文件中的所有IP段都加到这个集合里：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">cat</span> china_ip_list.txt<span class="token variable">)</span></span><span class="token punctuation">;</span><span class="token keyword">do</span>
        ipset <span class="token function">add</span> whitelist-china <span class="token variable">$i</span><span class="token punctuation">;</span>
<span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>最后，在通过iptables封锁所有不在这个集合中的IP，因为不想影响我访问国内的地址，所以在这里，只需要将TCP协议的SYN包，以及ICMP包丢弃掉就可以：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">iptables <span class="token parameter variable">-A</span> INPUT <span class="token parameter variable">-p</span> tcp <span class="token parameter variable">-m</span> tcp --tcp-flags FIN,SYN,RST,ACK SYN <span class="token parameter variable">-m</span> <span class="token builtin class-name">set</span> <span class="token operator">!</span> --match-set whitelist-china src <span class="token parameter variable">-j</span> DROP
iptables <span class="token parameter variable">-A</span> INPUT <span class="token parameter variable">-p</span> icmp <span class="token parameter variable">-m</span> <span class="token builtin class-name">set</span> <span class="token operator">!</span> --match-set whitelist-china src <span class="token parameter variable">-j</span> DROP<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>这么设置之后，出现了一些问题，我在本地无法通过127.0.0.1访问本机的MySQL服务了，为什么呢？因为连接本机，那么客户端的IP就是127.0.0.1，很显然这个IP也不在国内的地址段里，直接导致iptables错误的把本地的请求也丢弃了。于是还需要放行本地发起的请求：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">iptables <span class="token parameter variable">-A</span> INPUT <span class="token parameter variable">-s</span> <span class="token number">127.0</span>.0.1/8 <span class="token parameter variable">-j</span> ACCEPT<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>好了，经过这样的设置，世界清净了不少，如果想看看到底有多少的数据被iptables丢弃，只需要执行<code>iptables -vnL</code>查看命中数量：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># iptables -vnL</span>
Chain INPUT <span class="token punctuation">(</span>policy ACCEPT 70K packets, 3507K bytes<span class="token punctuation">)</span>
 pkts bytes target     prot opt <span class="token keyword">in</span>     out     <span class="token builtin class-name">source</span>               destination
<span class="token number">70660</span> 3505K DROP       tcp  --  *      *       <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0            tcp flags:0x17/0x02 <span class="token operator">!</span> match-set whitelist-china src
   <span class="token number">40</span>  <span class="token number">1738</span> DROP       icmp --  *      *       <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0            <span class="token operator">!</span> match-set whitelist-china src<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>效率配置</category>
      </categories>
      <tags>
        <tag>iptables</tag>
        <tag>ipset</tag>
      </tags>
  </entry>
  <entry>
    <title>类似\xe4\xb8\xad等字符串的解码</title>
    <url>/2017/01/13/decode-hex-string/</url>
    <content><![CDATA[<p>经常会在日志，或者其他地方遇到类似 <code>&#39;\xe4\xb8\xad\xe5\x8d\x8e\xe4\xba\xba\xe6\xb0\x91\xe5\x85\xb1\xe5\x92\x8c\xe5\x9b\xbd&#39;</code> 的字符串，但是不知道实际是代表的什么，因此要做一个解码。</p>
<p>之前一直没有找到比较好的网页的工具，所以就直接尝试用Python进行解码，实际上类似的字符串就是二进制数据，所以作为字符串加上相应的编码decode一下就可以了。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 前面加上b声明是二进制数据</span>
s <span class="token operator">=</span> <span class="token string">b'\xe4\xb8\xad\xe5\x8d\x8e\xe4\xba\xba\xe6\xb0\x91\xe5\x85\xb1\xe5\x92\x8c\xe5\x9b\xbd'</span>
<span class="token comment"># 尝试使用UTF-8解码并输出</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># 如果不行的话，尝试一下GBK</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'gbk'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>Python2和Python3通用～</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Python <span class="token number">3.6</span>.0 <span class="token punctuation">(</span>default, Dec <span class="token number">24</span> <span class="token number">2016</span>, 08:03:08<span class="token punctuation">)</span> 
<span class="token punctuation">[</span>GCC <span class="token number">6.2</span>.1 <span class="token number">20160830</span><span class="token punctuation">]</span> on linux
Type <span class="token string">"help"</span>, <span class="token string">"copyright"</span>, <span class="token string">"credits"</span> or <span class="token string">"license"</span> <span class="token keyword">for</span> <span class="token function">more</span> information.
<span class="token operator">>></span><span class="token operator">></span> s <span class="token operator">=</span> b<span class="token string">'\xe4\xb8\xad\xe5\x8d\x8e\xe4\xba\xba\xe6\xb0\x91\xe5\x85\xb1\xe5\x92\x8c\xe5\x9b\xbd'</span>
<span class="token operator">>></span><span class="token operator">></span> print<span class="token punctuation">(</span>s.decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">))</span>
中华人民共和国<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>效率配置</category>
      </categories>
      <tags>
        <tag>UTF-8</tag>
        <tag>Python</tag>
        <tag>Hex</tag>
        <tag>解码</tag>
      </tags>
  </entry>
  <entry>
    <title>《DDIA》读书笔记第一章</title>
    <url>/2018/03/20/ddia-note-chapter-1/</url>
    <content><![CDATA[<p>之前一直听说Designing Data-Intensive Applications (DDIA) 这本书是神书，也决定读一下，顺便做些笔记，也算巩固一下学到的东西吧。</p>
<p>书的第一部分，主要关注于一些基础的知识，第一章的标题<code>Reliable, Scalable, and Maintainable Applications</code>就讲了三个当前应用的最主要特点：可靠性，可扩展性和可维护性。</p>
<h2 id="可靠性"><a href="#可靠性" class="headerlink" title="可靠性"></a>可靠性</h2><p>首先是<code>Reliability</code>也就是可靠性，主要包含下面的几个预期：</p>
<ul>
<li>应用可以按用户所期待的功能正常运行</li>
<li>可以容忍用户犯的错误或者不正确的使用方式</li>
<li>在对应的系统容量下性能能满足正常的使用要求</li>
<li>能拒绝未授权或者滥用的情况</li>
</ul>
<p>如果能满足上面的需求，可以说一个软件是可靠的，但是并不是所有的东西都能满足预期，当一些意料之外的东西发生了，称之为<code>faults</code>，系统正确应对这些<code>faults</code>的能力则称作<code>fault-tolerant or resilient</code>（即容错能力或者弹性），虽然容错能力很重要，但也不是意味着可以实现一个能容忍任何错误的系统（比如地球爆炸了）。<br>需要注意的是，<code>fault</code>和<code>failure</code>是不一样的，前者一般指的是系统某个部分没有按照设计正常工作，而后者一般就意味着整个系统都无法正常提供服务了。当然，我们没有办法去降低<code>fault</code>发生的概率，特别是降低到0，能做的，就是当<code>fault</code>发生时，系统不会因为这些<code>faults</code>变成<code>failure</code>状态，这也是一个容错系统的设计目标。<br>针对一个系统，我们可以人为的提升<code>faults</code>的发生概率，来验证系统的可靠性，比如kill某个进程，或者断开网络等等。一般情况下，比较严重的bug都是因为对错误的处理不完善导致的。<br>当然尽管我们可以通过设计容忍很多错误，但是预防错误的发生，远远比发生后再去修复来的好，毕竟很多错误是没办法被修复的，比如数据库被黑客入侵，这个操作无法被修复到原始的样子（数据已经泄漏）。<br>常见的错误主要有三个：</p>
<span id="more"></span>

<h3 id="硬件故障"><a href="#硬件故障" class="headerlink" title="硬件故障"></a>硬件故障</h3><p>硬件故障是最容易想到的故障，比如硬盘损坏、机房掉电、网络问题、内存问题等等，对于一个大型的数据中心来说，这些故障几乎是每时每刻都在发生的。<br>对于磁盘，一般情况下，磁盘的平均无故障时间（MTTF）在10到50年这个级别，也就意味着，如果一个存储集群有超过10000个磁盘，那理论上每一天都会出现磁盘损坏的情况。<br>而针对一些硬件的冗余措施，可以减少故障发生的概率，比如引入RAID，实现CPU、内存的热切换，多路电源供应，UPS等等。<br>在一般情况下，一台机器在这些硬件冗余措施的帮助下发生失效的概率很低，即使发生失效，很多也都可以通过备份进行恢复，针对很多较小的应用，问题不是很大，只有在某些特别重要的应用上，多机部署实现高可用才显得必要一点。<br>并且，随着如<code>AWS</code>等云计算的发展，单个虚拟机的可用性已经到了一个很高的高度。但是设计使用可以容忍一台机器丢失的多机器系统还是有优势的，比如某些机器因为系统升级或者打补丁等需要重启的情况下，这样的系统也是可以保证系统可以一直正常运行。</p>
<h3 id="软件错误"><a href="#软件错误" class="headerlink" title="软件错误"></a>软件错误</h3><p>对于硬件故障，一般来说，都是偶发的，比如一台机器的硬盘出现问题基本也不会预示着另外的机器也出问题，当然也有一些情况，比如整个机架的机器因为散热问题都出问题了，但是毕竟这是小概率，而且这种同一时间大量机器硬件出现问题的概率实在很小。<br>另外的错误集中在系统内部，往往这类错误是跨机器的，很难预测，这些问题一旦出现，一般会比硬件故障产生更严重的后果，包括一下的一些情况：</p>
<ul>
<li>某个特殊的输入导致的软件bug，比如闰秒触发Linux内核的一个bug导致系统挂起</li>
<li>某个进程失控，导致占用了过多的资源，CPU、内存、磁盘、网络等</li>
<li>系统依赖的某个服务响应变慢、或者失去响应、或者返回了错误的结果</li>
<li>级联故障，一个小组件故障导致了其他组件跟着故障</li>
</ul>
<p>很多时候这些问题不会被触发，但是一旦触发了，影响会是比较大的，而且，这些问题不容易被很快的修复，所以在开发过程中，注意更多的边界条件，引入更多的测试，在运行中不断监控自身状态并在异常时发出告警是有必要的。</p>
<h3 id="人为故障"><a href="#人为故障" class="headerlink" title="人为故障"></a>人为故障</h3><p>人是系统的设计和建造者，同样也是系统的运维者，即使给予最大限度的注意，也不能避免人是不可靠的这一事实。在一个大型互联网服务的调查中显示，在大的故障中真正由硬件问题导致的仅占10-25%左右。<br>所以对于人来说，需要达到的目标：</p>
<ul>
<li>在设计时最大限度减少错误机会，比如精心设计系统抽象，API和界面更容易让人作出“正确的事”并且阻止”错误的事“，但是接口限制太多，反而会让人们要想办法绕过限制去做事，这里也需要找到一个平衡点。</li>
<li>将人们最容易犯错的地方和实际位置分开，比如使用全功能的沙箱测试环境，可以让人安全地做测试和探索，使用真实数据，这样不会影响线上系统。</li>
<li>所有级别的测试，从单元测试到全系统集成测试，以及手动测试。自动化测试在触发很多细小边界条件测试上是很有价值的。</li>
<li>允许从人为错误中快速轻松地恢复，以最大限度地减少人为错误导致的影响。例如，快速回滚配置更改，上线时逐步灰度上线等。</li>
<li>详细和明确的监控，例如性能指标和错误率。在其他工程学科中，这被称为遥测。 （一旦火箭已经离开了地面，遥测对追踪发生的事情至关重要，并能更好的追踪失败的原因。）监测可以向我们展示早期的问题预警，发生问题时，监控数据对于诊断问题是非常有用的。</li>
<li>实施良好的管理实践和培训。</li>
</ul>
<h3 id="可靠性有多重要？"><a href="#可靠性有多重要？" class="headerlink" title="可靠性有多重要？"></a>可靠性有多重要？</h3><p>可靠性不是在核电站或者控制交管系统中才有用的，对于日常使用的所有系统，都应该可以按预计正常的工作。在商业软件里，一个错误可能导致商业利益受损，即使在一些非关键性的应用中，可靠性也是对用户的责任之一，比如用户将照片存放在系统中，如果丢失，他们会知道怎么去做恢复么？<br>当然在某些情况下，也是会一定程度牺牲可靠性来减少开发成本和运营成本的，比如在原型系统中，或者利润率很低。但是如果这么做了，一定是非常明确为什么要这么做的前提下。</p>
<h2 id="可扩展性"><a href="#可扩展性" class="headerlink" title="可扩展性"></a>可扩展性</h2><p>即使一个系统在目前工作的很好，不代表他在未来也能如此。一个最常见的导致降级的原因就是负载，比如系统并发用户从10000上涨到了100000，或者从100万到1000万，或者处理的数据量有了非常大的增长。<br>可扩展性就是用来描述系统应对负载增加能力的指标。但是他不是一个标签，比如X是可扩展的或者Y是不可扩展的，这类的描述是没有意义的。更多的，我们应该考虑以下的一些问题：如果系统以特定方式增长，我们应对增长的方式有哪些？或者说，我们应该如何增加计算资源来应对这些额外的负载？</p>
<h3 id="描述负载"><a href="#描述负载" class="headerlink" title="描述负载"></a>描述负载</h3><p>首先需要描述一下什么是负载，这样才能讨论关于负载增长相关的话题，负载可以从几个参数上描述，根据系统的不同而不同，比如，对于web server来说是QPS，对于数据库来说是读写比，对于一个聊天室来说是同时在线的人数，或者其他比如缓存命中率等等。可能系统是受一些很常见的因素影响，也可能是一些很小的极端情况导致了系统的瓶颈。<br>以Twitter 2012年的数据为例：Twitter主要有两个操作：</p>
<pre><code>发推：用户给关注者发推（平均4.6k请求/s，峰值12k请求/s）
主信息流：用户刷新自己的时间线，查看别人发的推（300k请求/s）
</code></pre>
<p>如果仅仅是简单的处理12k&#x2F;s的写请求（发推峰值），其实是比较简单的。但是Twitter面临的最大问题不是用户发推的容量，而是<code>fan-out</code>（电子行业的扇出问题），每个人都被很多人关注，每个人又关注很多人。所以大致有两种方式来处理上面说的两种基本操作：</p>
<ol>
<li>在发推时，直接发到一个公共的数据库里，然后用户在刷新自己的信息流时，查询一下自己关注了哪些人，然后去这些人的推文列表里查找最近发的推文，最后合并一下进行显示。最后的SQL语句与下面的类似： <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> tweets<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span> users<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">FROM</span> tweets
<span class="token keyword">JOIN</span> users <span class="token keyword">ON</span> tweets<span class="token punctuation">.</span>sender_id <span class="token operator">=</span> users<span class="token punctuation">.</span>id
<span class="token keyword">JOIN</span> follows <span class="token keyword">ON</span> follows<span class="token punctuation">.</span>followee_id <span class="token operator">=</span> users<span class="token punctuation">.</span>id
<span class="token keyword">WHERE</span> follows<span class="token punctuation">.</span>follower_id <span class="token operator">=</span> <span class="token keyword">current_user</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>为每个人的主信息流维护一个缓存，用户发推时，先查找所有关注自己的人，然后在往所有关注自己人的缓存中都写一条当前的推文，这样用户在刷新自己的主信息流时会快很多，因为结果已经在之前都计算好了。</li>
</ol>
<p>最初的Twitter使用的是第一种实现，但是系统在用户量增加时发现主信息流查询的负载跟不上了，于是又切换到了第二种实现，相比之前要好一些，因为发推相比刷推来说频率要低一点，所以在发推的时候多做点事减少刷推时的成本是没错的。<br>但是呢，第二种方法在发推时需要做的事要多很多。平均来看，每条推文要发送给75个关注者，也就是说4.6k&#x2F;s的推文会产生345k&#x2F;s的缓存写，这仅仅是平均情况，实际上每个人的关注人数差别很大，有些用户的关注者超过了3000万，这意味着发一条简单的推文需要超过3000万次写缓存操作！在一定时间内做到这些（Twitter尝试在5s内做完）是一个非常大的挑战。<br>在Twitter的例子里，每个用户关注者的分布是作为可扩展性的一个关键指标来讨论的，因为这个直接影响到了<code>fan-out</code>的负载。<br>而最终的Twitter实现了一个混合型的架构，大多数的用户使用的是类似方案2的方式，但是对于一些关注者特别多的用户，使用的是类似方案1的模式，这套方案可以算达到了比较好的性能。</p>
<h3 id="描述性能"><a href="#描述性能" class="headerlink" title="描述性能"></a>描述性能</h3><p>一旦描述好了系统的负载，就可以继续看当负载提升时系统的变化了，主要有两个方向：</p>
<ul>
<li>当提升负载并且保持系统资源（CPU，内存，网络等）不变时，系统的性能会有什么影响？</li>
<li>当负载提升了，需要增加多少的系统资源才能保持性能和之前一样？</li>
</ul>
<p>这两个问题都需要使用到性能数据，所以还得先看看如何去描述一个系统的性能。<br>在类似Hadoop这种的批处理系统中，我们一般关系的是<code>吞吐量</code>，即每秒时间能够处理的数据量，或者处理一个固定数据集所需要花费的时间。而针对一个在线系统，通常最重要的是服务的<code>响应时间</code>，也就是客户端发送请求到接收到请求返回的时间。</p>
<p>延迟（latency）和响应时间（response time）通常被放在一起讨论，但其实两者还是有一些区别的，响应时间是客户端所见的，包括处理时间，网络延迟以及排队时间。而延迟是一个请求等待被处理的时间。</p>
<p>即使不停的发起完全相同的一个请求，响应时间还是会有轻微的不同的，所以在实践中，考虑的不仅仅是某个请求的响应时间，而应该考虑很多请求的响应时间的分布情况。在正常情况下，大多数请求都很快，但是还是会有一些比较慢。也许这些慢请求是处理了更多的数据，更随机的情况，比如遇到了进程的上下文切换，或者TCP丢包重传了，遇到了GC的停顿，或者内存缺页需要从磁盘读取数据，甚至是机架震动了等等各种问题。<br>一般情况下很容易计算一个服务的平均响应时间，但是平均响应时间典型性不强，因为它并没有告诉你到底有多少用户真正经历了延迟。<br>所以更好的办法，是看百分比，将所有的请求时间进行从快到慢排序，然后中位数就是最中间的响应时间，假如中位响应时间是200ms，也就意味着一半的请求是超过200ms的，另一半则是低于200ms，这可以作为一个不错的考察典型用户等待时间的数据，即一半用户的请求小于中位响应时间，另一半是大于的。这个中位数也被叫做<code>50%响应时间</code>，或者<code>p50</code>，需要注意的是，这个数据仅仅针对的是一个请求，如果用户有多个请求，比如一个页面里有多个请求，那么大概率整个页面请求时间是会超过<code>p50</code>的。</p>
<p>为了真正了解系统的情况，更多的时候是看一个更高的百分比数据如95%，99%，99.9%（p95,p99,p999）。<br>高百分比的响应时间，也被称作长尾延迟，这些长尾很重要，因为这些是实实在在影响用户体验的。举个Amazon的例子，对于p999，1000个请求中仅仅只有1个请求比较慢，但是这个慢的请求很有可能就是一个数据量大的用户，因为他经常进行购物。也就是最有价值的用户会受到影响。Amazon表示每100ms的延迟增长都会导致约1%的销售下降，而1s的下降降低了高达16%的客户满意度。<br>另一方面，尝试去优化%99.99请求时间（10000个请求中最慢的1个）对于Amazon来说又太昂贵了，并且没办法带来更多的好处。针对非常高百分比请求的优化是非常困难的，因为这些请求非常随机，而且超出控制，并且收益也相对较小。<br>百分比数据通常用于定义<code>服务级别目标（SLO）</code>和<code>服务级别协议（SLA）</code>。<br>排队延长通常是慢请求的主要原因，毕竟服务器的并行处理能力是有限的，如果有一些慢请求堵塞了所有的执行器，就会造成所有后续的请求都会变慢，这就是所说的<code>队头阻塞</code>问题，所以以客户端角度去计算相应时间是非常重要的。<br>针对这一点，在测试的时候，生产请求的时候所有的请求都应该独立，而不是当一个请求结束后再发起另一个请求，因为这样会认为的缩短服务端的请求队列，这个和实际情况也是不相符的。<br>高百分比的时间对于需要多次调用的后端服务来说很重要，因为即使是异步地发起这些请求，最终也需要等待最慢的请求返回后客户端才能继续完成任务，这样哪怕很小部分的请求变慢都会影响很多的用户请求。</p>
<h3 id="应对负载的方法"><a href="#应对负载的方法" class="headerlink" title="应对负载的方法"></a>应对负载的方法</h3><p>一般来说在当前的业务环境下比较适合的架构不太能适应10倍的负载增长，对于快速增长的服务，基本需要在每个数量级都需要思考架构的变化。</p>
<p>人们经常将扩展分成两种：<code>scaling up</code>（垂直扩展，升级到更好的服务器）和<code>scaling out</code>（水平扩展，将负载分配到更多的小服务器上），将负载均衡到很多太机器上又叫做<code>shared-nothing</code>架构，一般来说在一台机器上运行的系统会比较简单，但是高端的机器又很贵，所以业务量很大的业务通常都避免不了水平扩展，在现实世界里，好的架构是务实的，有时候用少量强大的机器也比很多小机器要便宜和简单。</p>
<p>有些系统是<code>弹性</code>的，可以在资源不足时自动发现并添加资源，而其他的系统就需要手动计算需要的容量手动扩容。弹性的系统对于负载不确定的业务很有用，但是手动操作通常更简单，而且遇到意外的情况更少。<br>无状态服务扩展到多台机器很简单，但是有状态的数据服务想要这么做就比较困难了，所以对于类似的情况，优先考虑垂直扩展，等到单机成本太高，或者对可用性有要求的时候，再迁移到分布式的系统。</p>
<p>随着分布式系统相关的工具和抽象方法越来越完善，优先考虑垂直扩展的思路可能会转变，至少对于某些类型的应用程序而言，分布式系统将成为未来的标配。<br>很多大型应用的场景非常的具体，也就是说，没有一种通用的，通吃的可扩展体系架构，系统里遇到的问题，可能是读容量，也可能是写容量，或者是存储的数据量，数据的复杂度，响应时间要求，访问模式等等一种或者混合在一起。<br>例如一个每秒处理100000个1KB请求的系统和一个每分钟处理3个2GB请求的系统，虽然从吞吐量上看是一致的，但是显然设计的重点完全不同。<br>针对一个特定的应用，实现好的扩展性是基于一个简单的假设，即哪些操作是常见的，哪些操作是不常见的。如果这个假设都是错误的话，那在这个基础上所做的这些设计都是无用功。所以在很多初创公司或者不太成熟的公司里，能够快速迭代产品比应用能够快速扩展要更重要一些。</p>
<h2 id="可维护性"><a href="#可维护性" class="headerlink" title="可维护性"></a>可维护性</h2><p>包含三点：</p>
<ul>
<li>可操作<br>  让运维人员更容易保证整个系统正确稳定运行</li>
<li>简单<br>  让新人能更快的了解整个系统，尽可能的移除系统的复杂特性</li>
<li>可进化<br>  让工程师可以更方便的对整个应用增加新的功能和特性</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>服务器的能耗控制以及高性能模式配置（Dell）</title>
    <url>/2020/02/26/cpu-power-management/</url>
    <content><![CDATA[<p>事情的起因要算很久之前一次测试，一个同事借了我们的一台机器测试，在测试之前惯例使用<code>cpupower frequency-set -g performance</code>命令将CPU高性能模式打开，避免因为系统处于节能模式导致性能测试不准确。但是在我们这台机器上执行命令却报错了：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">]</span><span class="token comment"># cpupower frequency-set -g performance</span>
Setting cpu: <span class="token number">0</span>
Error setting new values. Common errors:
- Do you have proper administration rights? <span class="token punctuation">(</span>super-user?<span class="token punctuation">)</span>
- Is the governor you requested available and modprobed?
- Trying to <span class="token builtin class-name">set</span> an invalid policy?
- Trying to <span class="token builtin class-name">set</span> a specific frequency, but userspace governor is not available,
   <span class="token keyword">for</span> example because of hardware <span class="token function">which</span> cannot be <span class="token builtin class-name">set</span> to a specific frequency
   or because the userspace governor isn't loaded?<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<span id="more"></span>
<p>提示没有权限，或者没有加载模块，搜索了一圈，发现大部分的解释都是需要加载模块，然而在加载模块的时候又出现了其他的错误：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">]</span><span class="token comment"># modprobe acpi-cpufreq</span>
modprobe: ERROR: could not insert <span class="token string">'acpi_cpufreq'</span><span class="token builtin class-name">:</span> No such device<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>一开始以为是使用的内核问题，也就没有关心，继续测试了。当然事情还没完，最近又有一个新的需求，希望机器的CPU能一直运行在一个比较稳定的频率，最好是能稳定在全核睿频上不降频。由于上面的原因无法在操作系统层面高性能模式，而且还有个问题，即使可以按上面的方法设置高性能，还是避免不了CPU降频，并且无法将频率设置高于CPU基础频率。</p>
<p>既然软件层面解决不了，那就去看看硬件设置，于是就重启进入BIOS，看看BIOS设置里有没有相关的选项。</p>
<p>说明一下这是一台Dell的14代服务器，所以不确定其他厂商或者不同时期的机器会不会有同样的设置，仅供参考。在BIOS里的<code>System Profile Settings</code>大菜单下有电源管理相关的设置，其中比较重要的配置就是<code>System Profile</code>选项，Dell提供了几个标准的选择，主要的可选项如下：</p>
<ul>
<li>Performance Per Watt (DAPC)</li>
<li>Performance Per Watt (OS)</li>
<li>Performance</li>
<li>Workstation Performance</li>
<li>Custom</li>
</ul>
<p>当前的配置是<code>Performance Per Watt (DAPC)</code>, 查了查Dell的<a href="https://downloads.dell.com/solutions/general-solution-resources/White%20Papers/Setting_BIOSin14G-Serv%2816Apr2018%29.pdf">BIOS手册</a>，在这个模式下，CPU Power Management选项将被设置为<code>System DBPM (DAPC)</code>，什么意思呢，其中DBPM是<code>Demand Based Power Management</code>的缩写，DAPC是<code>Dell Active Power Control</code>的缩写，就是“又Dell BIOS所管理的，按需动态调整CPU频率”。</p>
<p>而第二个Profile <code>Performance Per Watt (OS)</code>的CPU Power Management选项是<code>OS DBPM</code>，一个DAPC，一个OS，到这里就明白了，原来在当前的设置情况下，CPU的频率是由硬件管理的，怪不得想加载模块额时候报错没有设备呢。很显然，只有当CPU Power Management为<code>OS DBPM</code>时，才可以在系统中加载模块，设置电源管理的模式和CPU频率，如果是任何其他的选项，自然系统就无法管理CPU的频率了。</p>
<p>经过上面的描述，应该很容易理解为啥一开始的时候为啥一开始设置高性能失败的原因了，以后再遇到也就不会奇怪了。</p>
<p>还有一个问题没解决，就是希望系统不降频的需求，这个需求也好解决了，直接设置Profile为<code>Performance</code>，贴心的Dell已经把所有该设置的选项都设置好了。主要就是关闭C-states、C1E，开启Turbo等等，这里就不在说了。</p>
<p>保存，重启，问题解决！</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>cpupower</tag>
        <tag>Dell</tag>
        <tag>DAPC，DBPM</tag>
      </tags>
  </entry>
  <entry>
    <title>仿照PHP的实现简单的扩展动态加载</title>
    <url>/2015/03/09/ext-skel-like-php/</url>
    <content><![CDATA[<p>PHP通过扩展机制，可以方便的实现对PHP的动态扩展，在<a href="http://www.ichenfu.com/2015/03/02/php-load-extension/">PHP扩展加载过程</a>中简单的分析了PHP扩展的加载过程，下面可以继续根据PHP的相关实现，实现一个自己的简单的支持扩展的程序。</p>
<span id="more"></span>

<p>在PHP中，有个非常重要的数据结构zend_module_entry，可以先看一下它的定义：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_zend_module_entry</span> zend_module_entry<span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">_zend_module_entry</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> size<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> zend_api<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> zend_debug<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> zts<span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">_zend_ini_entry</span> <span class="token operator">*</span>ini_entry<span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">_zend_module_dep</span> <span class="token operator">*</span>deps<span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">_zend_function_entry</span> <span class="token operator">*</span>functions<span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>module_startup_func<span class="token punctuation">)</span><span class="token punctuation">(</span>INIT_FUNC_ARGS<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>module_shutdown_func<span class="token punctuation">)</span><span class="token punctuation">(</span>SHUTDOWN_FUNC_ARGS<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>request_startup_func<span class="token punctuation">)</span><span class="token punctuation">(</span>INIT_FUNC_ARGS<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>request_shutdown_func<span class="token punctuation">)</span><span class="token punctuation">(</span>SHUTDOWN_FUNC_ARGS<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>info_func<span class="token punctuation">)</span><span class="token punctuation">(</span>ZEND_MODULE_INFO_FUNC_ARGS<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>version<span class="token punctuation">;</span>
    size_t globals_size<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">ZTS</span></span>
    ts_rsrc_id<span class="token operator">*</span> globals_id_ptr<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
    <span class="token keyword">void</span><span class="token operator">*</span> globals_ptr<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>globals_ctor<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>global TSRMLS_DC<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>globals_dtor<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>global TSRMLS_DC<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>post_deactivate_func<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> module_started<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> type<span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>handle<span class="token punctuation">;</span>
    <span class="token keyword">int</span> module_number<span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>build_id<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>比较复杂，其中最重要的，也是真正编写扩展中会接触到的，主要包括name，functions，module_startup_func，module_shutdown_func，request_startup_func，request_shutdown_func这几个成员，其中name标明了扩展的名字，functions表明了该扩展拥有的函数，以及4个startup&#x2F;shutdown相关函数。</p>
<p>在编写扩展时，需要指定一个zend_module_entry，如下:</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">    zend_module_entry counter_module_entry <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
        STANDARD_MODULE_HEADER<span class="token punctuation">,</span>
        <span class="token string">"counter"</span><span class="token punctuation">,</span>
        counter_functions<span class="token punctuation">,</span>
        <span class="token function">PHP_MINIT</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token function">PHP_MSHUTDOWN</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token function">PHP_RINIT</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment">/* Replace with NULL if there's nothing to do at request start */</span>
        <span class="token function">PHP_RSHUTDOWN</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment">/* Replace with NULL if there's nothing to do at request end */</span>
        <span class="token function">PHP_MINFO</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token string">"0.1"</span><span class="token punctuation">,</span> <span class="token comment">/* Replace with version number for your extension */</span>
        STANDARD_MODULE_PROPERTIES
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看到每个扩展都会有相关的一个zend_module_entry，并在这个entry里指明扩展的相关信息。</p>
<p>在zend_module_entry中，functions是一个_zend_function_entry类型的指针，这是一个函数类型，看看这个类型的定义：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_zend_function_entry</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>fname<span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>handler<span class="token punctuation">)</span><span class="token punctuation">(</span>INTERNAL_FUNCTION_PARAMETERS<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">_zend_arg_info</span> <span class="token operator">*</span>arg_info<span class="token punctuation">;</span>
    zend_uint num_args<span class="token punctuation">;</span>
    zend_uint flags<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> zend_function_entry<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>其中fname是函数的名字，handler是指向函数的指针，需要注意的是，INTERNAL_FUNCTION_PARAMETERS是一个宏，展开后是int ht, zval *return_value, zval **return_value_ptr, zval *this_ptr, int return_value_used TSRMLS_DC，需要说明的是，所有的PHP扩展函数的参数都是这些，而实现的函数的参数，是通过zend_parse_parameters函数获取的。</p>
<p>有了这两个结构体，我们就可以”山寨”一个自己的动态扩展机制了。<br>首先，需要定义一个函数结构体，就叫function_entry吧。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_function_entry</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>fname<span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>handler<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> function_entry<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>这个function_entry比较简单，只有一个名字还有一个函数指针，为了简单起见，暂时所有的扩展函数都是没有参数，同时也没有返回值的吧。</p>
<p>有了函数结构体，就可以定义一下标志扩展的结构体了，就叫ext_entry吧。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_ext_entry</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token keyword">int</span> func_nums<span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">_function_entry</span> <span class="token operator">*</span>functions<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> ext_entry<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>同样的非常简单，只有扩展名，扩展所拥有的函数个数，已经保存扩展函数的一个数组指针。</p>
<p>接下来便是实现扩展加载，以及扩展调用的部分了：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;dlfcn.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ext.h"</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAX_EXT_NUM</span> <span class="token expression"><span class="token number">10</span></span></span>

ext_entry<span class="token operator">*</span> exts<span class="token punctuation">[</span>MAX_EXT_NUM<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> ext_num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>


<span class="token keyword">int</span> <span class="token function">load_ext</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>path<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ext_num <span class="token operator">==</span> MAX_EXT_NUM<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">void</span> <span class="token operator">*</span>handle<span class="token punctuation">;</span>
    ext_entry<span class="token operator">*</span> entry<span class="token punctuation">;</span>
    ext_entry<span class="token operator">*</span> <span class="token punctuation">(</span><span class="token operator">*</span>get_ext_entry<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    handle <span class="token operator">=</span> <span class="token function">dlopen</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> RTLD_LAZY <span class="token operator">|</span> RTLD_GLOBAL<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>handle<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    
    get_ext_entry <span class="token operator">=</span> <span class="token punctuation">(</span>ext_entry <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">dlsym</span><span class="token punctuation">(</span>handle<span class="token punctuation">,</span> <span class="token string">"get_ext_entry"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>get_ext_entry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">dlclose</span><span class="token punctuation">(</span>handle<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    entry <span class="token operator">=</span> <span class="token function">get_ext_entry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    exts<span class="token punctuation">[</span>ext_num<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> entry<span class="token punctuation">;</span>

    <span class="token keyword">return</span> ext_num<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token keyword">int</span> <span class="token function">call_ext_func</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>extname<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>func<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>ext_num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>extname<span class="token punctuation">,</span> exts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>name<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>exts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>func_nums<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>func<span class="token punctuation">,</span> exts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>functions<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>fname<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    exts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>functions<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>一共只有两个函数，load_ext以及call_ext_func，分别用来加载一个扩展，以及调用某个扩展的某个函数。需要说明的是，在扩展中，必须实现get_ext_entry函数，这个函数返回一个ext_entry的指针，load_ext函数根据扩展返回的ext_entry指针进行加载。</p>
<p>再看一个示例的扩展</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ext.h"</span></span>

<span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"print in myext"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

function_entry functions<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#123;</span><span class="token string">"print"</span><span class="token punctuation">,</span> print<span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

ext_entry myext_entry <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token string">"myext"</span><span class="token punctuation">,</span>
    <span class="token number">1</span><span class="token punctuation">,</span>
    functions
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

ext_entry<span class="token operator">*</span> <span class="token function">get_ext_entry</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token operator">&amp;</span>myext_entry<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>以及main</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ext.h"</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">char</span> path<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> ext<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> func<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token function">load_ext</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> ext<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> func<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">call_ext_func</span><span class="token punctuation">(</span>ext<span class="token punctuation">,</span> func<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>编译的时候，首先编译主程序，再将手动写的扩展编译成so动态库，然后，就可以调用了。</p>
<p>最后调用的结果如下：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ./ext_skel                                       
/path/to/myext.so
<span class="token number">1</span>
myext
print
print <span class="token keyword">in</span> myext<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>以上代码在<a href="https://github.com/C0reFast/ext_skel">https://github.com/C0reFast/ext_skel</a></p>
]]></content>
      <categories>
        <category>PHP Zend</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>动态扩展</tag>
      </tags>
  </entry>
  <entry>
    <title>在移动硬盘盒上启用SSD的Trim功能</title>
    <url>/2022/10/05/enable-trim-on-usb-attached-scsi-ssds/</url>
    <content><![CDATA[<p>最近折腾了一小段时间的PCDN，家里刚好有一个闲置的JetsonNano和一块闲置的SSD，刚好可以跑跑PCDN，每天挣个宽带钱。具体跑的哪家，就不说了，说说在这过程中遇到的一个小问题：一般来说，PCDN或者类似的业务，对磁盘的写入压力还是比较大的，虽然可能平均的写入带宽并不高，但是也架不住每天读写的时间相当长，虽然我这块SSD是闲置的，但好歹是个传家宝，不管怎么说，还是有那么点点心疼的，肯定是不太希望哪天这SSD被写坏了。</p>
<p>在这种场景下，尽可能延长SSD的写入寿命就很重要了，而方法之一呢，就是想办法把SSD的<code>Trim</code>命令给用上。</p>
<p>用上<code>Trim</code>命令之前，可以先简单了解一下背后的逻辑，具体的可以参考<a href="https://zh.wikipedia.org/wiki/Trim%E5%91%BD%E4%BB%A4">Wiki</a>，简单来说呢，因为SSD依赖垃圾回收机制来平衡NAND的磨损，但是呢具体到一整个LBA空间，只有文件系统知道哪些数据块是有效数据，所以就需要通过<code>Trim</code>命令，建立文件系统空闲空间和SSD底层数据块的关联，从而让SSD的主控更好的进行垃圾回收操作，一般来说，合理的使用Trim，可以有效的提高SSD的性能和寿命。当然了，<code>Trim</code>命令是ATA指令集里的，也就是SATA接口SSD才会有，对于SCSI以及SAS接口SSD，还有NVMe SSD来说，也有相应的<code>UNMAP</code>和<code>Deallocate</code>指令，作用都是一样的。</p>
<p>一般来说，在Linux下，一个设备是否支持<code>Trim</code>操作，可以通过<code>lsblk --discard</code>进行查看，当输出中的<code>DISC-GRAN</code>和<code>DISC-MAX</code>列不为0时，说明这个设备是支持<code>Trim</code>操作的：</p>
<span id="more"></span>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">jetson-nano:chenfu:<span class="token comment"># lsblk --discard</span>
NAME        DISC-ALN DISC-GRAN DISC-MAX DISC-ZERO
sda                <span class="token number">0</span>        0B       0B         <span class="token number">0</span>
mmcblk1            <span class="token number">0</span>        4M      76M         <span class="token number">0</span>
└─mmcblk1p1        <span class="token number">0</span>        4M      76M         <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>比如在我这个JetsonNano上，可以看到我外接的这块SSD硬盘，对应<code>sda</code>设备是不支持Trim的，但是<code>mmcblk1</code>这个设备，也就是装系统用的一个小的MicroSD卡是支持的。</p>
<p>那么问题来了，针对上面的输出，sda这块盘是不支持Trim的，那怎么样才能让他支持呢？</p>
<p>首先需要明确的是，因为这块盘是我通过一块USB移动硬盘盒转接到板子上的，也就意味着这块硬盘并没有用原生的SATA接口（当然这块开发版本身也不支持SATA接口）。而对于移动硬盘盒而言，将SATA口转换成USB口，会需要一个桥接芯片进行协议的转换，那么桥接芯片是否支持Trim命令的转换，就显得非常重要了。对于一些老的移动硬盘盒，大多使用的是Mass Storage Class Bulk-Only Transport (BOT)这个协议，但是对于一些比较新的桥接芯片，基本都会支持一个新的叫做USB Attached SCSI Protocol (UASP) 的新协议。所以我也查了一些资料，同样也是结合产品页的一些宣传，买了一个支持UAS协议的移动硬盘盒，根据评论看，这个硬盘盒是支持Trim的，但是大部分用户似乎都是在Windows下进行测试的，在Linux下是否真的支持，是否需要新版本内核或者驱动的支持还不知道。</p>
<p>等硬盘盒到手，插上之后系统lsusb看了一下：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">jetson-nano:~:% lsusb
Bus 002 Device 002: ID 174c:225c ASMedia Technology Inc. Ugreen Storage Device<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>VendorId是0x174c，也就是ASMedia公司的桥接芯片，但是225c这个ProductId并没有在USB ID数据库里查到，不过从数据库里看0x1153这个ProductId对应ASM1153这款芯片来说，那225c应该是对应着ASM225CM这个芯片？从目前的资料看，这个芯片理论上是支持Trim的，至少可以通过刷新固件来解决支持的问题。</p>
<p>然而系统识别出sda之后，<code>lsblk --discard</code>依然提示不支持Trim。</p>
<p>于是又搜索了一些资料，终于在<a href="https://wiki.archlinux.org/title/Solid_state_drive#External_SSD_with_TRIM_support">Arch的SSD Wiki</a>里找到了一些信息：</p>
<blockquote><p>其实现在一些USB转SATA芯片（如VL715、VL716等）以及在外接NVMe硬盘盒（如IB-1817M-C31）中使用的USB转PCIe芯片（如 智微（JMicron） JMS583 ）支持类似TRIM的命令。这些命令可通过 USB Attached SCSI 驱动程序（在Linux下称为”uas”）发送。然而内核可能不会自动检测到并启用这一功能。</p>
</blockquote>

<p>会不会是因为芯片是支持的，但是系统默认没有开启呢？于是按Wiki里的说法，使用<code>sg_readcap -l /dev/sda</code>命令读取设备的标志位：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">jetson-nano:chenfu:<span class="token comment"># sg_readcap -l /dev/sda</span>
Read Capacity results:
   Protection: <span class="token assign-left variable">prot_en</span><span class="token operator">=</span><span class="token number">0</span>, <span class="token assign-left variable">p_type</span><span class="token operator">=</span><span class="token number">0</span>, <span class="token assign-left variable">p_i_exponent</span><span class="token operator">=</span><span class="token number">0</span>
   Logical block provisioning: <span class="token assign-left variable">lbpme</span><span class="token operator">=</span><span class="token number">0</span>, <span class="token assign-left variable">lbprz</span><span class="token operator">=</span><span class="token number">0</span>
   Last <span class="token assign-left variable">LBA</span><span class="token operator">=</span><span class="token number">937703087</span> <span class="token punctuation">(</span>0x37e436af<span class="token punctuation">)</span>, Number of logical <span class="token assign-left variable">blocks</span><span class="token operator">=</span><span class="token number">937703088</span>
   Logical block <span class="token assign-left variable">length</span><span class="token operator">=</span><span class="token number">512</span> bytes
   Logical blocks per physical block <span class="token assign-left variable">exponent</span><span class="token operator">=</span><span class="token number">0</span>
   Lowest aligned <span class="token assign-left variable">LBA</span><span class="token operator">=</span><span class="token number">0</span>
Hence:
   Device size: <span class="token number">480103981056</span> bytes, <span class="token number">457862.8</span> MiB, <span class="token number">480.10</span> GB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>发现<code>Logical block provisioning: lbpme=0, lbprz=0</code>其中lbpme&#x3D;0，因为LBPME位为0，所以内核默认是不会开启DISCARD的支持。针对这种情况，还需要继续通过<code>sg_vpd -a /dev/sda</code>命令查询设备支持的命令情况：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">jetson-nano:chenfu:<span class="token comment"># sg_vpd -a /dev/sda</span>
Supported VPD pages VPD page:
  <span class="token punctuation">..</span>.
Unit serial number VPD page:
  Unit serial number: 704108E11D02

Device Identification VPD page:
  Addressed logical unit:
    designator type: NAA,  code set: Binary
      0x5000000000000001

Block limits VPD page <span class="token punctuation">(</span>SBC<span class="token punctuation">)</span>:
  Write same non-zero <span class="token punctuation">(</span>WSNZ<span class="token punctuation">)</span>: <span class="token number">0</span>
  <span class="token punctuation">..</span>.

Block device characteristics VPD page <span class="token punctuation">(</span>SBC<span class="token punctuation">)</span>:
  Non-rotating medium <span class="token punctuation">(</span>e.g. solid state<span class="token punctuation">)</span>
  <span class="token punctuation">..</span>.
Logical block provisioning VPD page <span class="token punctuation">(</span>SBC<span class="token punctuation">)</span>:
  Unmap <span class="token builtin class-name">command</span> supported <span class="token punctuation">(</span>LBPU<span class="token punctuation">)</span>: <span class="token number">1</span>
  Write same <span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span> with unmap bit supported <span class="token punctuation">(</span>LBPWS<span class="token punctuation">)</span>: <span class="token number">0</span>
  Write same <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> with unmap bit supported <span class="token punctuation">(</span>LBPWS10<span class="token punctuation">)</span>: <span class="token number">0</span>
  Logical block provisioning <span class="token builtin class-name">read</span> zeros <span class="token punctuation">(</span>LBPRZ<span class="token punctuation">)</span>: <span class="token number">0</span>
  Anchored LBAs supported <span class="token punctuation">(</span>ANC_SUP<span class="token punctuation">)</span>: <span class="token number">0</span>
  Threshold exponent: <span class="token number">0</span> <span class="token punctuation">[</span>threshold sets not supported<span class="token punctuation">]</span>
  Descriptor present <span class="token punctuation">(</span>DP<span class="token punctuation">)</span>: <span class="token number">0</span>
  Minimum percentage: <span class="token number">0</span> <span class="token punctuation">[</span>not reported<span class="token punctuation">]</span>
  Provisioning type: <span class="token number">0</span> <span class="token punctuation">(</span>not known or fully provisioned<span class="token punctuation">)</span>
  Threshold percentage: <span class="token number">0</span> <span class="token punctuation">[</span>percentages not supported<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>可以发现在<code>Logical block provisioning VPD page (SBC)</code>段下，有<code>Unmap command supported (LBPU): 1</code>，说明设备本身是支持Unmap指令的，因为前面说到，ATA中的Trim其实就是对应的SCSI中的UNMAP，所以支持UNMAP也就是支持了Trim，当然这中间的转换过程，应该是有硬盘盒的主控来完成。</p>
<p>那既然在物理上是支持Trim的，那剩下的就是逻辑上怎么启用的问题了，先看下目前内核识别的设备的provisioning_mode：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">jetson-nano:chenfu:<span class="token comment"># cat /sys/block/sda/device/scsi_disk/0:0:0:0/provisioning_mode</span>
full<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>可以发现输出是<code>full</code>，也就是说内核当前是没有检测到设备支持Trim特性，解决方法也比较简单，直接<code>echo unmap</code>到这个文件：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">jetson-nano:chenfu:<span class="token comment"># echo unmap > /sys/block/sda/device/scsi_disk/0:0:0:0/provisioning_mode</span>
jetson-nano:chenfu:<span class="token comment"># lsblk --discard</span>
NAME        DISC-ALN DISC-GRAN DISC-MAX DISC-ZERO
sda                <span class="token number">0</span>      512B       4G         <span class="token number">0</span>
mmcblk1            <span class="token number">0</span>        4M      76M         <span class="token number">0</span>
└─mmcblk1p1        <span class="token number">0</span>        4M      76M         <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看到，强制指定provisioning_mode为unmap之后，<code>lsblk --discard</code>的输出已经提示sda设备支持Trim了。</p>
<p>最后，为了能让这个特性可以在插入硬盘盒的时候自动生效，可以手动编写一个Udev的规则文件：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">'ACTION=="add|change", ATTRS&#123;idVendor&#125;=="174c", ATTRS&#123;idProduct&#125;=="225c", SUBSYSTEM=="scsi_disk", ATTR&#123;provisioning_mode&#125;="unmap"'</span> <span class="token operator">>></span>/etc/udev/rules.d/10-uas-discard.rules<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>也就是说，当有idVendor为174c，idProduct为225c的设备（也就是我的这个硬盘盒）连接的时候，自动设置provisioning_mode为unmap。</p>
]]></content>
      <categories>
        <category>日常折腾</category>
      </categories>
      <tags>
        <tag>SSD</tag>
        <tag>Trim</tag>
        <tag>UAS</tag>
      </tags>
  </entry>
  <entry>
    <title>DIY一个8盘位全闪NAS</title>
    <url>/2023/01/26/diy-a-8bay-ssd-nas/</url>
    <content><![CDATA[<p>接上篇<a href="/2022/11/05/lsi-raid-controller-and-hba-complete-listing-plus-oem-models/">LSI RAID卡芯片和各个OEM对应卡型号列表</a>里说的后续DIY NAS的想法，经过快3个月的时间，终于来更新整个DIY过程了，总结起来在整个过程中，收获的主要还是折腾的乐趣，要说折腾的尽头是白群晖，随着时间的推移，个人还是比较认同的，不过不得不说白群晖确实太贵了，都说群晖是买软件送硬件，但是这软件也太贵了点。</p>
<span id="more"></span>

<h1 id="需求描述和分析"><a href="#需求描述和分析" class="headerlink" title="需求描述和分析"></a>需求描述和分析</h1><p>说起来，为啥会有个DIY NAS的需求呢？一个重要的原因是家里的小宝贝出生了，不知不觉也拍了好多的照片和视频，还是希望能更长久的把这些记忆保留下来。另外呢，之前更新自己的电脑，淘汰下来一套i5 6500 CPU加16G内存以及主板的准系统，买个机箱还有电源就直接可以用了，本着废物利用的原则，做个NAS也不亏，而且还多了很多可玩性。</p>
<p>其实单纯从保存数据来说，将数据存放到任何一个公有云的对象存储上，是个最终极的方案，因为目前各个厂商提供的对象存储数据持久性SLA都达到了11或者12个9（99.999999999%-99.9999999999%），这基本意味着几乎不存在数据丢失的可能性了。但是确实这个方案也是最贵的，毕竟每TB存储每月都需要消耗对应的存储费用，随着时间增长，即使是最便宜的冷归档类型，也依然是个不小的消耗。</p>
<p>那到底需要多少的存储容量呢？针对我个人而言，目前可预见的容量，应该不会超过10T，当前1-2年内所需求的容量更小，大概只需要1到2T的样子。</p>
<p>针对这个容量，其实已经可以考虑全SSD的存储方案了，其实相比于使用HDD的方案，纯SSD的NAS有以下几个好处：首先是噪音角度，相比HDD运行时的“炒豆子”声来说，SSD 0噪音，这可以直接解决夜间安静环境下HDD低频噪音对睡眠质量的影响；其次是稳定性和数据安全角度，根据我们公司数据中心有比较大规模的SSD和HDD的使用经验，同时参考<a href="https://www.backblaze.com/blog/ssd-drive-stats-mid-2022-review/">backblaze提供的统计数据</a>，可以看出SSD的稳定性远超过HDD，这带来了两个优势，一个是相比HDD，SSD损坏的概率低，这可以减少存储池修复的可能性，另外因为读写速度上SSD快很多，在坏盘的情况下，SSD也可以做到更坏的修复速度，从而可以提供更好的数据持久性。</p>
<p>当然SSD依然还是有缺点的，很明显当前SSD比HDD依然贵很多，以当前的价格来说，SSD成本大约0.4元&#x2F;GB（大多数1T SATA SSD），HDD大概只有0.12元&#x2F;GB（西数HC550 16T）。但是对于我目前的容量需求来说，使用SSD的成本相比HDD没有差距太大，多花的那部分成本，对于0噪音来说是相当值得的。</p>
<p>除了磁盘的选型，还有一些其他的需求，诸如盘位数量大于等于4，硬盘需要支持热拔插，存储池可以动态扩容，移动端、桌面端数据自动同步等等，不过这些也都算是比较基础的需求了。</p>
<h1 id="硬盘笼选择"><a href="#硬盘笼选择" class="headerlink" title="硬盘笼选择"></a>硬盘笼选择</h1><p>针对硬盘热拔插的需求，肯定还是要搞个硬盘笼的，不管怎么说，相比于直接把硬盘塞机箱里，有个热拔插硬盘笼一下子逼格就上来了。</p>
<p>所以一直花了不少精力去找合适的硬盘笼，主要还是集中于服务器的拆机件，这里给几个当时考虑的一些方案。</p>
<h2 id="浪潮12盘位3-5寸硬盘笼"><a href="#浪潮12盘位3-5寸硬盘笼" class="headerlink" title="浪潮12盘位3.5寸硬盘笼"></a>浪潮12盘位3.5寸硬盘笼</h2><div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="/images/inspur-12bay-front.jpg"></div><div class="group-picture-column"><img src="/images/inspur-12bay-back.jpg"></div></div></div>

<p>首先第一个选择是买浪潮的12盘位3.5寸硬盘笼，目前的价格大概150块钱的样子，还挺便宜，感觉应该都是当初Chia矿老板淘汰下来的，这些硬盘笼基本都有大4P的电源接口以及MiniSAS（SFF8087）接口，使用起来还是比较方便的，当然缺点是确实占地比较大，毕竟是适配的2U机箱，因为本来也一直坚持全闪的方案，所以3.5寸的硬盘位就没有必要了，即使很便宜，依然放弃了这个方案。</p>
<h2 id="Intel-8盘位热插拔笼子-8-AnyBay"><a href="#Intel-8盘位热插拔笼子-8-AnyBay" class="headerlink" title="Intel 8盘位热插拔笼子(8 AnyBay)"></a>Intel 8盘位热插拔笼子(8 AnyBay)</h2><div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="/images/intel-8-anybay-front.jpg"></div><div class="group-picture-column"><img src="/images/intel-8-anybay-back.jpg"></div></div></div>


<p>这是Intel一个颜值和功能都超级能打的硬盘笼，具体的参数可以参考<a href="https://www.intel.com/content/www/us/en/products/sku/99083/2u-hotswap-8x2-5inch-sasnvme-combo-drive-bay-kit-a2u8x25s3phs/specifications.html">Intel的Spec文档</a>（不得不说Intel的文档写的是真的好），甚至当前这个时间点，依然在量产状态，这个笼子一般来说都是在2U机箱上做竖插24盘位的组件的，这几乎是我心目中最理想的硬盘笼选择，8盘位AnyBay，支持SATA、SAS、U.2 NVMe接口的硬盘，特别是在现在咸鱼有大量的U.2接口的大容量企业级SSD，价格十分友好。最关键的是这个硬盘笼的尺寸非常完美，可以无缝的塞进两个5.25英寸光驱位中，网上也有这个硬盘笼搭配银欣（SilverStone）SG02-F机箱组NAS的方案：<a href="https://www.bilibili.com/read/cv16906380">全网首发【8盘位热插拔NVMe SSD NAS】DIY指南简章</a>，不得不说这个方案真的让人流口水，但确实不得不说成本太高了。</p>
<p>这个硬盘笼呢，什么都好，就是成本太高，不仅仅笼子本身（大约1100+）更重要的是其配套的组件，首先这个硬盘笼是MiniSAS HD（SFF‑8643）接口的，支持这个接口的HBA或者RAID卡也比较贵，其次如果说要支持8个NVMe硬盘的话，需要准备8个OcuLink接口，那PCIe转OcuLink接口的转接卡又是不小的支出。更重要的是，8个NVMe需要32个PCIe lane，这直接超出了当前大部分平台的能力，基本只有服务器平台的CPU+主板才能支持这么多的PCIe lane，成本很可观。最后还有一个不得不考虑的问题，U.2 NVMe硬盘一般来说功耗都比较高，很多盘能到10几20W往上，如果是8块硬盘，那整体功耗可能会超过100W，所以散热的问题就不得不考虑了，这个笼子如果插NVMe硬盘的话，需要额外的散热。</p>
<p>所以呢，东西虽好，但确实不符合我当前的需求和预算（流下贫穷的泪水）。据说H3C也有类似的笼子，价格要便宜1半，如果大家有类似的需求可以考虑。好像类似的8盘位AnyBay硬盘笼，各家OEM都有，但是好像好买且价格合适的不多。</p>
<h2 id="Intel-8盘位热插拔笼子-4-AnyBay-4-SATA-SAS"><a href="#Intel-8盘位热插拔笼子-4-AnyBay-4-SATA-SAS" class="headerlink" title="Intel 8盘位热插拔笼子(4 AnyBay + 4 SATA&#x2F;SAS)"></a>Intel 8盘位热插拔笼子(4 AnyBay + 4 SATA&#x2F;SAS)</h2><p>这是另外一个Intel的硬盘笼子，大概可以算是上面笼子的低配版，<a href="https://www.intel.com/content/www/us/en/products/sku/82790/hotswap-backplane-pcie-combination-drive-cage-kit-for-p4000-server-chassis-fup8x25s3nvdk-2-5in-nvme-ssd/specifications.html">文档看这里</a>，这个笼子支持4个NVMe + 4个SATA&#x2F;SAS硬盘，价格在淘宝也相对便宜，看到加上PCIe转接卡大概1000不到可以拿下，其实是个不错的选择，但是依然超出我的预算不少（继续流下贫穷的泪水）。</p>
<h2 id="Intel-8盘位热插拔笼子-8-SATA-SAS"><a href="#Intel-8盘位热插拔笼子-8-SATA-SAS" class="headerlink" title="Intel 8盘位热插拔笼子(8 SATA&#x2F;SAS)"></a>Intel 8盘位热插拔笼子(8 SATA&#x2F;SAS)</h2><p><img src="/images/intel-8-sas.jpg"></p>
<p>Intel还有一种硬盘笼（Intel出的好东西真不少啊），<a href="https://www.intel.com/content/www/us/en/products/sku/60221/spare-8x2-5-hotswap-drive-cage-kit-fup8x25hsdks/specifications.html">文档看这里</a>，这个笼子支持8个SATA&#x2F;SAS硬盘，使用两个MiniSAS（SFF8087）接口，是一开始我选中的方案，整体还是很平衡的，淘宝大概400不到，在我找到下面的硬盘笼之前，一度准备剁手入了。</p>
<h2 id="HP热插拔380-G6-G7硬盘笼"><a href="#HP热插拔380-G6-G7硬盘笼" class="headerlink" title="HP热插拔380 G6&#x2F;G7硬盘笼"></a>HP热插拔380 G6&#x2F;G7硬盘笼</h2><p><img src="/images/hp-8-sas.jpg"></p>
<p>这个是我最后选择的笼子，这个硬盘笼原本是给HP DL380G6&#x2F;G7升级16盘位的套件，在HP那边的编号是：<code>507690-001</code>和<code>516914-B21</code>（这俩编号是一个东西），这个套件包含的几个组件和对应的物料编号如下：</p>
<blockquote><p>硬盘笼子：463173-001 496074-001<br>硬盘背板：507690-001 451283-002<br>硬盘供电线：514217-001<br>硬盘SAS数据线：498425-001 493228-005</p>
</blockquote>

<p>为什么我选择这个硬盘笼子呢，因为它真的便宜，笼子加上背板、送供电线和两根SAS线，只需要50块钱，当然是不带硬盘托架的，不过算上硬盘托架的价钱也只需要80。80块钱真买不了上当和吃亏。说实话它也有一些小问题，比如坑爹的HP不知道为啥要设计成横向的两个4盘位，尺寸比竖向8盘位相比宽了一点点，直接导致没办法塞进2个5.25英寸光驱位。另外电源接口的设计也比较恶心，是向外的，如果想塞进机箱，那突出来的电源线会成为一个大问题，另外HP的电源接口定义也是每代一改，虽然复用了10pin的接口，但是定义并不标准，导致我花了非常长的时间去寻找各个pin的定义，生怕弄错接口定义把背板烧了，最终还是在一个德语的论坛找到<a href="https://www.hardwareluxx.de/community/threads/adapter-auf-hp-10-pin-stromanschlu%C3%9F-gesucht-f%C3%BCr-hp-sas-backplane.865625/page-2#post-19825023">一个评论</a>说了这个硬盘笼子的定义，需要说明的是这个背板不接3.3V的供电也没有影响，所以也是淘宝了两根大4P的电源线和10pin线，自己DIY了一个电源线，最终把这个硬盘盒的供电问题解决。总的来说，主要这个笼子实在是太便宜了，便宜到它的这几个缺点都可以忍受（还是流下贫穷的泪水）。</p>
<h1 id="RAID-HBA卡选择"><a href="#RAID-HBA卡选择" class="headerlink" title="RAID&#x2F;HBA卡选择"></a>RAID&#x2F;HBA卡选择</h1><p>针对上面几个硬盘笼，特别是最终我选的硬盘笼，都使用了MiniSAS（SFF8087）接口，所以要想使用硬盘笼的话，需要有支持MiniSAS接口的SATA控制器或者RAID&#x2F;HBA卡，根据之前的调查，大致有几种方案：</p>
<pre><code>1. 可以使用MiniSAS转4SATA线实现，不过需要注意的是，这种线是区分正反的，正向线是MiniSAS口转4SATA，需要买反接线，将4SATA转换成MiniSAS口，从而实现将主板上的4个SATA口转成一个MiniSAS口。
2. 市面上还有一些基于类似ASM1166（或者类似芯片）的PCI-E转SFF-8087转接卡，但ASM1166原生只支持6SATA Port，是否两个SFF-8087端口的8个端口都能使用，这个存疑。
   另外还有也有一些M.2转8口SATA扩展卡也是用的两个SFF-8087转接卡，理论上也可以使用。
3. 使用拆机的服务器HBA卡，比如基于LSI SAS 2008/2308的一众原厂或者OEM HBA卡。
</code></pre>
<p>最终我还是选择了相对成熟的HBA卡方案，一顿精挑细选，最终选了SuperMicro家的<code>AOC-S2308L-L8I 9217-8i</code>，基于SAS 2308芯片，PCIe 3.0 x8的接口，支持两个SFF-8087接口，这是一张OEM卡，对应的原厂卡型号是<code>LSI SAS9217-8i</code>，市面上除了SuperMicro之外，还有很多OEM也会出相同芯片的卡，比如浪潮、IBM等等，选择还是比较多的。我选的是2308的方案，这个芯片算是2008芯片的升级，其实区别不大，最主要的升级就是从PCIe 2.0 x8变成了PCIe 3.0 x8，整体带宽会高点。另外需要注意的一点是，这两个芯片有两种固件：IT（Initiator Target）模式和IR（Integrated RAID）模式，IT模式是类似HBA卡的直通模式，没办法组建RAID；IR模式是类似RAID卡的模式，可以组建简单的RAID0和RAID1。另外这两种固件是可以互刷的，区别只是在产品名字上是9207还是9217（9217是IR模式，9207是IT模式，所以我买的卡也是原厂IR模式刷的IT固件）。最后其实这个卡有个比较大的散热方面的问题，根据原厂的<a href="https://docs.broadcom.com/doc/12353331">User Guide文档</a>。这张卡默认情况下有接近10W（默认9.8W，最大16W）的功耗，且最低要求<code>200 linear feet per minute</code>的风量，在服务器环境下散热都不是问题，但是放到家用的机箱里，如果没有主动散热的情况下，这张卡会非常的烫手！所以最终我又找了一个12cm的风扇专门对着卡的散热片吹，从而解决散热问题。</p>
<h1 id="硬盘选择"><a href="#硬盘选择" class="headerlink" title="硬盘选择"></a>硬盘选择</h1><p>上面的这些组件搞定，最终就是买硬盘了，之前提到现在全新的SATA SSD大概0.4元&#x2F;GB，一块1TB的SSD大概400左右，说实话还是不便宜的，所以我又勇敢的选择了大船货！其实现在二手拆机SSD，量最大，最划算的还是U.2的硬盘，不到1000块钱可以买到4T左右的企业级SSD，而且这些企业级SSD寿命极高，稳定性也相当好，而且相比于SATA接口，U.2因为是PCIe链路，可以做到传输层的数据保护，可惜的是咱们的硬盘笼不支持。于是就只能选择SATA接口的SSD，一下子可选范围就少了不少，最终还是选了当前比较火的Sandisk&#x2F;闪迪云盘ECO，但是相比于更火的1.92T容量的版本，我最终买了960G容量的版本，相比于1.92T这个容量点，我猜960G容量用来做系统盘的概率更大点，说不准能抽奖抽到写入量超低的盘😁。相比于全新盘，这个拆机盘的价格就很实惠了。目前的价格是960G容量版本230块，不到0.24元&#x2F;GB，属实是相当划算了。</p>
<h1 id="NAS系统选择"><a href="#NAS系统选择" class="headerlink" title="NAS系统选择"></a>NAS系统选择</h1><p>所有硬件的问题搞定，最后就只剩下软件层面的选择了，到底该用什么系统呢？一开始想使用TrueNAS，主要是看中ZFS的能力，但是试用了一小段时间TrueNAS之后，感觉这系统是真的很难用，门槛太高了，虽然运维这玩意对我来说并不是太大的瓶颈，但是确实各个方面都不太好用，特别是相关的软件生态上差很多。<br>于是乎就又试了试黑群晖，一开始我其实是抵制黑群晖的，因为有点担心数据安全问题，不确定会不会哪天就崩了，但是试用了一下之后，觉得确实群晖的生态做的太好了，体验拉满。于是就去简单研究了一下黑群晖的实现原理，发现其实黑群晖的相关项目都是开源的，都放在了<a href="https://github.com/RedPill-TTG">RedPill-TTG</a>这个组织下，其中最关键的对群晖内核的hack都在<a href="https://github.com/RedPill-TTG/redpill-lkm">RedPill-TTG&#x2F;redpill-lkm</a>这个项目里，大致翻了翻代码，基本上就是通过加载模块的方式，欺骗群晖的内核，让其认为自己是跑在群晖专有的硬件上。了解了之后，黑群晖在我心目中好感倍增，话说感觉群晖这绝对是套路满满，都说黑群晖的尽头是白群。估计群晖官方默许黑群晖行为的原因大概和Windows一样，反正最终都会买我。</p>
<p>不过相比于直接把群晖跑在裸机上，我采取了一个另外的方法，把群晖跑在了虚拟机里，这样做的目的主要也是为了方便以后迁移，对我来说当前的硬件平台只是个相对临时的解决方案，为了后续能更好的跨平台迁移，所以我选择将黑群晖跑在虚拟机里，而对于HBA卡来说，采取的是硬件直通的方式直通给虚拟机，从而确保SMART等功能的正常使用。这里分享一下我现在用的虚拟机的XML，有需要的可以参考一下：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>domain</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>kvm<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>Synology<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>uuid</span><span class="token punctuation">></span></span>5ce24e3b-627b-468a-bcd5-53ff58d9731d<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>uuid</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>memory</span><span class="token punctuation">></span></span>8388608<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>memory</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>currentMemory</span><span class="token punctuation">></span></span>8388608<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>currentMemory</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>memoryBacking</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hugepages</span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>memoryBacking</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>vcpu</span><span class="token punctuation">></span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>vcpu</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>os</span> <span class="token attr-name">firmware</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>efi<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>firmware</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>feature</span> <span class="token attr-name">enabled</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>no<span class="token punctuation">'</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>secure-boot<span class="token punctuation">'</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>firmware</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span> <span class="token attr-name">arch</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>x86_64<span class="token punctuation">"</span></span> <span class="token attr-name">machine</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>q35<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>hvm<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>boot</span> <span class="token attr-name">dev</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hd<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>os</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>features</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>acpi</span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>apic</span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>features</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cpu</span> <span class="token attr-name">mode</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>host-passthrough<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>clock</span> <span class="token attr-name">offset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utc<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>timer</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>rtc<span class="token punctuation">"</span></span> <span class="token attr-name">tickpolicy</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>catchup<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>timer</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pit<span class="token punctuation">"</span></span> <span class="token attr-name">tickpolicy</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>delay<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>timer</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hpet<span class="token punctuation">"</span></span> <span class="token attr-name">present</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>no<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>clock</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pm</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>suspend-to-mem</span> <span class="token attr-name">enabled</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>no<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>suspend-to-disk</span> <span class="token attr-name">enabled</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>no<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pm</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>devices</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>emulator</span><span class="token punctuation">></span></span>/usr/libexec/qemu-kvm<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>emulator</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>disk</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">device</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>disk<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>driver</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>qemu<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>raw<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">file</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/data0/Synology/boot.img<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span> <span class="token attr-name">dev</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sda<span class="token punctuation">"</span></span> <span class="token attr-name">bus</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>usb<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>disk</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>interface</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bridge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">bridge</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>br0<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mac</span> <span class="token attr-name">address</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>11:22:33:44:55:66<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>model</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>virtio<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>interface</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>console</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pty<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hostdev</span> <span class="token attr-name">mode</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>subsystem<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pci<span class="token punctuation">"</span></span> <span class="token attr-name">managed</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>yes<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>address</span> <span class="token attr-name">domain</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">bus</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">function</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>source</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>hostdev</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>memballoon</span> <span class="token attr-name">model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>none<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>graphics</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>vnc<span class="token punctuation">'</span></span> <span class="token attr-name">port</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>-1<span class="token punctuation">'</span></span> <span class="token attr-name">autoport</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>yes<span class="token punctuation">'</span></span> <span class="token attr-name">listen</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>0.0.0.0<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listen</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>address<span class="token punctuation">'</span></span> <span class="token attr-name">address</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>0.0.0.0<span class="token punctuation">'</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>graphics</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>model</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>vga<span class="token punctuation">'</span></span> <span class="token attr-name">vram</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>16384<span class="token punctuation">'</span></span> <span class="token attr-name">heads</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>1<span class="token punctuation">'</span></span> <span class="token attr-name">primary</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>yes<span class="token punctuation">'</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>video</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>devices</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>domain</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h1 id="总结和后续"><a href="#总结和后续" class="headerlink" title="总结和后续"></a>总结和后续</h1><p>目前的这套NAS方案已经运行了2个多月，看起来还算稳定，这段时间内没出现过大的问题。如果折腾半天就只为了存点照片也有点浪费，所以除了存储功能之外，我又跑了个PCDN业务，目前收益也还不错，我是100M的上传带宽，目前每天大概能有个5块钱的收益，至少电费能覆盖了，跑着玩玩吧~</p>
<p>想想当前这套还有什么不足，个人觉得一个比较大的缺点是占地，目前我是用了乔斯伯的V4做的机箱，但是硬盘笼是不太好直接放进机箱了，所以只是简单的放在了外壳上，整体相比于家用的NAS产品还是大了一圈，另外确实硬盘笼比双5.25寸光驱位大了点，即使后续换了机箱，可能也不太好直接放进去。</p>
<p>另外就是CPU这些硬件配置了，一方面当前这颗CPU TDP还是比较大的，65W，必须有主动散热，另外HBA卡也需要主动散热，所以离真正的0噪音还有点距离，理论上换用嵌入式的低功耗CPU+SATA转MiniSAS的方案，可以做到整机完全没有任何机械活动的部件，做到真正意义上的0噪音。</p>
<p>最后就是另一个方向，换到稍微低端点的数据中心CPU+主板，功耗会高一些，但是可扩展性会极大的增强，包括ECC内存以及U.2硬盘、IPMI这些都可以支持。具体往后该如何演进，还是等待当前套系统继续运行一段时间吧。</p>
]]></content>
      <categories>
        <category>日常折腾</category>
      </categories>
      <tags>
        <tag>SSD</tag>
        <tag>NAS</tag>
        <tag>黑群晖</tag>
      </tags>
  </entry>
  <entry>
    <title>Git的浅克隆功能</title>
    <url>/2019/07/25/git-shallow-clone/</url>
    <content><![CDATA[<p>随着Git仓库不断的被修改，整个仓库会变得越来越大，其中最主要的原因是历史提交特别的多，这个对于想立即阅读最新代码或者CI&#x2F;CD场景下不是特别友好。</p>
<p>面对这种场景，可以利用git提供的浅克隆功能，只clone少部分历史到本地，这样可以极大的减少clone的仓库大小，以PHP源代码代码为例：</p>
<span id="more"></span>

<p>目前PHP源码有超过10万个提交，全部clone下来成本不小，如果只是想clone最新的N个提交，可以加上<code>--depth</code>参数：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># git clone https://github.com/php/php-src.git --depth=1 # 1可以换成任意深度，根据需要调整</span>
Cloning into <span class="token string">'php-src'</span><span class="token punctuation">..</span>.
remote: Enumerating objects: <span class="token number">18674</span>, done.
remote: Counting objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">18674</span>/18674<span class="token punctuation">)</span>, done.
remote: Compressing objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">16621</span>/16621<span class="token punctuation">)</span>, done.
remote: Total <span class="token number">18674</span> <span class="token punctuation">(</span>delta <span class="token number">2656</span><span class="token punctuation">)</span>, reused <span class="token number">12214</span> <span class="token punctuation">(</span>delta <span class="token number">1882</span><span class="token punctuation">)</span>, pack-reused <span class="token number">0</span>
Receiving objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">18674</span>/18674<span class="token punctuation">)</span>, <span class="token number">17.71</span> MiB <span class="token operator">|</span> <span class="token number">1.25</span> MiB/s, done.
Resolving deltas: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">2656</span>/2656<span class="token punctuation">)</span>, done.
Checking out files: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">18446</span>/18446<span class="token punctuation">)</span>, done.
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>但是这样clone下来是没有分支信息的，如果需要看不同分支的代码：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># git remote set-branches origin PHP-7.3.8 # 如果需要全部的分支可以  git remote set-branches origin '*'</span>
<span class="token comment"># git fetch --depth=1</span>
remote: Enumerating objects: <span class="token number">13268</span>, done.
remote: Counting objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">13266</span>/13266<span class="token punctuation">)</span>, done.
remote: Compressing objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">6744</span>/6744<span class="token punctuation">)</span>, done.
remote: Total <span class="token number">8549</span> <span class="token punctuation">(</span>delta <span class="token number">5695</span><span class="token punctuation">)</span>, reused <span class="token number">4475</span> <span class="token punctuation">(</span>delta <span class="token number">1792</span><span class="token punctuation">)</span>, pack-reused <span class="token number">0</span>
Receiving objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">8549</span>/8549<span class="token punctuation">)</span>, <span class="token number">6.49</span> MiB <span class="token operator">|</span> <span class="token number">693.00</span> KiB/s, done.
Resolving deltas: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">5695</span>/5695<span class="token punctuation">)</span>, completed with <span class="token number">3878</span> <span class="token builtin class-name">local</span> objects.
From https://github.com/php/php-src
 * branch              master     -<span class="token operator">></span> FETCH_HEAD
 * <span class="token punctuation">[</span>new branch<span class="token punctuation">]</span>        PHP-7.3.8  -<span class="token operator">></span> origin/PHP-7.3.8
<span class="token function">git</span> remote set-branches origin <span class="token string">'PHP-7.3.8'</span>
<span class="token function">git</span> fetch <span class="token parameter variable">--depth</span><span class="token operator">=</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>如果转换成常规克隆，需要使用<code>--unshallow</code>：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># git config remote.origin.fetch '+refs/heads/*:refs/remotes/origin/*'</span>
<span class="token comment"># git fetch --unshallow</span>
remote: Enumerating objects: <span class="token number">800451</span>, done.
remote: Counting objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">800446</span>/800446<span class="token punctuation">)</span>, done.
remote: Compressing objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">172689</span>/172689<span class="token punctuation">)</span>, done.
remote: Total <span class="token number">790672</span> <span class="token punctuation">(</span>delta <span class="token number">630180</span><span class="token punctuation">)</span>, reused <span class="token number">777010</span> <span class="token punctuation">(</span>delta <span class="token number">616884</span><span class="token punctuation">)</span>, pack-reused <span class="token number">0</span>
Receiving objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">790672</span>/790672<span class="token punctuation">)</span>, <span class="token number">334.08</span> MiB <span class="token operator">|</span> <span class="token number">3.63</span> MiB/s, done.
Resolving deltas: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">630180</span>/630180<span class="token punctuation">)</span>, completed with <span class="token number">8325</span> <span class="token builtin class-name">local</span> objects.
From https://github.com/php/php-src
 * <span class="token punctuation">[</span>new branch<span class="token punctuation">]</span>        PEAR_1_4DEV                               -<span class="token operator">></span> origin/PEAR_1_4DEV
 * <span class="token punctuation">[</span>new branch<span class="token punctuation">]</span>        PECL                                      -<span class="token operator">></span> origin/PECL
 * <span class="token punctuation">[</span>new branch<span class="token punctuation">]</span>        PECL_4_3                                  -<span class="token operator">></span> origin/PECL_4_3
 * <span class="token punctuation">[</span>new branch<span class="token punctuation">]</span>        PECL_OPENSSL                              -<span class="token operator">></span> origin/PECL_OPENSSL
 * <span class="token punctuation">[</span>new branch<span class="token punctuation">]</span>        PHAR_1_2                                  -<span class="token operator">></span> origin/PHAR_1_2
 * <span class="token punctuation">[</span>new branch<span class="token punctuation">]</span>        PHP-4.0                                   -<span class="token operator">></span> origin/PHP-4.0
 * <span class="token punctuation">[</span>new branch<span class="token punctuation">]</span>        PHP-4.0.5                                 -<span class="token operator">></span> origin/PHP-4.0.5
 * <span class="token punctuation">[</span>new branch<span class="token punctuation">]</span>        PHP-4.0.6                                 -<span class="token operator">></span> origin/PHP-4.0.6
 * <span class="token punctuation">[</span>new branch<span class="token punctuation">]</span>        PHP-4.0.7                                 -<span class="token operator">></span> origin/PHP-4.0.7
 * <span class="token punctuation">[</span>new branch<span class="token punctuation">]</span>        PHP-4.2.0                                 -<span class="token operator">></span> origin/PHP-4.2.0
 * <span class="token punctuation">[</span>new branch<span class="token punctuation">]</span>        PHP-4.2.2                                 -<span class="token operator">></span> origin/PHP-4.2.2
 * <span class="token punctuation">[</span>new branch<span class="token punctuation">]</span>        PHP-4.3                                   -<span class="token operator">></span> origin/PHP-4.3
 <span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>效率配置</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>shallow clone</tag>
      </tags>
  </entry>
  <entry>
    <title>x86平台的TSC（TIME-STAMP COUNTER）</title>
    <url>/2024/11/11/facts-about-x86-tsc/</url>
    <content><![CDATA[<p>今天跟着Intel的开发手册，看看如何随着Intel对TSC不断的修改和增加新特性，让TSC从一个简单的性能计数器发展成当前Linux上x86平台最重要的时钟源之一。本文基本上可以看作是<a href="https://www.intel.com/content/dam/www/public/us/en/documents/manuals/64-ia-32-architectures-software-developer-vol-3b-part-2-manual.pdf">Intel® 64 and IA-32 Architectures Software Developer’s Manual Volume 3B: System Programming Guide, Part 2</a>中<code>17.15 TIME-STAMP COUNTER</code>这章的翻译和总结。</p>
<p>在x86平台上，Linux系统里最常用的一个时钟源就是<code>tsc</code>，具体的，可以通过命令查看当前的时钟源和系统里可用的时钟源：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># cat /sys/devices/system/clocksource/clocksource0/available_clocksource</span>
tsc hpet acpi_pm
<span class="token comment"># cat /sys/devices/system/clocksource/clocksource0/current_clocksource</span>
tsc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>那么TSC是个什么东西呢？我们可以跟着手册看一看。</p>
<span id="more"></span>

<h2 id="TIME-STAMP-COUNTER"><a href="#TIME-STAMP-COUNTER" class="headerlink" title="TIME-STAMP COUNTER"></a>TIME-STAMP COUNTER</h2><p>从 Pentium 处理器开始，Intel 64 和 IA-32 架构定义了一种时间戳计数器机制（TSC），可以用于监控和识别处理器事件的相对时间。TSC包括以下组件：</p>
<pre><code>- TSC flag：用于标识TSC是否可用，当`CPUID.1:EDX.TSC[bit 4] = 1`时，TSC可用
- IA32_TIME_STAMP_COUNTER MSR：对应TSC值的寄存器
- RDTSC指令：读取TSC寄存器值的指令
- TSD flag： 用于开关TSC功能，`CR4.TSD[bit 2] = 1`时开启TSC
</code></pre>
<p>TSC从第一次在CPU中实现到如今很多年了，所以不同CPU上的一些表现还是有些区别的，但主要的特点是通用的，首先TSC是一个64bit大小的计数器，当CPU重置时，这个计数器也会被重置成0，重置后，即使CPU因为执行了HLT指令进入idle状态，这个寄存器也会持续的增加。</p>
<p>但是TSC会按什么样的频率增加呢？这里不同的CPU差异就比较大了。在一些比较老的CPU上（大概是07-08年之前），TSC是跟着CPU的运行频率增加的，比如当前CPU跑在2.4GHz，那TSC就每秒增加24000000，但是针对这些老的CPU，超频、以及CPU自身的睿频都会对TSC的计数产生影响。这其实对用户是不太友好的，毕竟睿频是硬件层面的，这个计数器就不那么“稳定”了。</p>
<p>所以后续的新CPU，Intel将这个行为修改成了以固定频率增加，只是这个频率具体是多少得看具体的配置，具体的TSC频率如何检测，手册里有专门的一章进行解释，这里我们不过多涉及。</p>
<p>在新CPU里，TSC以固定频率增长，所以这其实是一个TSC的特性，叫做<code>Constant TSC</code>，有了这个特性之后，TSC频率相对就稳定了，不会随着CPU睿频而随意改变频率，所以他也就可以成为一个稳定的时钟源了。因此这个特性会一直在后续的CPU中提供。</p>
<p>用户可以使用<code>RDTSC</code>这个CPU指令获取TSC的值，正常情况下（计数器没有溢出），Intel的CPU可以保证每次通过<code>RDTSC</code>读取的值都是单调递增的，同时可以保证在10年内计数器不会溢出。但是需要注意的是，这个指令它不是有序的（也就说他是有可能被CPU乱序执行的，所以可能需要加上memory barrier）。另外由于TSC是一个MSR，所以其实这个寄存器是可以通过<code>RDMSR</code>和<code>WRMSR</code>指令进行读写的，只是一些老CPU上只能写低32位（高32位此时会清0）。</p>
<h3 id="Invariant-TSC"><a href="#Invariant-TSC" class="headerlink" title="Invariant TSC"></a>Invariant TSC</h3><p>前面提到TSC即使CPU处在halt状态，依然会持续的累加，但即使是这样，TSC依然不是100%可依赖最为一个时钟源的，为什么呢？因为halt状态只是CPU的C1状态，现代的CPU为了省电，引入了更多更深的C states，具体可以参考之前关于电源管理的内容<a href="/2020/07/17/cpu-idle-time-managment/">再谈CPU的电源管理（如何做到稳定全核睿频？）</a>，当CPU进入到比较深的C states，比如C6，此时整个CPU的Core基本都被关闭了，那TSC自然也有可能不工作了。</p>
<p>为了解决这个问题呢，Intel又引入了一个新的特性增强，叫<code>Invariant TSC</code>，这个特性可以当<code>CPUID.80000007H:EDX[8] == 1</code>时，代表CPU支持这个特性。有这个特性的CPU，在任何的C states下，TSC都会持续运行，在Linux里，这个特性也会被称为<code>NONSTOP_TSC</code>（感觉这个更传神一些，不停止的TSC）。</p>
<p>可以看到引入<code>Constant TSC</code>和<code>Invariant TSC</code>之后，CPU先后解决了P-States(CPU频率变化)和C-States(CPU电源状态)对TSC频率的影响，逐渐将TSC设计成符合时钟源要求的样子，这也算是软硬件协同发展，螺旋上升的正面例子吧。</p>
<h3 id="IA32-TSC-AUX-Register-and-RDTSCP-Support"><a href="#IA32-TSC-AUX-Register-and-RDTSCP-Support" class="headerlink" title="IA32_TSC_AUX Register and RDTSCP Support"></a>IA32_TSC_AUX Register and RDTSCP Support</h3><p>看起来到这里已经万事大吉了？其实并没有，前面提到，<code>RDTSC</code>指令并不是有序的，意味着CPU硬件有可能对这个执行乱序执行，这可能并不是软件所预期的结果，举个例子，假如想通过基于类似<code>RDTSC;other insturctions;RDTSC</code>这样的指令顺序来计算<code>other insturctions</code>消耗的时间，在真正执行的时候，有可能就按<code>RDTSC;RDTSCother insturctions</code>的顺序了，这显然不是所期望的结果。</p>
<p>所以Intel针对这个问题，又增加了一个新的指令<code>RDTSCP</code>，使得可以原子地读取TSC。当执行<code>RDTSCP</code>指令时，会同时读取TSC和IA32_TSC_AUX两个寄存器的值。并且这个操作是原子的，不会出现上下文切换的问题。不过需要注意的是，只有当<code>CPUID.80000001H:EDX[27] == 1</code>时，CPU才支持<code>RDTSCP</code>指令。</p>
<p>针对这个乱序的问题，其实Linux内核里也是做了相应的处理的，我们可以从内核读取TSC的源码看出来，源码里的注释也是非常的详细：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> __always_inline <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">rdtsc_ordered</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token function">DECLARE_ARGS</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> low<span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">/*
	 * The RDTSC instruction is not ordered relative to memory
	 * access.  The Intel SDM and the AMD APM are both vague on this
	 * point, but empirically an RDTSC instruction can be
	 * speculatively executed before prior loads.  An RDTSC
	 * immediately after an appropriate barrier appears to be
	 * ordered as a normal load, that is, it provides the same
	 * ordering guarantees as reading from a global memory location
	 * that some other imaginary CPU is updating continuously with a
	 * time stamp.
	 *
	 * Thus, use the preferred barrier on the respective CPU, aiming for
	 * RDTSCP as the default.
	 */</span>
     <span class="token comment">//优先使用rdtscp，如果不支持，先执行lfence再执行rdtsc</span>
	<span class="token keyword">asm</span> <span class="token keyword">volatile</span><span class="token punctuation">(</span><span class="token function">ALTERNATIVE_2</span><span class="token punctuation">(</span><span class="token string">"rdtsc"</span><span class="token punctuation">,</span>
				   <span class="token string">"lfence; rdtsc"</span><span class="token punctuation">,</span> X86_FEATURE_LFENCE_RDTSC<span class="token punctuation">,</span>
				   <span class="token string">"rdtscp"</span><span class="token punctuation">,</span> X86_FEATURE_RDTSCP<span class="token punctuation">)</span>
			<span class="token operator">:</span> <span class="token function">EAX_EDX_RET</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> low<span class="token punctuation">,</span> high<span class="token punctuation">)</span>
			<span class="token comment">/* RDTSCP clobbers ECX with MSR_TSC_AUX. */</span>
			<span class="token operator">::</span> <span class="token string">"ecx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token function">EAX_EDX_VAL</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> low<span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="Time-Stamp-Counter-Adjustment"><a href="#Time-Stamp-Counter-Adjustment" class="headerlink" title="Time-Stamp Counter Adjustment"></a>Time-Stamp Counter Adjustment</h3><p>最后的最后，还有一个问题需要解决，上面其实也提到了，TSC本质上是个MSR（IA32_TIME_STAMP_COUNTER MSR 地址10H），而这个MSR是可写的！这会存在一个问题，对于现代的多核系统，每个核都有自己的TSC MSR，如果某个核的MSR被修改了，这个修改怎么同步到其他核上去呢？很显然，不管是想计算出来被修改的核心的TSC的变化值，以及将这个值同步到其他的核上，都是不现实的。因为没办法在同一时刻在所有核上执行相同的指令。</p>
<p>但是多核之间同步TSC需求又是客观存在的，怎么办呢？Intel提供了一个新的MSR：<code>IA32_TSC_ADJUST(地址3BH)</code>来解决这个问题。首先和TSC一样每个核都有自己独立的<code>IA32_TSC_ADJUST</code>，当处理器重置时，<code>IA32_TSC_ADJUST</code>也会被置为0，当对<code>IA32_TIME_STAMP_COUNTER</code>进行写入时，比如加上（或者）一个X的值，那么对应核的<code>IA32_TSC_ADJUST</code>也会有对应的X值被加上（或者减去）。因此有了这个MSR之后，想计算某个核TSC的变化值，直接读取<code>IA32_TSC_ADJUST</code>里的值就行了，如果要把这个值同步到其他的核，就只需要把这个值写入到其他核的<code>IA32_TSC_ADJUST</code>里就行了。这就直接解决了多核之间TSC同步的问题，不过这个特性也不是所有CPU都支持，只有当<code>CPUID.(EAX=07H, ECX=0H):EBX.TSC_ADJUST == 1</code>时才支持。</p>
<p>到这里，TSC就变得真正可依赖了，首先有了<code>Constant TSC</code>，确保TSC按固定频率运行，然后有了<code>Invariant TSC</code>确保TSC一直运行，还有<code>IA32_TSC_ADJUST</code>确保当TSC被修改后依然能被同步回来。有了这些特性，TSC就可以成为系统中可信赖的时钟源。我们也可以通过Linux内核里的代码，看看内核是如何针对这种场景进行适配的：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">void</span> __init <span class="token function">check_system_tsc_reliable</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">// ...</span>
	<span class="token comment">/*
	 * Disable the clocksource watchdog when the system has:
	 *  - TSC running at constant frequency
	 *  - TSC which does not stop in C-States
	 *  - the TSC_ADJUST register which allows to detect even minimal
	 *    modifications
	 *  - not more than two sockets. As the number of sockets cannot be
	 *    evaluated at the early boot stage where this has to be
	 *    invoked, check the number of online memory nodes as a
	 *    fallback solution which is an reasonable estimate.
	 */</span>
    <span class="token comment">// 默认情况下Kernel假设TSC不稳定，所以会有个watchdog进行检测，当满足下面几个条件时，TSC足够稳定，watchdog也不需要运行了。</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">boot_cpu_has</span><span class="token punctuation">(</span>X86_FEATURE_CONSTANT_TSC<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
	    <span class="token function">boot_cpu_has</span><span class="token punctuation">(</span>X86_FEATURE_NONSTOP_TSC<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
	    <span class="token function">boot_cpu_has</span><span class="token punctuation">(</span>X86_FEATURE_TSC_ADJUST<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
	    nr_online_nodes <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token punctuation">)</span>
		<span class="token function">tsc_disable_clocksource_watchdog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>好了，跟着文档的节奏，其实也可以看到TSC的发展历程，硬件不断的做出一些变化从而满足软件层面的需求，确定经历了相当长的时间。其实除此之外，TSC还有一些其他相关的特性，主要是和虚拟化相关，也是硬件为了更好的实现虚拟化做出的适配，这里就暂时不说了，期望下次可以继续聊聊虚拟化场景下TSC的一些特性。</p>
]]></content>
      <categories>
        <category>Linux Kernel</category>
      </categories>
      <tags>
        <tag>x86_64</tag>
        <tag>TSC</tag>
        <tag>时钟源</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2014/11/20/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="http://hexo.io/">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html">trobuleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>More info: <a href="http://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>More info: <a href="http://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>More info: <a href="http://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>More info: <a href="http://hexo.io/docs/deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>两张图解释Golang http的超时机制</title>
    <url>/2018/03/19/go-http-timeouts/</url>
    <content><![CDATA[<p>转自<a href="https://blog.cloudflare.com/the-complete-guide-to-golang-net-http-timeouts/">The complete guide to Go net&#x2F;http timeouts</a>。</p>
<h3 id="服务端超时"><a href="#服务端超时" class="headerlink" title="服务端超时"></a>服务端超时</h3><p>对于<code>http.Server</code>服务端有两个超时可以设置：<code>ReadTimeout</code>和<code>WriteTimeout</code></p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">srv <span class="token operator">:=</span> <span class="token operator">&amp;</span>http<span class="token punctuation">.</span>Server<span class="token punctuation">&#123;</span>
    ReadTimeout<span class="token punctuation">:</span> <span class="token number">5</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span>
    WriteTimeout<span class="token punctuation">:</span> <span class="token number">10</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span>
log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>srv<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>各自的作用时间见图：</p>
<p><img src="/images/go_http_timeout_server.png" alt="Server timeout"></p>
<p>需要注意的是<code>WriteTimeout</code>被设置了两次，一次是在读取Http头过程中，另一次是在读取Http头结束后。</p>
<h3 id="客户端超时"><a href="#客户端超时" class="headerlink" title="客户端超时"></a>客户端超时</h3><p>对于<code>http.Client</code>客户端，相对要复杂一点，一般的初始化代码如下：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">c <span class="token operator">:=</span> <span class="token operator">&amp;</span>http<span class="token punctuation">.</span>Client<span class="token punctuation">&#123;</span>
    Transport<span class="token punctuation">:</span> <span class="token operator">&amp;</span>http<span class="token punctuation">.</span>Transport<span class="token punctuation">&#123;</span>
        Dial<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>net<span class="token punctuation">.</span>Dialer<span class="token punctuation">&#123;</span>
                Timeout<span class="token punctuation">:</span>   <span class="token number">30</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span>
                KeepAlive<span class="token punctuation">:</span> <span class="token number">30</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Dial<span class="token punctuation">,</span>
        TLSHandshakeTimeout<span class="token punctuation">:</span>   <span class="token number">10</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span>
        ResponseHeaderTimeout<span class="token punctuation">:</span> <span class="token number">10</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span>
        ExpectContinueTimeout<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这些Timeout各自的作用时间见：</p>
<p><img src="/images/go_http_timeout_client.png" alt="Client timeout"></p>
]]></content>
      <tags>
        <tag>Golang</tag>
        <tag>HTTP Timeout</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在一秒之内丢弃1000万个网络数据包？</title>
    <url>/2019/03/10/how-to-drop-10-million-packets-per-second/</url>
    <content><![CDATA[<p>偶然看到一篇cloudflare的博客<a href="https://blog.cloudflare.com/how-to-drop-10-million-packets/">How to drop 10 million packets per second</a>，如何实现单核情况下一秒钟丢弃1000万个数据包，原文循序渐进，从最简单的用户态丢弃到使用非常新的技术XDP，逐步将单核丢包性能提升到10mpps，很有意思，网上也没有看到原文的中文版本，所以这里顺便翻译一下，看看cloudflare是如何处理类似的情况的。<span id="more"></span></p>
<p>在公司内部，我们的抗DDoS团队有时会被人们称作“数据包丢弃者”。当其他团队为流经我们网络的流量做了很多令人兴奋的聪明玩意时，我们也很享受探索如何丢弃这些流量的新方法。<br><img src="/images/xdp-head.jpg"><br>能以最快速度丢掉网络包，对于抵抗DDoS攻击来说，是非常重要的。<br>丢掉发送到我们服务器的数据包，和听上去一样简单，可以在很多层面上进行。每个技术都有他的有点和缺陷，在这篇Blog里，我们会一起看一下我们到目前为止用到的技术。</p>
<h2 id="试验台"><a href="#试验台" class="headerlink" title="试验台"></a>试验台</h2><p>为了说明方法的相对性能，我们将通过一些基准测试，这些测试是设计好的，可以得到一系列的数据。我们使用了一台Intel的服务器，这台机器有一块10Gbps网卡，机器的其他配置信息其实并不是很重要，因为这些测试的目标是为了显示出操作系统而不是硬件层面的限制。</p>
<p>我们的测试设置如下：</p>
<ul>
<li><p>我们传输大量小的UDP数据包，达到14Mpps（每秒数百万个数据包）。</p>
</li>
<li><p>此流量指向目标服务器上的单个CPU。</p>
</li>
<li><p>我们测量内核在该CPU上处理的数据包数量。</p>
</li>
</ul>
<p>我们并没有尝试优化用户空间应用程序的速度，也没有尝试提升数据吞吐量 - 相反，我们尝试专门展示内核层的瓶颈。</p>
<p>生成的流量可以对<code>conntrack</code>施加最大压力 - 数据包使用随机源IP和端口字段。 <code>tcpdump</code>的结果如下：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ tcpdump <span class="token parameter variable">-ni</span> vlan100 <span class="token parameter variable">-c</span> <span class="token number">10</span> <span class="token parameter variable">-t</span> udp and dst port <span class="token number">1234</span>
IP <span class="token number">198.18</span>.40.55.32059 <span class="token operator">></span> <span class="token number">198.18</span>.0.12.1234: UDP, length <span class="token number">16</span>
IP <span class="token number">198.18</span>.51.16.30852 <span class="token operator">></span> <span class="token number">198.18</span>.0.12.1234: UDP, length <span class="token number">16</span>
IP <span class="token number">198.18</span>.35.51.61823 <span class="token operator">></span> <span class="token number">198.18</span>.0.12.1234: UDP, length <span class="token number">16</span>
IP <span class="token number">198.18</span>.44.42.30344 <span class="token operator">></span> <span class="token number">198.18</span>.0.12.1234: UDP, length <span class="token number">16</span>
IP <span class="token number">198.18</span>.106.227.38592 <span class="token operator">></span> <span class="token number">198.18</span>.0.12.1234: UDP, length <span class="token number">16</span>
IP <span class="token number">198.18</span>.48.67.19533 <span class="token operator">></span> <span class="token number">198.18</span>.0.12.1234: UDP, length <span class="token number">16</span>
IP <span class="token number">198.18</span>.49.38.40566 <span class="token operator">></span> <span class="token number">198.18</span>.0.12.1234: UDP, length <span class="token number">16</span>
IP <span class="token number">198.18</span>.50.73.22989 <span class="token operator">></span> <span class="token number">198.18</span>.0.12.1234: UDP, length <span class="token number">16</span>
IP <span class="token number">198.18</span>.43.204.37895 <span class="token operator">></span> <span class="token number">198.18</span>.0.12.1234: UDP, length <span class="token number">16</span>
IP <span class="token number">198.18</span>.104.128.1543 <span class="token operator">></span> <span class="token number">198.18</span>.0.12.1234: UDP, length <span class="token number">16</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在目标机器，我们将所有的流量都定向到网卡同一个RX队列上，也就是说所有的数据都只会被一个CPU核处理。我们通过硬件流转向实现这一目标：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ethtool</span> <span class="token parameter variable">-N</span> ext0 flow-type udp4 dst-ip <span class="token number">198.18</span>.0.12 dst-port <span class="token number">1234</span> action <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>基准测试通常也很困难，当我们在准备测试的过程中，我们发现如果系统中有活动的raw socket也会影响性能，事后看很明显，但是也很容易忽略类似的问题。所以在测试之前需要确认没有任何<code>tcpdump</code>进程在运行，可以通过下面的方式查看：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ss <span class="token parameter variable">-A</span> raw,packet_raw <span class="token parameter variable">-l</span> -p<span class="token operator">|</span><span class="token function">cat</span>
Netid  State      Recv-Q Send-Q Local Address:Port
p_raw  UNCONN     <span class="token number">525157</span> <span class="token number">0</span>      *:vlan100          users:<span class="token variable"><span class="token punctuation">((</span>"tcpdump"<span class="token punctuation">,</span>pid<span class="token operator">=</span><span class="token number">23683</span><span class="token punctuation">,</span>fd<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">))</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>最后，我们要关闭<code>Intel Turbo Boost</code>特性：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> /sys/devices/system/cpu/intel_pstate/no_turbo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>虽然<code>Turbo Boost</code>很好，而且可以提升至少20%的吞吐量，但是也会极大的影响测试结果的标准差，在开启状态下偏大达到了 ±1.5%，而关闭之后偏差下降到了0.25%。<br><img src="/images/xdp-layers.jpg"></p>
<h2 id="第一阶段-在应用程序中丢弃包"><a href="#第一阶段-在应用程序中丢弃包" class="headerlink" title="第一阶段 在应用程序中丢弃包"></a>第一阶段 在应用程序中丢弃包</h2><p>让我们从将数据包传递到应用程序并在用户空间代码中忽略它们的想法开始。 对于测试设置，首先需要确保iptables不会影响性能：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">iptables <span class="token parameter variable">-I</span> PREROUTING <span class="token parameter variable">-t</span> mangle <span class="token parameter variable">-d</span> <span class="token number">198.18</span>.0.12 <span class="token parameter variable">-p</span> udp <span class="token parameter variable">--dport</span> <span class="token number">1234</span> <span class="token parameter variable">-j</span> ACCEPT
iptables <span class="token parameter variable">-I</span> PREROUTING <span class="token parameter variable">-t</span> raw <span class="token parameter variable">-d</span> <span class="token number">198.18</span>.0.12 <span class="token parameter variable">-p</span> udp <span class="token parameter variable">--dport</span> <span class="token number">1234</span> <span class="token parameter variable">-j</span> ACCEPT
iptables <span class="token parameter variable">-I</span> INPUT <span class="token parameter variable">-t</span> filter <span class="token parameter variable">-d</span> <span class="token number">198.18</span>.0.12 <span class="token parameter variable">-p</span> udp <span class="token parameter variable">--dport</span> <span class="token number">1234</span> <span class="token parameter variable">-j</span> ACCEPT<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>应用程序的代码就是一个简单的循环，获取数据，然后直接丢弃：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">s <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_DGRAM<span class="token punctuation">)</span>
s<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"0.0.0.0"</span><span class="token punctuation">,</span> <span class="token number">1234</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
    s<span class="token punctuation">.</span>recvmmsg<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p><a href="https://github.com/cloudflare/cloudflare-blog/blob/master/2018-07-dropping-packets/recvmmsg-loop.c">这里有准备好的C代码</a>，运行结果：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ./dropping-packets/recvmmsg-loop
<span class="token assign-left variable">packets</span><span class="token operator">=</span><span class="token number">171261</span> <span class="token assign-left variable">bytes</span><span class="token operator">=</span><span class="token number">1940176</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>对于这个实现，我们利用<code>ethtool</code>和<a href="https://blog.cloudflare.com/three-little-tools-mmsum-mmwatch-mmhistogram/"><code>mmwatch工具</code></a>可以实现从硬件队列中以175kpps的速度读取数据包。</p>
<p>硬件上看接收的速度是14Mpps，但是针对单核处理的RX队列，这些数据包已经无法处理了。可以通过<code>mpstat</code>工具确认：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">watch</span> <span class="token string">'mpstat -u -I SUM -P ALL 1 1|egrep -v Aver'</span>
01:32:05 PM  CPU    %usr   %nice    %sys %iowait    %irq   %soft  %steal  %guest  %gnice   %idle
01:32:06 PM    <span class="token number">0</span>    <span class="token number">0.00</span>    <span class="token number">0.00</span>    <span class="token number">0.00</span>    <span class="token number">2.94</span>    <span class="token number">0.00</span>    <span class="token number">3.92</span>    <span class="token number">0.00</span>    <span class="token number">0.00</span>    <span class="token number">0.00</span>   <span class="token number">93.14</span>
01:32:06 PM    <span class="token number">1</span>    <span class="token number">2.17</span>    <span class="token number">0.00</span>   <span class="token number">27.17</span>    <span class="token number">0.00</span>    <span class="token number">0.00</span>    <span class="token number">0.00</span>    <span class="token number">0.00</span>    <span class="token number">0.00</span>    <span class="token number">0.00</span>   <span class="token number">70.65</span>
01:32:06 PM    <span class="token number">2</span>    <span class="token number">0.00</span>    <span class="token number">0.00</span>    <span class="token number">0.00</span>    <span class="token number">0.00</span>    <span class="token number">0.00</span>  <span class="token number">100.00</span>    <span class="token number">0.00</span>    <span class="token number">0.00</span>    <span class="token number">0.00</span>    <span class="token number">0.00</span>
01:32:06 PM    <span class="token number">3</span>    <span class="token number">0.95</span>    <span class="token number">0.00</span>    <span class="token number">1.90</span>    <span class="token number">0.95</span>    <span class="token number">0.00</span>    <span class="token number">3.81</span>    <span class="token number">0.00</span>    <span class="token number">0.00</span>    <span class="token number">0.00</span>   <span class="token number">92.38</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看到用户代码不是瓶颈，在CPU #1上有 27% sys + 2% userspace的占用，但是CPU #2被网络软中断(SOFTIRQ)占用了100%。</p>
<p>需要说明的是，使用<code>recvmmsg(2)</code>很重要，在Spectre漏洞被发现的现在，系统调用的成本变得更加高了，我们使用了4.14版本的内核，并开启了KPTI和Retpoline：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">tail</span> <span class="token parameter variable">-n</span> +1 /sys/devices/system/cpu/vulnerabilities/*
<span class="token operator">==</span><span class="token operator">></span> /sys/devices/system/cpu/vulnerabilities/meltdown <span class="token operator">&lt;=</span><span class="token operator">=</span>
Mitigation: PTI

<span class="token operator">==</span><span class="token operator">></span> /sys/devices/system/cpu/vulnerabilities/spectre_v1 <span class="token operator">&lt;=</span><span class="token operator">=</span>
Mitigation: __user pointer sanitization

<span class="token operator">==</span><span class="token operator">></span> /sys/devices/system/cpu/vulnerabilities/spectre_v2 <span class="token operator">&lt;=</span><span class="token operator">=</span>
Mitigation: Full generic retpoline, IBPB, IBRS_FW<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="第二阶段-干掉conntrack"><a href="#第二阶段-干掉conntrack" class="headerlink" title="第二阶段 干掉conntrack"></a>第二阶段 干掉conntrack</h2><p>我们特别的设计了这个测试，用随机的原IP和端口，用来给conntrack层施加压力。这个可以通过查看conntrack数量的方式确认，在测试中，conntrack数量达到最大：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ conntrack <span class="token parameter variable">-C</span>
<span class="token number">2095202</span>

$ <span class="token function">sysctl</span> net.netfilter.nf_conntrack_max
net.netfilter.nf_conntrack_max <span class="token operator">=</span> <span class="token number">2097152</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>也能从<code>dmesg</code>中看到conntrack日志：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span><span class="token number">4029612.456673</span><span class="token punctuation">]</span> nf_conntrack: nf_conntrack: table full, dropping packet
<span class="token punctuation">[</span><span class="token number">4029612.465787</span><span class="token punctuation">]</span> nf_conntrack: nf_conntrack: table full, dropping packet
<span class="token punctuation">[</span><span class="token number">4029617.175957</span><span class="token punctuation">]</span> net_ratelimit: <span class="token number">5731</span> callbacks suppressed<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>为了加速我们的测试，把它关掉：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">iptables <span class="token parameter variable">-t</span> raw <span class="token parameter variable">-I</span> PREROUTING <span class="token parameter variable">-d</span> <span class="token number">198.18</span>.0.12 <span class="token parameter variable">-p</span> udp <span class="token parameter variable">-m</span> udp <span class="token parameter variable">--dport</span> <span class="token number">1234</span> <span class="token parameter variable">-j</span> NOTRACK<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>然后重新测试：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ./dropping-packets/recvmmsg-loop
<span class="token assign-left variable">packets</span><span class="token operator">=</span><span class="token number">331008</span> <span class="token assign-left variable">bytes</span><span class="token operator">=</span><span class="token number">5296128</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>程序性能里面提升到了333kpps，赞！</p>
<p>PS：通过<code>SO_BUSY_POLL</code>选项，我们可以将性能提升到470k pps，但是这个是另一个话题了。</p>
<h2 id="第三阶段-利用BPF进行丢包操作"><a href="#第三阶段-利用BPF进行丢包操作" class="headerlink" title="第三阶段 利用BPF进行丢包操作"></a>第三阶段 利用BPF进行丢包操作</h2><p>更进一步，为什么我们要在用户态进行丢包呢？虽然这个技术不常见，但是我们可以使用<code>setsockopt(SO_ATTACH_FILTER)</code>添加一个cBPF过滤器到一个socket上，让程序在内核态进行丢包操作。<br><a href="https://github.com/cloudflare/cloudflare-blog/blob/master/2018-07-dropping-packets/bpf-drop.c">这里是代码</a>，运行一下：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ./bpf-drop
<span class="token assign-left variable">packets</span><span class="token operator">=</span><span class="token number">0</span> <span class="token assign-left variable">bytes</span><span class="token operator">=</span><span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>使用BPF进行丢弃操作（cBPF和eBPF有相似的性能），我们大致达到了512kpps的性能。所有的包都在BPF过滤器中丢弃了，由于依然需要使用到软中断，所以只是省掉了唤醒用户态程序的CPU消耗。</p>
<h2 id="第四阶段-使用iptables在路由阶段结束后丢弃"><a href="#第四阶段-使用iptables在路由阶段结束后丢弃" class="headerlink" title="第四阶段 使用iptables在路由阶段结束后丢弃"></a>第四阶段 使用iptables在路由阶段结束后丢弃</h2><p>在下个阶段，我们可以简单的设置iptables INPUT规则来丢弃包：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">iptables <span class="token parameter variable">-I</span> INPUT <span class="token parameter variable">-d</span> <span class="token number">198.18</span>.0.12 <span class="token parameter variable">-p</span> udp <span class="token parameter variable">--dport</span> <span class="token number">1234</span> <span class="token parameter variable">-j</span> DROP<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>需要注意的是我们之前已经通过-j NOTRACK关闭了conntrack，这两条规则实现了608kbps的性能。<br>看下iptables的统计信息：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ mmwatch <span class="token string">'iptables -L -v -n -x | head'</span>

Chain INPUT <span class="token punctuation">(</span>policy DROP <span class="token number">0</span> packets, <span class="token number">0</span> bytes<span class="token punctuation">)</span>
    pkts      bytes target     prot opt <span class="token keyword">in</span>     out     <span class="token builtin class-name">source</span>               destination
<span class="token number">605</span>.9k/s    <span class="token number">26</span>.7m/s DROP       udp  --  *      *       <span class="token number">0.0</span>.0.0/0            <span class="token number">198.18</span>.0.12          udp dpt:1234<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>600kpps不差了，但是我们能做到更好！</p>
<h2 id="第五阶段-使用iptables在路由之前丢弃"><a href="#第五阶段-使用iptables在路由之前丢弃" class="headerlink" title="第五阶段 使用iptables在路由之前丢弃"></a>第五阶段 使用iptables在路由之前丢弃</h2><p>有一个更快的方法，就是在包路由之前丢弃，可以通过下面的命令：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">iptables <span class="token parameter variable">-I</span> PREROUTING <span class="token parameter variable">-t</span> raw <span class="token parameter variable">-d</span> <span class="token number">198.18</span>.0.12 <span class="token parameter variable">-p</span> udp <span class="token parameter variable">--dport</span> <span class="token number">1234</span> <span class="token parameter variable">-j</span> DROP<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这个方法的性能高达1.688pps。<br>这是非常明显的性能提升，我并不是特别明白多了一次路由差距这么大，要么是我们的路由层非常的复杂，或者在服务器的配置上有bug。<br>在任何情况下，通过iptables的<code>raw</code>表进行操作绝对是最快的方法。</p>
<h2 id="第六阶段，使用nftables在CONNTRACK之前丢弃"><a href="#第六阶段，使用nftables在CONNTRACK之前丢弃" class="headerlink" title="第六阶段，使用nftables在CONNTRACK之前丢弃"></a>第六阶段，使用nftables在CONNTRACK之前丢弃</h2><p>iptables在现在已经有点过时了，更新的玩意是nftables，关于为什么nftables技术更优越，请参阅此<a href="https://www.youtube.com/watch?v=9Zr8XqdET1c">视频</a>。 由于许多原因，Nftables承诺比老旧的iptables更快，其中有一个说法是retpolines（没有间接跳跃的猜测）严重影响了iptables性能。</p>
<p>由于这篇文章不是关于比较nftables和iptables的速度，让我们尝试一下我能想到的最快的方法：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nft <span class="token function">add</span> table netdev filter
nft -- <span class="token function">add</span> chain netdev filter input <span class="token punctuation">&#123;</span> <span class="token builtin class-name">type</span> filter hook ingress device vlan100 priority <span class="token parameter variable">-500</span> <span class="token punctuation">\</span><span class="token punctuation">;</span> policy accept <span class="token punctuation">\</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
nft <span class="token function">add</span> rule netdev filter input <span class="token function">ip</span> daddr <span class="token number">198.18</span>.0.0/24 udp dport <span class="token number">1234</span> counter drop
nft <span class="token function">add</span> rule netdev filter input ip6 daddr fd00::/64 udp dport <span class="token number">1234</span> counter drop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>相关的统计信息可以通过这个命令查看：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ mmwatch <span class="token string">'nft --handle list chain netdev filter input'</span>
table netdev filter <span class="token punctuation">&#123;</span>
    chain input <span class="token punctuation">&#123;</span>
        <span class="token builtin class-name">type</span> filter hook ingress device vlan100 priority -500<span class="token punctuation">;</span> policy accept<span class="token punctuation">;</span>
        <span class="token function">ip</span> daddr <span class="token number">198.18</span>.0.0/24 udp dport <span class="token number">1234</span> counter packets    <span class="token number">1</span>.6m/s bytes    <span class="token number">69</span>.6m/s drop <span class="token comment"># handle 2</span>
        ip6 daddr fd00::/64 udp dport <span class="token number">1234</span> counter packets <span class="token number">0</span> bytes <span class="token number">0</span> drop <span class="token comment"># handle 3</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>Nftables “ingress” Hook性能卡在了1.53mpps。 这比PREROUTING层中的iptables稍慢。 这令人费解 - 理论上”ingress”在PREROUTING之前发生，所以应该更快。<br>在我们的测试中nftables比iptables略慢，但不是很多。 Nftables仍然更好:P</p>
<h2 id="第七阶段-利用tc的ingress策略丢包"><a href="#第七阶段-利用tc的ingress策略丢包" class="headerlink" title="第七阶段 利用tc的ingress策略丢包"></a>第七阶段 利用tc的ingress策略丢包</h2><p>有个比较令人震惊的事实是tc(traffic control)的ingress hook发生在PREROUTING之前。tc可以并且确实能做到根据一定的标准来选择并丢弃数据包，但是做法确实比较hacky，所以建议利用<a href="https://github.com/netoptimizer/network-testing/blob/master/tc/tc_ingress_drop.sh">这个脚本</a>进行设置，我们需要的是一个稍微复杂点的匹配，参考下面的命令：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">tc qdisc <span class="token function">add</span> dev vlan100 ingress
tc filter <span class="token function">add</span> dev vlan100 parent ffff: prio <span class="token number">4</span> protocol <span class="token function">ip</span> u32 match <span class="token function">ip</span> protocol <span class="token number">17</span> 0xff match <span class="token function">ip</span> dport <span class="token number">1234</span> 0xffff match <span class="token function">ip</span> dst <span class="token number">198.18</span>.0.0/24 flowid <span class="token number">1</span>:1 action drop
tc filter <span class="token function">add</span> dev vlan100 parent ffff: protocol ipv6 u32 match ip6 dport <span class="token number">1234</span> 0xffff match ip6 dst fd00::/64 flowid <span class="token number">1</span>:1 action drop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>可以验证：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ mmwatch <span class="token string">'tc -s filter  show dev vlan100  ingress'</span>
filter parent ffff: protocol <span class="token function">ip</span> pref <span class="token number">4</span> u32 
filter parent ffff: protocol <span class="token function">ip</span> pref <span class="token number">4</span> u32 fh <span class="token number">800</span>: ht divisor <span class="token number">1</span> 
filter parent ffff: protocol <span class="token function">ip</span> pref <span class="token number">4</span> u32 fh <span class="token number">800</span>::800 order <span class="token number">2048</span> key ht <span class="token number">800</span> bkt <span class="token number">0</span> flowid <span class="token number">1</span>:1  <span class="token punctuation">(</span>rule hit   <span class="token number">1</span>.8m/s success   <span class="token number">1</span>.8m/s<span class="token punctuation">)</span>
  match 00110000/00ff0000 at <span class="token number">8</span> <span class="token punctuation">(</span>success   <span class="token number">1</span>.8m/s <span class="token punctuation">)</span> 
  match 000004d2/0000ffff at <span class="token number">20</span> <span class="token punctuation">(</span>success   <span class="token number">1</span>.8m/s <span class="token punctuation">)</span> 
  match c612000c/ffffffff at <span class="token number">16</span> <span class="token punctuation">(</span>success   <span class="token number">1</span>.8m/s <span class="token punctuation">)</span> 
        action order <span class="token number">1</span>: gact action drop
         random <span class="token builtin class-name">type</span> none pass val <span class="token number">0</span>
         index <span class="token number">1</span> ref <span class="token number">1</span> <span class="token builtin class-name">bind</span> <span class="token number">1</span> installed <span class="token number">1.0</span>/s sec
        Action statistics:
        Sent    <span class="token number">79</span>.7m/s bytes   <span class="token number">1</span>.8m/s pkt <span class="token punctuation">(</span>dropped   <span class="token number">1</span>.8m/s, overlimits <span class="token number">0</span> requeues <span class="token number">0</span><span class="token punctuation">)</span> 
        backlog 0b 0p requeues <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>通过tc的ingress hook的u32匹配，可以让我们实现单核1.8mpps的丢包能力，这个很棒！</p>
<p>但是，我们可以更快一点…</p>
<h2 id="第八阶段-XDP-DROP"><a href="#第八阶段-XDP-DROP" class="headerlink" title="第八阶段 XDP_DROP"></a>第八阶段 XDP_DROP</h2><p>最后，终极武器是XDP - <a href="https://prototype-kernel.readthedocs.io/en/latest/networking/XDP/">eXpress Data Path</a>。通过XDP，我们可以在网络驱动层运行eBPF代码。最重要的是，这个阶段发生在分配<code>skbuff</code>内存之前，可以获得超高的速度。</p>
<p>通常XDP项目包含两部分：</p>
<ul>
<li>被加载到内核的eBPB代码</li>
<li>用户态的加载器，可以将代码加载到正确的网卡，并且控制他们</li>
</ul>
<p>编写加载器很难，但是我们可以利用<code>iproute2</code>的这个<a href="https://cilium.readthedocs.io/en/latest/bpf/#iproute2">新特性</a>，用一个很简单的命令加载：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ip</span> <span class="token function">link</span> <span class="token builtin class-name">set</span> dev ext0 xdp obj xdp-drop-ebpf.o<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>搞定！<br>这个eBPF的代码在<a href="https://github.com/cloudflare/cloudflare-blog/blob/master/2018-07-dropping-packets/xdp-drop-ebpf.c">这里</a>。这个程序解析IP数据包，然后寻找对应的特征：IP传输、UDP协议、对应的子网和端口</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span>h_proto <span class="token operator">==</span> <span class="token function">htons</span><span class="token punctuation">(</span>ETH_P_IP<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>iph<span class="token operator">-></span>protocol <span class="token operator">==</span> IPPROTO_UDP
        <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token function">htonl</span><span class="token punctuation">(</span>iph<span class="token operator">-></span>daddr<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFFFFFF00</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0xC6120000</span> <span class="token comment">// 198.18.0.0/24</span>
        <span class="token operator">&amp;&amp;</span> udph<span class="token operator">-></span>dest <span class="token operator">==</span> <span class="token function">htons</span><span class="token punctuation">(</span><span class="token number">1234</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> XDP_DROP<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>XDP程序需要用现代的<code>clang</code>编译器编译成BPF字节码，完成之后可以加载并验证：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">ip</span> <span class="token function">link</span> show dev ext0
<span class="token number">4</span>: ext0: <span class="token operator">&lt;</span>BROADCAST,MULTICAST,UP,LOWER_UP<span class="token operator">></span> mtu <span class="token number">1500</span> xdp qdisc fq state UP mode DEFAULT group default qlen <span class="token number">1000</span>
    link/ether <span class="token number">24</span>:8a:07:8a:59:8e brd ff:ff:ff:ff:ff:ff
    prog/xdp <span class="token function">id</span> <span class="token number">5</span> tag aedc195cc0471f51 jited<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>然后通过<code>ethtool -S</code>查看网卡的统计信息：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ mmwatch <span class="token string">'ethtool -S ext0|egrep "rx"|egrep -v ": 0"|egrep -v "cache|csum"'</span>
     rx_out_of_buffer:     <span class="token number">4</span>.4m/s
     rx_xdp_drop:         <span class="token number">10</span>.1m/s
     rx2_xdp_drop:        <span class="token number">10</span>.1m/s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>利用XDP，我们实现了在单核上，每秒钟丢弃1000万个包！<br><img src="/images/xdp-drop.jpg"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我们在IPv4和IPv6上重复了实验，并画了这张图：<br><img src="/images/xdp-numbers-noxdp.png"></p>
<p>总的来说在我们现在的设置下，IPv6比v4要稍微慢一些，需要注意的是IPv6的包也稍微大了一些，所以这性能上的区别还是可以理解的。</p>
<p>Linux提供了很多过滤数据包的Hook，每个都有不同的性能和易用性。</p>
<p>对于应对DDoS的场景，在用户态的应用程序里处理这些数据包是合理的，通过调整应用程序，也可以获得不错的性能。<br>而对于有随机源IP和端口的攻击，关闭conntrack的特性来获得性能提升也是值得的，但是conntrack在某些攻击情况下，还是很有用的。<br>针对其他情况下，利用Linux的防火墙来作为抗DDoS的一部分还是很有意义的，在这种情况下要尽量利用”-t raw PREROUTING”这一层，因为这一层比”filter”表要快很多。<br>对于要求更高的工作负载，我们还有XDP，而且他很强大，下面是和上面相同的图表，但是加上了XDP：<br><img src="/images/xdp-numbers-xdp-1.png"></p>
<p>如果需要重现这些数据，可以看看<a href="https://github.com/cloudflare/cloudflare-blog/blob/master/2018-07-dropping-packets/README.md">项目代码的README</a>。</p>
]]></content>
      <categories>
        <category>Linux Kernel</category>
      </categories>
      <tags>
        <tag>DDoS</tag>
        <tag>iptables，tc</tag>
        <tag>XDP</tag>
      </tags>
  </entry>
  <entry>
    <title>Intel X700系列网卡（i40e驱动）收不到LLDP包问题</title>
    <url>/2020/05/07/intel-x700-i40e-do-not-receive-LLDP-frames/</url>
    <content><![CDATA[<p>在我们的机房服务器上，启用了LLDPD服务，通过LLDP协议实现网络层的自动发现，从而根据收到的消息绘制网络拓扑关系。</p>
<p>之前的大部分机器一直工作正常，也没有多关注，然而今天突然发现有一批机器工作不太正常，因为后期的工作依赖这个拓扑关系，如果关系不正确，后面的工作就没办法进行，所以遇到不正常的机器还是需要具体分析一下为什么。</p>
<p>正常情况下，启动<code>lldpd</code>服务，并调用<code>lldpctl</code>可以看到网卡连接到的交换机信息：</p>
<span id="more"></span>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">]</span><span class="token comment"># lldpctl </span>
-------------------------------------------------------------------------------
LLDP neighbors:
-------------------------------------------------------------------------------
Interface:    eth0, via: LLDP, RID: <span class="token number">1</span>, Time: <span class="token number">27</span> days, 04:05:23
  Chassis:     
    ChassisID:    mac ff:ff:ff:ff:ff:ff
    SysName:      sw1.ichenfu.com
    SysDescr:     H3C Comware Platform Software<span class="token punctuation">..</span>.
                  H3C S6850-56HF
                  Copyright <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token number">2004</span>-2019 New H3C Technologies Co., Ltd. All rights reserved.
    Capability:   Bridge, on
    Capability:   Router, on
  Port:        
    PortID:       ifname Twenty-FiveGigE1/0/10
    PortDescr:    Twenty-FiveGigE1/0/10 Interface
    TTL:          <span class="token number">121</span>
    MFS:          <span class="token number">9416</span>
    PMD autoneg:  supported: yes, enabled: <span class="token function">yes</span>
      MAU oper type: unknown
    MDI Power:    supported: no, enabled: no, pair control: no
      Device type:  PD
      Power pairs:  signal
      Class:        class <span class="token number">0</span>
  VLAN:         <span class="token number">1</span>, pvid: <span class="token function">yes</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看到机器的<code>eth0</code>网口连接到了<code>sw1.ichenfu.com</code>这个交换机的<code>Twenty-FiveGigE1/0/10</code>这个口。</p>
<p>但是在出问题的机器上，执行<code>lldpctl</code>却什么也不会显示，第一反应，先重启试试，于是重启了<code>lldpd</code>进程，发现也不行，又尝试重启机器，还是不行。更奇怪的是，让网络组看了一下这台交换机底下其他的机器，都是正常的，这就很奇怪了。既然不知道怎么回事，那就抓个包试试：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">]</span><span class="token comment"># tcpdump -ieth0 ether proto 0x88cc                                                                                             </span>
tcpdump: verbose output suppressed, use <span class="token parameter variable">-v</span> or <span class="token parameter variable">-vv</span> <span class="token keyword">for</span> full protocol decode
listening on eth0, link-type EN10MB <span class="token punctuation">(</span>Ethernet<span class="token punctuation">)</span>, capture size <span class="token number">262144</span> bytes
<span class="token number">17</span>:26:35.251321 LLDP, length <span class="token number">133</span>: node1-ichenfu-com
<span class="token number">17</span>:27:05.252325 LLDP, length <span class="token number">133</span>: node1-ichenfu-com
<span class="token number">17</span>:27:35.254324 LLDP, length <span class="token number">133</span>: node1-ichenfu-com
<span class="token number">17</span>:28:05.254863 LLDP, length <span class="token number">133</span>: node1-ichenfu-com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>出问题的机器，发现抓包只能看到本机发出去的LLDP包，看不到交换机发出的LLDP包。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">]</span><span class="token comment"># tcpdump -ieth0 ether proto 0x88cc                                                                                             </span>
tcpdump: verbose output suppressed, use <span class="token parameter variable">-v</span> or <span class="token parameter variable">-vv</span> <span class="token keyword">for</span> full protocol decode
listening on eth0, link-type EN10MB <span class="token punctuation">(</span>Ethernet<span class="token punctuation">)</span>, capture size <span class="token number">262144</span> bytes
<span class="token number">17</span>:26:35.251321 LLDP, length <span class="token number">133</span>: node2-ichenfu-com
<span class="token number">17</span>:26:40.693320 LLDP, length <span class="token number">337</span>: sw1.ichenfu.com
<span class="token number">17</span>:27:05.252325 LLDP, length <span class="token number">133</span>: node2-ichenfu-com
<span class="token number">17</span>:27:10.692902 LLDP, length <span class="token number">337</span>: sw1.ichenfu.com
<span class="token number">17</span>:27:35.254324 LLDP, length <span class="token number">133</span>: node2-ichenfu-com
<span class="token number">17</span>:27:40.693446 LLDP, length <span class="token number">337</span>: sw1.ichenfu.com
<span class="token number">17</span>:28:05.254863 LLDP, length <span class="token number">133</span>: node2-ichenfu-com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>正常的机器上，可以看到本机发出去的和交换机发出来的LLDP包。</p>
<p>难不成交换机发的包被丢了？在这个时候，注意到了一个细节，出问题的机器，网卡是<code>Intel Corporation Ethernet Connection X722</code>，而没有问题的网卡是<code>Intel Corporation 82599ES 10-Gigabit</code>，难道是网卡问题？</p>
<p>于是打开Google，先用<code>X722 LLDP</code>类似关键词搜索了一下，好像没有搜到什么有用的信息，想了想，是不是和驱动有关呢？因为Intel在X700系列使用的驱动是<code>i40e</code>，所以尝试用关键词<code>i40e LLDP</code>再搜索，搜到了关键的信息，来自Redhat的知识库<a href="https://access.redhat.com/solutions/3446721">Intel X710 series NICs (i40e) do not receive LLDP frames</a>。看了一下其中的内容：</p>
<blockquote><p>Intel 700 series NICs run an LLDP agent in firmware that will process and “absorb” any LLDPDU frames received from the switch. The frames are therefore never visible to the OS.<br>Intel 700 系列网卡在固件中会运行一个LLDP agent，这个agent会处理所有从交换发出的LLDP报文，这样在操作系统层面就再也看不到这个报文了。</p>
</blockquote>
<p>好吧，这个特性确实有点坑啊。不过，Redhat也提供了相应的解决方案：</p>
<p>当Kernel版本大于等于<code>kernel-3.10.0-957.el7</code>，也就是CentOS 7.6版本的默认内核时，可以调用<code>ethtool --set-priv-flags eth0 disable-fw-lldp on</code>通知网卡驱动关闭内置的LLDP agent。<br>如果内核小于这个版本，那就需要tricky一点的做法了：<code>echo &quot;lldp stop&quot; &gt; /sys/kernel/debug/i40e/&lt;pci bus address&gt;/command</code>。</p>
<p>由于我们的系统版本刚好是CentOS 7.6，所以直接执行<code>ethtool --set-priv-flags eth0 disable-fw-lldp on</code>，再执行<code>ethtool --show-priv-flags eth0|grep disable-fw-lldp</code>确认生效。</p>
<p>执行完成，发现恢复了：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">]</span><span class="token comment"># lldpctl </span>
-------------------------------------------------------------------------------
LLDP neighbors:
-------------------------------------------------------------------------------
Interface:    eth0, via: LLDP, RID: <span class="token number">1</span>, Time: <span class="token number">27</span> days, 04:05:23
  Chassis:     
    ChassisID:    mac ff:ff:ff:ff:ff:ff
    SysName:      sw1.ichenfu.com
    SysDescr:     H3C Comware Platform Software<span class="token punctuation">..</span>.
                  H3C S6850-56HF
                  Copyright <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token number">2004</span>-2019 New H3C Technologies Co., Ltd. All rights reserved.
    Capability:   Bridge, on
    Capability:   Router, on
  Port:        
    PortID:       ifname Twenty-FiveGigE1/0/11
    PortDescr:    Twenty-FiveGigE1/0/10 Interface
    TTL:          <span class="token number">121</span>
    MFS:          <span class="token number">9416</span>
    PMD autoneg:  supported: yes, enabled: <span class="token function">yes</span>
      MAU oper type: unknown
    MDI Power:    supported: no, enabled: no, pair control: no
      Device type:  PD
      Power pairs:  signal
      Class:        class <span class="token number">0</span>
  VLAN:         <span class="token number">1</span>, pvid: <span class="token function">yes</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这么一看，Intel还是挺坑的啊，为啥要在网卡搞个这玩意。。即使都是以太网卡，不同的厂商以及芯片之间，行为上还是会有一些区别的。</p>
]]></content>
      <categories>
        <category>Linux Kernel</category>
      </categories>
      <tags>
        <tag>X722</tag>
        <tag>i40e</tag>
        <tag>LLDP</tag>
      </tags>
  </entry>
  <entry>
    <title>lspci命令输出的一些解释</title>
    <url>/2019/11/03/interpreting-the-output-of-lspci/</url>
    <content><![CDATA[<p>最近一段时间在折腾虚拟化，想把SR-IOV硬件直通给用起来，所以免不了要利用<code>lspci</code>这个工具，用来查看当前系统连接的所有PCI&#x2F;PCIe设备。其实之前也有用到过，也有一些不理解的地方，只是当时无脑跟着文档设置，也就没多关心了，这次需要好好的理解一下相关的概念什么的。</p>
<p>首先很简单，看看不加参数直接调用<code>lspci</code>命令的输出结果，下面的是我笔记本上的输出：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">00:00.0 Host bridge: Intel Corporation Broadwell-U Host Bridge <span class="token parameter variable">-OPI</span> <span class="token punctuation">(</span>rev 09<span class="token punctuation">)</span>
00:02.0 VGA compatible controller: Intel Corporation HD Graphics <span class="token number">5500</span> <span class="token punctuation">(</span>rev 09<span class="token punctuation">)</span>
00:03.0 Audio device: Intel Corporation Broadwell-U Audio Controller <span class="token punctuation">(</span>rev 09<span class="token punctuation">)</span>
00:04.0 Signal processing controller: Intel Corporation Broadwell-U Processor Thermal Subsystem <span class="token punctuation">(</span>rev 09<span class="token punctuation">)</span>
00:14.0 USB controller: Intel Corporation Wildcat Point-LP USB xHCI Controller <span class="token punctuation">(</span>rev 03<span class="token punctuation">)</span>
00:16.0 Communication controller: Intel Corporation Wildcat Point-LP MEI Controller <span class="token comment">#1 (rev 03)</span>
00:19.0 Ethernet controller: Intel Corporation Ethernet Connection <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> I218-LM <span class="token punctuation">(</span>rev 03<span class="token punctuation">)</span>
00:1b.0 Audio device: Intel Corporation Wildcat Point-LP High Definition Audio Controller <span class="token punctuation">(</span>rev 03<span class="token punctuation">)</span>
00:1c.0 PCI bridge: Intel Corporation Wildcat Point-LP PCI Express Root Port <span class="token comment">#1 (rev e3)</span>
00:1c.3 PCI bridge: Intel Corporation Wildcat Point-LP PCI Express Root Port <span class="token comment">#4 (rev e3)</span>
00:1c.4 PCI bridge: Intel Corporation Wildcat Point-LP PCI Express Root Port <span class="token comment">#5 (rev e3)</span>
00:1d.0 USB controller: Intel Corporation Wildcat Point-LP USB EHCI Controller <span class="token punctuation">(</span>rev 03<span class="token punctuation">)</span>
00:1f.0 ISA bridge: Intel Corporation Wildcat Point-LP LPC Controller <span class="token punctuation">(</span>rev 03<span class="token punctuation">)</span>
00:1f.2 SATA controller: Intel Corporation Wildcat Point-LP SATA Controller <span class="token punctuation">[</span>AHCI Mode<span class="token punctuation">]</span> <span class="token punctuation">(</span>rev 03<span class="token punctuation">)</span>
00:1f.3 SMBus: Intel Corporation Wildcat Point-LP SMBus Controller <span class="token punctuation">(</span>rev 03<span class="token punctuation">)</span>
01:00.0 SD Host controller: O2 Micro, Inc. SD/MMC Card Reader Controller <span class="token punctuation">(</span>rev 01<span class="token punctuation">)</span>
02:00.0 Network controller: Intel Corporation Wireless <span class="token number">7265</span> <span class="token punctuation">(</span>rev <span class="token number">59</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<span id="more"></span>
<p>首先让人不好理解的地方就是最左边的一系列编号类似<code>00:19.0</code>这些，毕竟右边的设备名字供应商什么的还是很容易看懂的。那么最左边的这些编号代表什么意思呢？</p>
<p>在PCI或者说PCIe里，每个设备有三个编号：总线编号(Bus Number)、设备编号（Device Number）和功能编号（Function Number），那么对应上面的<code>00:19.0</code>来说：这个设备的BusNumber是<code>00</code>，DeviceNumber是<code>19</code>，FunctionNumber是<code>0</code>，需要说明的是这三个都是16进制表示，有些配置里需要填十进制数的，需要做下转换。</p>
<p>其实呢，在linux里还有一个编号，叫做DomainNumber，不过上面的输出中没有，因为都是0，所以就忽略了，理论上，一个Segment可以有256个Bus，每个Bus可以有32个Device，每个Device可以有8个Function，在一些场景下，比如设备特别多，是会有多个Domain的，在硬件层面对应多个PCI Segment，在这种情况下，或者使用<code>lspci -D</code>命令，输出就会带上DomainNumber，比如我们一台服务器的输出:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">0002:e8:00.0 PCI bridge: ----- Co., Ltd. Device <span class="token number">1610</span> <span class="token punctuation">(</span>rev 01<span class="token punctuation">)</span>
0004:48:00.0 PCI bridge: ----- Co., Ltd. Device <span class="token number">1610</span> <span class="token punctuation">(</span>rev 01<span class="token punctuation">)</span>
0004:49:00.0 Serial Attached SCSI controller: LSI Logic / Symbios Logic SAS3008 PCI-Express Fusion-MPT SAS-3 <span class="token punctuation">(</span>rev 02<span class="token punctuation">)</span>
0005:00:00.0 PCI bridge: ----- Co., Ltd. Device <span class="token number">1610</span> <span class="token punctuation">(</span>rev 01<span class="token punctuation">)</span>
0006:08:00.0 PCI bridge: ----- Co., Ltd. Device <span class="token number">1610</span> <span class="token punctuation">(</span>rev 01<span class="token punctuation">)</span>
0007:40:00.0 PCI bridge: ----- Co., Ltd. Device <span class="token number">1610</span> <span class="token punctuation">(</span>rev 01<span class="token punctuation">)</span>
0007:41:00.0 VGA compatible controller: ----- Co., Ltd. <span class="token punctuation">[</span>iBMC Intelligent Management system chip w/VGA support<span class="token punctuation">]</span> <span class="token punctuation">(</span>rev 01<span class="token punctuation">)</span>
000a:10:00.0 PCI bridge: ----- Co., Ltd. Device <span class="token number">1610</span> <span class="token punctuation">(</span>rev 01<span class="token punctuation">)</span>
000c:20:00.0 PCI bridge: ----- Co., Ltd. Device <span class="token number">1610</span> <span class="token punctuation">(</span>rev 01<span class="token punctuation">)</span>
000d:30:00.0 PCI bridge: ----- Co., Ltd. Device <span class="token number">1610</span> <span class="token punctuation">(</span>rev 01<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在前面多了一列，多出来的就是DomainNumber了。</p>
<p>明白了前面的编号之后，还有一个疑问，就是<code>lspci</code>命令是怎么能知道<code>00:19.0</code>这个设备就是个<code>Ethernet controller</code>，并且是<code>Intel Corporation Ethernet Connection (3) I218-LM (rev 03)</code>的呢？<br>这时可以使用<code>lspci -nn</code>命令，附加上原始的信息：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">..</span>.
00:19.0 Ethernet controller <span class="token punctuation">[</span>0200<span class="token punctuation">]</span>: Intel Corporation Ethernet Connection <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> I218-LM <span class="token punctuation">[</span><span class="token number">8086</span>:15a2<span class="token punctuation">]</span> <span class="token punctuation">(</span>rev 03<span class="token punctuation">)</span>
<span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>这里只用我笔记本的网卡举例了，可以看到和上面不同的是多了两个方括号括起来的编号，其中前面的<code>[0200]</code>表示了当前设备的DeviceClass，也就是设备类型，而后面的<code>[8086:15a2]</code>代表的就是设备的VendorID和DeviceID，<code>lspci</code>命令会默认尝试读取<code>/usr/share/hwdata/pci.ids.gz</code>和<code>/usr/share/hwdata/pci.ids</code>文件，利用DeviceClass、VendorID:DeviceID去匹配相应的设备，这个设备清单是由<a href="https://pci-ids.ucw.cz/">https://pci-ids.ucw.cz/</a>维护的，我们也可以直接去网站上去查询。</p>
<p>直接登录网站，可以查询到DeviceClass前两位<code>02</code>是一个<code>Network controller</code>，而后两位<code>00</code>表示这个设备是一个<code>Ethernet controller</code>，而<code>8086</code>这个VendorID，代码供应商是<code>Intel Corporation</code>（话说还真是应景啊，作为8086的创始者用8086这个ID），而DeviceID为<code>15a2</code>的设备为<code>Ethernet Connection (3) I218-LM</code>，组合一下，就和lspci的输出一致了。</p>
<p>具体到如何读取DeviceClass和VendorID:DeviceID，这里就不说了，可以参考一下后面的链接，简单来说，PCI总线上每个设备，都会对应一段内存地址，这个地址可以根据设备的编号直接计算出来，加上偏移量，就可以读到这些数据了。</p>
<p>参考：</p>
<ol>
<li>Interpreting the output of lspci: <a href="https://diego.assencio.com/?index=649b7a71b35fc7ad41e03b6d0e825f07">https://diego.assencio.com/?index=649b7a71b35fc7ad41e03b6d0e825f07</a></li>
<li>深入PCI与PCIe之一：硬件篇: <a href="https://zhuanlan.zhihu.com/p/26172972">https://zhuanlan.zhihu.com/p/26172972</a></li>
<li>深入PCI与PCIe之二：软件篇: <a href="https://zhuanlan.zhihu.com/p/26244141">https://zhuanlan.zhihu.com/p/26244141</a></li>
</ol>
]]></content>
      <tags>
        <tag>LSPCI</tag>
      </tags>
  </entry>
  <entry>
    <title>京东云主机试用</title>
    <url>/2017/01/03/jd-vm/</url>
    <content><![CDATA[<p>前几天拿到了京东云的代金券，87块钱，刚好能用一台1核1G的虚拟机一个月，外加1M的外网带宽。于是就随便试用了一下，感觉还行，说说感受吧。</p>
<p>首先是镜像，目前镜像不是很多，主要集中在CentOS、Ubuntu、Windows。CentOS还是比较全的，从5.8到7.3都有，Ubuntu只用12.04和14.04两个LTS版本，Windows还是有一些的，不过没怎么关注。除了官方的镜像，还有安全镜像，不过我不敢选。不知道里面加了些啥～<br>我是直接选了一个CentOS 7.3的镜像。</p>
<p>然后是硬盘，87块钱的代金券只能用系统盘了，30G，数据盘不够加了，也没加。</p>
<p>目前网络只有非BGP可选，创建好了之后我是分配了一个电信的IP，地域是华北，不知道会不会有其他运营商可以选择了。带宽也只能选择1M，不然钱不够了～</p>
<p>创建的过程还是挺简单的，我是绑了SSH key，可以直接ssh登录了。</p>
<p>进去了主机看了一下系统信息：</p>
<span id="more"></span>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@c0refast ~<span class="token punctuation">]</span><span class="token comment"># cat /proc/cpuinfo </span>
processor	<span class="token builtin class-name">:</span> <span class="token number">0</span>
vendor_id	<span class="token builtin class-name">:</span> GenuineIntel
cpu family	<span class="token builtin class-name">:</span> <span class="token number">6</span>
model		<span class="token builtin class-name">:</span> <span class="token number">60</span>
model name	<span class="token builtin class-name">:</span> Intel Core Processor <span class="token punctuation">(</span>Haswell<span class="token punctuation">)</span>
stepping	<span class="token builtin class-name">:</span> <span class="token number">1</span>
microcode	<span class="token builtin class-name">:</span> 0x1
cpu MHz		<span class="token builtin class-name">:</span> <span class="token number">2299.998</span>
cache size	<span class="token builtin class-name">:</span> <span class="token number">4096</span> KB
physical <span class="token function">id</span>	<span class="token builtin class-name">:</span> <span class="token number">0</span>
siblings	<span class="token builtin class-name">:</span> <span class="token number">1</span>
core <span class="token function">id</span>		<span class="token builtin class-name">:</span> <span class="token number">0</span>
cpu cores	<span class="token builtin class-name">:</span> <span class="token number">1</span>
apicid		<span class="token builtin class-name">:</span> <span class="token number">0</span>
initial apicid	<span class="token builtin class-name">:</span> <span class="token number">0</span>
fpu		<span class="token builtin class-name">:</span> <span class="token function">yes</span>
fpu_exception	<span class="token builtin class-name">:</span> <span class="token function">yes</span>
cpuid level	<span class="token builtin class-name">:</span> <span class="token number">13</span>
wp		<span class="token builtin class-name">:</span> <span class="token function">yes</span>
flags		<span class="token builtin class-name">:</span> fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ss syscall nx pdpe1gb rdtscp lm constant_tsc rep_good nopl eagerfpu pni pclmulqdq ssse3 fma cx16 pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand hypervisor lahf_lm abm fsgsbase bmi1 avx2 smep bmi2 erms invpcid xsaveopt
bogomips	<span class="token builtin class-name">:</span> <span class="token number">4599.99</span>
clflush size	<span class="token builtin class-name">:</span> <span class="token number">64</span>
cache_alignment	<span class="token builtin class-name">:</span> <span class="token number">64</span>
address sizes	<span class="token builtin class-name">:</span> <span class="token number">46</span> bits physical, <span class="token number">48</span> bits virtual
power management:

<span class="token punctuation">[</span>root@c0refast ~<span class="token punctuation">]</span><span class="token comment"># dmidecode </span>
<span class="token comment"># dmidecode 3.0</span>
Scanning /dev/mem <span class="token keyword">for</span> entry point.
SMBIOS <span class="token number">2.4</span> present.
<span class="token number">10</span> structures occupying <span class="token number">349</span> bytes.
Table at 0x000F1E90.

Handle 0x0000, DMI <span class="token builtin class-name">type</span> <span class="token number">0</span>, <span class="token number">24</span> bytes
BIOS Information
	Vendor: Seabios
	Version: <span class="token number">0.5</span>.1
	Release Date: 01/01/2011
	Address: 0xE8000
	Runtime Size: <span class="token number">96</span> kB
	ROM Size: <span class="token number">64</span> kB
	Characteristics:
		BIOS characteristics not supported
		Targeted content distribution is supported
	BIOS Revision: <span class="token number">1.0</span>

Handle 0x0100, DMI <span class="token builtin class-name">type</span> <span class="token number">1</span>, <span class="token number">27</span> bytes
System Information
	Manufacturer: Fedora Project
	Product Name: OpenStack Nova
	Version: <span class="token number">12.0</span>.0-1.el7
	Serial Number: a05e03d4-2fd7-486c-915e-79fba898f4b7
	UUID: 0025BF92-D0B0-4332-A200-180461344084
	Wake-up Type: Power Switch
	SKU Number: Not Specified
	Family: Virtual Machine
<span class="token punctuation">..</span>.
<span class="token punctuation">[</span>root@c0refast ~<span class="token punctuation">]</span><span class="token comment"># virt-what </span>
kvm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>恩，看起来用的是OpenStack，主机CPU是Haswell，但是我也不知道是具体的哪个CPU了。</p>
<p>然后就是跟着文档搭了个LNMP，然后在网站根目录dd了个大点的文件，测试一下网络怎么样了。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@c0refast ~<span class="token punctuation">]</span><span class="token comment"># dd if=/dev/zero of=test10G bs=1M count=10240</span>
<span class="token number">10240</span>+0 records <span class="token keyword">in</span>
<span class="token number">10240</span>+0 records out
<span class="token number">10737418240</span> bytes <span class="token punctuation">(</span><span class="token number">11</span> GB<span class="token punctuation">)</span> copied, <span class="token number">26.8709</span> s, <span class="token number">400</span> MB/s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>磁盘的速度还是挺快的，不过dd顺序写一般raid也确实很快。也没有测试随机I&#x2F;O的性能了。</p>
<p>在本地wget，发现1M的带宽，刚开始能跑到2,3M左右的速度，然后逐渐回落，最终在1M附近摆动，类似允许突发流量的效果，不知道京东的网络架构是什么样的，也不好猜后面是怎么实现的了。其实这样对于小文件来说，还是有优势的。后来又用了一个cli版本的speedtest脚本，是speedtest.net的python实现，跑了一下。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@c0refast ~<span class="token punctuation">]</span><span class="token comment"># ./speedtest-cli </span>
Retrieving speedtest.net configuration<span class="token punctuation">..</span>.
Testing from China Telecom <span class="token punctuation">(</span><span class="token number">36.110</span>.131.99<span class="token punctuation">)</span><span class="token punctuation">..</span>.
Retrieving speedtest.net server list<span class="token punctuation">..</span>.
Selecting best server based on ping<span class="token punctuation">..</span>.
Hosted by Beijing Telecom <span class="token punctuation">(</span>Beijing<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token number">1.69</span> km<span class="token punctuation">]</span>: <span class="token number">51.8</span> ms
Testing download speed<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>
Download: <span class="token number">91.46</span> Mbit/s
Testing upload speed<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>
Upload: <span class="token number">1.70</span> Mbit/s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>下载差不多是100M带宽，基本算是没有限制吧。上传也算是1M带宽，没啥问题～</p>
<p>技术上的说完了，说说产品吧～产品上感觉还是挺‘OpenStack’的，主机，网络，防火墙等等，和大多OpenStack产品差不多～<br>另外就是镜像有点少了，Linux只有Ubuntu和CentOS可选，感觉应该有更多选择，虽然大多数情况下这两个也足够了。<br>还有一些产品，云硬盘，数据库这些，也都没有测试，希望能有多点代金券，也好多测试一下。</p>
<p>总体上，也许是因为京东云刚刚发展的原因吧，感觉整体还是比较‘原始’的，不过随着时间的推移，应该会越来越好吧～</p>
]]></content>
      <categories>
        <category>日常折腾</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>京东云</tag>
        <tag>虚拟机</tag>
        <tag>LNMP</tag>
      </tags>
  </entry>
  <entry>
    <title>Istio的流量劫持和Linux下透明代理实现</title>
    <url>/2019/04/09/istio-inbond-interception-and-linux-transparent-proxy/</url>
    <content><![CDATA[<p>一般情况下，如果一个程序需要使用代理服务器，那么需要在运行的时候设置一下参数，或者，在Linux下，大部分的程序支持<code>http_proxy</code>这个环境变量，设置这个环境变量，意味着程序将使用设置值作为代理。<br>这样的问题在于，设置代理这个操作是不透明的，也就是说，客户端必须要知道代理的存在，需要手动设置将流量导入到代理，如果程序本身不支持代理，或者我们不希望执行所有程序的时候都手动设置代理，那么就需要一个相对“透明”的代理办法了。</p>
<p>同样的，作为ServiceMesh界的当红实现Istio，也会遇到类似的问题，如何在程序完全没有感知的情况下悄无声息的将程序的流量劫持到自己的代理呢？</p>
<p>借助Istio的两种实现方式，也说一下目前Liunx下两种透明代理的实现。</p>
<h2 id="REDIRECT"><a href="#REDIRECT" class="headerlink" title="REDIRECT"></a>REDIRECT</h2><p>首先是使用iptables的<code>REDIRECT</code>模式，通过iptables，可以将所有的流量都重定向到一个特定的端口上，如果配置过<code>ss-redir</code>的话，应该会对这种实现非常的熟悉，具体的，在iptables里对应一条规则：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">iptables <span class="token parameter variable">-t</span> nat <span class="token parameter variable">-A</span> PREROUTING <span class="token parameter variable">-p</span> tcp <span class="token parameter variable">-j</span> REDIRECT --to-port <span class="token number">5000</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>即将所有流量都重定向到<code>5000</code>端口，仔细看一下，是不是和iptables实现DNAT有点相似？没错！本质上<code>REDIRECT</code>就是一个特殊的DNAT规则，一般情况下，我们利用iptables做DNAT的时候，需要指定目标的IP和端口，这样iptables才能知道需要将数据包的目的修改成什么，而<code>REDIRECT</code>模式下，只需要指定端口就可以，iptables会自动帮我们判断需要设置的IP地址。</p>
<p>继续思考，会发现另一个问题，那就是，既然是做了DNAT，也就意味着数据包里已经没有原始的目的地址了，那数据包到了代理程序，代理程序是如何知道这个数据包应该往什么地方发送呢？这个是个非常核心的问题，因为如果不知道原始的目的IP端口信息，代理完全不能起作用啊！</p>
<p>当然问题是有办法的，<code>conntrack</code>在这时候起作用了，<code>conntrack</code>会记录原始的地址，而在用户侧，内核提供了一个接口，可以让应用程序获取到原始的IP端口，可以参考一下<code>ss-redir</code>的实现：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">int</span>
<span class="token function">getdestaddr</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">sockaddr_storage</span> <span class="token operator">*</span>destaddr<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token class-name">socklen_t</span> socklen <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>destaddr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> error         <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    error <span class="token operator">=</span> <span class="token function">getsockopt</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> SOL_IPV6<span class="token punctuation">,</span> IP6T_SO_ORIGINAL_DST<span class="token punctuation">,</span> destaddr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>socklen<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// Didn't find a proper way to detect IP version.</span>
        error <span class="token operator">=</span> <span class="token function">getsockopt</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> SOL_IP<span class="token punctuation">,</span> SO_ORIGINAL_DST<span class="token punctuation">,</span> destaddr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>socklen<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>利用<code>getsockopt</code>的<code>SO_ORIGINAL_DST</code>参数，可以获取到原始的连接IP和端口，好了，目前代理所需要的所有的信息都完整了，整个代理理论上就可以工作了，剩下的就是代理如何实现的问题了，这里就不探讨了。</p>
<h2 id="TPROXY"><a href="#TPROXY" class="headerlink" title="TPROXY"></a>TPROXY</h2><p>除了利用<code>REDIRECT</code>模式，Istio还提供<code>TPROXY</code>模式，当然也是借助Linux内核提供的功能实现的，对于<code>TPROXY</code>模式，实现的原理要相对复杂不少，需要借助iptables和路由：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">iptables <span class="token parameter variable">-t</span> mangle <span class="token parameter variable">-A</span> PREROUTING <span class="token parameter variable">-p</span> tcp <span class="token parameter variable">-j</span> TPROXY --tproxy-mark 0x1/0x1 --on-port <span class="token number">8888</span>
<span class="token function">ip</span> rule <span class="token function">add</span> fwmark 0x1/0x1 pref <span class="token number">100</span> table <span class="token number">100</span>
<span class="token function">ip</span> route <span class="token function">add</span> <span class="token builtin class-name">local</span> default dev lo table <span class="token number">100</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>通过iptables将数据包打上mark，然后使用一个特殊的路由，将数据包指向本地，由于使用了mangle表，所以数据包的原始和目的地址都是不会被修改的。</p>
<p>那么问题来了，应用程序怎么编写？假如需要连接<code>1.2.3.4:80</code>这个端口，就算数据包到了本地，但是本地并没有<code>1.2.3.4</code>这个IP地址啊，程序是怎么能拿到数据的？不是应该直接丢弃这个数据包么？<br>针对这个问题，可以看一个例子<a href="https://github.com/kristrev/tproxy-example">tproxy-example</a>，这个例子实现了一个简单的基于TPROXY的代理。</p>
<p>针对上面的情况，Linux提供了一个选项<code>IP_TRANSPARENT</code>，这个选项很神奇，可以让程序bind一个不属于本机的地址，作为客户端，它可以使用一个不属于本机地址的IP地址作为源IP发起连接，作为服务端，它可以侦听在一个不属于本机的IP地址上，而这正是透明代理所必须的。我们看下例子程序里的代码：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>listen_fd <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>res<span class="token operator">-></span>ai_family<span class="token punctuation">,</span> res<span class="token operator">-></span>ai_socktype<span class="token punctuation">,</span>
                res<span class="token operator">-></span>ai_protocol<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"socket: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">setsockopt</span><span class="token punctuation">(</span>listen_fd<span class="token punctuation">,</span> SOL_SOCKET<span class="token punctuation">,</span> SO_REUSEADDR<span class="token punctuation">,</span> <span class="token operator">&amp;</span>yes<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>yes<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"setsockopt (SO_REUSEADDR): "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">close</span><span class="token punctuation">(</span>listen_fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//Mark that this socket can be used for transparent proxying</span>
<span class="token comment">//This allows the socket to accept connections for non-local IPs</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">setsockopt</span><span class="token punctuation">(</span>listen_fd<span class="token punctuation">,</span> SOL_IP<span class="token punctuation">,</span> IP_TRANSPARENT<span class="token punctuation">,</span> <span class="token operator">&amp;</span>yes<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>yes<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"setsockopt (IP_TRANSPARENT): "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">close</span><span class="token punctuation">(</span>listen_fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">bind</span><span class="token punctuation">(</span>listen_fd<span class="token punctuation">,</span> res<span class="token operator">-></span>ai_addr<span class="token punctuation">,</span> res<span class="token operator">-></span>ai_addrlen<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"bind: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">close</span><span class="token punctuation">(</span>listen_fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">listen</span><span class="token punctuation">(</span>listen_fd<span class="token punctuation">,</span> BACKLOG<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"listen: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">close</span><span class="token punctuation">(</span>listen_fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>也确实是设置了<code>IP_TRANSPARENT</code>，有了这个选项，也就意味着代理绑定了所有的IP，当然<code>1.2.3.4</code>这个IP也在范围内，所以可以正常的接受连接。<br>而由于<code>TPROXY</code>模式并没有改变数据包，所以直接通过<code>getsockname</code>获取到原始的IP端口信息：</p>
<pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;Store the original destination address in remote_addr
&#x2F;&#x2F;Return 0 on success, &lt;0 on failure
static int get_org_dstaddr(int sockfd, struct sockaddr_storage *orig_dst)&#123;
    char orig_dst_str[INET6_ADDRSTRLEN];
    socklen_t addrlen &#x3D; sizeof(*orig_dst);

    memset(orig_dst, 0, addrlen);

    &#x2F;&#x2F;For UDP transparent proxying:
    &#x2F;&#x2F;Set IP_RECVORIGDSTADDR socket option for getting the original
    &#x2F;&#x2F;destination of a datagram

    &#x2F;&#x2F;Socket is bound to original destination
    if(getsockname(sockfd, (struct sockaddr*) orig_dst, &amp;addrlen)
            &lt; 0)&#123;
        perror(&quot;getsockname: &quot;);
        return -1;
    &#125; else &#123;
        if(orig_dst-&gt;ss_family &#x3D;&#x3D; AF_INET)&#123;
            inet_ntop(AF_INET,
                    &amp;(((struct sockaddr_in*) orig_dst)-&gt;sin_addr),
                    orig_dst_str, INET_ADDRSTRLEN);
            fprintf(stderr, &quot;Original destination %s\n&quot;, orig_dst_str);
        &#125; else if(orig_dst-&gt;ss_family &#x3D;&#x3D; AF_INET6)&#123;
            inet_ntop(AF_INET6,
                    &amp;(((struct sockaddr_in6*) orig_dst)-&gt;sin6_addr),
                    orig_dst_str, INET6_ADDRSTRLEN);
            fprintf(stderr, &quot;Original destination %s\n&quot;, orig_dst_str);
        &#125;

        return 0;
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>上面就是两种Linux下实现透明代理的方式，透过现象看本质，无论实现方式是什么，其实都定位到一个核心问题，即在没有代理的情况下，连接的五元组是什么？数据包最核心的源地址源端口，目的地址目的端口，无论是通过NAT方式修改数据包重定向，或者借助内核的一些特殊特性，都必须要知道这4个关键信息，一旦搞清楚这些，那理论上代理就能工作了，剩下的就是如何将代理本身做好，那就是一个业务逻辑的问题了。</p>
<p>参考：</p>
<ol>
<li><a href="https://serverfault.com/questions/179200/difference-beetween-dnat-and-redirect-in-iptables">https://serverfault.com/questions/179200/difference-beetween-dnat-and-redirect-in-iptables</a></li>
<li><a href="https://vvl.me/2018/06/09/from-ss-redir-to-linux-nat/">https://vvl.me/2018/06/09/from-ss-redir-to-linux-nat/</a></li>
<li><a href="https://blog.csdn.net/dog250/article/details/13161945">https://blog.csdn.net/dog250/article/details/13161945</a></li>
<li><a href="https://www.kernel.org/doc/Documentation/networking/tproxy.txt">https://www.kernel.org/doc/Documentation/networking/tproxy.txt</a></li>
</ol>
]]></content>
      <categories>
        <category>网络编程</category>
      </categories>
      <tags>
        <tag>iptables</tag>
        <tag>REDIRECT</tag>
        <tag>SO_ORIGINAL_DST</tag>
        <tag>TPROXY</tag>
        <tag>IP_TRANSPARENT</tag>
      </tags>
  </entry>
  <entry>
    <title>京东云无线宝鲁班路由器试用记</title>
    <url>/2021/09/28/jdc-router-luban/</url>
    <content><![CDATA[<h2 id="开箱"><a href="#开箱" class="headerlink" title="开箱"></a>开箱</h2><p>很幸运的拿到了京东云出的无线宝鲁班路由器的公测资格，话不多说，先上一波图：<br><img src="/images/jdc3-1.png" alt="盒子1"></p>
<span id="more"></span>
<p><img src="/images/jdc3-2.png" alt="盒子2"><br><img src="/images/jdc3-3.png" alt="盒子3"><br><img src="/images/jdc3-4.png" alt="本体"></p>
<p>从包装盒上可以很明显的看到路由器的配置，整体来说，和第一代区别不大，MTK MT7621的CPU、512M的内存、3LAN+1WAN千兆口，和一代相比，最大的变化在于支持了WiFi6、也就是802.11ax、相比WiFi5来说，还是提升了不少，整体的无线吞吐达到了1775Mbps。虽然没有拆机看下他的配置，但是根据猜想，大概率是+MT7915D的组合。</p>
<p>虽然都知道MT7621 CPU的性能一般般，但是因为这款CPU有硬件NAT引擎的存在，实际的网络流量传输完全不需要经过CPU处理，所以网络性能其实非常强大，基本上千兆宽带对他来说毫无压力，整体来说，这个配置还是比较均衡的，针对一般的家庭用户可以说是绰绰有余。</p>
<h2 id="无线性能测试"><a href="#无线性能测试" class="headerlink" title="无线性能测试"></a>无线性能测试</h2><p>比较遗憾的是，虽然鲁班路由器是WiFi6的，但是家里没有WiFi6的终端，因为无线握手的时候，只能倾向于版本低的那一端，所以这次测试，没办法真正感受WiFi6的性能威力了。其实在拿到手的一段时间里，做了非常多的测试工作，这里就不细说了，贴几张测试时的speedtest结果图：<br><img src="/images/jdc3-speed24.png" alt="2.4G测试结果"><br><img src="/images/jdc3-speed5.png" alt="5G测试结果"><br><img src="/images/jdc3-speed5-wall.png" alt="5G穿墙测试结果"></p>
<p>家里的网络是北京联通300M的宽带，实际用电脑+有线连接去测试，大概可以跑到下行380Mbps、上行38Mbps左右。<br>可以看到，鲁班路由器的测试结果，由于2.4G频段现在的干扰确实太多了（家里手机能搜索到的无线信号就有20多个），测速的表现一般，不过即使这样的环境，也能做到大概80多Mbps的下行速度，并且不影响上行速度，这个下行速度，即使是看视频，理论上也基本不会感受到卡顿了。<br>而5G频段的表现更是比较好，不穿墙的情况下，完全没有任何带宽的损失，即使在更远的位置+穿了一堵墙，也有200多Mbps的带宽，可以说在我现在的网络环境下鲁班路由器完全可以发挥宽带的能力。</p>
<h2 id="边缘计算"><a href="#边缘计算" class="headerlink" title="边缘计算"></a>边缘计算</h2><p>重点来了！对于无线宝路由器来说，除了最基础的网络功能，其实他还具有一个更加牛掰的能力！就是作为边缘计算的计算节点，为京东云的边缘计算平台提供计算、存储和带宽。具体的原理也比较复杂，就不详细探讨了，这里可以简单说一下我作为一个程序猿的理解：</p>
<p>一般来说，作为家庭宽带，虽然运营商提供了300M、500M甚至的千兆的带宽，但实际上大部分时候，普通人是无法完全利用这么多带宽的，从运营商角度来说，因为大家都用不完，所以他们可以卖个更多人，来获取更多的利益。而无线宝路由器呢，可以在你不用这部分带宽的时候，利用这些闲置的带宽，缓存一些边缘计算需要的数据，比如某一个特别火的视频，这些，等到附近的人（比如和你同一个小区）刚好需要看这个视频，就完全可以直接你家中的路由器中获取数据，而不再需要跑很远到视频网站的服务器上获取数据了。</p>
<p>这样做的好处很多，一方面看视频的人，因为离数据的距离更小了，可以更快的加载数据，播放变的更加流畅；另一方面针对视频网站也可以少花点流量的费用，服务器的压力也少很多。一举两得。</p>
<p>当然京东云肯定也不会白嫖了你的带宽、每天，他会根据你对整个平台的贡献打分，根据贡献的多少，发放一部分积分给你，最终可以用这一部分积分去换京东E卡，直接当钱用!以目前的情况来说，大概我家里的宽带，每天能分到差不多2块钱，这么看来还是很不错的。</p>
<h2 id="坐享其成计划"><a href="#坐享其成计划" class="headerlink" title="坐享其成计划"></a>坐享其成计划</h2><p>既然上面说到了这个路由器可以挣积分换钱，那是不是就存在回本的可能性？是的没错！随着时间的推移，最终积分的数量会超过购买路由所花的钱的，那个时候其实就已经回本了！而京东云还出了一个坐享其成计划，这个计划，保证了你一定能回本！具体来说，只要按照规则，使用路由器1年，即使发的积分不够你买路由器的钱，京东云也会补足这中间的差价，所以说还是非常划算的，四舍五入，啊不用四舍五入，就是不要钱！</p>
<p>具体的，可以看看链接里的说明：<a href="https://pro.jd.com/mall/active/2zzGFDJD2eeVEKHH93zVH4MTis82/index.html">https://pro.jd.com/mall/active/2zzGFDJD2eeVEKHH93zVH4MTis82/index.html</a><br>也可以直接点击这个链接购买：<a href="https://item.jd.com/100014311519.html">https://item.jd.com/100014311519.html</a></p>
]]></content>
      <categories>
        <category>日常折腾</category>
      </categories>
      <tags>
        <tag>无线宝</tag>
        <tag>WIFI6</tag>
        <tag>边缘计算</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes Pod dnsPolicy 配置</title>
    <url>/2018/12/20/k8s-pod-dns-policy/</url>
    <content><![CDATA[<p>在Kubernetes中，可以针对每个Pod设置DNS的策略，通过PodSpec下的<code>dnsPolicy</code>字段可以指定相应的策略，目前支持的策略如下：</p>
<ul>
<li>“<code>Default</code>“: Pod继承所在宿主机的设置，也就是直接将宿主机的<code>/etc/resolv.conf</code>内容挂载到容器中。</li>
<li>“<code>ClusterFirst</code>“: 默认的配置，所有请求会优先在集群所在域查询，如果没有才会转发到上游DNS。</li>
<li>“<code>ClusterFirstWithHostNet</code>“: 和<code>ClusterFirst</code>一样，不过是Pod运行在<code>hostNetwork:true</code>的情况下强制指定的。</li>
<li>“<code>None</code>“: 1.9版本引入的一个新值，这个配置忽略所有配置，以Pod的<code>dnsConfig</code>字段为准。</li>
</ul>
<span id="more"></span>


<p>为什么会想起找一下dnsPolicy的文档呢，也是因为Pod里默认使用了<code>ClusterFirst</code>策略，导致经常有DNS请求出现timeout问题，想用一个简单的办法继承宿主机的配置，现在看来比较简单了，直接设置<code>dnsPolicy:Default</code>就可以了。</p>
<p>针对上面说的<code>dnsConfig</code>字段，也有个详细的说明：</p>
<p><code>dnsConfig</code>字段包括下面几个属性：</p>
<ul>
<li><code>nameservers</code>: DNS Server的列表，最多3个IP&#x2F;</li>
<li><code>searches</code>: search域名列表，也就是<code>/etc/resolv.conf</code>中的<code>search</code>字段的配置，最多配置6个</li>
<li><code>options</code>: u选项列表，也就是<code>/etc/resolv.conf</code>中的<code>option</code>字段的配置</li>
</ul>
<p>一个测试的yaml：</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> default
  <span class="token key atrule">name</span><span class="token punctuation">:</span> dns<span class="token punctuation">-</span>example
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">containers</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> test
      <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx
  <span class="token key atrule">dnsPolicy</span><span class="token punctuation">:</span> <span class="token string">"None"</span>
  <span class="token key atrule">dnsConfig</span><span class="token punctuation">:</span>
    <span class="token key atrule">nameservers</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> 1.2.3.4
    <span class="token key atrule">searches</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> ns1.svc.cluster.local
      <span class="token punctuation">-</span> my.dns.search.suffix
    <span class="token key atrule">options</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> ndots
        <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token string">"2"</span>
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> edns0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>最后Pod中的<code>/etc/resolv.conf</code>配置就如下：</p>
<pre class="line-numbers language-none"><code class="language-none">nameserver 1.2.3.4
search ns1.svc.cluster.local my.dns.search.suffix
options ndots:2 edns0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>所以，Kubernetes配置虽然复杂，但还是很灵活啊。</p>
<p>参考：</p>
<ol>
<li><a href="https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#pod-s-dns-policy">https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#pod-s-dns-policy</a></li>
</ol>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
        <tag>dnsPolicy</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes的Leader选举机制</title>
    <url>/2021/06/16/k8s-leader-elect-resource-lock/</url>
    <content><![CDATA[<p>在<a href="/2021/06/14/systemd-privatenetwork-cause-annoying-logs/">上一篇Blog</a>里遗留一个问题：在打开了<code>kube-proxy</code>得tracing日志之后，除去定时同步iptables得日志之外，还出现了一些<code>Calling handler.OnEndpointsUpdate</code>相关得日志输出，这些输出其实是不太寻常的：</p>
<pre class="line-numbers language-none"><code class="language-none">13:55:13 localhost kube-proxy[20761]: I0609 13:55:13.290051   20761 config.go:167] Calling handler.OnEndpointsUpdate
13:55:14 localhost kube-proxy[20761]: I0609 13:55:14.502924   20761 config.go:167] Calling handler.OnEndpointsUpdate
13:55:15 localhost kube-proxy[20761]: I0609 13:55:15.299633   20761 config.go:167] Calling handler.OnEndpointsUpdate
13:55:16 localhost kube-proxy[20761]: I0609 13:55:16.515500   20761 config.go:167] Calling handler.OnEndpointsUpdate
13:55:17 localhost kube-proxy[20761]: I0609 13:55:17.316952   20761 config.go:167] Calling handler.OnEndpointsUpdate
13:55:18 localhost kube-proxy[20761]: I0609 13:55:18.525537   20761 config.go:167] Calling handler.OnEndpointsUpdate
13:55:19 localhost kube-proxy[20761]: I0609 13:55:19.326566   20761 config.go:167] Calling handler.OnEndpointsUpdate
13:55:20 localhost kube-proxy[20761]: I0609 13:55:20.541238   20761 config.go:167] Calling handler.OnEndpointsUpdate<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>频率大约是1s一条，如果熟悉K8S的Watch-List机制的一眼就应该可以看出来原因：因为<code>kube-proxy</code>会watch<code>Endpoints</code>的变化，并对这些变化做相应动作，然后某些<code>Endpoints</code>更新了之后，就触发了这条日志。其实这个机制是没有问题的，在正常的K8S集群里，这些输出也没有问题。但是在我们的集群里就有些不正常了，因为我们当前的应用场景，根本就不存在需要<code>Endpoints</code>的情况！那到底是什么地方触发了<code>Endpoints</code>的更新？</p>
<span id="more"></span>

<p>要找到原因，首先得知道是不是真的有对应的<code>Endpoints</code>，并且是不是真的再更新，比较简单，kubectl也支持针对资源的watch操作：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@ ~<span class="token punctuation">]</span><span class="token comment"># kubectl get endpoints --all-namespaces --watch</span>
NAMESPACE     NAME                      ENDPOINTS                              AGE
default       kubernetes                <span class="token number">192.168</span>.0.1:6443                       71d
kube-system   kube-controller-manager   <span class="token operator">&lt;</span>none<span class="token operator">></span>                                 71d
kube-system   kube-scheduler            <span class="token operator">&lt;</span>none<span class="token operator">></span>                                 71d
kube-system   kube-controller-manager   <span class="token operator">&lt;</span>none<span class="token operator">></span>                                 71d
kube-system   kube-scheduler            <span class="token operator">&lt;</span>none<span class="token operator">></span>                                 71d
kube-system   kube-controller-manager   <span class="token operator">&lt;</span>none<span class="token operator">></span>                                 71d
kube-system   kube-scheduler            <span class="token operator">&lt;</span>none<span class="token operator">></span>                                 71d
kube-system   kube-controller-manager   <span class="token operator">&lt;</span>none<span class="token operator">></span>                                 71d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以发现确实在<code>kube-system</code>这个namespace下面有两个endpoint：<code>kube-scheduler</code>、<code>kube-controller-manager</code>，而且也都是不停的在被修改。只是比较奇怪的地方是谁在修改它？修改的目的是啥？于是就获取一下其中一个endpoint看下具体的信息：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@ ~<span class="token punctuation">]</span><span class="token comment"># kubectl -n kube-system get endpoints kube-scheduler -oyaml</span>
apiVersion: v1
kind: Endpoints
metadata:
  annotations:
    control-plane.alpha.kubernetes.io/leader: <span class="token string">'&#123;"holderIdentity":"192-168-0-1_e1e84d39-8c11-492b-8ee0-7d6eac6b3186","leaseDurationSeconds":15,"acquireTime":"2021-05-08T10:47:31Z","renewTime":"2021-06-16T10:41:23Z","leaderTransitions":9&#125;'</span>
  creationTimestamp: <span class="token string">"2021-04-06T08:55:30Z"</span>
  name: kube-scheduler
  namespace: kube-system
  resourceVersion: <span class="token string">"24773276"</span>
  selfLink: /api/v1/namespaces/kube-system/endpoints/kube-scheduler
  uid: ae3d725e-679d-4410-8655-7ddacb633d1f<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>可以看到annotations里有个key：<code>control-plane.alpha.kubernetes.io/leader</code>，好像和选举有关啊。之前知道K8S的scheduler和controller-manager以及一些自定义的controller有选举机制来保证同一时刻只有一个实例在工作，但是没仔细研究过到底是怎么实现的，难道是基于endpoints？</p>
<p>先去看看<code>scheduler</code>的启动参数里，是不是有相关的选项，帮助我们理解一下当前的策略。果然执行<code>kube-scheduler --help</code>之后发现有一些相关的输出：</p>
<blockquote><p>Leader election flags:</p>
<pre><code>  --leader-elect
            Start a leader election client and gain leadership before executing the main loop. Enable this when running replicated components for high availability. (default true)
  --leader-elect-lease-duration duration
            The duration that non-leader candidates will wait after observing a leadership renewal until attempting to acquire leadership of a led but unrenewed leader slot. This is effectively the
            maximum duration that a leader can be stopped before it is replaced by another candidate. This is only applicable if leader election is enabled. (default 15s)
  --leader-elect-renew-deadline duration
            The interval between attempts by the acting master to renew a leadership slot before it stops leading. This must be less than or equal to the lease duration. This is only applicable if leader election is enabled. (default 10s)
  --leader-elect-resource-lock endpoints
            The type of resource object that is used for locking during leader election. Supported options are endpoints (default) and `configmaps`. (default &quot;endpoints&quot;)
  --leader-elect-resource-name string
            The name of resource object that is used for locking during leader election. (default &quot;kube-scheduler&quot;)
  --leader-elect-resource-namespace string
            The namespace of resource object that is used for locking during leader election. (default &quot;kube-system&quot;)
  --leader-elect-retry-period duration
            The duration the clients should wait between attempting acquisition and renewal of a leadership. This is only applicable if leader election is enabled. (default 2s)
</code></pre>
</blockquote>

<p>发现确实有相关的选项，针对<code>scheduler</code>来说，默认选择是使用一个endpoints，叫<code>kube-scheduler</code>来作为加锁的key，也可以修改为<code>configmaps</code>，当然名字也可以修改。而且renew这个锁的时间间隔默认是2s，这就很符合之前的日志输出了，<code>kube-scheduler</code>和<code>kube-controller-manager</code>两个组件，每个都间隔2s更新对应的endpoints，刚好看起来像是每秒都会有更新，这个和日志里输出的情况是一致的。</p>
<p>那具体K8S的这个选举机制是怎么工作的呢？继续分析一下代码，因为我们线上是运行的K8S的v1.16.15版本，所以下面的代码都是基于这个版本。</p>
<p>整体上，逻辑大致分为两部分：</p>
<ol>
<li>控制部分，主要负责确认当前是否获取到锁，Renew锁，释放锁等等控制层面操作</li>
<li>存储部分，主要负责存储这个锁，比如上文中的借助一个endpoint资源进行存储</li>
</ol>
<p>我们先看看<a href="https://github.com/kubernetes/kubernetes/blob/v1.16.15/cmd/kube-scheduler/app/server.go#L274">控制部分的入口</a>：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">if</span> cc<span class="token punctuation">.</span>LeaderElection <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
  cc<span class="token punctuation">.</span>LeaderElection<span class="token punctuation">.</span>Callbacks <span class="token operator">=</span> leaderelection<span class="token punctuation">.</span>LeaderCallbacks<span class="token punctuation">&#123;</span>
    OnStartedLeading<span class="token punctuation">:</span> run<span class="token punctuation">,</span>
    OnStoppedLeading<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      klog<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"leaderelection lost"</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span>
  leaderElector<span class="token punctuation">,</span> err <span class="token operator">:=</span> leaderelection<span class="token punctuation">.</span><span class="token function">NewLeaderElector</span><span class="token punctuation">(</span><span class="token operator">*</span>cc<span class="token punctuation">.</span>LeaderElection<span class="token punctuation">)</span>
  <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"couldn't create leader elector: %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>

  leaderElector<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>

  <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"lost lease"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>入口代码比较简单，创建<code>LeaderElector</code>并执行<code>Run()</code>，继续看看他的内部逻辑，这部分代码在<a href="https://github.com/kubernetes/kubernetes/blob/v1.16.15/staging/src/k8s.io/client-go/tools/leaderelection/leaderelection.go#L195">client-go里</a>：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// Run starts the leader election loop</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>le <span class="token operator">*</span>LeaderElector<span class="token punctuation">)</span> <span class="token function">Run</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		runtime<span class="token punctuation">.</span><span class="token function">HandleCrash</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		le<span class="token punctuation">.</span>config<span class="token punctuation">.</span>Callbacks<span class="token punctuation">.</span><span class="token function">OnStoppedLeading</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> <span class="token operator">!</span>le<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token comment">// ctx signalled done</span>
	<span class="token punctuation">&#125;</span>
	ctx<span class="token punctuation">,</span> cancel <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">WithCancel</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>
	<span class="token keyword">defer</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">go</span> le<span class="token punctuation">.</span>config<span class="token punctuation">.</span>Callbacks<span class="token punctuation">.</span><span class="token function">OnStartedLeading</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>
	le<span class="token punctuation">.</span><span class="token function">renew</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>主要的逻辑也比较清楚，先尝试<code>acquire</code>，如果成功，就调用回调函数并及时<code>renew</code>，而在<code>acquire</code>和<code>renew</code>这两个函数里主要的逻辑就是根据配置的时间间隔不停的尝试调用另一个<code>tryAcquireOrRenew</code>函数，我们主要看看这个函数：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// tryAcquireOrRenew tries to acquire a leader lease if it is not already acquired,</span>
<span class="token comment">// else it tries to renew the lease if it has already been acquired. Returns true</span>
<span class="token comment">// on success else returns false.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>le <span class="token operator">*</span>LeaderElector<span class="token punctuation">)</span> <span class="token function">tryAcquireOrRenew</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span>
	now <span class="token operator">:=</span> metav1<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	leaderElectionRecord <span class="token operator">:=</span> rl<span class="token punctuation">.</span>LeaderElectionRecord<span class="token punctuation">&#123;</span>
		HolderIdentity<span class="token punctuation">:</span>       le<span class="token punctuation">.</span>config<span class="token punctuation">.</span>Lock<span class="token punctuation">.</span><span class="token function">Identity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		LeaseDurationSeconds<span class="token punctuation">:</span> <span class="token function">int</span><span class="token punctuation">(</span>le<span class="token punctuation">.</span>config<span class="token punctuation">.</span>LeaseDuration <span class="token operator">/</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span><span class="token punctuation">,</span>
		RenewTime<span class="token punctuation">:</span>            now<span class="token punctuation">,</span>
		AcquireTime<span class="token punctuation">:</span>          now<span class="token punctuation">,</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">// 1. obtain or create the ElectionRecord</span>
	oldLeaderElectionRecord<span class="token punctuation">,</span> err <span class="token operator">:=</span> le<span class="token punctuation">.</span>config<span class="token punctuation">.</span>Lock<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span> <span class="token operator">!</span>errors<span class="token punctuation">.</span><span class="token function">IsNotFound</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			klog<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"error retrieving resource lock %v: %v"</span><span class="token punctuation">,</span> le<span class="token punctuation">.</span>config<span class="token punctuation">.</span>Lock<span class="token punctuation">.</span><span class="token function">Describe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
			<span class="token keyword">return</span> <span class="token boolean">false</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">if</span> err <span class="token operator">=</span> le<span class="token punctuation">.</span>config<span class="token punctuation">.</span>Lock<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span>leaderElectionRecord<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
			klog<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"error initially creating leader election record: %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
			<span class="token keyword">return</span> <span class="token boolean">false</span>
		<span class="token punctuation">&#125;</span>
		le<span class="token punctuation">.</span>observedRecord <span class="token operator">=</span> leaderElectionRecord
		le<span class="token punctuation">.</span>observedTime <span class="token operator">=</span> le<span class="token punctuation">.</span>clock<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token boolean">true</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">// 2. Record obtained, check the Identity &amp; Time</span>
	<span class="token keyword">if</span> <span class="token operator">!</span>reflect<span class="token punctuation">.</span><span class="token function">DeepEqual</span><span class="token punctuation">(</span>le<span class="token punctuation">.</span>observedRecord<span class="token punctuation">,</span> <span class="token operator">*</span>oldLeaderElectionRecord<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		le<span class="token punctuation">.</span>observedRecord <span class="token operator">=</span> <span class="token operator">*</span>oldLeaderElectionRecord
		le<span class="token punctuation">.</span>observedTime <span class="token operator">=</span> le<span class="token punctuation">.</span>clock<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>oldLeaderElectionRecord<span class="token punctuation">.</span>HolderIdentity<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>
		le<span class="token punctuation">.</span>observedTime<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>le<span class="token punctuation">.</span>config<span class="token punctuation">.</span>LeaseDuration<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">After</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span>Time<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
		<span class="token operator">!</span>le<span class="token punctuation">.</span><span class="token function">IsLeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		klog<span class="token punctuation">.</span><span class="token function">V</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span><span class="token string">"lock is held by %v and has not yet expired"</span><span class="token punctuation">,</span> oldLeaderElectionRecord<span class="token punctuation">.</span>HolderIdentity<span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token boolean">false</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">// 3. We're going to try to update. The leaderElectionRecord is set to it's default</span>
	<span class="token comment">// here. Let's correct it before updating.</span>
	<span class="token keyword">if</span> le<span class="token punctuation">.</span><span class="token function">IsLeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		leaderElectionRecord<span class="token punctuation">.</span>AcquireTime <span class="token operator">=</span> oldLeaderElectionRecord<span class="token punctuation">.</span>AcquireTime
		leaderElectionRecord<span class="token punctuation">.</span>LeaderTransitions <span class="token operator">=</span> oldLeaderElectionRecord<span class="token punctuation">.</span>LeaderTransitions
	<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
		leaderElectionRecord<span class="token punctuation">.</span>LeaderTransitions <span class="token operator">=</span> oldLeaderElectionRecord<span class="token punctuation">.</span>LeaderTransitions <span class="token operator">+</span> <span class="token number">1</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">// update the lock itself</span>
	<span class="token keyword">if</span> err <span class="token operator">=</span> le<span class="token punctuation">.</span>config<span class="token punctuation">.</span>Lock<span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span>leaderElectionRecord<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		klog<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"Failed to update lock: %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token boolean">false</span>
	<span class="token punctuation">&#125;</span>
	le<span class="token punctuation">.</span>observedRecord <span class="token operator">=</span> leaderElectionRecord
	le<span class="token punctuation">.</span>observedTime <span class="token operator">=</span> le<span class="token punctuation">.</span>clock<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> <span class="token boolean">true</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>逻辑也不复杂，主要也就是调用Lock存储的<code>Get()</code>、<code>Create()</code>和<code>Update</code>函数。那关于控制部分的逻辑基本就差不多了。</p>
<p>下面来看看存储相关的逻辑，入口代码在<a href="https://github.com/kubernetes/kubernetes/blob/v1.16.15/cmd/kube-scheduler/app/options/options.go#L261">cmd&#x2F;kube-scheduler&#x2F;app&#x2F;options&#x2F;options.go</a></p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">makeLeaderElectionConfig</span><span class="token punctuation">(</span>config kubeschedulerconfig<span class="token punctuation">.</span>KubeSchedulerLeaderElectionConfiguration<span class="token punctuation">,</span> client clientset<span class="token punctuation">.</span>Interface<span class="token punctuation">,</span> recorder record<span class="token punctuation">.</span>EventRecorder<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>leaderelection<span class="token punctuation">.</span>LeaderElectionConfig<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	hostname<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Hostname</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"unable to get hostname: %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	<span class="token comment">// add a uniquifier so that two processes on the same host don't accidentally both become active</span>
	id <span class="token operator">:=</span> hostname <span class="token operator">+</span> <span class="token string">"_"</span> <span class="token operator">+</span> <span class="token function">string</span><span class="token punctuation">(</span>uuid<span class="token punctuation">.</span><span class="token function">NewUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

	rl<span class="token punctuation">,</span> err <span class="token operator">:=</span> resourcelock<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>ResourceLock<span class="token punctuation">,</span>
		config<span class="token punctuation">.</span>ResourceNamespace<span class="token punctuation">,</span>
		config<span class="token punctuation">.</span>ResourceName<span class="token punctuation">,</span>
		client<span class="token punctuation">.</span><span class="token function">CoreV1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		client<span class="token punctuation">.</span><span class="token function">CoordinationV1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		resourcelock<span class="token punctuation">.</span>ResourceLockConfig<span class="token punctuation">&#123;</span>
			Identity<span class="token punctuation">:</span>      id<span class="token punctuation">,</span>
			EventRecorder<span class="token punctuation">:</span> recorder<span class="token punctuation">,</span>
		<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"couldn't create resource lock: %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">return</span> <span class="token operator">&amp;</span>leaderelection<span class="token punctuation">.</span>LeaderElectionConfig<span class="token punctuation">&#123;</span>
		Lock<span class="token punctuation">:</span>          rl<span class="token punctuation">,</span>
		LeaseDuration<span class="token punctuation">:</span> config<span class="token punctuation">.</span>LeaseDuration<span class="token punctuation">.</span>Duration<span class="token punctuation">,</span>
		RenewDeadline<span class="token punctuation">:</span> config<span class="token punctuation">.</span>RenewDeadline<span class="token punctuation">.</span>Duration<span class="token punctuation">,</span>
		RetryPeriod<span class="token punctuation">:</span>   config<span class="token punctuation">.</span>RetryPeriod<span class="token punctuation">.</span>Duration<span class="token punctuation">,</span>
		WatchDog<span class="token punctuation">:</span>      leaderelection<span class="token punctuation">.</span><span class="token function">NewLeaderHealthzAdaptor</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		Name<span class="token punctuation">:</span>          <span class="token string">"kube-scheduler"</span><span class="token punctuation">,</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>其中最重要的调用是<code>resourcelock.New()</code>这里根据Lock的类型，创建了不同的实例，我们继续看看K8S提供了哪些类型的<a href="https://github.com/kubernetes/kubernetes/blob/v1.16.15/staging/src/k8s.io/client-go/tools/leaderelection/resourcelock/interface.go#L93">实现</a>：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// Manufacture will create a lock of a given type according to the input parameters</span>
<span class="token keyword">func</span> <span class="token function">New</span><span class="token punctuation">(</span>lockType <span class="token builtin">string</span><span class="token punctuation">,</span> ns <span class="token builtin">string</span><span class="token punctuation">,</span> name <span class="token builtin">string</span><span class="token punctuation">,</span> coreClient corev1<span class="token punctuation">.</span>CoreV1Interface<span class="token punctuation">,</span> coordinationClient coordinationv1<span class="token punctuation">.</span>CoordinationV1Interface<span class="token punctuation">,</span> rlc ResourceLockConfig<span class="token punctuation">)</span> <span class="token punctuation">(</span>Interface<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">switch</span> lockType <span class="token punctuation">&#123;</span>
	<span class="token keyword">case</span> EndpointsResourceLock<span class="token punctuation">:</span>
		<span class="token keyword">return</span> <span class="token operator">&amp;</span>EndpointsLock<span class="token punctuation">&#123;</span>
			EndpointsMeta<span class="token punctuation">:</span> metav1<span class="token punctuation">.</span>ObjectMeta<span class="token punctuation">&#123;</span>
				Namespace<span class="token punctuation">:</span> ns<span class="token punctuation">,</span>
				Name<span class="token punctuation">:</span>      name<span class="token punctuation">,</span>
			<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
			Client<span class="token punctuation">:</span>     coreClient<span class="token punctuation">,</span>
			LockConfig<span class="token punctuation">:</span> rlc<span class="token punctuation">,</span>
		<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
	<span class="token keyword">case</span> ConfigMapsResourceLock<span class="token punctuation">:</span>
		<span class="token keyword">return</span> <span class="token operator">&amp;</span>ConfigMapLock<span class="token punctuation">&#123;</span>
			ConfigMapMeta<span class="token punctuation">:</span> metav1<span class="token punctuation">.</span>ObjectMeta<span class="token punctuation">&#123;</span>
				Namespace<span class="token punctuation">:</span> ns<span class="token punctuation">,</span>
				Name<span class="token punctuation">:</span>      name<span class="token punctuation">,</span>
			<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
			Client<span class="token punctuation">:</span>     coreClient<span class="token punctuation">,</span>
			LockConfig<span class="token punctuation">:</span> rlc<span class="token punctuation">,</span>
		<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
	<span class="token keyword">case</span> LeasesResourceLock<span class="token punctuation">:</span>
		<span class="token keyword">return</span> <span class="token operator">&amp;</span>LeaseLock<span class="token punctuation">&#123;</span>
			LeaseMeta<span class="token punctuation">:</span> metav1<span class="token punctuation">.</span>ObjectMeta<span class="token punctuation">&#123;</span>
				Namespace<span class="token punctuation">:</span> ns<span class="token punctuation">,</span>
				Name<span class="token punctuation">:</span>      name<span class="token punctuation">,</span>
			<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
			Client<span class="token punctuation">:</span>     coordinationClient<span class="token punctuation">,</span>
			LockConfig<span class="token punctuation">:</span> rlc<span class="token punctuation">,</span>
		<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
	<span class="token keyword">default</span><span class="token punctuation">:</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"Invalid lock-type %s"</span><span class="token punctuation">,</span> lockType<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>简单一看发现除了上面看到的<code>endpoints</code>、<code>configmaps</code>还多了个<code>leases</code>类型，具体的实现也比较简单，就用<code>endpoints</code>类型的<code>Create</code>举例吧：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// Create attempts to create a LeaderElectionRecord annotation</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>el <span class="token operator">*</span>EndpointsLock<span class="token punctuation">)</span> <span class="token function">Create</span><span class="token punctuation">(</span>ler LeaderElectionRecord<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>
	recordBytes<span class="token punctuation">,</span> err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span>ler<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> err
	<span class="token punctuation">&#125;</span>
	el<span class="token punctuation">.</span>e<span class="token punctuation">,</span> err <span class="token operator">=</span> el<span class="token punctuation">.</span>Client<span class="token punctuation">.</span><span class="token function">Endpoints</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span>EndpointsMeta<span class="token punctuation">.</span>Namespace<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v1<span class="token punctuation">.</span>Endpoints<span class="token punctuation">&#123;</span>
		ObjectMeta<span class="token punctuation">:</span> metav1<span class="token punctuation">.</span>ObjectMeta<span class="token punctuation">&#123;</span>
			Name<span class="token punctuation">:</span>      el<span class="token punctuation">.</span>EndpointsMeta<span class="token punctuation">.</span>Name<span class="token punctuation">,</span>
			Namespace<span class="token punctuation">:</span> el<span class="token punctuation">.</span>EndpointsMeta<span class="token punctuation">.</span>Namespace<span class="token punctuation">,</span>
			Annotations<span class="token punctuation">:</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span>
				LeaderElectionRecordAnnotationKey<span class="token punctuation">:</span> <span class="token function">string</span><span class="token punctuation">(</span>recordBytes<span class="token punctuation">)</span><span class="token punctuation">,</span>
			<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
		<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> err
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>就非常的简单，就是调用kubeclient的Endpoints相关接口，创建一个<code>Endpoints</code>，同样的，其他动作也是类似。</p>
<p>到这里其实大体上整个选主的逻辑也基本搞清楚了，似乎没什么大问题。但总觉得目前提供的这两个基于<code>endpoints</code>和<code>configmaps</code>的实现不怎么优雅。因为每个Node上，<code>kube-proxy</code>需要watch<code>endpoints</code>的变化、而<code>kubelet</code>又需要watch<code>configmaps</code>的变化。无论选择哪个，Lock的不停Renew都会Push到所有的节点，这在无形中也会对集群多造成一点点压力。</p>
<p>其实从官方的实现也可以看的出来，<code>leases</code>类型是独立的一个资源，没用其他的组件会watch这个资源，从一定程度上能解决这个问题，可惜的是因为有平滑升级的需求，不能直接切换到<code>leases</code>类型的Lock了。所以官方也在后续1.17版本做出了一些改进，具体的可以参考：<a href="https://github.com/kubernetes/kubernetes/pull/81030">migrate leader election to lease API #81030</a>，<a href="https://github.com/kubernetes/kubernetes/pull/84084">Migrate components to EndpointsLeases leader election lock #84084</a>。</p>
<p>说回我们自己的业务，暂时也没有升级K8S得欲望，好在当前我们机器上不需要InCluster类型访问<code>apiserver</code>，也没有ClusterIP的需求，所以其实不需要<code>kube-proxy</code>这个组件，一不做二不休，不如直接把<code>kube-proxy</code>给下线了，正好下线之后还能去掉对<code>ipvs</code>模块的依赖，刚好也能解决上篇疯狂输出日志的问题，一举两得。</p>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>leader-elect-resource-lock</tag>
        <tag>endpoints</tag>
        <tag>leases</tag>
      </tags>
  </entry>
  <entry>
    <title>一个简单的内核Socket Client例子</title>
    <url>/2017/01/16/kernel-sock-client-example/</url>
    <content><![CDATA[<p>一个简单的内核Socket Client例子，实现一个简单的客户端，发送一些数据到服务端，并从服务端接受数据打印到dmesg。在Linux 4.8.13内核测试通过。</p>
<span id="more"></span>

<p>client_example.c:</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;linux/in.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;linux/inet.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;linux/socket.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;net/sock.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;linux/init.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;linux/module.h></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">BUFFER_SIZE</span> <span class="token expression"><span class="token number">1024</span></span></span>

<span class="token keyword">int</span> <span class="token function">connect_send_recv</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">struct</span> <span class="token class-name">socket</span> <span class="token operator">*</span>sock<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> s_addr<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> port_num <span class="token operator">=</span> <span class="token number">8888</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>send_buf <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>recv_buf <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">kvec</span> send_vec<span class="token punctuation">,</span> recv_vec<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">msghdr</span> send_msg<span class="token punctuation">,</span> recv_msg<span class="token punctuation">;</span>

    <span class="token comment">/* kmalloc a send buffer*/</span>
    send_buf <span class="token operator">=</span> <span class="token function">kmalloc</span><span class="token punctuation">(</span>BUFFER_SIZE<span class="token punctuation">,</span> GFP_KERNEL<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>send_buf <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">"client: send_buf kmalloc error!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">/* kmalloc a receive buffer*/</span>
    recv_buf <span class="token operator">=</span> <span class="token function">kmalloc</span><span class="token punctuation">(</span>BUFFER_SIZE<span class="token punctuation">,</span> GFP_KERNEL<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>recv_buf <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">"client: recv_buf kmalloc error!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s_addr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>s_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    s_addr<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span>
    s_addr<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span>port_num<span class="token punctuation">)</span><span class="token punctuation">;</span>

    s_addr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr <span class="token operator">=</span> <span class="token function">in_aton</span><span class="token punctuation">(</span><span class="token string">"192.168.1.10"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    sock <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">socket</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">kmalloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">socket</span><span class="token punctuation">)</span><span class="token punctuation">,</span> GFP_KERNEL<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 创建一个sock, &amp;init_net是默认网络命名空间</span>
    ret <span class="token operator">=</span> <span class="token function">sock_create_kern</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>init_net<span class="token punctuation">,</span> AF_INET<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>sock<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">"client:socket create error!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">"client: socket create ok!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//连接</span>
    ret <span class="token operator">=</span> sock<span class="token operator">-></span>ops<span class="token operator">-></span><span class="token function">connect</span><span class="token punctuation">(</span>sock<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>s_addr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>s_addr<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">"client: connect error!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">"client: connect ok!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">memset</span><span class="token punctuation">(</span>send_buf<span class="token punctuation">,</span> <span class="token char">'a'</span><span class="token punctuation">,</span> BUFFER_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>send_msg<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>send_msg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>send_vec<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>send_vec<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    send_vec<span class="token punctuation">.</span>iov_base <span class="token operator">=</span> send_buf<span class="token punctuation">;</span>
    send_vec<span class="token punctuation">.</span>iov_len <span class="token operator">=</span> BUFFER_SIZE<span class="token punctuation">;</span>

    <span class="token comment">// 发送数据</span>
    ret <span class="token operator">=</span> <span class="token function">kernel_sendmsg</span><span class="token punctuation">(</span>sock<span class="token punctuation">,</span> <span class="token operator">&amp;</span>send_msg<span class="token punctuation">,</span> <span class="token operator">&amp;</span>send_vec<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> BUFFER_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">"client: kernel_sendmsg error!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">!=</span> BUFFER_SIZE<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">"client: ret!=BUFFER_SIZE"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">"client: send ok!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">memset</span><span class="token punctuation">(</span>recv_buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> BUFFER_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>recv_vec<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>recv_vec<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>recv_msg<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>recv_msg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    recv_vec<span class="token punctuation">.</span>iov_base <span class="token operator">=</span> recv_buf<span class="token punctuation">;</span>
    recv_vec<span class="token punctuation">.</span>iov_len <span class="token operator">=</span> BUFFER_SIZE<span class="token punctuation">;</span>

    <span class="token comment">// 接收数据</span>
    ret <span class="token operator">=</span> <span class="token function">kernel_recvmsg</span><span class="token punctuation">(</span>sock<span class="token punctuation">,</span> <span class="token operator">&amp;</span>recv_msg<span class="token punctuation">,</span> <span class="token operator">&amp;</span>recv_vec<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> BUFFER_SIZE<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">"client: received message:\n %s\n"</span><span class="token punctuation">,</span> recv_buf<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 关闭连接</span>
    <span class="token function">kernel_sock_shutdown</span><span class="token punctuation">(</span>sock<span class="token punctuation">,</span> SHUT_RDWR<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">sock_release</span><span class="token punctuation">(</span>sock<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">client_example_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">"client: init\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">connect_send_recv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">client_example_exit</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">"client: exit!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token function">module_init</span><span class="token punctuation">(</span>client_example_init<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">module_exit</span><span class="token punctuation">(</span>client_example_exit<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">MODULE_LICENSE</span><span class="token punctuation">(</span><span class="token string">"GPL"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>Makefile:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">obj-m :<span class="token operator">=</span> client_example.o
KDIR :<span class="token operator">=</span> /lib/modules/<span class="token variable"><span class="token variable">$(</span>shell <span class="token function">uname</span> <span class="token parameter variable">-r</span><span class="token variable">)</span></span>/build
<span class="token environment constant">PWD</span> :<span class="token operator">=</span> <span class="token variable"><span class="token variable">$(</span>shell <span class="token builtin class-name">pwd</span><span class="token variable">)</span></span>
default:
		<span class="token variable"><span class="token variable">$(</span>MAKE<span class="token variable">)</span></span> <span class="token parameter variable">-C</span> <span class="token variable"><span class="token variable">$(</span>KDIR<span class="token variable">)</span></span> <span class="token assign-left variable">SUBDIRS</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token environment constant">PWD</span><span class="token variable">)</span></span> modules<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在192.168.1.10上 <code>nc -lk 8888</code> 监听8888端口，作为服务端，等待数据后输入 <code>111111111111111</code>。</p>
<p>客户端：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">make</span>
<span class="token function">sudo</span> insmod client_example.ko <span class="token comment">#加载模块</span>
<span class="token function">sudo</span> rmmod client_example     <span class="token comment">#卸载模块</span>
<span class="token function">sudo</span> journalctl <span class="token parameter variable">-k</span>            <span class="token comment">#查看dmesg</span>

Jan <span class="token number">16</span> <span class="token number">10</span>:50:58 work kernel: client: init
Jan <span class="token number">16</span> <span class="token number">10</span>:50:58 work kernel: client: socket create ok<span class="token operator">!</span>
Jan <span class="token number">16</span> <span class="token number">10</span>:50:58 work kernel: client: connect ok<span class="token operator">!</span>
Jan <span class="token number">16</span> <span class="token number">10</span>:50:58 work kernel: client: send ok<span class="token operator">!</span>
Jan <span class="token number">16</span> <span class="token number">10</span>:51:10 work kernel: client: received message:
                             <span class="token number">111111111111111</span>
                             Jan <span class="token number">16</span> <span class="token number">10</span>:51:22 sae kernel: client: exit<span class="token operator">!</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>服务端：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">nc</span> <span class="token parameter variable">-lk</span> <span class="token number">8888</span>
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa111111111111111<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>Linux Kernel</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Kernel</tag>
        <tag>Socket</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes DNS-Based Service Discovery 翻译</title>
    <url>/2018/05/17/kube-dns-spec/</url>
    <content><![CDATA[<p>本文是<a href="https://github.com/kubernetes/dns/blob/707da5e449f6000e1ce0b92f1a13b966d262dbb2/docs/specification.md">Kubernetes DNS-Based Service Discovery</a>的翻译，也就是Kubernetes DNS specification的翻译，目前最新版本号是1.0.1。</p>
<h2 id="0-关于此文档"><a href="#0-关于此文档" class="headerlink" title="0 - 关于此文档"></a>0 - 关于此文档</h2><p>本文档是Kubernetes基于DNS的服务发现的规范说明，尽管在Kubernetes中还有其他方式的服务发现协议和机制，但是DNS仍然是最常见而且是最推荐使用的扩展。实际的DNS服务并不一定由由默认的Kube-DNS提供。 本文档旨在为所有实现之间的通用性提供相应的基准。</p>
<span id="more"></span>

<h2 id="1-Schema-版本"><a href="#1-Schema-版本" class="headerlink" title="1 - Schema 版本"></a>1 - Schema 版本</h2><p>本文档描述了Schema版本1.0.1。</p>
<h2 id="2-资源记录"><a href="#2-资源记录" class="headerlink" title="2 - 资源记录"></a>2 - 资源记录</h2><p>所有的基于DNS的Kubernetes服务发现方案必须兼容并提供以下所说明的所有的资源的对应记录（resource records or RRs）。</p>
<h3 id="2-1-定义"><a href="#2-1-定义" class="headerlink" title="2.1 - 定义"></a>2.1 - 定义</h3><p>在以下的资源记录描述中，不在&lt;&gt;中的是普通文字，&lt;&gt;中的值的含义在下面或者特定记录的描述中说明：</p>
<ul>
<li><code>&lt;zone&gt;</code> &#x3D; 集群domain, 比如 cluster.local</li>
<li><code>&lt;ns&gt;</code> &#x3D; 一个命名空间（namespace）</li>
<li><code>&lt;ttl&gt;</code> &#x3D; DNS TTL （time-to-live）</li>
</ul>
<p>在下面的描述中，以下定义应用于_斜体_文字。</p>
<p><em>hostname</em></p>
<ul>
<li>按照优先顺序, 一个<code>endpoint</code>的 <em>hostname</em> 是:<ul>
<li><code>endpoint</code>的 <code>hostname</code>字段值.</li>
<li>系统为<code>endpoint</code>分配的唯一标识符。本标准不规定该标识符的确切格式和来源，但是该标识符必须可以表示一个特定端点。</li>
</ul>
</li>
</ul>
<p><em>ready</em></p>
<ul>
<li>当一个<code>endpoint</code>的地址已经存在于EndpointSubset对象的<code>addresses</code>字段中，或者对应<code>service</code>的<code>service.alpha.kubernetes.io/tolerate-unready-endpoints</code>注释被标记为<code>true</code>，则认为该<code>endpoint</code> _ready_了，</li>
</ul>
<p>所有查询数据和Kubernetes数据都是<strong>不区分大小写</strong>的。</p>
<h3 id="2-2-Schema-版本的记录"><a href="#2-2-Schema-版本的记录" class="headerlink" title="2.2 - Schema 版本的记录"></a>2.2 - Schema 版本的记录</h3><p>必须有一条<code>TXT</code>记录<code>dns-version.&lt;zone&gt;.</code>包含该集群DNS使用的Schema 版本。</p>
<ul>
<li>记录格式:<ul>
<li><code>dns-version.&lt;zone&gt;. &lt;ttl&gt; IN TXT &lt;schema-version&gt;</code></li>
</ul>
</li>
<li>查询示例:<ul>
<li><code>dns-version.cluster.local. IN TXT</code></li>
</ul>
</li>
<li>返回示例:<ul>
<li><code>dns-version.cluster.local. 28800 IN TXT &quot;1.0.0&quot;</code></li>
</ul>
</li>
</ul>
<h3 id="2-3-针对带有ClusterIP的Service的记录"><a href="#2-3-针对带有ClusterIP的Service的记录" class="headerlink" title="2.3 - 针对带有ClusterIP的Service的记录"></a>2.3 - 针对带有ClusterIP的Service的记录</h3><p>针对一个ClusterIP为<code>&lt;cluster-ip&gt;</code>、在<code>&lt;ns&gt;</code>命名空间下的<code>&lt;service&gt;</code>服务，下面的记录必须存在：</p>
<h4 id="2-3-1-A-记录"><a href="#2-3-1-A-记录" class="headerlink" title="2.3.1 - A 记录"></a>2.3.1 - <code>A</code> 记录</h4><ul>
<li>记录格式:<ul>
<li><code>&lt;service&gt;.&lt;ns&gt;.svc.&lt;zone&gt;. &lt;ttl&gt; IN A &lt;cluster-ip&gt;</code></li>
</ul>
</li>
<li>查询示例:<ul>
<li><code>kubernetes.default.svc.cluster.local. IN A</code></li>
</ul>
</li>
<li>返回示例:<ul>
<li><code>kubernetes.default.svc.cluster.local. 4 IN A 10.3.0.1</code></li>
</ul>
</li>
</ul>
<h4 id="2-3-2-SRV-记录"><a href="#2-3-2-SRV-记录" class="headerlink" title="2.3.2 - SRV 记录"></a>2.3.2 - <code>SRV</code> 记录</h4><p>针对每一个名字为<code>&lt;port&gt;</code>、端口为<code>&lt;port-number&gt;</code>、 协议为<code>&lt;proto&gt;</code>的Port对象, 下面的<code>SRV</code>记录必须存在：</p>
<ul>
<li>记录格式:<ul>
<li><code>_&lt;port&gt;._&lt;proto&gt;.&lt;service&gt;.&lt;ns&gt;.svc.&lt;zone&gt;. &lt;ttl&gt; IN SRV &lt;weight&gt; &lt;priority&gt; &lt;port-number&gt; &lt;service&gt;.&lt;ns&gt;.svc.&lt;zone&gt;.</code></li>
</ul>
</li>
</ul>
<p>其中优先级<code>&lt;priority&gt;</code>和权重<code>&lt;weight&gt;</code>在<a href="https://tools.ietf.org/html/rfc2782">RFC2782</a>定义。</p>
<p>没有命名的port没有<code>SRV</code>记录。</p>
<ul>
<li>查询示例:<ul>
<li><code>_https._tcp.kubernetes.default.svc.cluster.local. IN SRV</code></li>
</ul>
</li>
<li>返回示例:<ul>
<li><code>_https._tcp.kubernetes.default.svc.cluster.local. 30 IN SRV 10 100 443 kubernetes.default.svc.cluster.local.</code></li>
</ul>
</li>
</ul>
<p>服务的<code>A</code>记录有可能随着<code>SRV</code>记录的附加部分一同返回。</p>
<h4 id="2-3-3-PTR-记录"><a href="#2-3-3-PTR-记录" class="headerlink" title="2.3.3 - PTR 记录"></a>2.3.3 - <code>PTR</code> 记录</h4><p>针对一个服务的ClusterIP <code>&lt;a&gt;.&lt;b&gt;.&lt;c&gt;.&lt;d&gt;</code>, 必须存在一个如下的<code>PTR</code>记录:</p>
<ul>
<li>记录格式:<ul>
<li><code>&lt;d&gt;.&lt;c&gt;.&lt;b&gt;.&lt;a&gt;.in-addr.arpa. &lt;ttl&gt; IN PTR &lt;service&gt;.&lt;ns&gt;.svc.&lt;zone&gt;.</code></li>
</ul>
</li>
<li>查询示例:<ul>
<li><code>1.0.3.10.in-addr.arpa. IN PTR</code></li>
</ul>
</li>
<li>返回示例:<ul>
<li><code>1.0.3.10.in-addr.arpa. 14 IN PTR kubernetes.default.svc.cluster.local.</code></li>
</ul>
</li>
</ul>
<h3 id="2-4-针对Headless-Service的记录"><a href="#2-4-针对Headless-Service的记录" class="headerlink" title="2.4 - 针对Headless Service的记录"></a>2.4 - 针对Headless Service的记录</h3><p>针对一个在<code>&lt;ns&gt;</code>命名空间中名为<code>&lt;service&gt;</code>的Headless Service（比如一个没有ClusterIP的Service），下面的记录必须存在：</p>
<h4 id="2-4-1-A-记录"><a href="#2-4-1-A-记录" class="headerlink" title="2.4.1 - A 记录"></a>2.4.1 - <code>A</code> 记录</h4><p>针对每一个处于_ready_状态、IP地址为<code>&lt;endpoint-ip&gt;</code>的endpoint，必须有对应的一条A记录存在，<br>如果没有处于_ready_状态的endpoint，返回必须没有<code>A</code>记录，但是，如果服务存在，查询会得到一个空的返回并且<code>rcode</code>为0，而不是得到一个<code>NXDOMAIN</code>结果。</p>
<ul>
<li>记录格式:<ul>
<li><code>&lt;service&gt;.&lt;ns&gt;.svc.&lt;zone&gt;. &lt;ttl&gt; IN A &lt;endpoint-ip&gt;</code></li>
</ul>
</li>
<li>查询示例:<ul>
<li><code>headless.default.svc.cluster.local. IN A</code></li>
</ul>
</li>
<li>返回示例:<pre class="line-numbers language-none"><code class="language-none">headless.default.svc.cluster.local. 4 IN A 10.3.0.1
headless.default.svc.cluster.local. 4 IN A 10.3.0.2
headless.default.svc.cluster.local. 4 IN A 10.3.0.3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
</ul>
<p>针对每个拥有_hostname_为<code>&lt;hostname&gt;</code>、IP为<code>&lt;endpoint-ip&gt;</code>，状态为_ready_的endpoint，必须有一条<code>A</code>记录，如果名_hostname_的主机有多个IP，则每个IP也会有一个<code>A</code>记录。</p>
<ul>
<li>记录格式:<ul>
<li><code>&lt;hostname&gt;.&lt;service&gt;.&lt;ns&gt;.svc.&lt;zone&gt;. &lt;ttl&gt; IN A &lt;endpoint-ip&gt;</code></li>
</ul>
</li>
<li>查询示例:<ul>
<li><code>my-pet.headless.default.svc.cluster.local. IN A</code></li>
</ul>
</li>
<li>返回示例:<ul>
<li><code>my-pet.headless.default.svc.cluster.local. 4 IN A 10.3.0.100</code></li>
</ul>
</li>
</ul>
<h4 id="2-4-2-SRV-记录"><a href="#2-4-2-SRV-记录" class="headerlink" title="2.4.2 - SRV 记录"></a>2.4.2 - <code>SRV</code> 记录</h4><p>针对每个拥有_hostname_为<code>&lt;hostname&gt;</code>、IP为<code>&lt;endpoint-ip&gt;</code>，状态为_ready_的endpoint和一个名字为<code>&lt;port&gt;</code>、端口为<code>&lt;port-number&gt;</code>、 协议为<code>&lt;proto&gt;</code>的Service组合, 下面的<code>SRV</code>记录必须存在：</p>
<ul>
<li>记录格式:<ul>
<li><code>_&lt;port&gt;._&lt;proto&gt;.&lt;service&gt;.&lt;ns&gt;.svc.&lt;zone&gt;. &lt;ttl&gt; IN SRV &lt;weight&gt; &lt;priority&gt; &lt;port-number&gt; &lt;hostname&gt;.&lt;service&gt;.&lt;ns&gt;.svc.&lt;zone&gt;.</code></li>
</ul>
</li>
</ul>
<p>这意味着如果有<strong>N</strong>个_ready_的endpoints，并且Service定义了<strong>M</strong>个有名字的端口，那么就会有<strong>N</strong> :heavy_multiplication_x: <strong>M</strong>个<code>SRV</code>记录。</p>
<p>其中优先级<code>&lt;priority&gt;</code>和权重<code>&lt;weight&gt;</code>在<a href="https://tools.ietf.org/html/rfc2782">RFC2782</a>定义。</p>
<p>没有命名的port没有<code>SRV</code>记录。</p>
<ul>
<li>查询示例:<ul>
<li><code>_https._tcp.headless.default.svc.cluster.local. IN SRV</code></li>
</ul>
</li>
<li>返回示例:<pre class="line-numbers language-none"><code class="language-none">_https._tcp.headless.default.svc.cluster.local. 4 IN SRV 10 100 443 my-pet.headless.default.svc.cluster.local.
_https._tcp.headless.default.svc.cluster.local. 4 IN SRV 10 100 443 my-pet-2.headless.default.svc.cluster.local.
_https._tcp.headless.default.svc.cluster.local. 4 IN SRV 10 100 443 438934893.headless.default.svc.cluster.local.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
</ul>
<p>服务的<code>A</code>记录有可能随着<code>SRV</code>记录的附加部分一同返回。</p>
<h4 id="2-4-3-PTR记录"><a href="#2-4-3-PTR记录" class="headerlink" title="2.4.3 - PTR记录"></a>2.4.3 - <code>PTR</code>记录</h4><p>针对一个_hostname_为<code>&lt;hostname&gt;</code>、IP地址为<code>&lt;a&gt;.&lt;b&gt;.&lt;c&gt;.&lt;d&gt;</code>状态为_ready_的endpoint，必须存在下面的<code>PTR</code>记录：</p>
<ul>
<li>记录格式:<ul>
<li><code>&lt;d&gt;.&lt;c&gt;.&lt;b&gt;.&lt;a&gt;.in-addr.arpa. &lt;ttl&gt; IN PTR &lt;hostname&gt;.&lt;service&gt;.&lt;ns&gt;.svc.&lt;zone&gt;.</code></li>
</ul>
</li>
<li>查询示例:<ul>
<li><code>100.0.3.10.in-addr.arpa. IN PTR</code></li>
</ul>
</li>
<li>返回示例:<ul>
<li><code>100.0.3.10.in-addr.arpa. 14 IN PTR my-pet.headless.default.svc.cluster.local.</code></li>
</ul>
</li>
</ul>
<h3 id="2-5-针对External-Name-Services的记录"><a href="#2-5-针对External-Name-Services的记录" class="headerlink" title="2.5 - 针对External Name Services的记录"></a>2.5 - 针对External Name Services的记录</h3><p>针对一个在<code>&lt;ns&gt;</code>命名空间中名字为<code>&lt;service&gt;</code>、ExternalName名字为<code>&lt;extname&gt;</code>的Service，必须存在一条<code>CNAME</code>记录<code>&lt;service&gt;.&lt;ns&gt;.svc.&lt;zone&gt;</code>指向<code>&lt;extname&gt;</code>：</p>
<ul>
<li>记录格式:<ul>
<li><code>&lt;service&gt;.&lt;ns&gt;.svc.&lt;zone&gt;. &lt;ttl&gt; IN CNAME &lt;extname&gt;.</code></li>
</ul>
</li>
<li>查询示例:<ul>
<li><code>foo.default.svc.cluster.local. IN A</code></li>
</ul>
</li>
<li>返回示例:<ul>
<li><code>foo.default.svc.cluster.local. 10 IN CNAME www.example.com.</code></li>
<li><code>www.example.com. 28715 IN A 192.0.2.53</code></li>
</ul>
</li>
</ul>
<h3 id="2-6-被废弃的记录"><a href="#2-6-被废弃的记录" class="headerlink" title="2.6 - 被废弃的记录"></a>2.6 - 被废弃的记录</h3><p>在本规范之前的Kube-DNS实现也会对对在0-255之间的<code>&lt;a&gt;</code>, <code>&lt;b&gt;</code>, <code>&lt;c&gt;</code>, and <code>&lt;d&gt;</code>作出如下的<code>A</code>记录回复：</p>
<ul>
<li>记录格式:<ul>
<li><code>&lt;a&gt;-&lt;b&gt;-&lt;c&gt;-&lt;d&gt;.&lt;ns&gt;.pod.&lt;zone&gt;. &lt;ttl&gt; IN A &lt;a&gt;.&lt;b&gt;.&lt;c&gt;.&lt;d&gt;</code></li>
</ul>
</li>
</ul>
<p>针对本规范这个行为被废弃了，但是仍然需要实现，该特性会在未来的版本中被移除。</p>
<h2 id="3-Schema扩展"><a href="#3-Schema扩展" class="headerlink" title="3 - Schema扩展"></a>3 - Schema扩展</h2><p>具体的实现可以针对本Schema进行扩展，但是本文档中所述的所有记录必须是所实现记录的子集。</p>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>kube-dns</tag>
        <tag>specification</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes CronJob Controller源码分析</title>
    <url>/2018/05/10/k8s-cronjob-source-code/</url>
    <content><![CDATA[<p>最近的一个项目需要用到Kubernetes的CronJob，主要用来定时执行一个备份任务，刚开始使用的时候发现没有按照预期的情况运行，所以决定看看<code>CronJob Controller</code>的代码，看看他是怎么实现对应的功能的，正好发现网上也没有其他人写过关于<code>CronJob Controller</code>代码的解析（可能是太简单了不用写吧）。所以也就正好记录一下。</p>
<p><code>CronJob Controller</code>的代码在<code>kubernetes/pkg/controller/cronjob</code>路径下，主要的逻辑实现在这个目录的<code>cronjob_controller.go</code>，这里分析的是<code>v1.10.2</code>版本的代码，可以直接链接到<a href="https://github.com/kubernetes/kubernetes/blob/v1.10.2/pkg/controller/cronjob/cronjob_controller.go">Github</a>查看。</p>
<span id="more"></span>

<p>我们直接跳过创建Controller的过程，直接看运行的部分：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>jm <span class="token operator">*</span>CronJobController<span class="token punctuation">)</span> <span class="token function">Run</span><span class="token punctuation">(</span>stopCh <span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">defer</span> utilruntime<span class="token punctuation">.</span><span class="token function">HandleCrash</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	glog<span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span><span class="token string">"Starting CronJob Manager"</span><span class="token punctuation">)</span>
	<span class="token comment">// Check things every 10 second.</span>
	<span class="token keyword">go</span> wait<span class="token punctuation">.</span><span class="token function">Until</span><span class="token punctuation">(</span>jm<span class="token punctuation">.</span>syncAll<span class="token punctuation">,</span> <span class="token number">10</span><span class="token operator">*</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span> stopCh<span class="token punctuation">)</span>
	<span class="token operator">&lt;-</span>stopCh
	glog<span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span><span class="token string">"Shutting down CronJob Manager"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这个很简单，每隔10s去执行一次syncAll这个方法，然后我们再看看这个方法：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>jm <span class="token operator">*</span>CronJobController<span class="token punctuation">)</span> <span class="token function">syncAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">// List children (Jobs) before parents (CronJob).</span>
	<span class="token comment">// This guarantees that if we see any Job that got orphaned by the GC orphan finalizer,</span>
	<span class="token comment">// we must also see that the parent CronJob has non-nil DeletionTimestamp (see #42639).</span>
	<span class="token comment">// Note that this only works because we are NOT using any caches here.</span>
	<span class="token comment">// 先把所有的Job给列出来，主要是为了找到所有的CronJob和CronJob创建的Job的对应关系</span>
	jl<span class="token punctuation">,</span> err <span class="token operator">:=</span> jm<span class="token punctuation">.</span>kubeClient<span class="token punctuation">.</span><span class="token function">BatchV1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Jobs</span><span class="token punctuation">(</span>metav1<span class="token punctuation">.</span>NamespaceAll<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">List</span><span class="token punctuation">(</span>metav1<span class="token punctuation">.</span>ListOptions<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		utilruntime<span class="token punctuation">.</span><span class="token function">HandleError</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"can't list Jobs: %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">&#125;</span>
	js <span class="token operator">:=</span> jl<span class="token punctuation">.</span>Items
	glog<span class="token punctuation">.</span><span class="token function">V</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span><span class="token string">"Found %d jobs"</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>js<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token comment">// 这里列出来所有的CronJob</span>
	sjl<span class="token punctuation">,</span> err <span class="token operator">:=</span> jm<span class="token punctuation">.</span>kubeClient<span class="token punctuation">.</span><span class="token function">BatchV1beta1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">CronJobs</span><span class="token punctuation">(</span>metav1<span class="token punctuation">.</span>NamespaceAll<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">List</span><span class="token punctuation">(</span>metav1<span class="token punctuation">.</span>ListOptions<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		utilruntime<span class="token punctuation">.</span><span class="token function">HandleError</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"can't list CronJobs: %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">&#125;</span>
	sjs <span class="token operator">:=</span> sjl<span class="token punctuation">.</span>Items
	glog<span class="token punctuation">.</span><span class="token function">V</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span><span class="token string">"Found %d cronjobs"</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>sjs<span class="token punctuation">)</span><span class="token punctuation">)</span>

	<span class="token comment">// 获取一个map[uid][]Job，主要就是根据CronJob的UID将所有属于它的Job给聚合起来</span>
	jobsBySj <span class="token operator">:=</span> <span class="token function">groupJobsByParent</span><span class="token punctuation">(</span>js<span class="token punctuation">)</span>
	glog<span class="token punctuation">.</span><span class="token function">V</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span><span class="token string">"Found %d groups"</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>jobsBySj<span class="token punctuation">)</span><span class="token punctuation">)</span>

	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> sj <span class="token operator">:=</span> <span class="token keyword">range</span> sjs <span class="token punctuation">&#123;</span>
		<span class="token comment">// 针对每个CronJob调用syncOne</span>
		<span class="token function">syncOne</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sj<span class="token punctuation">,</span> jobsBySj<span class="token punctuation">[</span>sj<span class="token punctuation">.</span>UID<span class="token punctuation">]</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> jm<span class="token punctuation">.</span>jobControl<span class="token punctuation">,</span> jm<span class="token punctuation">.</span>sjControl<span class="token punctuation">,</span> jm<span class="token punctuation">.</span>podControl<span class="token punctuation">,</span> jm<span class="token punctuation">.</span>recorder<span class="token punctuation">)</span>
		<span class="token comment">// 根据相应的配置，主要是SuccessfulJobsHistoryLimit和FailedJobsHistoryLimit删除掉多余的Job</span>
		<span class="token function">cleanupFinishedJobs</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sj<span class="token punctuation">,</span> jobsBySj<span class="token punctuation">[</span>sj<span class="token punctuation">.</span>UID<span class="token punctuation">]</span><span class="token punctuation">,</span> jm<span class="token punctuation">.</span>jobControl<span class="token punctuation">,</span> jm<span class="token punctuation">.</span>sjControl<span class="token punctuation">,</span> jm<span class="token punctuation">.</span>podControl<span class="token punctuation">,</span> jm<span class="token punctuation">.</span>recorder<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>然后就走到了关键方法syncOne了：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">syncOne</span><span class="token punctuation">(</span>sj <span class="token operator">*</span>batchv1beta1<span class="token punctuation">.</span>CronJob<span class="token punctuation">,</span> js <span class="token punctuation">[</span><span class="token punctuation">]</span>batchv1<span class="token punctuation">.</span>Job<span class="token punctuation">,</span> now time<span class="token punctuation">.</span>Time<span class="token punctuation">,</span> jc jobControlInterface<span class="token punctuation">,</span> sjc sjControlInterface<span class="token punctuation">,</span> pc podControlInterface<span class="token punctuation">,</span> recorder record<span class="token punctuation">.</span>EventRecorder<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	nameForLog <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%s/%s"</span><span class="token punctuation">,</span> sj<span class="token punctuation">.</span>Namespace<span class="token punctuation">,</span> sj<span class="token punctuation">.</span>Name<span class="token punctuation">)</span>

	<span class="token comment">// 首先扫一遍所有的子Job，看是否有不在Active列表中的孤儿，以及已经执行完成但是还在Active列表中的Job，记录一下Event，删掉不对应的状态。</span>
	childrenJobs <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span>types<span class="token punctuation">.</span>UID<span class="token punctuation">]</span><span class="token builtin">bool</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> j <span class="token operator">:=</span> <span class="token keyword">range</span> js <span class="token punctuation">&#123;</span>
		childrenJobs<span class="token punctuation">[</span>j<span class="token punctuation">.</span>ObjectMeta<span class="token punctuation">.</span>UID<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>
		found <span class="token operator">:=</span> <span class="token function">inActiveList</span><span class="token punctuation">(</span><span class="token operator">*</span>sj<span class="token punctuation">,</span> j<span class="token punctuation">.</span>ObjectMeta<span class="token punctuation">.</span>UID<span class="token punctuation">)</span>
		<span class="token keyword">if</span> <span class="token operator">!</span>found <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">IsJobFinished</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			recorder<span class="token punctuation">.</span><span class="token function">Eventf</span><span class="token punctuation">(</span>sj<span class="token punctuation">,</span> v1<span class="token punctuation">.</span>EventTypeWarning<span class="token punctuation">,</span> <span class="token string">"UnexpectedJob"</span><span class="token punctuation">,</span> <span class="token string">"Saw a job that the controller did not create or forgot: %v"</span><span class="token punctuation">,</span> j<span class="token punctuation">.</span>Name<span class="token punctuation">)</span>
			<span class="token comment">// We found an unfinished job that has us as the parent, but it is not in our Active list.</span>
			<span class="token comment">// This could happen if we crashed right after creating the Job and before updating the status,</span>
			<span class="token comment">// or if our jobs list is newer than our sj status after a relist, or if someone intentionally created</span>
			<span class="token comment">// a job that they wanted us to adopt.</span>

			<span class="token comment">// TODO: maybe handle the adoption case?  Concurrency/suspend rules will not apply in that case, obviously, since we can't</span>
			<span class="token comment">// stop users from creating jobs if they have permission.  It is assumed that if a</span>
			<span class="token comment">// user has permission to create a job within a namespace, then they have permission to make any scheduledJob</span>
			<span class="token comment">// in the same namespace "adopt" that job.  ReplicaSets and their Pods work the same way.</span>
			<span class="token comment">// TBS: how to update sj.Status.LastScheduleTime if the adopted job is newer than any we knew about?</span>
		<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> found <span class="token operator">&amp;&amp;</span> <span class="token function">IsJobFinished</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token function">deleteFromActiveList</span><span class="token punctuation">(</span>sj<span class="token punctuation">,</span> j<span class="token punctuation">.</span>ObjectMeta<span class="token punctuation">.</span>UID<span class="token punctuation">)</span>
			<span class="token comment">// TODO: event to call out failure vs success.</span>
			recorder<span class="token punctuation">.</span><span class="token function">Eventf</span><span class="token punctuation">(</span>sj<span class="token punctuation">,</span> v1<span class="token punctuation">.</span>EventTypeNormal<span class="token punctuation">,</span> <span class="token string">"SawCompletedJob"</span><span class="token punctuation">,</span> <span class="token string">"Saw completed job: %v"</span><span class="token punctuation">,</span> j<span class="token punctuation">.</span>Name<span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">// Remove any job reference from the active list if the corresponding job does not exist any more.</span>
	<span class="token comment">// Otherwise, the cronjob may be stuck in active mode forever even though there is no matching</span>
	<span class="token comment">// job running.</span>
	<span class="token comment">// 然后再看一下Active里是否有一些不存在的Job，如果有，也删除掉</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> j <span class="token operator">:=</span> <span class="token keyword">range</span> sj<span class="token punctuation">.</span>Status<span class="token punctuation">.</span>Active <span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span> found <span class="token operator">:=</span> childrenJobs<span class="token punctuation">[</span>j<span class="token punctuation">.</span>UID<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">!</span>found <span class="token punctuation">&#123;</span>
			recorder<span class="token punctuation">.</span><span class="token function">Eventf</span><span class="token punctuation">(</span>sj<span class="token punctuation">,</span> v1<span class="token punctuation">.</span>EventTypeNormal<span class="token punctuation">,</span> <span class="token string">"MissingJob"</span><span class="token punctuation">,</span> <span class="token string">"Active job went missing: %v"</span><span class="token punctuation">,</span> j<span class="token punctuation">.</span>Name<span class="token punctuation">)</span>
			<span class="token function">deleteFromActiveList</span><span class="token punctuation">(</span>sj<span class="token punctuation">,</span> j<span class="token punctuation">.</span>UID<span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token comment">// 更新一下CronJob的状态</span>
	updatedSJ<span class="token punctuation">,</span> err <span class="token operator">:=</span> sjc<span class="token punctuation">.</span><span class="token function">UpdateStatus</span><span class="token punctuation">(</span>sj<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		glog<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"Unable to update status for %s (rv = %s): %v"</span><span class="token punctuation">,</span> nameForLog<span class="token punctuation">,</span> sj<span class="token punctuation">.</span>ResourceVersion<span class="token punctuation">,</span> err<span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">&#125;</span>
	<span class="token operator">*</span>sj <span class="token operator">=</span> <span class="token operator">*</span>updatedSJ

	<span class="token comment">// 判断CronJob是否删除，如果删除了就不管</span>
	<span class="token keyword">if</span> sj<span class="token punctuation">.</span>DeletionTimestamp <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token comment">// The CronJob is being deleted.</span>
		<span class="token comment">// Don't do anything other than updating status.</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">&#125;</span>
	<span class="token comment">// 判断是否是停止调度状态，如果是则不管</span>
	<span class="token keyword">if</span> sj<span class="token punctuation">.</span>Spec<span class="token punctuation">.</span>Suspend <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span>sj<span class="token punctuation">.</span>Spec<span class="token punctuation">.</span>Suspend <span class="token punctuation">&#123;</span>
		glog<span class="token punctuation">.</span><span class="token function">V</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span><span class="token string">"Not starting job for %s because it is suspended"</span><span class="token punctuation">,</span> nameForLog<span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">&#125;</span>
	<span class="token comment">// 这里先计算到目前为止需要执行的Job时间列表</span>
	times<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">getRecentUnmetScheduleTimes</span><span class="token punctuation">(</span><span class="token operator">*</span>sj<span class="token punctuation">,</span> now<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		recorder<span class="token punctuation">.</span><span class="token function">Eventf</span><span class="token punctuation">(</span>sj<span class="token punctuation">,</span> v1<span class="token punctuation">.</span>EventTypeWarning<span class="token punctuation">,</span> <span class="token string">"FailedNeedsStart"</span><span class="token punctuation">,</span> <span class="token string">"Cannot determine if job needs to be started: %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
		glog<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"Cannot determine if %s needs to be started: %v"</span><span class="token punctuation">,</span> nameForLog<span class="token punctuation">,</span> err<span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">&#125;</span>
	<span class="token comment">// TODO: handle multiple unmet start times, from oldest to newest, updating status as needed.</span>
	<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>times<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
		glog<span class="token punctuation">.</span><span class="token function">V</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span><span class="token string">"No unmet start times for %s"</span><span class="token punctuation">,</span> nameForLog<span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>times<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span> <span class="token punctuation">&#123;</span>
		glog<span class="token punctuation">.</span><span class="token function">V</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span><span class="token string">"Multiple unmet start times for %s so only starting last one"</span><span class="token punctuation">,</span> nameForLog<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	<span class="token comment">// 拿出最后需要执行的时间</span>
	scheduledTime <span class="token operator">:=</span> times<span class="token punctuation">[</span><span class="token function">len</span><span class="token punctuation">(</span>times<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
	tooLate <span class="token operator">:=</span> <span class="token boolean">false</span>
	<span class="token comment">// 如果存在StartingDeadlineSeconds配置，判断当前时间是否超过了执行时限</span>
	<span class="token keyword">if</span> sj<span class="token punctuation">.</span>Spec<span class="token punctuation">.</span>StartingDeadlineSeconds <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		tooLate <span class="token operator">=</span> scheduledTime<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> time<span class="token punctuation">.</span><span class="token function">Duration</span><span class="token punctuation">(</span><span class="token operator">*</span>sj<span class="token punctuation">.</span>Spec<span class="token punctuation">.</span>StartingDeadlineSeconds<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Before</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	<span class="token comment">// 如果超过了执行时限就不做了</span>
	<span class="token keyword">if</span> tooLate <span class="token punctuation">&#123;</span>
		glog<span class="token punctuation">.</span><span class="token function">V</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span><span class="token string">"Missed starting window for %s"</span><span class="token punctuation">,</span> nameForLog<span class="token punctuation">)</span>
		<span class="token comment">// TODO: generate an event for a miss.  Use a warning level event because it indicates a</span>
		<span class="token comment">// problem with the controller (restart or long queue), and is not expected by user either.</span>
		<span class="token comment">// Since we don't set LastScheduleTime when not scheduling, we are going to keep noticing</span>
		<span class="token comment">// the miss every cycle.  In order to avoid sending multiple events, and to avoid processing</span>
		<span class="token comment">// the sj again and again, we could set a Status.LastMissedTime when we notice a miss.</span>
		<span class="token comment">// Then, when we call getRecentUnmetScheduleTimes, we can take max(creationTimestamp,</span>
		<span class="token comment">// Status.LastScheduleTime, Status.LastMissedTime), and then so we won't generate</span>
		<span class="token comment">// and event the next time we process it, and also so the user looking at the status</span>
		<span class="token comment">// can see easily that there was a missed execution.</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">&#125;</span>
	<span class="token comment">// 如果ConcurrencyPolicy配置为Forbid即不允许并行执行但是现在有正在执行的Job也不会添加新的</span>
	<span class="token keyword">if</span> sj<span class="token punctuation">.</span>Spec<span class="token punctuation">.</span>ConcurrencyPolicy <span class="token operator">==</span> batchv1beta1<span class="token punctuation">.</span>ForbidConcurrent <span class="token operator">&amp;&amp;</span> <span class="token function">len</span><span class="token punctuation">(</span>sj<span class="token punctuation">.</span>Status<span class="token punctuation">.</span>Active<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
		<span class="token comment">// Regardless which source of information we use for the set of active jobs,</span>
		<span class="token comment">// there is some risk that we won't see an active job when there is one.</span>
		<span class="token comment">// (because we haven't seen the status update to the SJ or the created pod).</span>
		<span class="token comment">// So it is theoretically possible to have concurrency with Forbid.</span>
		<span class="token comment">// As long the as the invokations are "far enough apart in time", this usually won't happen.</span>
		<span class="token comment">//</span>
		<span class="token comment">// TODO: for Forbid, we could use the same name for every execution, as a lock.</span>
		<span class="token comment">// With replace, we could use a name that is deterministic per execution time.</span>
		<span class="token comment">// But that would mean that you could not inspect prior successes or failures of Forbid jobs.</span>
		glog<span class="token punctuation">.</span><span class="token function">V</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span><span class="token string">"Not starting job for %s because of prior execution still running and concurrency policy is Forbid"</span><span class="token punctuation">,</span> nameForLog<span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">&#125;</span>
	如果ConcurrencyPolicy配置为Replace并且有正在运行的Job则把对应的Job给删除掉
	<span class="token keyword">if</span> sj<span class="token punctuation">.</span>Spec<span class="token punctuation">.</span>ConcurrencyPolicy <span class="token operator">==</span> batchv1beta1<span class="token punctuation">.</span>ReplaceConcurrent <span class="token punctuation">&#123;</span>
		<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> j <span class="token operator">:=</span> <span class="token keyword">range</span> sj<span class="token punctuation">.</span>Status<span class="token punctuation">.</span>Active <span class="token punctuation">&#123;</span>
			<span class="token comment">// TODO: this should be replaced with server side job deletion</span>
			<span class="token comment">// currently this mimics JobReaper from pkg/kubectl/stop.go</span>
			glog<span class="token punctuation">.</span><span class="token function">V</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span><span class="token string">"Deleting job %s of %s that was still running at next scheduled start time"</span><span class="token punctuation">,</span> j<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> nameForLog<span class="token punctuation">)</span>

			job<span class="token punctuation">,</span> err <span class="token operator">:=</span> jc<span class="token punctuation">.</span><span class="token function">GetJob</span><span class="token punctuation">(</span>j<span class="token punctuation">.</span>Namespace<span class="token punctuation">,</span> j<span class="token punctuation">.</span>Name<span class="token punctuation">)</span>
			<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
				recorder<span class="token punctuation">.</span><span class="token function">Eventf</span><span class="token punctuation">(</span>sj<span class="token punctuation">,</span> v1<span class="token punctuation">.</span>EventTypeWarning<span class="token punctuation">,</span> <span class="token string">"FailedGet"</span><span class="token punctuation">,</span> <span class="token string">"Get job: %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
				<span class="token keyword">return</span>
			<span class="token punctuation">&#125;</span>
			<span class="token keyword">if</span> <span class="token operator">!</span><span class="token function">deleteJob</span><span class="token punctuation">(</span>sj<span class="token punctuation">,</span> job<span class="token punctuation">,</span> jc<span class="token punctuation">,</span> pc<span class="token punctuation">,</span> recorder<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
				<span class="token keyword">return</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token comment">// 根据CronJob Spec中JobTemplate的配置获取Job对象，其中Job对象的名字会加上scheduledTime计算出的Hash，目前是unix timestamp</span>
	jobReq<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">getJobFromTemplate</span><span class="token punctuation">(</span>sj<span class="token punctuation">,</span> scheduledTime<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		glog<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"Unable to make Job from template in %s: %v"</span><span class="token punctuation">,</span> nameForLog<span class="token punctuation">,</span> err<span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">&#125;</span>
	<span class="token comment">// 调用接口创建一个新的Job</span>
	jobResp<span class="token punctuation">,</span> err <span class="token operator">:=</span> jc<span class="token punctuation">.</span><span class="token function">CreateJob</span><span class="token punctuation">(</span>sj<span class="token punctuation">.</span>Namespace<span class="token punctuation">,</span> jobReq<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		recorder<span class="token punctuation">.</span><span class="token function">Eventf</span><span class="token punctuation">(</span>sj<span class="token punctuation">,</span> v1<span class="token punctuation">.</span>EventTypeWarning<span class="token punctuation">,</span> <span class="token string">"FailedCreate"</span><span class="token punctuation">,</span> <span class="token string">"Error creating job: %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">&#125;</span>
	glog<span class="token punctuation">.</span><span class="token function">V</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span><span class="token string">"Created Job %s for %s"</span><span class="token punctuation">,</span> jobResp<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> nameForLog<span class="token punctuation">)</span>
	recorder<span class="token punctuation">.</span><span class="token function">Eventf</span><span class="token punctuation">(</span>sj<span class="token punctuation">,</span> v1<span class="token punctuation">.</span>EventTypeNormal<span class="token punctuation">,</span> <span class="token string">"SuccessfulCreate"</span><span class="token punctuation">,</span> <span class="token string">"Created job %v"</span><span class="token punctuation">,</span> jobResp<span class="token punctuation">.</span>Name<span class="token punctuation">)</span>

	<span class="token comment">// ------------------------------------------------------------------ //</span>

	<span class="token comment">// If this process restarts at this point (after posting a job, but</span>
	<span class="token comment">// before updating the status), then we might try to start the job on</span>
	<span class="token comment">// the next time.  Actually, if we relist the SJs and Jobs on the next</span>
	<span class="token comment">// iteration of syncAll, we might not see our own status update, and</span>
	<span class="token comment">// then post one again.  So, we need to use the job name as a lock to</span>
	<span class="token comment">// prevent us from making the job twice (name the job with hash of its</span>
	<span class="token comment">// scheduled time).</span>

	<span class="token comment">// Add the just-started job to the status list.</span>
	<span class="token comment">// 将刚创建的Job加到CronJob的Active列表中，设置LastScheduleTime，更新CronJob</span>
	ref<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">getRef</span><span class="token punctuation">(</span>jobResp<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		glog<span class="token punctuation">.</span><span class="token function">V</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span><span class="token string">"Unable to make object reference for job for %s"</span><span class="token punctuation">,</span> nameForLog<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
		sj<span class="token punctuation">.</span>Status<span class="token punctuation">.</span>Active <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>sj<span class="token punctuation">.</span>Status<span class="token punctuation">.</span>Active<span class="token punctuation">,</span> <span class="token operator">*</span>ref<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	sj<span class="token punctuation">.</span>Status<span class="token punctuation">.</span>LastScheduleTime <span class="token operator">=</span> <span class="token operator">&amp;</span>metav1<span class="token punctuation">.</span>Time<span class="token punctuation">&#123;</span>Time<span class="token punctuation">:</span> scheduledTime<span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> sjc<span class="token punctuation">.</span><span class="token function">UpdateStatus</span><span class="token punctuation">(</span>sj<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		glog<span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span><span class="token string">"Unable to update status for %s (rv = %s): %v"</span><span class="token punctuation">,</span> nameForLog<span class="token punctuation">,</span> sj<span class="token punctuation">.</span>ResourceVersion<span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">return</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>整体逻辑还是比较简单和清晰的，其中有个获取需要执行的时间列表的方法<code>getRecentUnmetScheduleTimes</code>，可以再看一下：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">getRecentUnmetScheduleTimes</span><span class="token punctuation">(</span>sj batchv1beta1<span class="token punctuation">.</span>CronJob<span class="token punctuation">,</span> now time<span class="token punctuation">.</span>Time<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>time<span class="token punctuation">.</span>Time<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	starts <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>time<span class="token punctuation">.</span>Time<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
	<span class="token comment">// 使用robfig/cron对Schedule进行解析</span>
	sched<span class="token punctuation">,</span> err <span class="token operator">:=</span> cron<span class="token punctuation">.</span><span class="token function">ParseStandard</span><span class="token punctuation">(</span>sj<span class="token punctuation">.</span>Spec<span class="token punctuation">.</span>Schedule<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> starts<span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"Unparseable schedule: %s : %s"</span><span class="token punctuation">,</span> sj<span class="token punctuation">.</span>Spec<span class="token punctuation">.</span>Schedule<span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">// 判断初始时间，如果CronJob之前被执行过，则以上次执行实现为准，如果没有执行过，则以CronJob创建时间为准</span>
	<span class="token keyword">var</span> earliestTime time<span class="token punctuation">.</span>Time
	<span class="token keyword">if</span> sj<span class="token punctuation">.</span>Status<span class="token punctuation">.</span>LastScheduleTime <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		earliestTime <span class="token operator">=</span> sj<span class="token punctuation">.</span>Status<span class="token punctuation">.</span>LastScheduleTime<span class="token punctuation">.</span>Time
	<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
		<span class="token comment">// If none found, then this is either a recently created scheduledJob,</span>
		<span class="token comment">// or the active/completed info was somehow lost (contract for status</span>
		<span class="token comment">// in kubernetes says it may need to be recreated), or that we have</span>
		<span class="token comment">// started a job, but have not noticed it yet (distributed systems can</span>
		<span class="token comment">// have arbitrary delays).  In any case, use the creation time of the</span>
		<span class="token comment">// CronJob as last known start time.</span>
		earliestTime <span class="token operator">=</span> sj<span class="token punctuation">.</span>ObjectMeta<span class="token punctuation">.</span>CreationTimestamp<span class="token punctuation">.</span>Time
	<span class="token punctuation">&#125;</span>
	<span class="token comment">// 如果设置了StartingDeadlineSeconds，并且当前时间减去该值比初始时间还晚，那就以新的时间为准</span>
	<span class="token keyword">if</span> sj<span class="token punctuation">.</span>Spec<span class="token punctuation">.</span>StartingDeadlineSeconds <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token comment">// Controller is not going to schedule anything below this point</span>
		schedulingDeadline <span class="token operator">:=</span> now<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token operator">-</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> time<span class="token punctuation">.</span><span class="token function">Duration</span><span class="token punctuation">(</span><span class="token operator">*</span>sj<span class="token punctuation">.</span>Spec<span class="token punctuation">.</span>StartingDeadlineSeconds<span class="token punctuation">)</span><span class="token punctuation">)</span>

		<span class="token keyword">if</span> schedulingDeadline<span class="token punctuation">.</span><span class="token function">After</span><span class="token punctuation">(</span>earliestTime<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			earliestTime <span class="token operator">=</span> schedulingDeadline
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token comment">// 如果初始时间比现在还晚，直接跳过了</span>
	<span class="token keyword">if</span> earliestTime<span class="token punctuation">.</span><span class="token function">After</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>time<span class="token punctuation">.</span>Time<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
	<span class="token punctuation">&#125;</span>
	<span class="token comment">// 计算从初始时间到现在所有需要执行的任务的时间</span>
	<span class="token comment">// 主要有可能一个Cron会错过很多次执行，所以需要计算所有的，但是如果超过太多，也就没有意义了。只关注前100个</span>
	<span class="token keyword">for</span> t <span class="token operator">:=</span> sched<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span>earliestTime<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">!</span>t<span class="token punctuation">.</span><span class="token function">After</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span> t <span class="token operator">=</span> sched<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		starts <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>starts<span class="token punctuation">,</span> t<span class="token punctuation">)</span>
		<span class="token comment">// An object might miss several starts. For example, if</span>
		<span class="token comment">// controller gets wedged on friday at 5:01pm when everyone has</span>
		<span class="token comment">// gone home, and someone comes in on tuesday AM and discovers</span>
		<span class="token comment">// the problem and restarts the controller, then all the hourly</span>
		<span class="token comment">// jobs, more than 80 of them for one hourly scheduledJob, should</span>
		<span class="token comment">// all start running with no further intervention (if the scheduledJob</span>
		<span class="token comment">// allows concurrency and late starts).</span>
		<span class="token comment">//</span>
		<span class="token comment">// However, if there is a bug somewhere, or incorrect clock</span>
		<span class="token comment">// on controller's server or apiservers (for setting creationTimestamp)</span>
		<span class="token comment">// then there could be so many missed start times (it could be off</span>
		<span class="token comment">// by decades or more), that it would eat up all the CPU and memory</span>
		<span class="token comment">// of this controller. In that case, we want to not try to list</span>
		<span class="token comment">// all the missed start times.</span>
		<span class="token comment">//</span>
		<span class="token comment">// I've somewhat arbitrarily picked 100, as more than 80,</span>
		<span class="token comment">// but less than "lots".</span>
		<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>starts<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">100</span> <span class="token punctuation">&#123;</span>
			<span class="token comment">// We can't get the most recent times so just return an empty slice</span>
			<span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>time<span class="token punctuation">.</span>Time<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"Too many missed start time (> 100). Set or decrease .spec.startingDeadlineSeconds or check clock skew."</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> starts<span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>基本上主要的业务逻辑都在这里了，整体上看还是十分“暴力”和简单的，没有用到Informer等等类似的东西，就是不停轮询、计算需要执行的任务、添加任务。</p>
<p>需要吐槽一下的是，由于之前版本里K8s的CronJob名字叫ScheduledJob，后来改成了CronJob，导致代码里很多变量的命名都还是使用的ScheduledJob的缩写sj什么的，改名也不改变量名的，一开始看的时候就觉得这变量名怎么这么奇怪。</p>
<p>代码看完了，最后回到开头的问题，问题出在哪呢？最后发现其实是时区错了，<code>controller-mananger</code>运行的容器的时区是UTC时间，然而Unix Cron语法里没有时区概念，作为中国人当然是以北京时间为标准设置Cron，结果呢，差了8个小时~~囧。</p>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>源码分析</tag>
        <tag>Kubernetes</tag>
        <tag>CronJob</tag>
      </tags>
  </entry>
  <entry>
    <title>kubelet判断机器是否重启逻辑</title>
    <url>/2019/02/11/kubelet-boot-id/</url>
    <content><![CDATA[<p>如果K8s中某个Node节点重启，在Event信息中会有一条消息，大致内容如<code>Node xxxxx has been rebooted, boot id: xxx</code>，而如果是重启<code>kubelet</code>，则不会有这条消息，所以<code>kubelet</code>是怎么判断是自己重启了还是机器重启了呢？</p>
<p>搜索了一下代码，在<a href="https://github.com/kubernetes/kubernetes/blob/v1.10.12/pkg/kubelet/kubelet_node_status.go#L621">https://github.com/kubernetes/kubernetes/blob/v1.10.12/pkg/kubelet/kubelet_node_status.go#L621</a>这里，会判断上次记录的Node的BootID和当前从cAdvisor获取的BootID是否相同，如果不同则说明机器重启了。</p>
<p>那么<code>cAdvisor</code>是怎么获得这个BootID的呢？看了一下<code>cAdvisor</code>的文档，发现默认是从<code>/proc/sys/kernel/random/boot_id</code>这个文件读取的。针对这个文件，找到一段解析：</p>
<blockquote><p>&#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;random&#x2F;boot_id: A random ID that is regenerated on each boot. As such it can be used to identify the local machine’s current boot. It’s universally available on any recent Linux kernel. It’s a good and safe choice if you need to identify a specific boot on a specific booted kernel.</p>
</blockquote>
<p>是内核暴露的一个接口，每次启动都会随机生成一个ID，是一个比较通用和安全的判断启动的办法。</p>
<p>参考：</p>
<ol>
<li><a href="http://0pointer.de/blog/projects/ids.html">http://0pointer.de/blog/projects/ids.html</a></li>
</ol>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
        <tag>Kubelet</tag>
        <tag>BootID</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubelet启动报错Failed to start ContainerManager failed to initialize top level QOS containers</title>
    <url>/2019/12/06/kubelet-failed-to-initialize-top-level-qos-containers/</url>
    <content><![CDATA[<p>最近往K8s集群中添加节点的时候，发现部分节点的kubelet进程无法启动，导致节点处于NotReady状态。<code>journalctl -u kubelet</code>查看日志可以发现类似的日志：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">..</span><span class="token punctuation">..</span>
Nov <span class="token number">29</span> <span class="token number">23</span>:32:13 localhost kubelet<span class="token punctuation">[</span><span class="token number">3830</span><span class="token punctuation">]</span>: I1129 <span class="token number">23</span>:32:13.311881    <span class="token number">3830</span> server.go:333<span class="token punctuation">]</span> Adding debug handlers to kubelet server.
Nov <span class="token number">29</span> <span class="token number">23</span>:32:13 localhost kubelet<span class="token punctuation">[</span><span class="token number">3830</span><span class="token punctuation">]</span>: W1129 <span class="token number">23</span>:32:13.311922    <span class="token number">3830</span> cni.go:203<span class="token punctuation">]</span> Unable to update cni config: No networks found <span class="token keyword">in</span> /etc/cni/net.d
Nov <span class="token number">29</span> <span class="token number">23</span>:32:13 localhost kubelet<span class="token punctuation">[</span><span class="token number">3830</span><span class="token punctuation">]</span>: E1129 <span class="token number">23</span>:32:13.312092    <span class="token number">3830</span> kubelet.go:2192<span class="token punctuation">]</span> Container runtime network not ready: <span class="token assign-left variable">NetworkReady</span><span class="token operator">=</span>false reason:NetworkPluginNotReady message:docker: network plugin is not ready: cni config uninitialized
Nov <span class="token number">29</span> <span class="token number">23</span>:32:13 localhost kubelet<span class="token punctuation">[</span><span class="token number">3830</span><span class="token punctuation">]</span>: I1129 <span class="token number">23</span>:32:13.382130    <span class="token number">3830</span> kubelet_node_status.go:278<span class="token punctuation">]</span> Setting <span class="token function">node</span> annotation to <span class="token builtin class-name">enable</span> volume controller attach/detach
Nov <span class="token number">29</span> <span class="token number">23</span>:32:13 localhost kubelet<span class="token punctuation">[</span><span class="token number">3830</span><span class="token punctuation">]</span>: I1129 <span class="token number">23</span>:32:13.383695    <span class="token number">3830</span> cpu_manager.go:155<span class="token punctuation">]</span> <span class="token punctuation">[</span>cpumanager<span class="token punctuation">]</span> starting with none policy
Nov <span class="token number">29</span> <span class="token number">23</span>:32:13 localhost kubelet<span class="token punctuation">[</span><span class="token number">3830</span><span class="token punctuation">]</span>: I1129 <span class="token number">23</span>:32:13.383705    <span class="token number">3830</span> cpu_manager.go:156<span class="token punctuation">]</span> <span class="token punctuation">[</span>cpumanager<span class="token punctuation">]</span> reconciling every 10s
Nov <span class="token number">29</span> <span class="token number">23</span>:32:13 localhost kubelet<span class="token punctuation">[</span><span class="token number">3830</span><span class="token punctuation">]</span>: I1129 <span class="token number">23</span>:32:13.383713    <span class="token number">3830</span> policy_none.go:42<span class="token punctuation">]</span> <span class="token punctuation">[</span>cpumanager<span class="token punctuation">]</span> none policy: Start
Nov <span class="token number">29</span> <span class="token number">23</span>:32:13 localhost kubelet<span class="token punctuation">[</span><span class="token number">3830</span><span class="token punctuation">]</span>: F1129 <span class="token number">23</span>:32:13.384272    <span class="token number">3830</span> kubelet.go:1384<span class="token punctuation">]</span> Failed to start ContainerManager failed to initialize <span class="token function">top</span> level QOS containers: failed to update <span class="token function">top</span> level BestEffort QOS cgroup <span class="token builtin class-name">:</span> failed to <span class="token builtin class-name">set</span> supported cgroup subsystems <span class="token keyword">for</span> cgroup <span class="token punctuation">[</span>kubepods besteffort<span class="token punctuation">]</span>: Failed to <span class="token builtin class-name">set</span> config <span class="token keyword">for</span> supported subsystems <span class="token builtin class-name">:</span> failed to <span class="token function">write</span> <span class="token number">4611686018427387904</span> to hugetlb.1GB.limit_in_bytes: <span class="token function">open</span> /sys/fs/cgroup/hugetlb/kubepods.slice/kubepods-besteffort.slice/hugetlb.1GB.limit_in_bytes: no such <span class="token function">file</span> or directory
Nov <span class="token number">29</span> <span class="token number">23</span>:32:13 localhost systemd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>: kubelet.service: main process exited, <span class="token assign-left variable">code</span><span class="token operator">=</span>exited, <span class="token assign-left variable">status</span><span class="token operator">=</span><span class="token number">255</span>/n/a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<span id="more"></span>

<p>日志里的<code>Failed to start ContainerManager failed to initialize top level QOS containers: failed to update top level BestEffort QOS cgroup : failed to set supported cgroup subsystems for cgroup [kubepods besteffort]: Failed to set config for supported subsystems : failed to write 4611686018427387904 to hugetlb.1GB.limit_in_bytes: open /sys/fs/cgroup/hugetlb/kubepods.slice/kubepods-besteffort.slice/hugetlb.1GB.limit_in_bytes: no such file or directory</code>就是问题所在，查了一下，确实这个目录不存在，很奇怪，这个subsystem明明就是<code>kubelet</code>所创建的啊。</p>
<p>之前的做法就是重启一下这个节点，重启完成问题也解决了，不过显然重启不是最优解，于是还是动手查了一下，发现了这个issue： <a href="https://github.com/kubernetes/kubernetes/issues/43856">Failed to start ContainerManager failed to initialise top level QOS containers #43856</a>，虽然这个issue已经被修复关闭了，但实际我们还是遇到了类似的问题，好在评论里给出了一种解决办法，执行：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> <span class="token variable"><span class="token variable">$(</span>systemctl list-unit-files --no-legend --no-pager <span class="token parameter variable">-l</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">--color</span><span class="token operator">=</span>never <span class="token parameter variable">-o</span> .*.slice <span class="token operator">|</span> <span class="token function">grep</span> kubepod<span class="token variable">)</span></span><span class="token punctuation">;</span>
<span class="token keyword">do</span> systemctl stop <span class="token variable">$i</span><span class="token punctuation">;</span>
<span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>原理也很简单，就是停掉kubepod相关的systemd slice，经过测试，是可以解决问题的，简单点的方法，直接执行<code>systemctl stop kubepods.slice</code>后，再重启kubelet，问题也就解决了。</p>
<p>具体的深层次原因没有深究，可能的情况是默认kubelet依赖<code>kubepods.slice</code>、<code>kubepods-besteffort.slice</code>、<code>kubepods-burstable.slice</code>这三个subsystem，但是因为某些原因这三个并没有完整启动，导致启动kubelet失败，停止<code>kubepods.slice</code>之后，kubelet尝试重启所有的subsytem，问题解决。</p>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>cgroups</tag>
        <tag>Kubernetes</tag>
        <tag>Kubelet</tag>
      </tags>
  </entry>
  <entry>
    <title>实现一个Kubernetes的身份认证代理服务</title>
    <url>/2022/03/20/implement-a-k8s-authenticating-proxy/</url>
    <content><![CDATA[<p>最近接到一个需求：把K8s的认证和授权体系，整合到我们内部的系统中，使得我们内部系统的用户，可以无缝的直接访问K8s集群，同时也需要限制好用户对应namespace的权限。</p>
<p>对于需求的用户授权也就是authorization (authz)部分，实现思路还是比较简单的，毕竟K8s的<a href="https://kubernetes.io/zh/docs/reference/access-authn-authz/rbac/">RBAC</a>实现相对来说还是非常完善的，而且RBAC对于我们目前的用户和组织权限管理理念十分的接近。所以只需要将目前系统里的用户权限和组织关系，对应到一系列的RBAC Role和RoleBinding里，就可以实现对于用户权限的精细化控制。</p>
<p>而对于用户的认证authentication (authn)部分，K8s提供了非常多的<a href="https://kubernetes.io/zh/docs/reference/access-authn-authz/authentication/">身份认证策略</a>。但是如文档里明确的一点：</p>
<span id="more"></span>
<blockquote><p>Kubernetes 假定普通用户是由一个与集群无关的服务通过以下方式之一进行管理的：</p>
<ul>
<li>负责分发私钥的管理员</li>
<li>类似 Keystone 或者 Google Accounts 这类用户数据库</li>
<li>包含用户名和密码列表的文件<br>有鉴于此，Kubernetes 并不包含用来代表普通用户账号的对象。 普通用户的信息无法通过API调用添加到集群中。</li>
</ul>
</blockquote>

<p>K8s并不自己管理用户实体，所以是没有办法像RBAC那样，通过创建一个“User”资源，来把某个用户添加到集群里的。</p>
<p>其实这个特点，对于系统集成来说，可能更是一个优点，因为这直接避免了第三方系统的用户属性和K8s“用户”属性可能存在的不兼容问题。</p>
<p>而对于目前的需求而言，需要做到以下几点：</p>
<ol>
<li>最好是基于Token实现，并且这个Token由我们自己的系统生成，同一个Token，既可以调用原有的API，也可以调用K8s的API。</li>
<li>尽可能保证K8s兼容性，最好用户可以无缝的，不需要经过复杂的配置，直接使用kubectl访问到集群。</li>
<li>记录所有用户的访问记录以便于各种审计工作。</li>
</ol>
<p>针对这几个需求，又通读了一遍文档之后，最终决定使用<a href="https://kubernetes.io/zh/docs/reference/access-authn-authz/authentication/#authenticating-proxy">身份认证代理</a>这个方式，怎么理解呢：</p>
<p>K8s APIServer可以获取HTTP请求中的某些头部字段，根据头部字段的值来判断当前操作的用户。也就是说，如果实现一个反向代理服务器，由这个反向代理服务器实现Token的认证工作，确认用户请求的有效性，若用户请求有效，直接把用户的信息添加到HTTP请求头中，并代理到K8s Server，最终再由K8s中的RBAC规则，判断用户能否调用对应API。</p>
<p>这么做刚好能满足目前的需求，首先，Token的发放和验证完全和K8s没有关系，所以Token可以保持和原有系统保持不变；同样的，代理只是根据HTTP头进行验证并转发，也不会修改任何K8s API的调用方式和格式，所以也能保持很好的兼容性；又因为所有的用户请求都会经过代理服务器，所以代理服务器可以记录所有请求的详细信息，从而方便实现各种审计工作。</p>
<p>那么问题来了，K8s通过哪个HTTP Header获取用户信息呢？</p>
<p>APIServer提供了几个命令行参数：<code>--requestheader-username-headers</code>、<code>--requestheader-group-headers</code>、<code>--requestheader-extra-headers-prefix</code>，通过这几个参数来配置HTTP头的字段名称。<br>其中，只有<code>--requestheader-username-headers</code>这个参数是必须的，由于目前场景下只需要配置这一个参数就可以了。比如：添加<code>--requestheader-username-headers=X-Remote-User</code>到APIServer启动参数，APIServer就会从请求中获取X-Remote-User这个头，并用对应的值作为当前操作的用户。</p>
<p>事情还没有结束，既然APIServer会从请求头中获取用户名，那么问题来了，如何确保这个请求是可信的？如何防止恶意用户，伪造请求，绕过身份认证代理服务器，直接用假冒的请求访问APIServer怎么办？这样是不是就可以模拟任何用户访问了？那一定不行，得需要有个办法来验证代理服务器的身份。不过K8s的开发者们显然考虑到了这个问题，所以APIServer提供了<code>--requestheader-client-ca-file</code>和<code>--requestheader-allowed-names</code>两个额外的参数，其中<code>--requestheader-client-ca-file</code>是必须的，用来指定认证代理服务器证书的CA位置，如果同时指定<code>--requestheader-allowed-names</code>，则在验证客户端证书发行者的同时，还会验证客户端证书的CN字段，确保不会有人用其他证书模仿代理服务器。</p>
<p>说到这里，整个解决方案的思路就已经比较清楚了：1.让用户带上token访问身份代理服务器；2.身份代理服务器解析token，确认用户身份后将用户名带入到请求X-Remote-User头，并转发给K8s，这里需要注意带上预先签好的客户端证书访问；3.K8s通过请求头部信息确认用户，并基于RBAC规则确认用户权限。</p>
<p>针对上面的方案，这里简单的使用openresty搭建了一个测试方案，主要也是因为目前的Token是jwt格式的，解析和验证也比较方便，这里贴一个比较简单的配置例子：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">server <span class="token punctuation">&#123;</span>
	listen       <span class="token number">80</span><span class="token punctuation">;</span>
	server_name  test.k8sproxy.ichenfu.com<span class="token punctuation">;</span>
	location / <span class="token punctuation">&#123;</span>
		access_by_lua <span class="token string">'
			-- 因为token格式是jwt，且用户名是在jwt payload里的，所以需要依赖resty.jwt这个库
			-- 具体的安装方式这里不详细说明，可以查找其他资料
			local cjson = require("cjson")
			local jwt = require("resty.jwt")
			-- 拿到用户请求的Authorization头
			local auth_header = ngx.var.http_Authorization

			if auth_header == nil then
				-- 禁止没有认证信息的请求
				ngx.exit(ngx.HTTP_UNAUTHORIZED)
			end

			local _, _, jwt_token = string.find(auth_header, "Bearer%s+(.+)")
			if jwt_token == nil then
				-- 禁止认证信息有误的请求
				ngx.exit(ngx.HTTP_UNAUTHORIZED)
			end

			-- secret，需要保密！
			local secret = "ichenfu-jwt-secret"
			local jwt_obj = jwt:verify(secret, jwt_token)
			if jwt_obj.verified == false then
				-- 如果验证失败，说明Token有问题，禁止
				ngx.exit(ngx.HTTP_UNAUTHORIZED)
			else
				-- 验证成功，设置X-Remote-User头为用户名（假设用户名存储在payload中的user字段）
				ngx.req.set_header("X-Remote-User", jwt_obj.user)
			end
		'</span><span class="token punctuation">;</span>
		proxy_ssl_certificate /usr/local/openresty/nginx/conf/ssl/auth-proxy.pem<span class="token punctuation">;</span>
		proxy_ssl_certificate_key /usr/local/openresty/nginx/conf/ssl/auth-proxy-key.pem<span class="token punctuation">;</span>
		proxy_pass https://test.k8scluster.ichenfu.com:6443<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>说起来openresty确实很方便，十几行代码就搞定了一个K8s的认证代理服务器。不过在后续测试过程中，遇到了一个问题。基于上面的逻辑，用户可以拿着Token，使用kubectl访问集群，但是在实际测试过程中，发现即使在kubeconfig文件中添加了Token，甚至使用<code>kubectl --token=&quot;xxxxxxxxx&quot; get pods</code>这种在命令行里，指定Token的方式，都会提示请求失败，找不到认证信息。一开始，以为是自己lua程序写的有问题，最后通过<code>kubectl --token=&quot;xxxxxxxxx&quot; get pods --v=10 2&gt;&amp;1</code>把请求过程打印出来才发现，kubectl根本不会把Token带入到请求头中！</p>
<p>经过一番查找，找到了<a href="https://github.com/kubernetes/kubectl/issues/744">kubectl does not send Authorization header (or use specified auth plugin) over plain HTTP #744</a>这个Issue。才发现原来kubectl在默认情况下，如果访问一个HTTP协议的API地址，就认为这个服务是不需要认证的，如果需要认证，那API地址必须是HTTPS协议。</p>
<p>所以，为了实现预期的结果，还需要修改一下nginx配置文件，把监听换成HTTPS：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">server <span class="token punctuation">&#123;</span>
		listen       <span class="token number">443</span> ssl<span class="token punctuation">;</span>
		server_name  test.k8sproxy.ichenfu.com<span class="token punctuation">;</span>
		ssl_certificate      /usr/local/openresty/nginx/conf/ssl/kubernetes.pem<span class="token punctuation">;</span>
		ssl_certificate_key  /usr/local/openresty/nginx/conf/ssl/kubernetes-key.pem<span class="token punctuation">;</span>

		<span class="token comment">#localtion配置保持不变</span>
		<span class="token comment">#...</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>最终，所有需求都完美实现！当然需求的实现方式肯定不止这一种，而且最终即使使用这种方式，可能也不太会选择openresty，但是整体实现和测试的过程还是非常有意思的，特别是“意外”地知道了kubectl对于服务器认证的相关处理，收获还是不少的。</p>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>authenticating-proxy</tag>
        <tag>kubectl token</tag>
        <tag>RBAC</tag>
      </tags>
  </entry>
  <entry>
    <title>删除K8s Namespace时卡在Terminating状态</title>
    <url>/2019/02/20/kubernetes-namespaces-stuck-in-terminating-state/</url>
    <content><![CDATA[<p>想要删除K8s里的一个Namespace，结果删除了所有该Namespace资源之后使用<code>kubectl delete namespace test</code>发现删除不掉，一直卡在<code>Terminating</code>状态，使用<code>--force</code>参数依然无法删除，报错:<br><code>Error from server (Conflict): Operation cannot be fulfilled on namespaces &quot;test&quot;: The system is ensuring all content is removed from this namespace.  Upon completion, this namespace will automatically be purged by the system.</code><br>找了一圈，发现<a href="https://github.com/kubernetes/kubernetes/issues/19317">这个Issue</a>，里面<a href="https://github.com/kubernetes/kubernetes/issues/19317#issuecomment-457745457">有条评论</a></p>
<blockquote><p>kubectl get namespace annoying-namespace-to-delete -o json &gt; tmp.json<br>then edit tmp.json and remove”kubernetes”</p>
<p>curl -k -H “Content-Type: application&#x2F;json” -X PUT –data-binary @tmp.json <a href="https://kubernetes-cluster-ip/api/v1/namespaces/annoying-namespace-to-delete/finalize">https://kubernetes-cluster-ip/api/v1/namespaces/annoying-namespace-to-delete/finalize</a></p>
<p>and it should delete your namespace,</p>
</blockquote>

<p>跟着试了一下，很管用，直接就删除了：<br>先运行<code>kubectl get namespace test -o json &gt; tmp.json</code>，拿到当前namespace描述，然后打开<code>tmp.json</code>，删除其中的<code>spec</code>字段。因为这边的K8s集群是带认证的，所以又新开了窗口运行<code>kubectl proxy</code>跑一个API代理在本地的8081端口。最后运行<code>curl -k -H &quot;Content-Type: application/json&quot; -X PUT --data-binary @tmp.json http://127.0.0.1:8001/api/v1/namespaces/test/finalize</code></p>
<p>搞定！</p>
<span id="more"></span>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
        <tag>Terminating</tag>
        <tag>kubectl</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux中的主设备号</title>
    <url>/2014/12/28/linux-devices/</url>
    <content><![CDATA[<p>由于工作中某个需求，需要使用Cgroups对某个进程的IO进行限制。所以，需要在Cgroup的blkio子系统中进行配置，我们限制的是读取磁盘的iops，所以，需要在blkio.throttle.write_iops_device中写入该限制。</p>
<pre><code>echo &quot;8:0 10&quot; &gt; /cgroup/blkio/test/blkio.throttle.read_iops_device
</code></pre>
<p>这里，对sda的read iops进行了限制，上限为10次IO操作每秒。</p>
<span id="more"></span>
<h2 id="如何获得"><a href="#如何获得" class="headerlink" title="如何获得"></a>如何获得</h2><p>于是就产生了一个疑问，这里的”8:0”是什么？为什么对sda进行限制需要使用”8:0”这个奇怪的代号？这个”8:0”又是怎么得到的？</p>
<p>首先说一下”8:0”是如何得到的。在Linux系统下，可以使用：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># ls -l /dev/sd*</span>
brw-rw----. <span class="token number">1</span> root disk <span class="token number">8</span>, <span class="token number">0</span> Dec <span class="token number">27</span> <span class="token number">20</span>:23 /dev/sda
brw-rw----. <span class="token number">1</span> root disk <span class="token number">8</span>, <span class="token number">1</span> Dec <span class="token number">27</span> <span class="token number">20</span>:23 /dev/sda1
brw-rw----. <span class="token number">1</span> root disk <span class="token number">8</span>, <span class="token number">2</span> Dec <span class="token number">27</span> <span class="token number">20</span>:23 /dev/sda2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看到，&#x2F;dev&#x2F;sda前面有一个标志”8, 0”，这个就是我们要限制的设备的设备号。</p>
<h2 id="为什么是8-0"><a href="#为什么是8-0" class="headerlink" title="为什么是8:0"></a>为什么是8:0</h2><p>对于Linux系统&#x2F;dev&#x2F;下的所有文件，都是由驱动程序去注册，方便对对应的设备进行调用的。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># ls -l /dev/</span>
total <span class="token number">0</span>
drwxr-xr-x. <span class="token number">2</span> root root         <span class="token number">640</span> Dec <span class="token number">27</span> <span class="token number">20</span>:23 block
drwxr-xr-x. <span class="token number">2</span> root root          <span class="token number">80</span> Dec <span class="token number">27</span> <span class="token number">20</span>:23 bsg
crw-------. <span class="token number">1</span> root root     <span class="token number">10</span>, <span class="token number">234</span> Dec <span class="token number">27</span> <span class="token number">20</span>:23 btrfs-control
drwxr-xr-x. <span class="token number">3</span> root root          <span class="token number">60</span> Dec <span class="token number">27</span> <span class="token number">20</span>:23 bus
lrwxrwxrwx. <span class="token number">1</span> root root           <span class="token number">3</span> Dec <span class="token number">27</span> <span class="token number">20</span>:23 cdrom -<span class="token operator">></span> sr0
drwxr-xr-x. <span class="token number">2</span> root root        <span class="token number">2660</span> Dec <span class="token number">27</span> <span class="token number">20</span>:24 char
crw-------. <span class="token number">1</span> root root      <span class="token number">5</span>,   <span class="token number">1</span> Dec <span class="token number">27</span> <span class="token number">20</span>:23 console
lrwxrwxrwx. <span class="token number">1</span> root root          <span class="token number">11</span> Dec <span class="token number">27</span> <span class="token number">20</span>:23 core -<span class="token operator">></span> /proc/kcore
drwxr-xr-x. <span class="token number">4</span> root root          <span class="token number">80</span> Dec <span class="token number">27</span> <span class="token number">20</span>:23 cpu
crw-rw----. <span class="token number">1</span> root root     <span class="token number">10</span>,  <span class="token number">61</span> Dec <span class="token number">27</span> <span class="token number">20</span>:23 cpu_dma_latency
crw-rw----. <span class="token number">1</span> root root     <span class="token number">10</span>,  <span class="token number">62</span> Dec <span class="token number">27</span> <span class="token number">20</span>:23 crash
<span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看到，在&#x2F;dev下有各种各样的“文件”，这些文件各有不同，这些都是驱动程序注册的一个虚拟的文件。</p>
<p>那这些驱动在哪里呢？系统中有一个&#x2F;proc&#x2F;deveices文件：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># cat /proc/devices</span>
Character devices:
<span class="token number">1</span> mem
<span class="token number">4</span> /dev/vc/0
<span class="token number">4</span> <span class="token function">tty</span>
<span class="token number">4</span> ttyS
<span class="token number">5</span> /dev/tty
<span class="token number">5</span> /dev/console
<span class="token number">5</span> /dev/ptmx
<span class="token number">7</span> vcs
<span class="token punctuation">..</span>.

Block devices:
<span class="token number">1</span> ramdisk
<span class="token number">259</span> blkext
<span class="token number">7</span> loop
<span class="token number">8</span> sd
<span class="token number">9</span> md
<span class="token number">11</span> sr
<span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看到，有2种设备，Character device和Block device，字符型设备和块设备，字符型设备可以按字符去读取，而块设备一次读取必须是一整块数据。<br>在设备前面的数字，就是主设备号了，可以看到8这个主设备号属于Block device，驱动程序是sd，也就是SCSI disk。<br>在<a href="https://www.kernel.org/doc/Documentation/admin-guide/devices.txt">Kernel Documentation</a>中，对这些编号都有比较明确的说明，当然，如果是自己编写的驱动程序，也是可以向系统申请到一个编号的。<br>在文档中可以看到：</p>
<pre><code>8 block	SCSI disk devices (0-15)
      0 = /dev/sda		First SCSI disk whole disk
     16 = /dev/sdb		Second SCSI disk whole disk
     32 = /dev/sdc		Third SCSI disk whole disk
        ...
    240 = /dev/sdp		Sixteenth SCSI disk whole disk

    Partitions are handled in the same way as for IDE
    disks (see major number 3) except that the limit on
    partitions is 15.
</code></pre>
<p>8被SCSI disk devices所占用，可以表示前16个SCSI设备，每个设备最多存在15个分区。而我们的服务器就是SCSI接口的硬盘，所以，8:0就是代表了sda本身，而8:1则是sda1，依次类推。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Cgroups</tag>
        <tag>Linux</tag>
        <tag>/dev/</tag>
        <tag>/proc/devices/</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux下的resource limits(ulimit)</title>
    <url>/2019/07/18/linux-rlimits/</url>
    <content><![CDATA[<p>在Linux下，可以对进程使用的资源做一些限制，比如，可以使用的内存、可以使用的线程、最大能打开的文件数等等，这些也就是我们常说的<code>rlimit</code>，在bash里，可以非常方便的用<code>ulimit</code>这个内置的命令查看和修改这些限制，那么到底这些限制有那些，是怎么来的呢？</p>
<p>首先，在C编程环境下，系统提供了三个接口：<code>int getrlimit(int resource, struct rlimit *rlim);</code>、<code>int setrlimit(int resource, const struct rlimit *rlim);</code>、<code>int prlimit(pid_t pid, int resource, const struct rlimit *new_limit, struct rlimit *old_limit);</code>分别用来获取当前进程的限制、设置当前进程的限制以及根据Pid设置对应进程的限制。</p>
<p>那么具体有哪些限制，也就是接口中的<code>resource</code>参数有哪些，可以参考man里的信息，这里大致翻译一下：</p>
<span id="more"></span>

<ul>
<li><p>RLIMIT_AS<br>进程最大可使用的虚拟内存空间，以bytes计算。这个限制主要影响<code>brk</code>、<code>mmap</code>、<code>mremap</code>这几个系统调用，当达到限制时，这些系统调用就会返回<code>ENOMEM</code>提示无内存可分配了。</p>
</li>
<li><p>RLIMIT_CORE<br>coredump文件最大的大小，如果为0，则不会产生coredump，当是非0值时，如果coredump超过这个值会被truncated到这个大小</p>
</li>
<li><p>RLIMIT_CPU<br>CPU使用时间限制，单位秒。当进程CPU时间达到软限制时，系统会给进程发送一个<code>SIGXCPU</code>信号，默认行为是将进程终止，但是进程可以选择捕获这个信号并作出相应选择，如果继续执行达到了硬限制则会发送<code>SIGKILL</code>信号终止进程</p>
</li>
<li><p>RLIMIT_DATA<br>进程数据段的最大值，主要是堆空间，影响<code>brk</code>和<code>sbrk</code>两个系统调用，达到限制时返回<code>ENOMEM</code></p>
</li>
<li><p>RLIMIT_FSIZE<br>进程可建立的文件的最大长度。如果超出这一限制时，系统会发送<code>SIGXFSZ</code>信号，默认行为是将进程终止，但是进程可以选择捕获这个信号，这时对应的调用返回<code>EFBIG</code>。</p>
</li>
<li><p>RLIMIT_LOCKS (Early Linux 2.4 only)<br>进程可以进程可创建的锁数量，包括<code>flock</code>和<code>fcntl</code>两个调用</p>
</li>
<li><p>RLIMIT_MEMLOCK<br>进程可锁定在内存中的最大数据量，单位bytes。</p>
</li>
<li><p>RLIMIT_MSGQUEUE (Since Linux 2.6.8)<br>进程可为POSIX消息队列分配的最大字节数</p>
</li>
<li><p>RLIMIT_NICE (since Linux 2.6.12, but see BUGS below)<br>进程可通过<code>setpriority</code>和<code>nice</code>调用设置的最大nice值</p>
</li>
<li><p>RLIMIT_NOFILE<br>进程可打开的最大文件数，影响<code>open</code>、<code>pipe</code>、<code>dup</code>等调用，达到限制时会返回<code>EMFILE</code>错误</p>
</li>
<li><p>RLIMIT_NPROC<br>实际运行进程的用户所能运行的最大进程数（在linux里更准确的说法是线程），如果达到这个限制，<code>fork</code>调用返回<code>EAGAIN</code></p>
</li>
<li><p>RLIMIT_RSS<br>进程最大驻留内存页数，单位内存页个</p>
</li>
<li><p>RLIMIT_RTPRIO (Since Linux 2.6.12, but see BUGS)<br>进程最大可设置的实时调度优先级</p>
</li>
<li><p>RLIMIT_RTTIME (Since Linux 2.6.25)<br>实时调度情况下进程最大占用的时间片，单位微秒</p>
</li>
<li><p>RLIMIT_SIGPENDING (Since Linux 2.6.8)<br>实际运行进程的用户所能拥有的最大挂起信号数量</p>
</li>
<li><p>RLIMIT_STACK<br>进程栈空间的最大大小，单位字节，如果达到了这个限制，系统会发送<code>SIGSEGV</code>信号</p>
</li>
</ul>
<p>从编程角度可设置的东西很多，而且很复杂，很多其实都用不到，需要注意的是，设置这些需要<code>CAP_SYS_RESOURCE</code>权限。</p>
<p>有几个注意的点：</p>
<ul>
<li>通过<code>fork</code>创建的子进程，是继承父进程的配置的。而<code>execve</code>调用则会保留原进程的配置。</li>
<li>Linux 2.6.24之后，进程的限制信息可以通过 <code>/proc/&#123;pid&#125;/limits</code>查看。</li>
</ul>
<p>说完了这么多，其实有个很关键的问题没有弄明白，默认值是怎么设置的？bash里ulimt -a显示的所有限制，默认值是多少？</p>
<p>如果稍微搜索一下，大概率会出现一个配置文件，位于<code>/etc/security/limits.conf</code>，这个文件可以针对用户设置默认值，然而，是谁负责读取这个文件内容的呢？</p>
<p>实际上只有PAM会有可能读取这个配置，准确的说是<code>pam_limits.so</code>读取的，具体还需要看PAM的配置，举个比较简单的例子，有些时候，我们可能会用<code>sudo -u xxxx command</code>来切换用户执行某些命令，如果按上面所说的子进程继承父进程的相关配置的话，是不是执行的进程配置和当前session一样了？实际上并不是。</p>
<p>以CentOS 7为例，在我们执行<code>sudo -u</code>的时候，是会调用到PAM的配置的，具体的配置在<code>/etc/pam.d/sudo</code>文件：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#%PAM-1.0</span>
auth       include      system-auth
account    include      system-auth
password   include      system-auth
session    optional     pam_keyinit.so revoke
session    required     pam_limits.so<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看到，在执行sudo的时候，创建session过程中，必须要依赖<code>pam_limits.so</code>，这时就会读取<code>/etc/security/limits.conf</code>相关配置，设置默认的limits配置。</p>
<p>所以在很多场景下，特别是需要切换到另一个用户的session启动进程的时候，需要主要limits相关配置，避免因为用户配置不一致导致的问题。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>setrlimit</tag>
        <tag>ulimit</tag>
        <tag>PAM</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux时间和timezone概念解释</title>
    <url>/2018/05/15/linux-timezone/</url>
    <content><![CDATA[<p>在Docker环境中经常会遇到时区相关的问题，所以顺便也看了一下Linux系统下时间相关的一下配置和概念：</p>
<h2 id="硬件时钟"><a href="#硬件时钟" class="headerlink" title="硬件时钟"></a>硬件时钟</h2><p>硬件时钟也叫RTC（Real Time Clock）或者CMOS时钟，这个是保存在BIOS中的，仅能保存：年、月、日、时、分、秒这些时间数值，无法保存当前时区以及是否使用夏令时调节。</p>
<h2 id="系统时钟"><a href="#系统时钟" class="headerlink" title="系统时钟"></a>系统时钟</h2><p>系统时钟也叫软件时钟，在系统时钟里是有时区等概念的，在Linux内核里，是保存为自 UTC 时间 1970 年1月1日经过的秒数。系统启动时会读取硬件时钟，并根据<code>/etc/adjtime</code>的设置计算当前的时钟。系统启动之后，系统时钟与硬件时钟独立运行，Linux 通过时钟中断计数维护系统时钟。</p>
<h2 id="etc-localtime"><a href="#etc-localtime" class="headerlink" title="&#x2F;etc&#x2F;localtime"></a>&#x2F;etc&#x2F;localtime</h2><p>这个文件一般情况下是一个软链接，链接到<code>/usr/share/zoneinfo/</code>目录下的一个对应时区的二进制文件，比如设置<code>Asia/Shanghai</code>的时区，则<code>/etc/localtime -&gt; /usr/share/zoneinfo/Asia/Shanghai</code>，调用<code>date</code>等工具获取时间时会考虑这个配置。<br>建议并强烈建议将这个文件设置为软链接，很多人会直接拷贝文件，其实是不推荐的。所有的Linux系统都会依赖这个文件。</p>
<h2 id="etc-timezone"><a href="#etc-timezone" class="headerlink" title="&#x2F;etc&#x2F;timezone"></a>&#x2F;etc&#x2F;timezone</h2><p>这个文件一般会记录时区的直接文字表示，或者是一个时间偏移（很少见），比如如果设置时区为<code>Asia/Shanghai</code>，则这个文件的内容就会是<code>Asia/Shanghai</code>。这个文件并不是在所有Linux中都存在，比如在我的ArchLinux中就没有这个文件。这个文件一般也仅仅是一个简单的表示。</p>
<p>最后我们基本可以得到下面的结论：</p>
<ol>
<li>BIOS时间即硬件时间没有时区</li>
<li>Linux在启动时会根据<code>/etc/adjtime</code>的设置和当前的硬件时间计算出当前的UTC时间，并将其和1970 年1月1日的秒差记录在内核中，由时钟中断继续维护。</li>
<li><code>date</code>等工具获得的时间是根据Linux内核中保存的时间和<code>/etc/localtime</code>的配置计算得来的。</li>
</ol>
<p>其他相关问题，比如设置时间以及和Windows时间同步等可以参考下面的ArchLinux Wiki链接</p>
<p>参考：</p>
<ol>
<li><a href="https://wiki.archlinux.org/index.php/Time">https://wiki.archlinux.org/index.php/Time</a></li>
<li><a href="https://unix.stackexchange.com/questions/384971/whats-the-difference-between-localtime-and-timezone-files">https://unix.stackexchange.com/questions/384971/whats-the-difference-between-localtime-and-timezone-files</a></li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Timezone</tag>
        <tag>Localtime</tag>
      </tags>
  </entry>
  <entry>
    <title>Libvirt domain的几种状态及转换关系</title>
    <url>/2019/07/31/libvirt-vm-lifecycle/</url>
    <content><![CDATA[<p>在Libvirt里，一个Domain是一个运行在虚拟机器上的操作系统的实例，它可以指一个运行着的虚拟机，或者用于启动虚拟机的配置。<br>那么，对于一个Domain而言，主要有哪些状态呢？，他们的转换关系是什么？可以参考文档<a href="https://wiki.libvirt.org/page/VM_lifecycle">VM lifecycle</a>。其中，状态主要包括以下：</p>
<span id="more"></span>

<p>Domain有以下状态:</p>
<ol>
<li>Undefined(未定义) - 基线状态。Libvirt不知道任何关于domain的信息，因为它还没有被创建。</li>
<li>Defined or Stopped(已定义&#x2F;停止) - Domain已经被定义，但是不在运行状态，也被成为停止状态，只有持久性domain有这个状态，当非持久domain停止或者关机了，则它就不存在了。</li>
<li>Running(运行中) - Domain已经被定义并且且启动了，无论是持久性domain还是非持久domain，任何处于该状态的 domain 都已经在主机的 hypervisor 中被执行了。</li>
<li>Paused(暂停) - 在hypervisor上的该domain被挂起了，它的状态被暂存，直到被唤醒。对于domain自身而言，是无法知道自己处于该状态的，如果熟悉操作系统里的进程挂起状态的话，这个很类似。</li>
<li>Saved(已保存) - 和暂停状态很像，只不过domain的状态被存储在持久存储中，而不是内存中，同样domain可以被恢复，并且并不知道自己处于这个状态。</li>
</ol>
<p>这些状态之间的转换关系，可以参考图：<br><img src="/images/Vm_lifecycle_graph.png"></p>
<p>参考：</p>
<ol>
<li><a href="https://wiki.libvirt.org/page/VM_lifecycle">https://wiki.libvirt.org/page/VM_lifecycle</a></li>
</ol>
]]></content>
      <tags>
        <tag>libvirt</tag>
        <tag>VM lifecycle</tag>
      </tags>
  </entry>
  <entry>
    <title>当我们在讨论可用内存，我们在讨论什么？</title>
    <url>/2020/10/11/measuring-avaliable-memory/</url>
    <content><![CDATA[<p>事情的起因呢，是我们收到了一条内存报警，提示某台机器的可用内存不足，可用内存剩下不到14G。原本只是一个很简单的问题，但是呢，这次却发现了一些不一样的点。<br>登录机器后，<code>free -m</code>命令执行的结果如下：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">]</span><span class="token comment"># free -m</span>
              total        used        <span class="token function">free</span>      shared  buff/cache   available
Mem:         <span class="token number">385445</span>      <span class="token number">363181</span>        <span class="token number">1917</span>           <span class="token number">4</span>       <span class="token number">20346</span>       <span class="token number">21147</span>
Swap:             <span class="token number">0</span>           <span class="token number">0</span>           <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>问题来了，报警里的14G内存，是从哪来的？好像没有一个数字和这个14G接近？</p>
<span id="more"></span>
<p>需要说明的是，我们内部的监控系统，提供了一个计算值<code>freemem</code>来表示机器的可用内存，这个值的计算方法是<code>freemem = $MemFree + $Buffers + $Cached</code>，其中<code>$MemFree</code>、<code>$Buffers</code>和<code>$Cached</code>是在<code>/proc/meminfo</code>中取到的值，看一下这个文件的内容：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">]</span><span class="token comment"># cat /proc/meminfo</span>
MemTotal:       <span class="token number">394696352</span> kB
MemFree:         <span class="token number">1964616</span> kB
MemAvailable:   <span class="token number">21656108</span> kB
Buffers:          <span class="token number">993900</span> kB
Cached:         <span class="token number">11332776</span> kB
SwapCached:            <span class="token number">0</span> kB
Active:         <span class="token number">370488716</span> kB
Inactive:        <span class="token number">4698796</span> kB
Active<span class="token punctuation">(</span>anon<span class="token punctuation">)</span>:   <span class="token number">362864228</span> kB
Inactive<span class="token punctuation">(</span>anon<span class="token punctuation">)</span>:     <span class="token number">1588</span> kB
Active<span class="token punctuation">(</span>file<span class="token punctuation">)</span>:    <span class="token number">7624488</span> kB
Inactive<span class="token punctuation">(</span>file<span class="token punctuation">)</span>:  <span class="token number">4697208</span> kB
Unevictable:           <span class="token number">0</span> kB
Mlocked:               <span class="token number">0</span> kB
SwapTotal:             <span class="token number">0</span> kB
SwapFree:              <span class="token number">0</span> kB
Dirty:              <span class="token number">1964</span> kB
Writeback:             <span class="token number">0</span> kB
AnonPages:      <span class="token number">362861084</span> kB
Mapped:           <span class="token number">249620</span> kB
Shmem:              <span class="token number">4980</span> kB
Slab:           <span class="token number">10263200</span> kB
SReclaimable:    <span class="token number">8507928</span> kB
SUnreclaim:      <span class="token number">1755272</span> kB
KernelStack:       <span class="token number">38064</span> kB
PageTables:       <span class="token number">740048</span> kB
// 省略<span class="token punctuation">..</span><span class="token punctuation">..</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>那么监控计算出来<code>freemem</code>值为：<code>(1964616+993900+11332776)/1024/1024 =&gt; 13.6G</code>，说明报警系统是没有问题的，那为什么这个值和<code>free</code>命令里的值差距很大呢？对比free的输出，发现free内存和meminfo中数字差不多，但是buff&#x2F;cache的和加起来比meminfo里大了不少，难不成多加了其他的内存？话不多说，找找free命令的源码看看吧。简单看了一下源码，找到最终计算这些数字的代码在：<a href="https://gitlab.com/procps-ng/procps/-/blob/v3.3.16/proc/sysinfo.c#L781">proc&#x2F;sysinfo.c</a></p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">meminfo</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token comment">// 省略...</span>
  <span class="token keyword">static</span> <span class="token keyword">const</span> mem_table_struct mem_table<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token punctuation">&#123;</span><span class="token string">"Active"</span><span class="token punctuation">,</span>       <span class="token operator">&amp;</span>kb_active<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>       <span class="token comment">// important</span>
  <span class="token punctuation">&#123;</span><span class="token string">"Active(file)"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>kb_active_file<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span><span class="token string">"AnonPages"</span><span class="token punctuation">,</span>    <span class="token operator">&amp;</span>kb_anon_pages<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span><span class="token string">"Bounce"</span><span class="token punctuation">,</span>       <span class="token operator">&amp;</span>kb_bounce<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span><span class="token string">"Buffers"</span><span class="token punctuation">,</span>      <span class="token operator">&amp;</span>kb_main_buffers<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">// important</span>
  <span class="token punctuation">&#123;</span><span class="token string">"Cached"</span><span class="token punctuation">,</span>       <span class="token operator">&amp;</span>kb_page_cache<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// important</span>
  <span class="token comment">// 省略...</span>
  <span class="token punctuation">&#123;</span><span class="token string">"SReclaimable"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>kb_slab_reclaimable<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">// "slab reclaimable" (dentry and inode structures)</span>
  <span class="token punctuation">&#123;</span><span class="token string">"SUnreclaim"</span><span class="token punctuation">,</span>   <span class="token operator">&amp;</span>kb_slab_unreclaimable<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span><span class="token string">"Shmem"</span><span class="token punctuation">,</span>        <span class="token operator">&amp;</span>kb_main_shared<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// kernel 2.6.32 and later</span>
  <span class="token punctuation">&#123;</span><span class="token string">"Slab"</span><span class="token punctuation">,</span>         <span class="token operator">&amp;</span>kb_slab<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>         <span class="token comment">// kB version of vmstat nr_slab</span>
  <span class="token punctuation">&#123;</span><span class="token string">"SwapCached"</span><span class="token punctuation">,</span>   <span class="token operator">&amp;</span>kb_swap_cached<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token comment">// 省略...</span>
  kb_main_cached <span class="token operator">=</span> kb_page_cache <span class="token operator">+</span> kb_slab_reclaimable<span class="token punctuation">;</span>
  <span class="token comment">// 省略...</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看到，free里的cache，是经过计算的，计算方法是<code>$Cached + $SReclaimable</code>，如果按这个计算方法，我们的监控系统里就少加了一个<code>$SReclaimable</code>值，看下meminfo里的这个值<code>SReclaimable:    8507928 kB</code>，大概8.5G，加上之前的13.6G，算下来和free的结果一致了。</p>
<p>再看看<code>SReclaimable</code>代表的是什么呢？<a href="https://www.kernel.org/doc/Documentation/filesystems/proc.txt">内核文档</a>里这样描述:</p>
<blockquote><p>KReclaimable: Kernel allocations that the kernel will attempt to reclaim<br>              under memory pressure. Includes SReclaimable (below), and other<br>              direct allocations with a shrinker.<br>        Slab: in-kernel data structures cache<br>SReclaimable: Part of Slab, that might be reclaimed, such as caches<br>  SUnreclaim: Part of Slab, that cannot be reclaimed on memory pressure</p>
</blockquote>

<p>Slab是内核的小数据cache，然后SReclaimable是这部分数据里可用被回收的，和Cache是一样的逻辑。那被free命令当作是Cache处理确实也没问题。</p>
<p>整个问题到这里，是不是就结束了呢？是不是只要我们的监控系统里计算<code>freemem</code>的时候多加一个SReclaimable的值就行了呢？</p>
<p>回到最初的问题，我们想要是什么？是希望能监控机器得可用资源，所以，这个内存可用资源应该尽可能靠近这台机器实际可以被使用得内存资源。一般情况下，<code>$MemFree + $Buffers + $Cached + $SReclaimable</code>应该是能基本反映机器的可用内存的，毕竟一般情况下通过<code>echo 3 &gt; /proc/sys/vm/drop_caches</code>可用让系统把Buffers，Cached内存释放掉，经过测试，这个操作也会同步把SReclaimable内存也释放了。</p>
<p>但是上面忽略了一点，就是有些内存在执行<code>echo 3 &gt; /proc/sys/vm/drop_caches</code>时是不会释放的。一个典型例子：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">]</span><span class="token comment"># free -m -w</span>
              total        used        <span class="token function">free</span>      shared     buffers       cache   available
Mem:          <span class="token number">32010</span>         <span class="token number">332</span>       <span class="token number">31535</span>           <span class="token number">8</span>           <span class="token number">9</span>         <span class="token number">133</span>       <span class="token number">31374</span>
Swap:             <span class="token number">0</span>           <span class="token number">0</span>           <span class="token number">0</span>
<span class="token punctuation">]</span><span class="token comment"># mkdir /tmp/tmpfs</span>
<span class="token punctuation">]</span><span class="token comment"># mount -t tmpfs -o size=16g tmpfs /tmp/tmpfs/</span>
<span class="token punctuation">]</span><span class="token comment"># dd if=/dev/zero of=/tmp/tmpfs/test bs=1G count=15</span>
<span class="token number">15</span>+0 records <span class="token keyword">in</span>
<span class="token number">15</span>+0 records out
<span class="token number">16106127360</span> bytes <span class="token punctuation">(</span><span class="token number">16</span> GB<span class="token punctuation">)</span> copied, <span class="token number">7.56507</span> s, <span class="token number">2.1</span> GB/s
<span class="token punctuation">]</span><span class="token comment"># free -m -w</span>
              total        used        <span class="token function">free</span>      shared     buffers       cache   available
Mem:          <span class="token number">32010</span>         <span class="token number">332</span>       <span class="token number">16124</span>       <span class="token number">15368</span>           <span class="token number">9</span>       <span class="token number">15543</span>       <span class="token number">15988</span>
Swap:             <span class="token number">0</span>           <span class="token number">0</span>           <span class="token number">0</span>
<span class="token punctuation">]</span><span class="token comment"># echo 3 > /proc/sys/vm/drop_caches</span>
<span class="token punctuation">]</span><span class="token comment"># free -m -w</span>
              total        used        <span class="token function">free</span>      shared     buffers       cache   available
Mem:          <span class="token number">32010</span>         <span class="token number">329</span>       <span class="token number">16206</span>       <span class="token number">15368</span>           <span class="token number">5</span>       <span class="token number">15468</span>       <span class="token number">16030</span>
Swap:             <span class="token number">0</span>           <span class="token number">0</span>           <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看到，如果挂载的tmpfs中有数据，那么这个tmpfs实际所占用的空间是被计算在Cached内存里了，但是在drop_caches的时候，这部分内存是不会被释放的。那么，调整一下算法<code>$MemFree + $Buffers + $Cached + $SReclaimable - $Shmem</code>，这样相对之前来说，会更加准确一些。</p>
<p>然而事情还没完，如果注意下free命令的输出：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">]</span><span class="token comment"># free -m</span>
              total        used        <span class="token function">free</span>      shared  buff/cache   available
Mem:         <span class="token number">385445</span>      <span class="token number">363181</span>        <span class="token number">1917</span>           <span class="token number">4</span>       <span class="token number">20346</span>       <span class="token number">21147</span>
Swap:             <span class="token number">0</span>           <span class="token number">0</span>           <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>发现有个available列，这个列代表什么？看名字好像和我们需要的值很像，这里直接参考man free的说明：</p>
<blockquote><p>available<br>        Estimation of how much memory is available for starting new applications, without swapping. Unlike the data provided by the cache or free fields, this field takes into  account  page  cache<br>        and  also that not all reclaimable memory slabs will be reclaimed due to items being in use (MemAvailable in &#x2F;proc&#x2F;meminfo, available on kernels 3.14, emulated on kernels 2.6.27+, otherwise<br>        the same as free)</p>
</blockquote>

<p>看这个描述，这个字段代表在不进行swap的情况下，新的应用程序能使用的内存数量。这个和我们的需求非常的接近。数字来源在3.14及以上内核里是&#x2F;proc&#x2F;meminfo里的MemAvailable字段，在大于2.6.27的内核里是模拟出来的，其他情况保持和free内存一致。两个问题，内核是怎么计算MemAvailable的？free命令是怎么模拟的？</p>
<p>先看看内核的吧，<a href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=34e431b0ae398fc54ea69ff85ec700722c9da773">这个Commit</a>引入了这个字段：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">for_each_zone</span><span class="token punctuation">(</span>zone<span class="token punctuation">)</span>
	wmark_low <span class="token operator">+=</span> zone<span class="token operator">-></span>watermark<span class="token punctuation">[</span>WMARK_LOW<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">/*
 * Estimate the amount of memory available for userspace allocations,
 * without causing swapping.
 *
 * Free memory cannot be taken below the low watermark, before the
 * system starts swapping.
 */</span>
available <span class="token operator">=</span> i<span class="token punctuation">.</span>freeram <span class="token operator">-</span> wmark_low<span class="token punctuation">;</span>

<span class="token comment">/*
 * Not all the page cache can be freed, otherwise the system will
 * start swapping. Assume at least half of the page cache, or the
 * low watermark worth of cache, needs to stay.
 */</span>
pagecache <span class="token operator">=</span> pages<span class="token punctuation">[</span>LRU_ACTIVE_FILE<span class="token punctuation">]</span> <span class="token operator">+</span> pages<span class="token punctuation">[</span>LRU_INACTIVE_FILE<span class="token punctuation">]</span><span class="token punctuation">;</span>
pagecache <span class="token operator">-=</span> <span class="token function">min</span><span class="token punctuation">(</span>pagecache <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> wmark_low<span class="token punctuation">)</span><span class="token punctuation">;</span>
available <span class="token operator">+=</span> pagecache<span class="token punctuation">;</span>

<span class="token comment">/*
 * Part of the reclaimable swap consists of items that are in use,
 * and cannot be freed. Cap this estimate at the low watermark.
 */</span>
available <span class="token operator">+=</span> <span class="token function">global_page_state</span><span class="token punctuation">(</span>NR_SLAB_RECLAIMABLE<span class="token punctuation">)</span> <span class="token operator">-</span>
	     <span class="token function">min</span><span class="token punctuation">(</span><span class="token function">global_page_state</span><span class="token punctuation">(</span>NR_SLAB_RECLAIMABLE<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> wmark_low<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>available <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
	available <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>大体逻辑，把freeram，pagecache，RECLAIMABLE这些都算上，除了这些内存中有部分低水位不让用的，都算在available里了。</p>
<p>再看看free命令里是怎么模拟的，代码在<a href="https://gitlab.com/procps-ng/procps/-/blob/v3.3.16/proc/sysinfo.c#L794">proc&#x2F;sysinfo.c</a>：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">  <span class="token comment">/* zero? might need fallback for 2.6.27 &lt;= kernel &lt;? 3.14 */</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>kb_main_available<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">__linux__</span></span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>linux_version_code <span class="token operator">&lt;</span> <span class="token function">LINUX_VERSION</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      kb_main_available <span class="token operator">=</span> kb_main_free<span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      <span class="token function">FILE_TO_BUF</span><span class="token punctuation">(</span>VM_MIN_FREE_FILE<span class="token punctuation">,</span> vm_min_free_fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
      kb_min_free <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token function">strtoull</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span><span class="token operator">&amp;</span>tail<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      watermark_low <span class="token operator">=</span> kb_min_free <span class="token operator">*</span> <span class="token number">5</span> <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment">/* should be equal to sum of all 'low' fields in /proc/zoneinfo */</span>

      mem_available <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">signed</span> <span class="token keyword">long</span><span class="token punctuation">)</span>kb_main_free <span class="token operator">-</span> watermark_low
      <span class="token operator">+</span> kb_inactive_file <span class="token operator">+</span> kb_active_file <span class="token operator">-</span> <span class="token function">MIN</span><span class="token punctuation">(</span><span class="token punctuation">(</span>kb_inactive_file <span class="token operator">+</span> kb_active_file<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> watermark_low<span class="token punctuation">)</span>
      <span class="token operator">+</span> kb_slab_reclaimable <span class="token operator">-</span> <span class="token function">MIN</span><span class="token punctuation">(</span>kb_slab_reclaimable <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> watermark_low<span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span>mem_available <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> mem_available <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
      kb_main_available <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>mem_available<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
      kb_main_available <span class="token operator">=</span> kb_main_free<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">/* linux */</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>逻辑差不多，多了一些判断内核版本的代码，也是找到最低水位，然后一堆加加减减。</p>
<p>最后需要注意的是，虽然是说这个MemAvailable是在3.14才被加到内核里的，但是由于红帽的backport，我们现在的CentOS7默认使用的3.10内核也是支持这个字段的。总体来说，针对标题的这个需求，参考free命令的算法，应该能比较好的跨平台和系统完成可用内存的估算工作。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>meminfo</tag>
        <tag>SReclaimable</tag>
        <tag>available memory</tag>
      </tags>
  </entry>
  <entry>
    <title>利用Git的Rebase功能合并一系列commits</title>
    <url>/2019/05/22/merge-commits-with-git-rebase/</url>
    <content><![CDATA[<p>工作中如果使用Git作为版本管理工具的话，应该经常会遇到因为各种原因一下提交了很多个commit的情况，比如添加一个功能，测试出问题继续commit修改，最后<code>git log</code>看提交历史就会变成这样：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># git log</span>
commit 9995aafb7a597d9a7fcf9a341a731324813c5aad <span class="token punctuation">(</span>HEAD -<span class="token operator">></span> master<span class="token punctuation">)</span>
<span class="token punctuation">..</span>.
    Commit <span class="token number">4</span>

commit 54062e7317fa19a228d8f4f63236467317c17672
<span class="token punctuation">..</span>.
    Commit <span class="token number">3</span>

commit 1571ee6b861315ec46875fbececd46c9daaa5d04
<span class="token punctuation">..</span>.
    Commit <span class="token number">2</span>

commit ae95aac116af934742e1dd2eca435a0d6e70b77f
<span class="token punctuation">..</span>.
    Commit <span class="token number">1</span>

commit 3f0373c3afb9e9ffd6174b8244ec3e936d3583e0
<span class="token punctuation">..</span>.
    init<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这样看起来不那么美观，也会一定程度上污染主分支，如果遇到问题，需要看diff的时候，也会不那么方便，所以介绍一个利用<code>git rebase</code>命令合并一系列commit的方法。</p>
<span id="more"></span>


<p>首先，需要确定要合并哪些commits，以上面的例子，假设我们需要合并<code>Commit 1</code>到<code>Commit 4</code>这几个提交，那么，我们就要找到这几个提交的上一个提交的CommitID，也就是<code>3f0373c3afb9e9ffd6174b8244ec3e936d3583e0</code>。</p>
<p>然后，我们执行<code>git rebase -i 3f0373c3afb9e9ffd6174b8244ec3e936d3583e0</code>，此时会弹出编辑器，让你选择针对这些提交做那些操作：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pick ae95aac Commit <span class="token number">1</span>
pick 1571ee6 Commit <span class="token number">2</span>
pick 54062e7 Commit <span class="token number">3</span>
pick 9995aaf Commit <span class="token number">4</span>

<span class="token comment"># Rebase 3f0373c..9995aaf onto 3f0373c (4 commands)</span>
<span class="token comment">#</span>
<span class="token comment"># Commands:</span>
<span class="token comment"># p, pick &lt;commit> = use commit</span>
<span class="token comment"># r, reword &lt;commit> = use commit, but edit the commit message</span>
<span class="token comment"># e, edit &lt;commit> = use commit, but stop for amending</span>
<span class="token comment"># s, squash &lt;commit> = use commit, but meld into previous commit</span>
<span class="token comment"># f, fixup &lt;commit> = like "squash", but discard this commit's log message</span>
<span class="token comment"># x, exec &lt;command> = run command (the rest of the line) using shell</span>
<span class="token comment"># b, break = stop here (continue rebase later with 'git rebase --continue')</span>
<span class="token comment"># d, drop &lt;commit> = remove commit</span>
<span class="token comment"># l, label &lt;label> = label current HEAD with a name</span>
<span class="token comment"># t, reset &lt;label> = reset HEAD to a label</span>
<span class="token comment"># m, merge [-C &lt;commit> | -c &lt;commit>] &lt;label> [# &lt;oneline>]</span>
<span class="token comment"># .       create a merge commit using the original merge commit's</span>
<span class="token comment"># .       message (or the oneline, if no original merge commit was</span>
<span class="token comment"># .       specified). Use -c &lt;commit> to reword the commit message.</span>
<span class="token comment">#</span>
<span class="token comment"># These lines can be re-ordered; they are executed from top to bottom.</span>
<span class="token comment">#</span>
<span class="token comment"># If you remove a line here THAT COMMIT WILL BE LOST.</span>
<span class="token comment">#</span>
<span class="token comment"># However, if you remove everything, the rebase will be aborted.</span>
<span class="token comment">#</span>
<span class="token comment"># Note that empty commits are commented out</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>可以看到最上面的4行，是需要执行的操作，在底下也有注释，每个提交前面的命令代表的含义，我们要用的命令是<code>squash</code>，即合并到前一个提交中去，当然也可以根据情况改成其他，这里就不说明了。</p>
<p>我们要做的是合并这几个提交，那就需要把需要合并的都替换成<code>squash</code>，像这样：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pick ae95aac Commit <span class="token number">1</span>
squash 1571ee6 Commit <span class="token number">2</span>
squash 54062e7 Commit <span class="token number">3</span>
squash 9995aaf Commit <span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>然后直接保存，如果一切顺利（没有冲突）的话，会直接弹出来Commit Message的编辑器，像这样：</p>
<pre class="line-numbers language-none"><code class="language-none"># This is a combination of 4 commits.
# This is the 1st commit message:

Commit 1

# This is the commit message #2:

Commit 2

# This is the commit message #3:

Commit 3

# This is the commit message #4:

Commit 4

# Please enter the commit message for your changes. Lines starting
# with &#39;#&#39; will be ignored, and an empty message aborts the commit.
#
# Date:      Wed May 22 17:25:03 2019 +0800
#
# interactive rebase in progress; onto 3f0373c
# Last commands done (4 commands done):
#    squash 54062e7 Commit 3
#    squash 9995aaf Commit 4
# No commands remaining.
# You are currently rebasing branch &#39;master&#39; on &#39;3f0373c&#39;.
#
# Changes to be committed:
#       modified:   README<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看到几个commit message都在一起了，可以选择保留，也可以选择重新编辑，这里就都保留着，直接保存，就<code>rebase</code>成功了，再<code>git log</code>看一下，是不是变的清爽了？</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># git log</span>
commit 1cf7ca9baabf811573e3d46e8a1c33353d044fcd <span class="token punctuation">(</span>HEAD -<span class="token operator">></span> master<span class="token punctuation">)</span>
<span class="token punctuation">..</span>.
    Commit <span class="token number">1</span>

    Commit <span class="token number">2</span>

    Commit <span class="token number">3</span>

    Commit <span class="token number">4</span>

commit 3f0373c3afb9e9ffd6174b8244ec3e936d3583e0
<span class="token punctuation">..</span>.

    init<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>效率配置</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>合并commits</tag>
      </tags>
  </entry>
  <entry>
    <title>挂载CephFS时出现failed: No such process的问题</title>
    <url>/2019/09/07/mount-cephfs-no-such-process/</url>
    <content><![CDATA[<p>今天在我们的环境中遇到了一个比较诡异的问题，我们在一台虚拟机上想要挂载一个CephFS，但是出现了一个<code>failed: No such process</code>的诡异问题，具体表现如下：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">]</span><span class="token comment"># mount -t ceph mon1.ichenfu.com:6789,mon2.ichenfu.com:6789,mon3.ichenfu.com:6789:/ /tmp/data</span>
mount: <span class="token function">mount</span> mon1.ichenfu.com:6789,mon2.ichenfu.com:6789,mon3.ichenfu.com:6789:/ on /tmp/data failed: No such process<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<span id="more"></span>
<p>很奇怪，为什么会出现<code>No such process</code>这个错误，刚开始以为是内核模块加载的问题，于是就看了一下内核的模块加载情况：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">]</span><span class="token comment"># lsmod |grep ceph</span>
ceph                  <span class="token number">358802</span>  <span class="token number">0</span>
libceph               <span class="token number">306625</span>  <span class="token number">1</span> ceph
libcrc32c              <span class="token number">12644</span>  <span class="token number">1</span> libceph
dns_resolver           <span class="token number">13140</span>  <span class="token number">1</span> libceph<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>发现不是内核模块的问题，因为一方面模块已经加载了，另外如果是内核模块的问题的话，应该会提示<code>unknown filesystem type</code>，而不是上面的错误。<br>怎么办呢，尝试<code>strace</code>看下具体的系统调用情况：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">]</span><span class="token comment"># strace -f mount -t ceph mon1.ichenfu.com:6789,mon2.ichenfu.com:6789,mon3.ichenfu.com:6789:/ /tmp/data</span>
<span class="token punctuation">..</span>.
stat<span class="token punctuation">(</span><span class="token string">"/sbin/mount.ceph"</span>, 0x7ffd39101680<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token parameter variable">-1</span> ENOENT <span class="token punctuation">(</span>No such <span class="token function">file</span> or directory<span class="token punctuation">)</span>
stat<span class="token punctuation">(</span><span class="token string">"/sbin/fs.d/mount.ceph"</span>, 0x7ffd39101680<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token parameter variable">-1</span> ENOENT <span class="token punctuation">(</span>No such <span class="token function">file</span> or directory<span class="token punctuation">)</span>
stat<span class="token punctuation">(</span><span class="token string">"/sbin/fs/mount.ceph"</span>, 0x7ffd39101680<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token parameter variable">-1</span> ENOENT <span class="token punctuation">(</span>No such <span class="token function">file</span> or directory<span class="token punctuation">)</span>
mount<span class="token punctuation">(</span><span class="token string">"mon1.ichenfu.com:6789,mon2.ichenfu.com:6789,mon3.ichenfu.com:6789:/"</span>, <span class="token string">"/tmp/data"</span>, <span class="token string">"ceph"</span>, MS_MGC_VAL, NULL<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token parameter variable">-1</span> ESRCH <span class="token punctuation">(</span>No such process<span class="token punctuation">)</span>
open<span class="token punctuation">(</span><span class="token string">"/usr/share/locale/locale.alias"</span>, O_RDONLY<span class="token operator">|</span>O_CLOEXEC<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">3</span>
fstat<span class="token punctuation">(</span><span class="token number">3</span>, <span class="token punctuation">&#123;</span>st_mode<span class="token operator">=</span>S_IFREG<span class="token operator">|</span>0644, <span class="token assign-left variable">st_size</span><span class="token operator">=</span><span class="token number">2502</span>, <span class="token punctuation">..</span>.<span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span>
mmap<span class="token punctuation">(</span>NULL, <span class="token number">4096</span>, PROT_READ<span class="token operator">|</span>PROT_WRITE, MAP_PRIVATE<span class="token operator">|</span>MAP_ANONYMOUS, -1, <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">=</span> 0x7fb3a36e4000
read<span class="token punctuation">(</span><span class="token number">3</span>, <span class="token string">"# Locale name alias data base.<span class="token entity" title="\n">\n</span>#"</span><span class="token punctuation">..</span>., <span class="token number">4096</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">2502</span>
read<span class="token punctuation">(</span><span class="token number">3</span>, <span class="token string">""</span>, <span class="token number">4096</span><span class="token punctuation">)</span>                       <span class="token operator">=</span> <span class="token number">0</span>
close<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>                                <span class="token operator">=</span> <span class="token number">0</span>
<span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>问题出在了<code>mount</code>系统调用上，确实是返回了一个<code>ESRCH</code>错误，而这个错误的message就是显示出来的<code>No such process</code>，搜索了一下，发现这个错误主要就是出现在<code>kill</code>调用，找不到进程，但是为什么会在这里也返回这个错误呢？准备去看看相关的代码，在看代码之前，又用<code>dmesg</code>看了一下内核的日志，发现了一些信息：</p>
<pre class="line-numbers language-bash000" data-language="bash000"><code class="language-bash000">]# dmesg
[    0.000000] Initializing cgroup subsys cpuset
[    0.000000] Initializing cgroup subsys cpu
[    0.000000] Initializing cgroup subsys cpuacct
...
[  126.629937] Key type dns_resolver registered
[  126.685004] Key type ceph registered
[  126.685817] libceph: loaded (mon&#x2F;osd proto 15&#x2F;24)
[  126.717441] ceph: loaded (mds proto 32)
[  126.718859] libceph: resolve &#39;mon1.ichenfu.com&#39; (ret&#x3D;-3): failed
[  126.718862] libceph: parse_ips bad ip &#39;mon1.ichenfu.com:6789,mon2.ichenfu.com:6789,mon3.ichenfu.com:6789&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>从内核消息里看似乎发现了一些重要信息，看起来是域名解析有问题，但是确认过本地DNS配置，包括DNS的解析是没有问题的，那为什么会报这个错误？先试试直接用IP地址挂载看看是不是真的是解析问题吧：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">]</span><span class="token comment"># mount -v -t ceph 192.168.1.100:6789,192.168.1.101:6789,192.168.1.102:6789:/ /tmp/data</span>
mount: <span class="token number">192.168</span>.1.100:6789,192.168.1.101:6789,192.168.1.102:6789:/ mounted on /tmp/data.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>成功了！，那说明肯定就是域名解析的问题了，于是就可以有目的性的去看看相关的代码了，就用<code>resolve &#39;mon1.ichenfu.com&#39; (ret=-3): failed</code>这个消息里的<code>resolve</code>和<code>failed</code>为关键字去搜索内核代码，发现相关的逻辑在<code>net/ceph/messenger.c</code>这个文件里：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">ceph_dns_resolve_name</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">,</span> <span class="token class-name">size_t</span> namelen<span class="token punctuation">,</span>
		<span class="token keyword">struct</span> <span class="token class-name">ceph_entity_addr</span> <span class="token operator">*</span>addr<span class="token punctuation">,</span> <span class="token keyword">char</span> delim<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>ipend<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>end<span class="token punctuation">,</span> <span class="token operator">*</span>delim_p<span class="token punctuation">;</span>
	<span class="token keyword">char</span> <span class="token operator">*</span>colon_p<span class="token punctuation">,</span> <span class="token operator">*</span>ip_addr <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> ip_len<span class="token punctuation">,</span> ret<span class="token punctuation">;</span>

	<span class="token comment">/*
	 * The end of the hostname occurs immediately preceding the delimiter or
	 * the port marker (':') where the delimiter takes precedence.
	 */</span>
	delim_p <span class="token operator">=</span> <span class="token function">memchr</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> delim<span class="token punctuation">,</span> namelen<span class="token punctuation">)</span><span class="token punctuation">;</span>
	colon_p <span class="token operator">=</span> <span class="token function">memchr</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token char">':'</span><span class="token punctuation">,</span> namelen<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>delim_p <span class="token operator">&amp;&amp;</span> colon_p<span class="token punctuation">)</span>
		end <span class="token operator">=</span> delim_p <span class="token operator">&lt;</span> colon_p <span class="token operator">?</span> delim_p <span class="token operator">:</span> colon_p<span class="token punctuation">;</span>
	<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>delim_p <span class="token operator">&amp;&amp;</span> colon_p<span class="token punctuation">)</span>
		end <span class="token operator">=</span> colon_p<span class="token punctuation">;</span>
	<span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
		end <span class="token operator">=</span> delim_p<span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>end<span class="token punctuation">)</span> <span class="token comment">/* case: hostname:/ */</span>
			end <span class="token operator">=</span> name <span class="token operator">+</span> namelen<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>end <span class="token operator">&lt;=</span> name<span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>

	<span class="token comment">/* do dns_resolve upcall */</span>
	<span class="token comment">// 调用dns_query，查询DNS</span>
	ip_len <span class="token operator">=</span> <span class="token function">dns_query</span><span class="token punctuation">(</span>current<span class="token operator">-></span>nsproxy<span class="token operator">-></span>net_ns<span class="token punctuation">,</span>
			   <span class="token constant">NULL</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> end <span class="token operator">-</span> name<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>ip_addr<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> false<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>ip_len <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>
		ret <span class="token operator">=</span> <span class="token function">ceph_pton</span><span class="token punctuation">(</span>ip_addr<span class="token punctuation">,</span> ip_len<span class="token punctuation">,</span> addr<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">else</span>
		<span class="token comment">// 如果失败，则返回ESRCH，但是不知道dns_query的实际返回的ip_len是什么</span>
		ret <span class="token operator">=</span> <span class="token operator">-</span>ESRCH<span class="token punctuation">;</span>

	<span class="token function">kfree</span><span class="token punctuation">(</span>ip_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token operator">*</span>ipend <span class="token operator">=</span> end<span class="token punctuation">;</span>

	<span class="token function">pr_info</span><span class="token punctuation">(</span><span class="token string">"resolve '%.*s' (ret=%d): %s\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>end <span class="token operator">-</span> name<span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span>
			ret<span class="token punctuation">,</span> ret <span class="token operator">?</span> <span class="token string">"failed"</span> <span class="token operator">:</span> <span class="token function">ceph_pr_addr</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>返回<code>ESRCH</code>的源头应该就在这里了，但是信息还是不足，不知道当时dns_query的实际返回值是啥，那我们继续看看<code>dns_query</code>的实现，这个实现的位置在<code>net/dns_resolver/dns_query.c</code>，是一个<code>dns_resolver</code>模块：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">dns_query</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">net</span> <span class="token operator">*</span>net<span class="token punctuation">,</span>
	      <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>type<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">,</span> <span class="token class-name">size_t</span> namelen<span class="token punctuation">,</span>
	      <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>options<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>_result<span class="token punctuation">,</span> <span class="token class-name">time64_t</span> <span class="token operator">*</span>_expiry<span class="token punctuation">,</span>
	      bool invalidate<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">struct</span> <span class="token class-name">key</span> <span class="token operator">*</span>rkey<span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">user_key_payload</span> <span class="token operator">*</span>upayload<span class="token punctuation">;</span>
	<span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">cred</span> <span class="token operator">*</span>saved_cred<span class="token punctuation">;</span>
	<span class="token class-name">size_t</span> typelen<span class="token punctuation">,</span> desclen<span class="token punctuation">;</span>
	<span class="token keyword">char</span> <span class="token operator">*</span>desc<span class="token punctuation">,</span> <span class="token operator">*</span>cp<span class="token punctuation">;</span>
	<span class="token keyword">int</span> ret<span class="token punctuation">,</span> len<span class="token punctuation">;</span>

	<span class="token comment">// 进入函数的日志</span>
	<span class="token function">kenter</span><span class="token punctuation">(</span><span class="token string">"%s,%*.*s,%zu,%s"</span><span class="token punctuation">,</span>
	       type<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>namelen<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>namelen<span class="token punctuation">,</span> name<span class="token punctuation">,</span> namelen<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>name <span class="token operator">||</span> namelen <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>

	<span class="token comment">/* construct the query key description as "[&lt;type>:]&lt;name>" */</span>
	typelen <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	desclen <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		typelen <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>typelen <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span>
			<span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>
		desclen <span class="token operator">+=</span> typelen <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>namelen <span class="token operator">&lt;</span> <span class="token number">3</span> <span class="token operator">||</span> namelen <span class="token operator">></span> <span class="token number">255</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>
	desclen <span class="token operator">+=</span> namelen <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>

	desc <span class="token operator">=</span> <span class="token function">kmalloc</span><span class="token punctuation">(</span>desclen<span class="token punctuation">,</span> GFP_KERNEL<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>desc<span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token operator">-</span>ENOMEM<span class="token punctuation">;</span>

	cp <span class="token operator">=</span> desc<span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token function">memcpy</span><span class="token punctuation">(</span>cp<span class="token punctuation">,</span> type<span class="token punctuation">,</span> typelen<span class="token punctuation">)</span><span class="token punctuation">;</span>
		cp <span class="token operator">+=</span> typelen<span class="token punctuation">;</span>
		<span class="token operator">*</span>cp<span class="token operator">++</span> <span class="token operator">=</span> <span class="token char">':'</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token function">memcpy</span><span class="token punctuation">(</span>cp<span class="token punctuation">,</span> name<span class="token punctuation">,</span> namelen<span class="token punctuation">)</span><span class="token punctuation">;</span>
	cp <span class="token operator">+=</span> namelen<span class="token punctuation">;</span>
	<span class="token operator">*</span>cp <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>options<span class="token punctuation">)</span>
		options <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
	<span class="token comment">// 内核debug日志</span>
	<span class="token function">kdebug</span><span class="token punctuation">(</span><span class="token string">"call request_key(,%s,%s)"</span><span class="token punctuation">,</span> desc<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">/* make the upcall, using special credentials to prevent the use of
	 * add_key() to preinstall malicious redirections
	 */</span>
	saved_cred <span class="token operator">=</span> <span class="token function">override_creds</span><span class="token punctuation">(</span>dns_resolver_cache<span class="token punctuation">)</span><span class="token punctuation">;</span>
	rkey <span class="token operator">=</span> <span class="token function">request_key_net</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>key_type_dns_resolver<span class="token punctuation">,</span> desc<span class="token punctuation">,</span> net<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">revert_creds</span><span class="token punctuation">(</span>saved_cred<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">kfree</span><span class="token punctuation">(</span>desc<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">IS_ERR</span><span class="token punctuation">(</span>rkey<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		ret <span class="token operator">=</span> <span class="token function">PTR_ERR</span><span class="token punctuation">(</span>rkey<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">goto</span> out<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token function">down_read</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rkey<span class="token operator">-></span>sem<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">set_bit</span><span class="token punctuation">(</span>KEY_FLAG_ROOT_CAN_INVAL<span class="token punctuation">,</span> <span class="token operator">&amp;</span>rkey<span class="token operator">-></span>flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
	rkey<span class="token operator">-></span>perm <span class="token operator">|=</span> KEY_USR_VIEW<span class="token punctuation">;</span>

	ret <span class="token operator">=</span> <span class="token function">key_validate</span><span class="token punctuation">(</span>rkey<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
		<span class="token keyword">goto</span> put<span class="token punctuation">;</span>

	<span class="token comment">/* If the DNS server gave an error, return that to the caller */</span>
	ret <span class="token operator">=</span> <span class="token function">PTR_ERR</span><span class="token punctuation">(</span>rkey<span class="token operator">-></span>payload<span class="token punctuation">.</span>data<span class="token punctuation">[</span>dns_key_error<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>ret<span class="token punctuation">)</span>
		<span class="token keyword">goto</span> put<span class="token punctuation">;</span>

	upayload <span class="token operator">=</span> <span class="token function">user_key_payload_locked</span><span class="token punctuation">(</span>rkey<span class="token punctuation">)</span><span class="token punctuation">;</span>
	len <span class="token operator">=</span> upayload<span class="token operator">-></span>datalen<span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>_result<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		ret <span class="token operator">=</span> <span class="token operator">-</span>ENOMEM<span class="token punctuation">;</span>
		<span class="token operator">*</span>_result <span class="token operator">=</span> <span class="token function">kmemdup_nul</span><span class="token punctuation">(</span>upayload<span class="token operator">-></span>data<span class="token punctuation">,</span> len<span class="token punctuation">,</span> GFP_KERNEL<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">*</span>_result<span class="token punctuation">)</span>
			<span class="token keyword">goto</span> put<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>_expiry<span class="token punctuation">)</span>
		<span class="token operator">*</span>_expiry <span class="token operator">=</span> rkey<span class="token operator">-></span>expiry<span class="token punctuation">;</span>

	ret <span class="token operator">=</span> len<span class="token punctuation">;</span>
put<span class="token operator">:</span>
	<span class="token function">up_read</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rkey<span class="token operator">-></span>sem<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>invalidate<span class="token punctuation">)</span>
		<span class="token function">key_invalidate</span><span class="token punctuation">(</span>rkey<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">key_put</span><span class="token punctuation">(</span>rkey<span class="token punctuation">)</span><span class="token punctuation">;</span>
out<span class="token operator">:</span>
	<span class="token comment">// 结束函数的日志</span>
	<span class="token function">kleave</span><span class="token punctuation">(</span><span class="token string">" = %d"</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">EXPORT_SYMBOL</span><span class="token punctuation">(</span>dns_query<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>先不关心整个函数的实现逻辑，先看看函数里打印日志的地方，先想办法把调试日志打开，拿到更详细的信息，其中<code>kenter</code>和<code>kleave</code>是两个宏：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*
 * debug tracing
 */</span>
<span class="token keyword">extern</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> dns_resolver_debug<span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span>	<span class="token macro-name function">kdebug</span><span class="token expression"><span class="token punctuation">(</span>FMT<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>				</span><span class="token punctuation">\</span>
<span class="token expression"><span class="token keyword">do</span> <span class="token punctuation">&#123;</span>							</span><span class="token punctuation">\</span>
	<span class="token expression"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">unlikely</span><span class="token punctuation">(</span>dns_resolver_debug<span class="token punctuation">)</span><span class="token punctuation">)</span>		</span><span class="token punctuation">\</span>
		<span class="token expression"><span class="token function">printk</span><span class="token punctuation">(</span>KERN_DEBUG </span><span class="token string">"[%-6.6s] "</span><span class="token expression">FMT</span><span class="token string">"\n"</span><span class="token expression"><span class="token punctuation">,</span>	</span><span class="token punctuation">\</span>
		       <span class="token expression">current<span class="token operator">-></span>comm<span class="token punctuation">,</span> </span><span class="token punctuation">##</span><span class="token expression">__VA_ARGS__<span class="token punctuation">)</span><span class="token punctuation">;</span>	</span><span class="token punctuation">\</span>
<span class="token expression"><span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">kenter</span><span class="token expression"><span class="token punctuation">(</span>FMT<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token function">kdebug</span><span class="token punctuation">(</span></span><span class="token string">"==> %s("</span><span class="token expression">FMT</span><span class="token string">")"</span><span class="token expression"><span class="token punctuation">,</span> <span class="token constant">__func__</span><span class="token punctuation">,</span> </span><span class="token punctuation">##</span><span class="token expression">__VA_ARGS__<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">kleave</span><span class="token expression"><span class="token punctuation">(</span>FMT<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token function">kdebug</span><span class="token punctuation">(</span></span><span class="token string">"&lt;== %s()"</span><span class="token expression">FMT</span><span class="token string">""</span><span class="token expression"><span class="token punctuation">,</span> <span class="token constant">__func__</span><span class="token punctuation">,</span> </span><span class="token punctuation">##</span><span class="token expression">__VA_ARGS__<span class="token punctuation">)</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>也就是说如果<code>dns_resolver_debug</code>的值不为0，就会使用<code>printk</code>输出调试的日志，那<code>dns_resolver_debug</code>很有可能是最为模块加载的参数传递的，在<code>net/dns_resolver/dns_key.c</code>中有模块定义的参数信息：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token function">MODULE_DESCRIPTION</span><span class="token punctuation">(</span><span class="token string">"DNS Resolver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">MODULE_AUTHOR</span><span class="token punctuation">(</span><span class="token string">"Wang Lei"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">MODULE_LICENSE</span><span class="token punctuation">(</span><span class="token string">"GPL"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">unsigned</span> <span class="token keyword">int</span> dns_resolver_debug<span class="token punctuation">;</span>
<span class="token function">module_param_named</span><span class="token punctuation">(</span>debug<span class="token punctuation">,</span> dns_resolver_debug<span class="token punctuation">,</span> uint<span class="token punctuation">,</span> <span class="token number">0644</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">MODULE_PARM_DESC</span><span class="token punctuation">(</span>debug<span class="token punctuation">,</span> <span class="token string">"DNS Resolver debugging mask"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>看到<code>dns_resolver_debug</code>是由<code>debug</code>这个参数控制的，那么就简单了，我们手动重新加载这个模块，并加上debug参数就行：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">]</span># rmmod ceph           # 先卸载依赖ceph模块
<span class="token punctuation">]</span># rmmod libceph        # 卸载libceph模块
<span class="token punctuation">]</span># rmmod dns_resolver   # 卸载dns_resolver
<span class="token punctuation">]</span># modprobe dns_resolver debug<span class="token operator">=</span><span class="token number">1</span>    # 加载dns_resolver模块，参数debug<span class="token operator">=</span><span class="token number">1</span>
<span class="token punctuation">]</span># modprobe ceph    # 加载ceph模块<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>再尝试<code>mount</code>一下，并且看一下<code>dmesg</code>信息：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">]</span># mount <span class="token operator">-</span>t ceph mon1<span class="token punctuation">.</span>ichenfu<span class="token punctuation">.</span>com<span class="token operator">:</span><span class="token number">6789</span><span class="token punctuation">,</span>mon2<span class="token punctuation">.</span>ichenfu<span class="token punctuation">.</span>com<span class="token operator">:</span><span class="token number">6789</span><span class="token punctuation">,</span>mon3<span class="token punctuation">.</span>ichenfu<span class="token punctuation">.</span>com<span class="token operator">:</span><span class="token number">6789</span><span class="token operator">:</span><span class="token operator">/</span> <span class="token operator">/</span>tmp<span class="token operator">/</span>data
mount<span class="token operator">:</span> mount mon1<span class="token punctuation">.</span>ichenfu<span class="token punctuation">.</span>com<span class="token operator">:</span><span class="token number">6789</span><span class="token punctuation">,</span>mon2<span class="token punctuation">.</span>ichenfu<span class="token punctuation">.</span>com<span class="token operator">:</span><span class="token number">6789</span><span class="token punctuation">,</span>mon3<span class="token punctuation">.</span>ichenfu<span class="token punctuation">.</span>com<span class="token operator">:</span><span class="token number">6789</span><span class="token operator">:</span><span class="token operator">/</span> on <span class="token operator">/</span>tmp<span class="token operator">/</span>data failed<span class="token operator">:</span> No such process
<span class="token punctuation">]</span># dmesg
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">[</span> <span class="token number">3056.185724</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>mount <span class="token punctuation">]</span> <span class="token operator">==</span><span class="token operator">></span> <span class="token function">dns_query</span><span class="token punctuation">(</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">,</span>mon1<span class="token punctuation">.</span>ichenfu<span class="token punctuation">.</span>com<span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span> <span class="token number">3056.185733</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>mount <span class="token punctuation">]</span> call <span class="token function">request_key</span><span class="token punctuation">(</span><span class="token punctuation">,</span>mon1<span class="token punctuation">.</span>ichenfu<span class="token punctuation">.</span>com<span class="token punctuation">,</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span> <span class="token number">3056.185910</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>mount <span class="token punctuation">]</span> <span class="token operator">&lt;=</span><span class="token operator">=</span> <span class="token function">dns_query</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span>
<span class="token punctuation">[</span> <span class="token number">3056.185916</span><span class="token punctuation">]</span> libceph<span class="token operator">:</span> resolve <span class="token char">'mon1.ichenfu.com'</span> <span class="token punctuation">(</span>ret<span class="token operator">=</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">:</span> failed
<span class="token punctuation">[</span> <span class="token number">3056.185921</span><span class="token punctuation">]</span> libceph<span class="token operator">:</span> parse_ips bad ip 'mon1<span class="token punctuation">.</span>ichenfu<span class="token punctuation">.</span>com<span class="token operator">:</span><span class="token number">6789</span><span class="token punctuation">,</span>mon2<span class="token punctuation">.</span>ichenfu<span class="token punctuation">.</span>com<span class="token operator">:</span><span class="token number">6789</span><span class="token punctuation">,</span>mon3<span class="token punctuation">.</span>ichenfu<span class="token punctuation">.</span>com<span class="token operator">:</span><span class="token number">6789</span>'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>看到<code>dns_query</code>的返回是<code>-2</code>，用perror看一下这个errno的意义：<code>OS error code   2:  No such file or directory</code>，没有找到文件，没找到什么文件呢？再看看这个模块的文档吧，文档在<a href="https://www.kernel.org/doc/Documentation/networking/dns_resolver.txt">https://www.kernel.org/doc/Documentation/networking/dns_resolver.txt</a>：</p>
<blockquote><h1 id="OVERVIEW"><a href="#OVERVIEW" class="headerlink" title="&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;OVERVIEW"></a>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>OVERVIEW</h1><p>The DNS resolver module provides a way for kernel services to make DNS queries<br>by way of requesting a key of key type dns_resolver.  These queries are<br>upcalled to userspace through &#x2F;sbin&#x2F;request-key.</p>
<p>These routines must be supported by userspace tools dns.upcall, cifs.upcall and<br>request-key.  It is under development and does not yet provide the full feature<br>set.  The features it does support include:</p>
<p> (*) Implements the dns_resolver key_type to contact userspace.</p>
<p>It does not yet support the following AFS features:</p>
<p> (*) Dns query support for AFSDB resource record.</p>
<p>This code is extracted from the CIFS filesystem.</p>
</blockquote>

<p>这个模块给内核提供一个查询DNS记录的方法，查询通过用户空间的<code>/sbin/request-key</code>进行，也就是说，这个模块依赖<code>/sbin/request-key</code>这个程序。<br>于是在机器上看了一下，果然，这个程序不存在。。又查询了一下，发现这个程序由<code>keyutils</code>这个包提供，<code>yum install -y keyutils</code>安装了这个包之后，问题解决了。<br>文档里提到有个配置文件<code>/etc/request-key.conf</code>，再看看这个配置文件里的配置：</p>
<pre class="line-numbers language-none"><code class="language-none">...
#OP     TYPE    DESCRIPTION     CALLOUT INFO    PROGRAM ARG1 ARG2 ARG3 ...
#&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;
create  dns_resolver *          *               &#x2F;sbin&#x2F;key.dns_resolver %k
...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>发现还依赖<code>/sbin/key.dns_resolver</code>，不过这个也是包含在<code>keyutils</code>包里的。<br>好吧，问题也总算是解决了。</p>
]]></content>
      <categories>
        <category>Ceph</category>
      </categories>
      <tags>
        <tag>mount CephFS</tag>
        <tag>No such process</tag>
      </tags>
  </entry>
  <entry>
    <title>使用libguestfs挂载qcow2文件</title>
    <url>/2019/12/19/mount-qcow2-with-libguestfs/</url>
    <content><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> yum <span class="token function">install</span> libguestfs-tools      <span class="token comment"># Fedora/RHEL/CentOS</span>
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> libguestfs-tools  <span class="token comment"># Debian/Ubuntu</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h2 id="挂载"><a href="#挂载" class="headerlink" title="挂载"></a>挂载</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /tmp/mnt
guestmount <span class="token parameter variable">-a</span> xxxx.qcow2 <span class="token parameter variable">-m</span> /dev/sda1 <span class="token parameter variable">--rw</span> /tmp/mnt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>其中<code>/dev/sda1</code>参数是目标文件中的分区名称，如果输入错误，会报错并提示正确的分区名。</p>
<h2 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">guestunmount /tmp/mnt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://libguestfs.org/guestfs-recipes.1.html">guestfs-recipes - libguestfs, guestfish and virt tools recipes</a>页面提供了libguestfs其他工具的一些使用方法，可供参考。</p>
]]></content>
      <categories>
        <category>效率配置</category>
      </categories>
      <tags>
        <tag>libguestfs</tag>
        <tag>qcow2</tag>
      </tags>
  </entry>
  <entry>
    <title>分享一个记录LSI RAID卡芯片和各个OEM对应卡型号列表的神贴</title>
    <url>/2022/11/05/lsi-raid-controller-and-hba-complete-listing-plus-oem-models/</url>
    <content><![CDATA[<p>最近想买一张拆机的HBA卡组一个NAS玩玩，目前用SAS 2308的拆机OEM HBA卡（IT Mode，也可以刷固件刷成IR Mode从而直接变成RAID卡，但是只支持RAID 0, 1, 1E和10）只需要不到100块钱，非常划算，除了功耗高点（差不多10W）比较热之外，感觉没啥缺点。</p>
<p>于是就被各种原厂的或者OEM厂的各种型号搞晕了，因为基于这个芯片的各种OEM马甲卡实在太多了。于是乎就找到了一篇神贴，帖子里覆盖了几乎所有的LSI的RAID卡芯片以及大部分国外厂商对应的OEM卡型号，而且一直在更新，最新的一些SAS芯片也有记录，比较可惜的是国内的一些OEM厂商，特别是在淘宝保有量相当大的浪潮的OEM卡型号没有记录。</p>
<p>帖子的地址在：<a href="https://forums.servethehome.com/index.php?threads/lsi-raid-controller-and-hba-complete-listing-plus-oem-models.599/">LSI RAID Controller and HBA Complete Listing Plus OEM Models</a>。有需要的可以参考一下。</p>
<p>后续组NAS的经历我也会持续分享，敬请关注~</p>
]]></content>
      <categories>
        <category>日常折腾</category>
      </categories>
      <tags>
        <tag>LSI</tag>
        <tag>RAID</tag>
      </tags>
  </entry>
  <entry>
    <title>多网卡环境下利用策略路由实现网络流量同进同出</title>
    <url>/2020/11/24/multi-nics-policy-routing/</url>
    <content><![CDATA[<p>当一台机器有超过1块网卡，并且配置的IP地址不在一个段里的时候，会出现在外部只有一个IP地址能够ping通的情况，举个最简单的例子：</p>
<p>一个有2块网卡的机器：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@test<span class="token punctuation">]</span><span class="token comment"># ip addr</span>
<span class="token number">2</span>: enp24s0f0: <span class="token operator">&lt;</span>BROADCAST,MULTICAST,UP,LOWER_UP<span class="token operator">></span> mtu <span class="token number">1500</span> qdisc mq state UP group default qlen <span class="token number">1000</span>
    link/ether <span class="token number">11</span>:11:11:11:11:11 brd ff:ff:ff:ff:ff:ff
    inet <span class="token number">192.168</span>.100.10/24 brd <span class="token number">192.168</span>.100.255 scope global enp24s0f1
       valid_lft forever preferred_lft forever
<span class="token number">3</span>: enp24s0f1: <span class="token operator">&lt;</span>BROADCAST,MULTICAST,UP,LOWER_UP<span class="token operator">></span> mtu <span class="token number">1500</span> qdisc mq state UP group default qlen <span class="token number">1000</span>
    link/ether <span class="token number">22</span>:22:22:22:22:22 brd ff:ff:ff:ff:ff:ff
    inet <span class="token number">192.168</span>.200.10/24 brd <span class="token number">192.168</span>.200.255 scope global enp24s0f1
       valid_lft forever preferred_lft forever<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看到两块网卡，分别配置了<code>192.168.100.10</code>和<code>192.168.200.10</code>这两个IP，再看看机器的默认路由：<span id="more"></span></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@test<span class="token punctuation">]</span><span class="token comment"># ip route</span>
default via <span class="token number">192.168</span>.100.1 dev enp24s0f0
<span class="token number">192.168</span>.100.0/24 dev enp24s0f0 proto kernel scope <span class="token function">link</span> src <span class="token number">192.168</span>.100.10
<span class="token number">192.168</span>.200.0/24 dev enp24s0f1 proto kernel scope <span class="token function">link</span> src <span class="token number">192.168</span>.200.10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>从路由可以发现这机器的默认网关是<code>192.168.100.1</code>，那么，如果跨越网关去ping这台机器的话，会出现只有<code>192.168.100.10</code>能通的情况：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@test2<span class="token punctuation">]</span><span class="token comment"># ping 192.168.100.10 -c 2</span>
PING <span class="token number">192.168</span>.100.10 <span class="token punctuation">(</span><span class="token number">192.168</span>.100.10<span class="token punctuation">)</span> <span class="token number">56</span><span class="token punctuation">(</span><span class="token number">84</span><span class="token punctuation">)</span> bytes of data.
<span class="token number">64</span> bytes from <span class="token number">192.168</span>.100.10: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">56</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">1.84</span> ms
<span class="token number">64</span> bytes from <span class="token number">192.168</span>.100.10: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">2</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">56</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.804</span> ms

--- <span class="token number">192.168</span>.100.10 <span class="token function">ping</span> statistics ---
<span class="token number">2</span> packets transmitted, <span class="token number">2</span> received, <span class="token number">0</span>% packet loss, <span class="token function">time</span> 1001ms
rtt min/avg/max/mdev <span class="token operator">=</span> <span class="token number">0.804</span>/1.319/1.835/0.515 ms

<span class="token punctuation">[</span>root@test2<span class="token punctuation">]</span><span class="token comment"># ping 192.168.200.10 -c 2</span>
PING <span class="token function">ping</span> <span class="token number">192.168</span>.200.10 <span class="token punctuation">(</span>ping <span class="token number">192.168</span>.200.10<span class="token punctuation">)</span> <span class="token number">56</span><span class="token punctuation">(</span><span class="token number">84</span><span class="token punctuation">)</span> bytes of data.
^C
--- <span class="token function">ping</span> <span class="token number">192.168</span>.200.10 <span class="token function">ping</span> statistics ---
<span class="token number">2</span> packets transmitted, <span class="token number">0</span> received, <span class="token number">100</span>% packet loss, <span class="token function">time</span> 1062ms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看到只有第一个IP能通。那么，如果想让两个IP都能通信需要怎么做呢？我们简单分析一下：</p>
<p>假设ping的源主机IP地址是<code>192.168.1.20</code>，那么ping包会首先到达<code>192.168.200.0/24</code>的网关，在这个场景是<code>192.168.200.1</code>，然后网关把包转发给机器的第二块网卡，从接收的这条链路来说，是没有问题的。</p>
<p>那么回包的链路呢？因为发起通信的源IP不在同网段，所以会查询路由表，会根据路由表发给默认网关，而测试机器的默认网关是<code>192.168.100.1</code>，需要将流量从第一块网卡出去。</p>
<p>从回包的链路考虑就会有一些问题，相当于流量从一块网卡进来，但是又从另外网卡出去。默认情况下，Linux会通过一个Reverse Path Filtering (rp_filter)的机制，限制这种情况发生。<br>那么要修改也很简单：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@test2<span class="token punctuation">]</span><span class="token comment"># echo "net.ipv4.conf.all.rp_filter = 0" >> /etc/sysctl.conf</span>
<span class="token punctuation">[</span>root@test2<span class="token punctuation">]</span><span class="token comment"># sysctl -p</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>配置<code>rp_filter=0</code>之后，再去测试，发现第二块网卡已经可以正常被外部访问了。</p>
<p>到这里，网络通断问题算是解决了，但是呢，流量路径并不是最优解。目前这个情况，所有出去的流量全都走网卡1，一方面网卡2的出方向带宽浪费了，另外一方面如果网卡1出现一些问题导致中断，那网卡2的IP地址也无法访问了，可用性并没有提升。</p>
<p>针对两块网卡的机器，一个很自然的想法，是不是可以某一块网卡进来的流量，也从同一块网卡出去呢？</p>
<p>这里就需要策略路由的帮助了，其实这个问题，可以转化成根据source地址选择不同的路由，因为从这台机器发出去的网络包，源地址不是<code>192.168.100.10</code>，就是<code>192.168.200.10</code>，那需求就很简单了，如果发现源地址是<code>192.168.100.10</code>，那就走网卡1的默认路由出去，如果源地址是<code>192.168.200.10</code>，那就走网卡2的默认路由出去。这样的话，相当于机器上有两个默认路由了，这样可以么？</p>
<p>答案是可以的，不过需要将这两个默认路由分到两张不同的路由表上。根据<a href="http://linux-ip.net/html/routing-tables.html">这篇Routing Tables文章</a>可以看到Linux支持很多张路由表，其实默认我们用<code>ip route</code>命令操作的就是<code>main</code>这张表。通过加表id或者名字的方式，可以让ip命令操作不同的路由表。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@test<span class="token punctuation">]</span><span class="token comment"># ip route add default via 192.168.200.1 dev enp24s0f1 table 101</span>
<span class="token punctuation">[</span>root@test<span class="token punctuation">]</span><span class="token comment"># ip route show table 101</span>
default via <span class="token number">192.168</span>.200.1 dev enp24s0f1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>这里添加了一条新的默认路由<code>default via 192.168.200.1 dev enp24s0f1</code>到编号为101的表里。现在有了路由表，还需要一个策略，来让对应源地址的流量查找这张路由表就行了：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@test<span class="token punctuation">]</span><span class="token comment"># ip rule add from 192.168.200.0/24 table 101</span>
<span class="token punctuation">[</span>root@test<span class="token punctuation">]</span><span class="token comment"># ip rule show</span>
<span class="token number">0</span>:      from all lookup <span class="token builtin class-name">local</span>
<span class="token number">32765</span>:  from <span class="token number">192.168</span>.200.0/24 lookup <span class="token number">101</span>
<span class="token number">32766</span>:  from all lookup main
<span class="token number">32767</span>:  from all lookup default<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这里加了一条规则，如果源地址在<code>192.168.200.0/24</code>内，就使用101这张路由表，而这张路由表就上面加的以网卡2为出口的。这样就实现了网卡流量同进同出的需求。</p>
<p>其实可以通过<code>ip rule show</code>看到，默认有几条规则，优先级最高的规则是local这张表，其次是刚添加的规则，然后是main这张表，最后是default这张表。</p>
<p>最后还有一个问题，这些配置怎么持久化呢？参考红帽的文档<a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/networking_guide/sec-configuring_static_routes_in_ifcfg_files#sec-Understanding_Policy-routing">Networking Guide</a>，可以在<code>/etc/sysconfig/network-scripts</code>目录下，添加<code>rule-XXXX</code>和<code>route-XXXX</code>文件，实现配置持久化：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@test<span class="token punctuation">]</span><span class="token comment"># cat route-enp24s0f1</span>
default via <span class="token number">192.168</span>.200.1 dev eth1 table <span class="token number">101</span>
<span class="token punctuation">[</span>root@test<span class="token punctuation">]</span><span class="token comment"># cat rule-enp24s0f1</span>
from <span class="token number">192.168</span>.200.0/24 table <span class="token number">101</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>添加了配置文件后，执行<code>ifup enp24s0f1</code>就可以实现自动的配置了。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>rp_filter</tag>
        <tag>策略路由</tag>
      </tags>
  </entry>
  <entry>
    <title>挂载CephFS出现wrong fs type的问题</title>
    <url>/2020/09/04/mount-cephfs-wrong-fs-type/</url>
    <content><![CDATA[<p>最近在我们的集群中遇到一个问题，在一台机器上，尝试挂载CephFS失败了，报错如下：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">~<span class="token punctuation">]</span><span class="token comment"># mount -t ceph mon1.ichenfu.com:6789,mon2.ichenfu.com:6789,mon3.ichenfu.com:6789:/ /tmp/data</span>
mount: wrong fs type, bad option, bad superblock on mon1.ichenfu.com:6789,mon2.ichenfu.com:6789,mon3.ichenfu.com:6789:/,
       missing codepage or helper program, or other error

       In some cases useful info is found <span class="token keyword">in</span> syslog - try
       <span class="token function">dmesg</span> <span class="token operator">|</span> <span class="token function">tail</span> or so.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>因为之前遇到<a href="/2019/09/07/mount-cephfs-no-such-process/">挂载CephFS时出现failed: No such process的问题</a>，这两个问题看起来有点相似，但是确实有些不一样。因为有前车之鉴，所以顺着之前的思路，首先根据报错的提示，看看dmesg里有没有什么有用的信息：</p>
<span id="more"></span>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>  <span class="token number">11457.592011</span><span class="token punctuation">]</span> FS-Cache: Loaded
<span class="token punctuation">[</span>  <span class="token number">11457.617265</span><span class="token punctuation">]</span> Key <span class="token builtin class-name">type</span> ceph registered
<span class="token punctuation">[</span>  <span class="token number">11457.617686</span><span class="token punctuation">]</span> libceph: loaded <span class="token punctuation">(</span>mon/osd proto <span class="token number">15</span>/24<span class="token punctuation">)</span>
<span class="token punctuation">[</span>  <span class="token number">11457.640554</span><span class="token punctuation">]</span> FS-Cache: Netfs <span class="token string">'ceph'</span> registered <span class="token keyword">for</span> caching
<span class="token punctuation">[</span>  <span class="token number">11457.640558</span><span class="token punctuation">]</span> ceph: loaded <span class="token punctuation">(</span>mds proto <span class="token number">32</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span>  <span class="token number">11457.640978</span><span class="token punctuation">]</span> libceph: parse_ips bad <span class="token function">ip</span> <span class="token string">'mon1.ichenfu.com:6789,mon2.ichenfu.com:6789,mon3.ichenfu.com:6789'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>看起来和之前的错误很相似，都是出在域名解析上，同样的手法，把域名换成IP地址试试，发现可以正常挂载，那么问题肯定还是出在域名解析上了，只是这次和上次不是同一个错误罢了。</p>
<p>从strace的结果，确实也能看出一些不同，上次mount调用返回值是<code>ESRCH</code>，而这次的返回值是<code>EINVAL</code>：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">stat<span class="token punctuation">(</span><span class="token string">"/sbin/fs/mount.ceph"</span>, 0x7ffd47a8b8d0<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token parameter variable">-1</span> ENOENT <span class="token punctuation">(</span>No such <span class="token function">file</span> or directory<span class="token punctuation">)</span>
mount<span class="token punctuation">(</span><span class="token string">"mon1.ichenfu.com:6789,mon2.ichenfu.com:6789,mon3.ichenfu.com:6789:/"</span>, <span class="token string">"/tmp/ceph"</span>, <span class="token string">"ceph"</span>, MS_MGC_VAL, NULL<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token parameter variable">-1</span> EINVAL <span class="token punctuation">(</span>Invalid argument<span class="token punctuation">)</span>
open<span class="token punctuation">(</span><span class="token string">"/usr/share/locale/locale.alias"</span>, O_RDONLY<span class="token operator">|</span>O_CLOEXEC<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>于是尝试把相关内核模块的debug模块打开，看看能不能输出一些有用的日志信息，但是这次发现有些不太一样了：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">~<span class="token punctuation">]</span><span class="token comment"># lsmod |grep ceph</span>
ceph                  <span class="token number">327680</span>  <span class="token number">0</span>
libceph               <span class="token number">245760</span>  <span class="token number">1</span> ceph
libcrc32c              <span class="token number">16384</span>  <span class="token number">1</span> libceph
fscache                <span class="token number">65536</span>  <span class="token number">1</span> ceph<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>通过lsmod看到libceph模块不再依赖dns_resolver模块了？这是什么意思？需要说明的是，这台机器和之前还有一个区别，就是安装了<code>centos-altarch</code>提供的更新的内核。当前的内核版本是<code>4.19.113-300.el7.x86_64</code>，难道是新内耗的代码做了修改，不再依赖dns_resolver了？于是赶紧又找到了当前内核的代码，看看和之前是不是有什么不同：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*
 * Parse an ip[:port] list into an addr array.  Use the default
 * monitor port if a port isn't specified.
 */</span>
<span class="token keyword">int</span> <span class="token function">ceph_parse_ips</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>c<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>end<span class="token punctuation">,</span>
                   <span class="token keyword">struct</span> <span class="token class-name">ceph_entity_addr</span> <span class="token operator">*</span>addr<span class="token punctuation">,</span>
                   <span class="token keyword">int</span> max_count<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>count<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> i<span class="token punctuation">,</span> ret <span class="token operator">=</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>
        <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>p <span class="token operator">=</span> c<span class="token punctuation">;</span>

        <span class="token function">dout</span><span class="token punctuation">(</span><span class="token string">"parse_ips on '%.*s'\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>end<span class="token operator">-</span>c<span class="token punctuation">)</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> max_count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>ipend<span class="token punctuation">;</span>
                <span class="token keyword">struct</span> <span class="token class-name">sockaddr_storage</span> <span class="token operator">*</span>ss <span class="token operator">=</span> <span class="token operator">&amp;</span>addr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>in_addr<span class="token punctuation">;</span>
                <span class="token keyword">int</span> port<span class="token punctuation">;</span>
                <span class="token keyword">char</span> delim <span class="token operator">=</span> <span class="token char">','</span><span class="token punctuation">;</span>

                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>p <span class="token operator">==</span> <span class="token char">'['</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                        delim <span class="token operator">=</span> <span class="token char">']'</span><span class="token punctuation">;</span>
                        p<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
                <span class="token comment">// ceph_parse_ips调用ceph_parse_server_name函数</span>
                ret <span class="token operator">=</span> <span class="token function">ceph_parse_server_name</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> end <span class="token operator">-</span> p<span class="token punctuation">,</span> ss<span class="token punctuation">,</span> delim<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ipend<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>ret<span class="token punctuation">)</span>
                        <span class="token keyword">goto</span> bad<span class="token punctuation">;</span>
                ret <span class="token operator">=</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token punctuation">&#125;</span>

bad<span class="token operator">:</span>
        <span class="token comment">// 失败了会在dmesg输出错误信息，正是我们看到的格式</span>
        <span class="token function">pr_err</span><span class="token punctuation">(</span><span class="token string">"parse_ips bad ip '%.*s'\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>end <span class="token operator">-</span> c<span class="token punctuation">)</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">EXPORT_SYMBOL</span><span class="token punctuation">(</span>ceph_parse_ips<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>再看<code>ceph_parse_server_name</code>这个函数，发现会继续调用<code>ceph_dns_resolve_name</code></p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*
 * Parse a server name (IP or hostname). If a valid IP address is not found
 * then try to extract a hostname to resolve using userspace DNS upcall.
 */</span>
<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">ceph_parse_server_name</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">,</span> <span class="token class-name">size_t</span> namelen<span class="token punctuation">,</span>
                        <span class="token keyword">struct</span> <span class="token class-name">sockaddr_storage</span> <span class="token operator">*</span>ss<span class="token punctuation">,</span> <span class="token keyword">char</span> delim<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>ipend<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> ret<span class="token punctuation">;</span>

        ret <span class="token operator">=</span> <span class="token function">ceph_pton</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> namelen<span class="token punctuation">,</span> ss<span class="token punctuation">,</span> delim<span class="token punctuation">,</span> ipend<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>ret<span class="token punctuation">)</span>
                ret <span class="token operator">=</span> <span class="token function">ceph_dns_resolve_name</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> namelen<span class="token punctuation">,</span> ss<span class="token punctuation">,</span> delim<span class="token punctuation">,</span> ipend<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>最后看到<code>ceph_dns_resolve_name</code>这个函数，发现在内核里有两个实现：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*
 * Extract hostname string and resolve using kernel DNS facility.
 */</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CONFIG_CEPH_LIB_USE_DNS_RESOLVER</span></span>
<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">ceph_dns_resolve_name</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">,</span> <span class="token class-name">size_t</span> namelen<span class="token punctuation">,</span>
                <span class="token keyword">struct</span> <span class="token class-name">sockaddr_storage</span> <span class="token operator">*</span>ss<span class="token punctuation">,</span> <span class="token keyword">char</span> delim<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>ipend<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
        <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>end<span class="token punctuation">,</span> <span class="token operator">*</span>delim_p<span class="token punctuation">;</span>
        <span class="token keyword">char</span> <span class="token operator">*</span>colon_p<span class="token punctuation">,</span> <span class="token operator">*</span>ip_addr <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> ip_len<span class="token punctuation">,</span> ret<span class="token punctuation">;</span>

        <span class="token comment">/*
         * The end of the hostname occurs immediately preceding the delimiter or
         * the port marker (':') where the delimiter takes precedence.
         */</span>
        delim_p <span class="token operator">=</span> <span class="token function">memchr</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> delim<span class="token punctuation">,</span> namelen<span class="token punctuation">)</span><span class="token punctuation">;</span>
        colon_p <span class="token operator">=</span> <span class="token function">memchr</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token char">':'</span><span class="token punctuation">,</span> namelen<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>delim_p <span class="token operator">&amp;&amp;</span> colon_p<span class="token punctuation">)</span>
                end <span class="token operator">=</span> delim_p <span class="token operator">&lt;</span> colon_p <span class="token operator">?</span> delim_p <span class="token operator">:</span> colon_p<span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>delim_p <span class="token operator">&amp;&amp;</span> colon_p<span class="token punctuation">)</span>
                end <span class="token operator">=</span> colon_p<span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                end <span class="token operator">=</span> delim_p<span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>end<span class="token punctuation">)</span> <span class="token comment">/* case: hostname:/ */</span>
                        end <span class="token operator">=</span> name <span class="token operator">+</span> namelen<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>end <span class="token operator">&lt;=</span> name<span class="token punctuation">)</span>
                <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>

        <span class="token comment">/* do dns_resolve upcall */</span>
        ip_len <span class="token operator">=</span> <span class="token function">dns_query</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> end <span class="token operator">-</span> name<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>ip_addr<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>ip_len <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>
                ret <span class="token operator">=</span> <span class="token function">ceph_pton</span><span class="token punctuation">(</span>ip_addr<span class="token punctuation">,</span> ip_len<span class="token punctuation">,</span> ss<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span>
                ret <span class="token operator">=</span> <span class="token operator">-</span>ESRCH<span class="token punctuation">;</span>

        <span class="token function">kfree</span><span class="token punctuation">(</span>ip_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token operator">*</span>ipend <span class="token operator">=</span> end<span class="token punctuation">;</span>

        <span class="token function">pr_info</span><span class="token punctuation">(</span><span class="token string">"resolve '%.*s' (ret=%d): %s\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>end <span class="token operator">-</span> name<span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span>
                        ret<span class="token punctuation">,</span> ret <span class="token operator">?</span> <span class="token string">"failed"</span> <span class="token operator">:</span> <span class="token function">ceph_pr_addr</span><span class="token punctuation">(</span>ss<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
<span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">ceph_dns_resolve_name</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">,</span> <span class="token class-name">size_t</span> namelen<span class="token punctuation">,</span>
                <span class="token keyword">struct</span> <span class="token class-name">sockaddr_storage</span> <span class="token operator">*</span>ss<span class="token punctuation">,</span> <span class="token keyword">char</span> delim<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>ipend<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>如果存在<code>CONFIG_CEPH_LIB_USE_DNS_RESOLVER</code>这个宏，则会调用dns_resolver提供的相关接口查询域名DNS，如果不存在这个宏，则直接就是另一个实现，这个实现直接返回<code>EINVAL</code>。从代码来看<code>ceph_dns_resolve_name</code>的实现没有什么变化，那难道是没有打开<code>CONFIG_CEPH_LIB_USE_DNS_RESOLVER</code>这个选项？于是转到内核的config文件，看看编译内核时的选项是什么：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">~<span class="token punctuation">]</span><span class="token comment"># grep CONFIG_CEPH_LIB_USE_DNS_RESOLVER /boot/config-4.19.113-300.el7.x86_64</span>
<span class="token comment"># CONFIG_CEPH_LIB_USE_DNS_RESOLVER is not set</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>发现确实当前用的<code>4.19.113-300.el7.x86_64</code>这个内核没有开这个选项。再看看其他的内核呢？</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">~<span class="token punctuation">]</span><span class="token comment"># grep CONFIG_CEPH_LIB_USE_DNS_RESOLVER /boot/config-*</span>
/boot/config-3.10.0-1062.el7.x86_64:CONFIG_CEPH_LIB_USE_DNS_RESOLVER<span class="token operator">=</span>y
/boot/config-4.19.113-300.el7.x86_64:<span class="token comment"># CONFIG_CEPH_LIB_USE_DNS_RESOLVER is not set</span>
/boot/config-4.4.235-1.el7.elrepo.x86_64:<span class="token comment"># CONFIG_CEPH_LIB_USE_DNS_RESOLVER is not set</span>
/boot/config-5.8.6-2.el7.elrepo.x86_64:<span class="token comment"># CONFIG_CEPH_LIB_USE_DNS_RESOLVER is not set</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>最后发现除了CentOS 7默认的<code>3.10.0-1062.el7.x86_64</code>内核之外，<code>CentOS altarch</code>、<code>elrepo</code>里提供的内核，都没有开启这个选项，也就是说如果使用这些内核，那挂载CephFS的时候，就不能使用域名，只能使用IP地址指定Monitor的地址了。</p>
<p>有点不明白这些内核为什么不打开这个选项。</p>
]]></content>
      <categories>
        <category>Ceph</category>
      </categories>
      <tags>
        <tag>mount CephFS</tag>
        <tag>wrong fs type</tag>
        <tag>CentOS altarch</tag>
        <tag>elrepo</tag>
      </tags>
  </entry>
  <entry>
    <title>NetworkManager简单教程</title>
    <url>/2021/02/16/networkmanager-tutorial/</url>
    <content><![CDATA[<p>最近在尝试切换到CentOS 8，虽然不久前CentOS宣布从RHEL下游转向CentOS Stream了，但是相信以后会有类似的替代品出现，本质上也是在适应RHEL 8。这一试不要紧，一开始就被NetworkManager给吓住了，这都什么玩意，怎么这么难用？</p>
<p>一开始呢，想着先用被废弃但是还没被删除的老network-scripts顶一顶，想回滚也很简单：执行<code>dnf install -y network-scripts &amp;&amp; systemctl disable NetworkManager &amp;&amp; systemctl enable network</code>就好了，剩下的操作和CentOS 7里的ifup、ifdown脚本没什么区别，只是在执行的时候会出现一些警告信息提示这种方式已经废弃。</p>
<p>但是又想了想，面对新事物，第一个反应就是想着禁用或者删除它，特别是一个这和当初从CentOS 6切换到CentOS 7时候抵制systemd一样的么？特别是从大方向上看，NetworkManger会和systemd一样被越来越多的发行版接受，那学习一下并且适应新的网络管理方式，不是个坏事。</p>
<p>其实NetworkManager不是个新事物了，之前笔记本装的ArchLinux系统，很早就切换到NetworkManager了，只不过因为有GUI管理工具，而且场景比较单一，所以没有过多的关注。等到了服务器端，场景比较复杂，以前积累的东西就不管用了。最主要的，是和之前管理网络的思路出现了一些冲突，产生了一些排斥心理，觉得不好用。等静下心来仔细看了看相关的文档，也做了一些实验，适应了这种新的管理方式之后，发现NetworkManager还是值得一试的。所以还是面对几个场景分享一下几个例子，希望能帮助到更多的人完成切换吧。<span id="more"></span></p>
<h3 id="NetworkManger的设计哲学"><a href="#NetworkManger的设计哲学" class="headerlink" title="NetworkManger的设计哲学"></a>NetworkManger的设计哲学</h3><p>要想了解一个东西，得退回到最开始，看看它的设计思路是什么。确实，NetworkManager从设计之初的想法就不太一样，<code>man NetworkManager</code>里可以看到它的设计初衷：</p>
<blockquote><p>The NetworkManager daemon attempts to make networking configuration and operation as painless and automatic as possible by<br>managing the primary network connection and other network interfaces, like Ethernet, Wi-Fi, and Mobile Broadband devices.</p>
</blockquote>

<p>从某些角度来说，更像是Windows那样尽量让用户以最简单和最无痛的方式获得网络连接，很多操作都是自动的，而之前发行版的脚本配置模式，如果没有明确的配置文件，则不会有任何网络连接。个人觉得这个特点，在桌面端其实挺OK的，但是对于服务器来说，反而有点好心干坏事，因为这种自动的行为会影响系统管理员的预期，这也是一开始最不适应的地方，网络不按预期工作，明明没有配置，为啥网卡被启动了。不过不用担心，这些问题，都有解决办法，我们一点点去看！</p>
<h3 id="两个重要的概念"><a href="#两个重要的概念" class="headerlink" title="两个重要的概念"></a>两个重要的概念</h3><p>在NetworkManager里，有两个非常重要的概念。基本上，理清楚这两个概念对应的含义和区别，剩下的通过文档就可以非常容易的掌握NetworkManager的使用了。</p>
<p>第一个概念是<em>device</em>，也就是设备，怎么理解呢，一个设备对应一个网口，基本上<code>ip link</code>里看到的那些都有对应的设备，基本上可以认为就是物理的网卡，每个物理网卡都会是一个<em>device</em>，当然，有些虚拟的网卡，也会是一个<em>device</em>，比如网桥bridge等。当然也有些区别，物理网卡是现实存在的设备，本质上最终是NetworkManager来管理它，而虚拟机网卡就是NetworkManager因为连接需要而生成的网卡。使用<code>nmcli device</code>命令，可以看到当前NetworkManager所识别的设备，以及：</p>
<pre><code>- 这个设备是否在NetworkManager的管理之下
- 设备所对应的连接配置信息
- 设备当前的连接配置
</code></pre>
<p>举个例子：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># nmcli device</span>
DEVICE  TYPE      STATE      CONNECTION
eth0    ethernet  connected  eth0
lo      loopback  unmanaged  --<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以很明确的看到我这台机器有两个设备，分别是<code>eth0</code>和<code>lo</code>，其中<code>eth0</code>是以太网类型，被NetworkManager管理且对应的连接配置为<code>eth0</code>，而<code>lo</code>是loopback，目前不被NetworkManager所管理。在终端里执行，正常的设备会显示绿色，不正常的设备显示成红色，不被管理的显示为灰色，还是很清晰的。</p>
<p>另外一个概念是<em>connection</em>，也就是连接。怎么理解呢，连接就是一系列配置，比如IP地址获取方式是DHCP或者手动配置，如果是手动配置，则配置哪些IP地址，网关，DNS等等信息，这些配置非常的多，就不一一细说了，具体的看文档就好。</p>
<p>需要注意的是，连接是需要最终被apply到某个<em>device</em>上的，而且针对同一个<em>device</em>，可以有多个<em>connection</em>。但是，在任意时刻，有且只能有一个活动的<em>connection</em>被apply到一个<em>device</em>。有点绕，但是思考一下这个场景就很容易理解了：针对笔记本的无线网卡，在公司，连接的自然是公司的WIFI，这就需要一个<em>connection</em>，到了家里，又需要连接家里的WIFI，这就是另外一个<em>connection</em>，这俩都是针对同一个<em>device</em>的配置，也不会同时起作用。其实这个场景在服务器上不太常见，所以一般情况下，服务器上基本就可以配置成一个<em>connection</em>对应一个<em>device</em>就解决了。</p>
<p>弄明白这俩者之间的关系，很多东西就很顺畅了。下面就是一些常见的例子：</p>
<h3 id="给网卡配置静态IP地址"><a href="#给网卡配置静态IP地址" class="headerlink" title="给网卡配置静态IP地址"></a>给网卡配置静态IP地址</h3><p>弄明白<em>connection</em>和<em>device</em>的关系之后，给网卡配置IP地址就很方便了：创建一个新的<em>connection</em>并把它apply到我们的<em>device</em>上。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># nmcli connection add type ethernet con-name eth0-static ifname eth0 ipv4.method manual ipv4.addresses "192.168.145.60/20" ipv4.gateway 192.168.144.1 ipv4.dns 114.114.114.114 ipv6.method auto</span>
Connection <span class="token string">'eth0-static'</span> <span class="token punctuation">(</span>3ae60979-d6f1-4dbb-8a25-ff1178e7305c<span class="token punctuation">)</span> successfully added.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>从命令上看应该还是很容易读懂的，创建一个新的<code>ethernet</code>类型的连接，名字叫做<code>eth0-static</code>，网卡名字是<code>eth0</code>，IPv4手动配置，地址网关DNS等等都填上，IPv6使用自动配置。</p>
<p>一般情况下，连接创建后如果对应设备没有活跃的其他连接，创建的连接会直接生效，如果没生效也比较简单，直接执行：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># nmcli connection up eth0-static</span>
Connection successfully activated <span class="token punctuation">(</span>D-Bus active path: /org/freedesktop/NetworkManager/ActiveConnection/4<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>执行完成后连接生效，可以通过<code>nmcli connection</code>和<code>ip addr</code>命令查看结果：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># nmcli connection</span>
NAME         UUID                                  TYPE      DEVICE
eth0-static  3ae60979-d6f1-4dbb-8a25-ff1178e7305c  ethernet  eth0
eth0         <span class="token number">72534820</span>-fb8e-4c5a-8d49-8c013441d390  ethernet  --
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># nmcli device</span>
DEVICE  TYPE      STATE      CONNECTION
eth0    ethernet  connected  eth0-static
lo      loopback  unmanaged  --
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># ip addr</span>
<span class="token number">1</span>: lo: <span class="token operator">&lt;</span>LOOPBACK,UP,LOWER_UP<span class="token operator">></span> mtu <span class="token number">65536</span> qdisc noqueue state UNKNOWN group default qlen <span class="token number">1000</span>
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet <span class="token number">127.0</span>.0.1/8 scope <span class="token function">host</span> lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope <span class="token function">host</span>
       valid_lft forever preferred_lft forever
<span class="token number">2</span>: eth0: <span class="token operator">&lt;</span>BROADCAST,MULTICAST,UP,LOWER_UP<span class="token operator">></span> mtu <span class="token number">1500</span> qdisc mq state UP group default qlen <span class="token number">1000</span>
    link/ether 00:15:5d:b3:80:01 brd ff:ff:ff:ff:ff:ff
    inet <span class="token number">192.168</span>.145.59/20 brd <span class="token number">192.168</span>.159.255 scope global noprefixroute eth0
       valid_lft forever preferred_lft forever
    inet6 fe80::a7cf:fd2:7970:4bd4/64 scope <span class="token function">link</span> noprefixroute
       valid_lft forever preferred_lft forever<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如果要修改一个连接，也很简单，执行<code>nmcli connection modify XXXX ...</code>就行了，语法和add差不多，不过修改一个连接需要注意的是，有些修改不会直接生效，需要执行<code>nmcli connection down XXXX; nmcli connection up XXXX</code>之后修改的属性才能生效。</p>
<h3 id="给网卡添加vlan-tag并配置IP地址"><a href="#给网卡添加vlan-tag并配置IP地址" class="headerlink" title="给网卡添加vlan tag并配置IP地址"></a>给网卡添加vlan tag并配置IP地址</h3><p>接下来一个例子是给网卡打vlan tag，这个场景也比较常见，特别是在交换机端是trunk口的情况下：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># nmcli connection add type vlan con-name eth1-vlan-100 ifname eth1.100 dev eth1 vlan.id 100 ipv4.method manual ipv4.addresses 192.168.100.10/24 ipv4.gateway 192.168.100.1</span>
Connection <span class="token string">'eth1-vlan-100'</span> <span class="token punctuation">(</span>c0036d90-1edf-4085-8b9c-691433fc5afd<span class="token punctuation">)</span> successfully added.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>可以发现和上个例子有一点点的不同，因为实际的流量必须通过某个设备出去，所以和之前相比需要多加上dev eth1参数，声明流量的出口。</p>
<p>Connection创建成功后自动激活了:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># nmcli connection</span>
NAME           UUID                                  TYPE      DEVICE
eth0-static    3ae60979-d6f1-4dbb-8a25-ff1178e7305c  ethernet  eth0
eth1-vlan-100  c0036d90-1edf-4085-8b9c-691433fc5afd  vlan      eth1.100
eth0           <span class="token number">72534820</span>-fb8e-4c5a-8d49-8c013441d390  ethernet  --
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># ip addr</span>
<span class="token number">1</span>: lo: <span class="token operator">&lt;</span>LOOPBACK,UP,LOWER_UP<span class="token operator">></span> mtu <span class="token number">65536</span> qdisc noqueue state UNKNOWN group default qlen <span class="token number">1000</span>
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet <span class="token number">127.0</span>.0.1/8 scope <span class="token function">host</span> lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope <span class="token function">host</span>
       valid_lft forever preferred_lft forever
<span class="token number">2</span>: eth0: <span class="token operator">&lt;</span>BROADCAST,MULTICAST,UP,LOWER_UP<span class="token operator">></span> mtu <span class="token number">1500</span> qdisc mq state UP group default qlen <span class="token number">1000</span>
    link/ether 00:15:5d:b3:80:01 brd ff:ff:ff:ff:ff:ff
    inet <span class="token number">192.168</span>.145.59/20 brd <span class="token number">192.168</span>.159.255 scope global noprefixroute eth0
       valid_lft forever preferred_lft forever
    inet6 fe80::a7cf:fd2:7970:4bd4/64 scope <span class="token function">link</span> noprefixroute
       valid_lft forever preferred_lft forever
<span class="token number">3</span>: eth1: <span class="token operator">&lt;</span>BROADCAST,MULTICAST,UP,LOWER_UP<span class="token operator">></span> mtu <span class="token number">1500</span> qdisc mq state UP group default qlen <span class="token number">1000</span>
    link/ether 00:15:5d:b3:80:02 brd ff:ff:ff:ff:ff:ff
<span class="token number">7</span>: eth1.100@eth1: <span class="token operator">&lt;</span>BROADCAST,MULTICAST,UP,LOWER_UP<span class="token operator">></span> mtu <span class="token number">1500</span> qdisc noqueue state UP group default qlen <span class="token number">1000</span>
    link/ether 00:15:5d:b3:80:02 brd ff:ff:ff:ff:ff:ff
    inet <span class="token number">192.168</span>.100.10/24 brd <span class="token number">192.168</span>.100.255 scope global noprefixroute eth1.100
       valid_lft forever preferred_lft forever
    inet6 fe80::6c74:c8d8:7448:370a/64 scope <span class="token function">link</span> noprefixroute
       valid_lft forever preferred_lft forever<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看到，因为有<code>eth1-vlan-100</code>这个<em>connection</em>并且是Active状态，所以NetworkManager创建了一个虚拟的<em>device</em>：<code>eth1.100</code>，如果我把这个<em>connection</em>给down掉之后:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># nmcli connection down eth1-vlan-100</span>
Connection <span class="token string">'eth1-vlan-100'</span> successfully deactivated <span class="token punctuation">(</span>D-Bus active path: /org/freedesktop/NetworkManager/ActiveConnection/15<span class="token punctuation">)</span>
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># ip a</span>
<span class="token number">1</span>: lo: <span class="token operator">&lt;</span>LOOPBACK,UP,LOWER_UP<span class="token operator">></span> mtu <span class="token number">65536</span> qdisc noqueue state UNKNOWN group default qlen <span class="token number">1000</span>
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet <span class="token number">127.0</span>.0.1/8 scope <span class="token function">host</span> lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope <span class="token function">host</span>
       valid_lft forever preferred_lft forever
<span class="token number">2</span>: eth0: <span class="token operator">&lt;</span>BROADCAST,MULTICAST,UP,LOWER_UP<span class="token operator">></span> mtu <span class="token number">1500</span> qdisc mq state UP group default qlen <span class="token number">1000</span>
    link/ether 00:15:5d:b3:80:01 brd ff:ff:ff:ff:ff:ff
    inet <span class="token number">192.168</span>.145.59/20 brd <span class="token number">192.168</span>.159.255 scope global noprefixroute eth0
       valid_lft forever preferred_lft forever
    inet6 fe80::a7cf:fd2:7970:4bd4/64 scope <span class="token function">link</span> noprefixroute
       valid_lft forever preferred_lft forever
<span class="token number">3</span>: eth1: <span class="token operator">&lt;</span>BROADCAST,MULTICAST,UP,LOWER_UP<span class="token operator">></span> mtu <span class="token number">1500</span> qdisc mq state UP group default qlen <span class="token number">1000</span>
    link/ether 00:15:5d:b3:80:02 brd ff:ff:ff:ff:ff:ff<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以发现<code>eth1.100</code>直接就没了。所以针对这些虚拟的<em>device</em>，它的生命周期和<em>connection</em>是一致的。</p>
<h3 id="配置网卡的Bonding"><a href="#配置网卡的Bonding" class="headerlink" title="配置网卡的Bonding"></a>配置网卡的Bonding</h3><p>接下来该轮到bonding了，bonding也是经常遇到的配置了，配置方法也比较简单：</p>
<p>首先先把bonding master给加上，并且配置好bonding的模式和其他参数，另外，由于bonding之后IP地址一般会配置到bond设备上，在添加的时候顺便也把IP这些信息也填上：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># nmcli connection add type bond con-name bonding-bond0 ifname bond0 bond.options "mode=balance-xor,miimon=100,xmit_hash_policy=layer3+4,updelay=5000" ipv4.method manual ipv4.addresses 192.168.100.10 ipv4.gateway 192.168.100.1</span>
<span class="token number">8.100</span>.10/24 ipv4.gateway <span class="token number">192.168</span>.100.1
Connection <span class="token string">'bonding-bond0'</span> <span class="token punctuation">(</span>a81a11b0-547e-4c6b-9518-62ce51d17ab4<span class="token punctuation">)</span> successfully added.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>添加完bonding master，再把两个slave添加到master口上：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># nmcli connection add type bond-slave con-name bond0-slave-ens1f0 ifname ens1f0 master bond0</span>
Connection <span class="token string">'bond0-slave-ens1f0'</span> <span class="token punctuation">(</span>be6285ae-e07a-468d-a302-342c233d1346<span class="token punctuation">)</span> successfully added.
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># nmcli connection add type bond-slave con-name bond0-slave-ens1f1 ifname ens1f1 master bond0</span>
Connection <span class="token string">'bond0-slave-ens1f1'</span> <span class="token punctuation">(</span>321aa982-5ca0-4379-b822-4200f366cc27<span class="token punctuation">)</span> successfully added.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>再Down&#x2F;Up一下bond口：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># nmcli connection down bonding-bond0;nmcli connection up bonding-bond0</span>
Connection <span class="token string">'bonding-bond0'</span> successfully deactivated <span class="token punctuation">(</span>D-Bus active path: /org/freedesktop/NetworkManager/ActiveConnection/251123<span class="token punctuation">)</span>
Connection successfully activated <span class="token punctuation">(</span>master waiting <span class="token keyword">for</span> slaves<span class="token punctuation">)</span> <span class="token punctuation">(</span>D-Bus active path: /org/freedesktop/NetworkManager/ActiveConnection/251126<span class="token punctuation">)</span>
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># nmcli connection</span>
NAME                UUID                                  TYPE      DEVICE
bonding-bond0       a81a11b0-547e-4c6b-9518-62ce51d17ab4  bond      bond0
bond0-slave-ens1f0  be6285ae-e07a-468d-a302-342c233d1346  ethernet  ens1f0
bond0-slave-ens1f1  321aa982-5ca0-4379-b822-4200f366cc27  ethernet  ens1f1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="添加dummy网卡并配置多个IP地址"><a href="#添加dummy网卡并配置多个IP地址" class="headerlink" title="添加dummy网卡并配置多个IP地址"></a>添加dummy网卡并配置多个IP地址</h3><p>再举个dummy网卡的例子，因为有其他部门目前在用DR模式的LVS负载均衡，所以需要配置dummy网卡和IP地址，之前也稍微看了看，也比较简单：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># nmcli connection add type dummy con-name dummy-dummy0 ifname dummy0 ipv4.method manual ipv4.addresses "1.1.1.1/32,2.2.2.2/32,3.3.3.3/32,4.4.4.4/32"</span>
Connection <span class="token string">'dummy-dummy0'</span> <span class="token punctuation">(</span>e02daf93-d1bc-4ec7-a985-7435426129be<span class="token punctuation">)</span> successfully added.
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># nmcli connection</span>
NAME          UUID                                  TYPE      DEVICE
System eth0   5fb06bd0-0bb0-7ffb-45f1-d6edd65f3e03  ethernet  eth0
dummy-dummy0  e02daf93-d1bc-4ec7-a985-7435426129be  dummy     dummy0
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># ip addr</span>
<span class="token number">1</span>: lo: <span class="token operator">&lt;</span>LOOPBACK,UP,LOWER_UP<span class="token operator">></span> mtu <span class="token number">65536</span> qdisc noqueue state UNKNOWN group default qlen <span class="token number">1000</span>
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet <span class="token number">127.0</span>.0.1/8 scope <span class="token function">host</span> lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope <span class="token function">host</span>
       valid_lft forever preferred_lft forever
<span class="token number">2</span>: eth0: <span class="token operator">&lt;</span>BROADCAST,MULTICAST,UP,LOWER_UP<span class="token operator">></span> mtu <span class="token number">1500</span> qdisc mq state UP group default qlen <span class="token number">1000</span>
    link/ether fa:16:3e:a6:14:86 brd ff:ff:ff:ff:ff:ff
    inet <span class="token number">10.185</span>.14.232/24 brd <span class="token number">10.185</span>.14.255 scope global dynamic noprefixroute eth0
       valid_lft 314568640sec preferred_lft 314568640sec
    inet6 fe80::f816:3eff:fea6:1486/64 scope <span class="token function">link</span>
       valid_lft forever preferred_lft forever
<span class="token number">5</span>: dummy0: <span class="token operator">&lt;</span>BROADCAST,NOARP,UP,LOWER_UP<span class="token operator">></span> mtu <span class="token number">1500</span> qdisc noqueue state UNKNOWN group default qlen <span class="token number">1000</span>
    link/ether e6:ff:39:ca:c7:91 brd ff:ff:ff:ff:ff:ff
    inet <span class="token number">1.1</span>.1.1/32 scope global noprefixroute dummy0
       valid_lft forever preferred_lft forever
    inet <span class="token number">2.2</span>.2.2/32 scope global noprefixroute dummy0
       valid_lft forever preferred_lft forever
    inet <span class="token number">3.3</span>.3.3/32 scope global noprefixroute dummy0
       valid_lft forever preferred_lft forever
    inet <span class="token number">4.4</span>.4.4/32 scope global noprefixroute dummy0
       valid_lft forever preferred_lft forever
    inet6 fe80::ad93:23f1:7913:b741/64 scope <span class="token function">link</span> noprefixroute
       valid_lft forever preferred_lft forever<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>需要注意的是，一个连接是可以配置多个IP地址的，多个IP地址之间用<code>,</code>分割就可以了。</p>
<h3 id="配置Bond-Bridge"><a href="#配置Bond-Bridge" class="headerlink" title="配置Bond+Bridge"></a>配置Bond+Bridge</h3><p>Bond+Bridge的配置在虚拟化场景比较常见，需要注意的是，有了Bridge之后，IP地址需要配置到Bridige上。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># nmcli connection add type bridge con-name bridge-br0 ifname br0 ipv4.method manual ipv4.addresses 192.168.100.10 ipv4.gateway 192.168.100.1</span>
Connection <span class="token string">'bridge-br0'</span> <span class="token punctuation">(</span>6052d8ca-ed8f-474b-88dd-9414bf028a2c<span class="token punctuation">)</span> successfully added.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>此时创建了一个网桥br0，但是还没有任何接口连接到这个网桥上，下面需要创建个bond0口，并把bond0加到br0上。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># nmcli connection add type bond con-name bonding-bond0 ifname bond0 bond.options "mode=balance-xor,miimon=100,xmit_hash_policy=layer3+4,updelay=5000" connection.master br0 connection.slave-type bridge</span>
Connection <span class="token string">'bonding-bond0'</span> <span class="token punctuation">(</span>755f0c93-6638-41c1-a7de-5e932eba6d1f<span class="token punctuation">)</span> successfully added.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>这里配置比较特殊，创建bond口和上面差不多，但是多了点配置<code>connection.master br0 connection.slave-type bridge</code>，这个和普通的bridge-slave口直接指定<code>master br0</code>的方式不太一样，因为bond0也是个虚拟的接口，所以需要将接口的属性<code>connection.master</code>配置成br0，才能实现把bond0这个虚拟接口添加到br0的功能。</p>
<p>后面bond0添加两个slave口还是和之前没有区别：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># nmcli connection add type bond-slave con-name bond0-slave-ens1f0 ifname ens1f0 master bond0</span>
Connection <span class="token string">'bond0-slave-ens1f0'</span> <span class="token punctuation">(</span>7ec188d0-d2db-4f80-a6f9-b7f93ab873f5<span class="token punctuation">)</span> successfully added.
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># nmcli connection add type bond-slave con-name bond0-slave-ens1f1 ifname ens1f1 master bond0</span>
Connection <span class="token string">'bond0-slave-ens1f1'</span> <span class="token punctuation">(</span>655c2960-0532-482a-8227-8b98eb7f829b<span class="token punctuation">)</span> successfully added.
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># nmcli connection</span>
NAME                UUID                                  TYPE      DEVICE
bridge-br0          6052d8ca-ed8f-474b-88dd-9414bf028a2c  bridge    br0
bond0-slave-ens1f0  7ec188d0-d2db-4f80-a6f9-b7f93ab873f5  ethernet  ens1f0
bond0-slave-ens1f1  655c2960-0532-482a-8227-8b98eb7f829b  ethernet  ens1f1
bonding-bond0       755f0c93-6638-41c1-a7de-5e932eba6d1f  bond      bond0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="配置Bond-OVS-Bridge"><a href="#配置Bond-OVS-Bridge" class="headerlink" title="配置Bond+OVS Bridge"></a>配置Bond+OVS Bridge</h3><p>好了，地狱级难度的例子来了，想要利用NetworkManager来管理OVS Bridge，这该怎么做？这个场景是我们线上在用的，实验了很多次，总算找到办法解决了。</p>
<p>首先，需要安装<code>NetworkManager-ovs</code>这个包，这个包是NetworkManager支持OVS的插件，所以得安装并重启NetworkManager服务后生效：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># yum install -y NetworkManager-ovs &amp;&amp; systemctl restart NetworkManager</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>第二步，需要创建一个<code>ovs-bridge</code>，但是呢，这里有个坑，在<code>man nm-openvswitch</code>里也有一些说明：</p>
<blockquote><ul>
<li><p>NetworkManager only ever talks to a single OVSDB instance via an UNIX domain socket.</p>
</li>
<li><p>The configuration is made up of Bridges, Ports and Interfaces. Interfaces are always enslaved to Ports, and Ports are<br>  always enslaved to Bridges.</p>
</li>
<li><p>NetworkManager only creates Bridges, Ports and Interfaces you ask it to. Unlike ovs-vsctl, it doesn’t create the local<br>  interface nor its port automatically.</p>
</li>
<li><p>You can’t enslave Interface directly to a Bridge. You always need a Port, even if it has just one interface.</p>
</li>
<li><p>There are no VLANs. The VLAN tagging is enabled by setting a ovs-port.tag property on a Port.</p>
</li>
<li><p>There are no bonds either. The bonding is enabled by enslaving multiple Interfaces to a Port and configured by setting<br>  properties on a port.</p>
</li>
</ul>
</blockquote>

<blockquote><p>Bridges<br>    Bridges are represented by connections of ovs-bridge type. Due to the limitations of OVSDB, “empty” Bridges (with no<br>    Ports) can’t exist. NetworkManager inserts the records for Bridges into OVSDB when a Port is enslaved.</p>
<p>Ports<br>    Ports are represented by connections of ovs-port type. Due to the limitations of OVSDB, “empty” Ports (with no Interfaces)<br>    can’t exist. Ports can also be configured to do VLAN tagging or Bonding. NetworkManager inserts the records for Ports into<br>    OVSDB when an Interface is enslaved. Ports must be enslaved to a Bridge.</p>
<p>Interfaces<br>    Interfaces are represented by a connections enslaved to a Port. The system interfaces (that have a corresponding Linux<br>    link) have a respective connection.type of the link (e.g. “wired”, “bond”, “dummy”, etc.). Other interfaces (“internal” or<br>    “patch” interfaces) are of ovs-interface type. The OVSDB entries are inserted upon enslavement to a Port.</p>
</blockquote>

<p>怎么理解呢，首先NetworkManager之和OVSDB通信，而OVSDB是有些限制的：1. 不允许空Bridge（没有任何Port）存在；2. 不允许空Port（没有任何Interface）存在；3. 不能直接将一个Interface接到Bridge上，必须有对应的Port才行。</p>
<p>不明白也没事，看下面的例子就好，首先我们要创建一个OVS Bridge ovsbr0：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># nmcli connection add type ovs-bridge con-name ovs-br0 conn.interface-name ovsbr0</span>
Connection <span class="token string">'ovs-br0'</span> <span class="token punctuation">(</span>c409c13a-3bc3-42fc-a6f2-79cb315fd26b<span class="token punctuation">)</span> successfully added.
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># nmcli connection add  type ovs-port con-name ovs-br0-port0 conn.interface-name br0-port0 master ovsbr0</span>
Connection <span class="token string">'ovs-br0-port0'</span> <span class="token punctuation">(</span>32982ce8-41ec-44e9-8010-da80bbefa5d4<span class="token punctuation">)</span> successfully added.
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># nmcli conn add type ovs-interface slave-type ovs-port conn.interface-name ovsbr0-iface0 master br0-port0 ipv4.method manual ipv4.address 192.168.2.100/24</span>
Connection <span class="token string">'ovs-slave-ovsbr0-iface0'</span> <span class="token punctuation">(</span>f8ba0e5e-c136-4287-aede-e4d59031d878<span class="token punctuation">)</span> successfully added.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>请注意，这三个connection必须完整创建好，才能真正的创建ovsbr0，这个和我们平常意识的逻辑很不一样。如果直接用<code>ovs-vsctl</code>命令创建，那只需要执行<code>ovs-vsctl add-br ovsbr0</code>就行了，然而在NetworkManager里，你必须把详细的内部逻辑拆分开：1. 创建个OVS Bridge ovsbr0；2. 在ovsbr0上创建个Port br0-port0；3. 创建个interface ovsbr0-iface0并连接到br0-port0上。</p>
<p>如此看来，ovs-vsctl命令行的操作把很多细节给隐藏掉了。</p>
<p>按照步骤创建上面三个connection之后，可以看到ovsbr0被创建好了：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># nmcli connection</span>
NAME                     UUID                                  TYPE           DEVICE
ovs-slave-ovsbr0-iface0  f8ba0e5e-c136-4287-aede-e4d59031d878  ovs-interface  ovsbr0-iface0
ovs-br0                  c409c13a-3bc3-42fc-a6f2-79cb315fd26b  ovs-bridge     ovsbr0
ovs-br0-port0            32982ce8-41ec-44e9-8010-da80bbefa5d4  ovs-port       br0-port0
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># ovs-vsctl show</span>
a2ab0cdf-9cf1-41a5-99f4-ae81c58e3fa8
    Bridge ovsbr0
        Port br0-port0
            Interface ovsbr0-iface0
                type: internal
    ovs_version: <span class="token string">"2.13.1"</span>
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># ip addr</span>
<span class="token number">1</span>: lo: <span class="token operator">&lt;</span>LOOPBACK,UP,LOWER_UP<span class="token operator">></span> mtu <span class="token number">65536</span> qdisc noqueue state UNKNOWN group default qlen <span class="token number">1000</span>
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet <span class="token number">127.0</span>.0.1/8 scope <span class="token function">host</span> lo
       valid_lft forever preferred_lft forever
<span class="token number">10</span>: ovs-system: <span class="token operator">&lt;</span>BROADCAST,MULTICAST<span class="token operator">></span> mtu <span class="token number">1500</span> qdisc noop state DOWN group default qlen <span class="token number">1000</span>
    link/ether ca:cb:22:a1:a7:fb brd ff:ff:ff:ff:ff:ff
<span class="token number">11</span>: ovsbr0-iface0: <span class="token operator">&lt;</span>BROADCAST,MULTICAST,UP,LOWER_UP<span class="token operator">></span> mtu <span class="token number">1500</span> qdisc noqueue state UNKNOWN group default qlen <span class="token number">1000</span>
    link/ether c2:51:c2:2b:6d:b5 brd ff:ff:ff:ff:ff:ff
    inet <span class="token number">192.168</span>.2.100/24 brd <span class="token number">192.168</span>.2.255 scope global noprefixroute ovsbr0-iface0
       valid_lft forever preferred_lft forever<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>创建好ovsbr0之后，需要把bond0也加进去，如果是ovs-vsctl命令操作的话，直接<code>ovs-vsctl add-port ovsbr0 bond0</code>就行了，ovs-vsctl帮我们隐藏了细节。同样的操作如果用NetworkManager，就需要先创建一个Port，然后再把bond0加到这个Port上了：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># nmcli connection add type ovs-port con-name ovs-br0-port-bond0 conn.interface-name br0-bond0 master ovsbr0</span>
Connection <span class="token string">'ovs-br0-port-bond0'</span> <span class="token punctuation">(</span>de863ea6-4e1b-4343-93a3-91790895256f<span class="token punctuation">)</span> successfully added.
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># nmcli connection add type bond con-name bonding-bond0 ifname bond0 bond.options "mode=balance-xor,miimon=100,xmit_hash_policy=layer3+4,updelay=5000" connection.master br0-bond0 connection.slave-type ovs-port</span>
Connection <span class="token string">'bonding-bond0'</span> <span class="token punctuation">(</span>8b233d53-65b1-4237-b835-62135bb66ada<span class="token punctuation">)</span> successfully added.
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># nmcli connection add type bond-slave con-name bond0-slave-ens1f0 ifname ens1f0 master bond0</span>
Connection <span class="token string">'bond0-slave-ens1f0'</span> <span class="token punctuation">(</span>6d5febe2-fc65-428a-94f1-9a782cd6b397<span class="token punctuation">)</span> successfully added.
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># nmcli connection add type bond-slave con-name bond0-slave-ens1f1 ifname ens1f1 master bond0</span>
Connection <span class="token string">'bond0-slave-ens1f1'</span> <span class="token punctuation">(</span>55ce8e7f-233d-430f-901d-f0e5f326c8c7<span class="token punctuation">)</span> successfully added.
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># nmcli connection</span>
NAME                     UUID                                  TYPE           DEVICE
ovs-slave-ovsbr0-iface0  f8ba0e5e-c136-4287-aede-e4d59031d878  ovs-interface  ovsbr0-iface0
bond0-slave-ens1f0       6d5febe2-fc65-428a-94f1-9a782cd6b397  ethernet       ens1f0
bond0-slave-ens1f1       55ce8e7f-233d-430f-901d-f0e5f326c8c7  ethernet       ens1f1
bonding-bond0            8b233d53-65b1-4237-b835-62135bb66ada  bond           bond0
ovs-br0                  c409c13a-3bc3-42fc-a6f2-79cb315fd26b  ovs-bridge     ovsbr0
ovs-br0-port0            32982ce8-41ec-44e9-8010-da80bbefa5d4  ovs-port       br0-port0
ovs-br0-port-bond0       de863ea6-4e1b-4343-93a3-91790895256f  ovs-port       br0-bond0
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># ovs-vsctl show</span>
a2ab0cdf-9cf1-41a5-99f4-ae81c58e3fa8
    Bridge ovsbr0
        Port br0-port0
            Interface ovsbr0-iface0
                type: internal
        Port br0-bond0
            Interface bond0
                type: system
    ovs_version: <span class="token string">"2.13.1"</span>
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># ip addr</span>
<span class="token number">1</span>: lo: <span class="token operator">&lt;</span>LOOPBACK,UP,LOWER_UP<span class="token operator">></span> mtu <span class="token number">65536</span> qdisc noqueue state UNKNOWN group default qlen <span class="token number">1000</span>
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet <span class="token number">127.0</span>.0.1/8 scope <span class="token function">host</span> lo
       valid_lft forever preferred_lft forever
<span class="token number">2</span>: ens1f0: <span class="token operator">&lt;</span>BROADCAST,MULTICAST,SLAVE,UP,LOWER_UP<span class="token operator">></span> mtu <span class="token number">1500</span> qdisc mq master bond0 state UP group default qlen <span class="token number">1000</span>
    link/ether 0c:42:a1:70:c7:2a brd ff:ff:ff:ff:ff:ff
<span class="token number">3</span>: ens1f1: <span class="token operator">&lt;</span>BROADCAST,MULTICAST,SLAVE,UP,LOWER_UP<span class="token operator">></span> mtu <span class="token number">1500</span> qdisc mq master bond0 state UP group default qlen <span class="token number">1000</span>
    link/ether 0c:42:a1:70:c7:2a brd ff:ff:ff:ff:ff:ff
<span class="token number">4</span>: ovs-system: <span class="token operator">&lt;</span>BROADCAST,MULTICAST<span class="token operator">></span> mtu <span class="token number">1500</span> qdisc noop state DOWN group default qlen <span class="token number">1000</span>
    link/ether ca:cb:22:a1:a7:fb brd ff:ff:ff:ff:ff:ff
<span class="token number">5</span>: ovsbr0-iface0: <span class="token operator">&lt;</span>BROADCAST,MULTICAST,UP,LOWER_UP<span class="token operator">></span> mtu <span class="token number">1500</span> qdisc noqueue state UNKNOWN group default qlen <span class="token number">1000</span>
    link/ether c2:51:c2:2b:6d:b5 brd ff:ff:ff:ff:ff:ff
    inet <span class="token number">192.168</span>.2.100/24 brd <span class="token number">192.168</span>.2.255 scope global noprefixroute ovsbr0-iface0
       valid_lft forever preferred_lft forever
<span class="token number">6</span>: bond0: <span class="token operator">&lt;</span>BROADCAST,MULTICAST,MASTER,UP,LOWER_UP<span class="token operator">></span> mtu <span class="token number">1500</span> qdisc noqueue master ovs-system state UP group default qlen <span class="token number">1000</span>
    link/ether 0c:42:a1:70:c7:2a brd ff:ff:ff:ff:ff:ff<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看到，NetworkManager和直接用ovs-ctl最大的不同，就是把一些细节暴露了出来，本质上把一个接口加到Bridge上不是直接加的，而是加到了Bridge的某个Port上。但是仔细一想也没毛病，对应到现实世界的交换机，你接接线也是接到交换机的某个端口上，如果没有端口，那线往哪插呢？</p>
<h3 id="配置持久化"><a href="#配置持久化" class="headerlink" title="配置持久化"></a>配置持久化</h3><p>好了，上面举了很多例子实现了一些我们可能会用到的场景，但是一大堆问题又来了，这些配置能持久化么？重启了机器之后还会有么？如果有，那这些配置是保存在哪里的？我能不能不用nmcli这个命令行工具了，使用配置文件，能完成网络的配置么？</p>
<p>这些问题的答案都是肯定的！</p>
<p>首先呢，针对老版本network-scripts，也就是存放在<code>/etc/sysconfig/network-scripts/</code>目录下的那些ifcfg-*开头的配置文件，NetworkManager通过一个ifcfg-rh plugin去识别，这个插件在RHEL里是默认开启的，而且，针对一些配置类型，比如ethernet，bond，vlan，bridge等配置，通过nmcli创建或者修改connections，都会同步到这个目录下对应的配置文件里：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># nmcli connection</span>
NAME           UUID                                  TYPE      DEVICE
eth0-static    3ae60979-d6f1-4dbb-8a25-ff1178e7305c  ethernet  eth0
eth1-vlan-100  7bc246cb-140a-4515-8dc1-8efa03b789cb  vlan      eth1.100
bridge-br0     3230425c-505d-4a97-adbe-6f26e27fe53c  bridge    br0
eth0           <span class="token number">72534820</span>-fb8e-4c5a-8d49-8c013441d390  ethernet  --
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># ls -l /etc/sysconfig/network-scripts/</span>
total <span class="token number">16</span>
-rw-r--r--. <span class="token number">1</span> root root <span class="token number">372</span> Feb <span class="token number">20</span> <span class="token number">15</span>:13 ifcfg-bridge-br0
-rw-r--r--. <span class="token number">1</span> root root <span class="token number">278</span> Feb <span class="token number">11</span> <span class="token number">22</span>:02 ifcfg-eth0
-rw-r--r--. <span class="token number">1</span> root root <span class="token number">360</span> Feb <span class="token number">17</span> <span class="token number">18</span>:34 ifcfg-eth0-static
-rw-r--r--. <span class="token number">1</span> root root <span class="token number">415</span> Feb <span class="token number">20</span> <span class="token number">16</span>:11 ifcfg-eth1-vlan-100
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># cat /etc/sysconfig/network-scripts/ifcfg-eth0</span>
<span class="token assign-left variable">TYPE</span><span class="token operator">=</span>Ethernet
<span class="token assign-left variable">PROXY_METHOD</span><span class="token operator">=</span>none
<span class="token assign-left variable">BROWSER_ONLY</span><span class="token operator">=</span>no
<span class="token assign-left variable">BOOTPROTO</span><span class="token operator">=</span>dhcp
<span class="token assign-left variable">DEFROUTE</span><span class="token operator">=</span>yes
<span class="token assign-left variable">IPV4_FAILURE_FATAL</span><span class="token operator">=</span>no
<span class="token assign-left variable">IPV6INIT</span><span class="token operator">=</span>yes
<span class="token assign-left variable">IPV6_AUTOCONF</span><span class="token operator">=</span>yes
<span class="token assign-left variable">IPV6_DEFROUTE</span><span class="token operator">=</span>yes
<span class="token assign-left variable">IPV6_FAILURE_FATAL</span><span class="token operator">=</span>no
<span class="token assign-left variable">IPV6_ADDR_GEN_MODE</span><span class="token operator">=</span>stable-privacy
<span class="token assign-left variable">NAME</span><span class="token operator">=</span>eth0
<span class="token assign-left variable">UUID</span><span class="token operator">=</span><span class="token number">72534820</span>-fb8e-4c5a-8d49-8c013441d390
<span class="token assign-left variable">DEVICE</span><span class="token operator">=</span>eth0
<span class="token assign-left variable">ONBOOT</span><span class="token operator">=</span>yes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看到每个<em>connection</em>都对应了一个配置文件。</p>
<p>然后NetworkManager还会读取<code>/etc/NetworkManager/system-connections/</code>目录下的配置文件，同时，通过nmcli创建和修改一些其他类型的connections，比如ovs-bridge， dummy这些，也会同步写入到这个目录下：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># nmcli connection</span>
NAME           UUID                                  TYPE      DEVICE
eth0-static    3ae60979-d6f1-4dbb-8a25-ff1178e7305c  ethernet  eth0
dummy-dummy0   190f363b-190b-4b98-b85c-046ec8995453  dummy     dummy0
eth1-vlan-100  7bc246cb-140a-4515-8dc1-8efa03b789cb  vlan      eth1.100
bridge-br0     3230425c-505d-4a97-adbe-6f26e27fe53c  bridge    br0
eth0           <span class="token number">72534820</span>-fb8e-4c5a-8d49-8c013441d390  ethernet  --
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># ls -l /etc/NetworkManager/system-connections/</span>
total <span class="token number">4</span>
-rw-------. <span class="token number">1</span> root root <span class="token number">310</span> Feb <span class="token number">20</span> <span class="token number">16</span>:16 dummy-dummy0.nmconnection
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># cat /etc/NetworkManager/system-connections/dummy-dummy0.nmconnection</span>
<span class="token punctuation">[</span>connection<span class="token punctuation">]</span>
<span class="token assign-left variable">id</span><span class="token operator">=</span>dummy-dummy0
<span class="token assign-left variable">uuid</span><span class="token operator">=</span>190f363b-190b-4b98-b85c-046ec8995453
<span class="token assign-left variable">type</span><span class="token operator">=</span>dummy
interface-name<span class="token operator">=</span>dummy0
<span class="token assign-left variable">permissions</span><span class="token operator">=</span>

<span class="token punctuation">[</span>dummy<span class="token punctuation">]</span>

<span class="token punctuation">[</span>ipv4<span class="token punctuation">]</span>
<span class="token assign-left variable">address1</span><span class="token operator">=</span><span class="token number">1.1</span>.1.1/32
<span class="token assign-left variable">address2</span><span class="token operator">=</span><span class="token number">2.2</span>.2.2/32
<span class="token assign-left variable">address3</span><span class="token operator">=</span><span class="token number">3.3</span>.3.3/32
<span class="token assign-left variable">address4</span><span class="token operator">=</span><span class="token number">4.4</span>.4.4/32
dns-search<span class="token operator">=</span>
<span class="token assign-left variable">method</span><span class="token operator">=</span>manual

<span class="token punctuation">[</span>ipv6<span class="token punctuation">]</span>
addr-gen-mode<span class="token operator">=</span>stable-privacy
dns-search<span class="token operator">=</span>
<span class="token assign-left variable">method</span><span class="token operator">=</span>auto

<span class="token punctuation">[</span>proxy<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看到dummy-dummy0的配置被持久化在<code>/etc/NetworkManager/system-connections/</code>。</p>
<p>所以如果要修改配置，也是可以到这两个对应目录下直接修改对应的配置文件的。但是这里有个小问题，就是修改配置文件后，NetworkManager不会自动重新加载这些配置，需要手动执行<code>nmcli connection load XXXX</code>手动重载单个配置或者执行<code>nmcli connection reload</code>重新加载所有的配置文件。加载完成后，要想配置真正生效，还需要执行<code>nmcli connection down XXXX; nmcli connection up XXXX</code>或者<code>nmcli device reapply XXX</code>来真正让配置生效。</p>
<h3 id="Leave-Me-Alone！"><a href="#Leave-Me-Alone！" class="headerlink" title="Leave Me Alone！"></a>Leave Me Alone！</h3><p>说了这么多，还有一件很重要的事还没说：假如我真的不希望NetworkManager帮我管理某些网卡，怎么办？因为默认情况下，NetworkManager会自动得把很多设备的纳入管理，然后自动创建一堆<code>Wired connection</code>，就像这样：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># nmcli connection</span>
NAME                UUID                                  TYPE      DEVICE
eth0                <span class="token number">72534820</span>-fb8e-4c5a-8d49-8c013441d390  ethernet  eth0
Wired connection <span class="token number">1</span>  3a8d6eb9-9d38-3c38-9519-4918f58ee42c  ethernet  ens1f0_0
Wired connection <span class="token number">2</span>  d0efb693-45d0-4245-8018-6738f7509094  ethernet  ens1f0_1
Wired connection <span class="token number">3</span>  b3ecf462-a0ed-4f08-a203-c4f10b4dde0b  ethernet  ens1f0_2
Wired connection <span class="token number">4</span>  5f0ca36b-2add-4815-a859-ff651238f893  ethernet  ens1f0_3
Wired connection <span class="token number">5</span>  3f010d3e-74ba-405c-a575-eba53641fe4f  ethernet  ens1f0_4
Wired connection <span class="token number">6</span>  88e4d303-fd6b-4f66-9e4e-6743ec47c8b7  ethernet  ens1f0_5
Wired connection <span class="token number">7</span>  2800a439-44e1-4304-9c2c-dedbbba74c40  ethernet  ens1f0_6
Wired connection <span class="token number">8</span>  21ae8892-8a51-4c77-854c-08e9857e32d9  ethernet  ens1f0_7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在我们的SR-IOV场景下更是这样，因为开启SR-IOV之后，会创建很多的网卡，然后NetworkManager不分青红皂白，全部给管理上，让人头大。所以需要一个配置能通知NetworkManager哪些网卡不需要纳入管理。</p>
<p>还好NetworkManager提供了这个配置项，可以声明哪些网卡不被管理：在<code>/etc/NetworkManager/conf.d/</code>目录下创建<code>unmanaged.conf</code></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># cat /etc/NetworkManager/conf.d/unmanaged.conf</span>
<span class="token punctuation">[</span>keyfile<span class="token punctuation">]</span>
unmanaged-devices<span class="token operator">=</span>mac:00:1E:65:30:D1:C4<span class="token punctuation">;</span>interface-name:eth1<span class="token punctuation">;</span>interface-name:ens1f0_*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>具体的匹配规则有很多，可以参考<code>man NetworkManager.conf</code>的<code>Device List Format</code>部分，这里就不在赘述了。</p>
<p>重启生效后，瞬间清净了：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># nmcli device</span>
DEVICE    TYPE      STATE      CONNECTION
eth0      ethernet  connected  eth0
ens1f0_0  ethernet  unmanaged  --
ens1f0_1  ethernet  unmanaged  --
ens1f0_2  ethernet  unmanaged  --
ens1f0_3  ethernet  unmanaged  --
lo        loopback  unmanaged  --<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>好了，基本上NetworkManager基本的用法说的差不多了，总体来说，如果掌握了它的设计思路和一些细节逻辑，NetworkManager使用起来也没有那么不堪，甚至还会觉得很好用，毕竟nmcli命令行可以Tab进行自动提示，而且命令行风格整体也比较符合自然语言。</p>
<p>最后希望这些例子能给遇到同样问题的人一些帮助吧，起码希望NetworkManager不要成为最终迁移RHEL 8的拦路虎。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>NetworkManager</tag>
        <tag>CentOS 8</tag>
        <tag>nmcli</tag>
      </tags>
  </entry>
  <entry>
    <title>ArchLinux下网易云音乐白屏问题</title>
    <url>/2017/04/17/netease-cloud-music-archlinux-whitescreen/</url>
    <content><![CDATA[<p>ArchLinux下网易云音乐会有偶然的白屏情况，是由于不支持某些emoji字体导致的，可以安装<code>noto-fonts-emoji</code>，然后配置一下字体即可解决：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> pacman <span class="token parameter variable">-S</span> noto-fonts-emoji<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>配置<code>~/.config/fontconfig/conf.d/51-noto-color-emoji.conf</code>文件：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0"?></span>
<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">fontconfig</span> <span class="token name">SYSTEM</span> <span class="token string">"fonts.dtd"</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fontconfig</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>selectfont</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>acceptfont</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>patelt</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>family<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">></span></span>Noto Color Emoji<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>patelt</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>acceptfont</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>selectfont</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>match</span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>font<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>test</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>family<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">></span></span>Noto Color Emoji<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>test</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>edit</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>scalable<span class="token punctuation">"</span></span> <span class="token attr-name">mode</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>assign<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bool</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bool</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>edit</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>edit</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>embeddedbitmap<span class="token punctuation">"</span></span> <span class="token attr-name">mode</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>assign<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bool</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bool</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>edit</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>edit</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hinting<span class="token punctuation">"</span></span> <span class="token attr-name">mode</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>assign<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bool</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bool</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>edit</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>edit</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hintstyle<span class="token punctuation">"</span></span> <span class="token attr-name">mode</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>assign<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>const</span><span class="token punctuation">></span></span>hintfull<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>const</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>edit</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>match</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>match</span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pattern<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>test</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>family<span class="token punctuation">"</span></span> <span class="token attr-name">qual</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>first<span class="token punctuation">"</span></span> <span class="token attr-name">compare</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>contains<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">></span></span>emoji<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>test</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>edit</span> <span class="token attr-name">mode</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>assign<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>color<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bool</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bool</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>edit</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>edit</span> <span class="token attr-name">mode</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>assign<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>family<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">></span></span>Noto Color Emoji<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>edit</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>match</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>match</span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pattern<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>edit</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>family<span class="token punctuation">"</span></span> <span class="token attr-name">mode</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prepend<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">></span></span>Noto Color Emoji<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>edit</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>match</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fontconfig</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>参考： <a href="https://blog.judge.moe/archives/90/">https://blog.judge.moe/archives/90/</a></p>
]]></content>
      <categories>
        <category>日常折腾</category>
      </categories>
      <tags>
        <tag>ArchLinux</tag>
        <tag>网易云音乐</tag>
        <tag>白屏</tag>
        <tag>emoji</tag>
      </tags>
  </entry>
  <entry>
    <title>Openstack Swift object replicator 代码分析</title>
    <url>/2017/05/24/openstack-swift-object-replicator-source-code/</url>
    <content><![CDATA[<p>在<code>OpenStack Swift</code>中，<code>object replicator</code>的作用是在系统遇到诸如临时的网络中断或磁盘故障后使系统处于一致状态。<code>object replicator</code>会将本地数据与每个远程副本进行比较，以确保它们都包含最新版本。下面会简单分析一下<code>object replicator</code>的代码，了解一下整个Replication的工作流程。<span id="more"></span></p>
<p>首先，在<code>bin/swift-object-replicator</code>这个可执行文件中，引入了相关包，并加上一下命令行参数，提供了一个命令共用户调用，实际调用的是<code>ObjectReplicator</code>这个类下的<code>run_once</code>（只运行一次）和<code>run_forever</code>（作为daemon运行）方法。</p>
<p>这里直接看一下<code>run_once</code>方法。<code>ObjectReplicator</code>类在<code>swift/obj/replicator.py</code>文件中定义。</p>
<p><code>run_once</code>的实现很简单，主要就是获取需要的选项，然后运行<code>replicate</code>方法，该方法是主要的逻辑实现：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">replicate</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> override_devices<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> override_partitions<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>
                  override_policies<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">"""Run a replication pass"""</span>
        <span class="token comment"># 省略一部分代码</span>
        <span class="token keyword">try</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>run_pool <span class="token operator">=</span> GreenPool<span class="token punctuation">(</span>size<span class="token operator">=</span>self<span class="token punctuation">.</span>concurrency<span class="token punctuation">)</span>
            <span class="token comment"># 收集所有的同步任务</span>
            jobs <span class="token operator">=</span> self<span class="token punctuation">.</span>collect_jobs<span class="token punctuation">(</span>override_devices<span class="token operator">=</span>override_devices<span class="token punctuation">,</span>
                                     override_partitions<span class="token operator">=</span>override_partitions<span class="token punctuation">,</span>
                                     override_policies<span class="token operator">=</span>override_policies<span class="token punctuation">)</span>
            <span class="token keyword">for</span> job <span class="token keyword">in</span> jobs<span class="token punctuation">:</span>
                <span class="token comment"># 省略代码，主要完成对任务的简单判断，判断任务是否需要执行</span>
                <span class="token keyword">if</span> job<span class="token punctuation">[</span><span class="token string">'delete'</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token comment"># 如果是同步后需要删除本地副本的任务，调用update_deleted方法</span>
                    self<span class="token punctuation">.</span>run_pool<span class="token punctuation">.</span>spawn<span class="token punctuation">(</span>self<span class="token punctuation">.</span>update_deleted<span class="token punctuation">,</span> job<span class="token punctuation">)</span>
                <span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token comment"># 否则就调用update方法</span>
                    self<span class="token punctuation">.</span>run_pool<span class="token punctuation">.</span>spawn<span class="token punctuation">(</span>self<span class="token punctuation">.</span>update<span class="token punctuation">,</span> job<span class="token punctuation">)</span>
            current_nodes <span class="token operator">=</span> <span class="token boolean">None</span>
            <span class="token keyword">with</span> Timeout<span class="token punctuation">(</span>self<span class="token punctuation">.</span>lockup_timeout<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#加上超时</span>
                self<span class="token punctuation">.</span>run_pool<span class="token punctuation">.</span>waitall<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">except</span> <span class="token punctuation">(</span>Exception<span class="token punctuation">,</span> Timeout<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token comment"># 失败处理</span>
        <span class="token keyword">finally</span><span class="token punctuation">:</span>
            stats<span class="token punctuation">.</span>kill<span class="token punctuation">(</span><span class="token punctuation">)</span>
            lockup_detector<span class="token punctuation">.</span>kill<span class="token punctuation">(</span><span class="token punctuation">)</span>
            self<span class="token punctuation">.</span>stats_line<span class="token punctuation">(</span><span class="token punctuation">)</span>
            self<span class="token punctuation">.</span>stats<span class="token punctuation">[</span><span class="token string">'attempted'</span><span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>replication_count<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>然后具体来看一下是怎么样收集任务的：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">collect_jobs</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> override_devices<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> override_partitions<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>
                    override_policies<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    jobs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    ips <span class="token operator">=</span> whataremyips<span class="token punctuation">(</span>self<span class="token punctuation">.</span>bind_ip<span class="token punctuation">)</span>
    <span class="token keyword">for</span> policy <span class="token keyword">in</span> POLICIES<span class="token punctuation">:</span>
        <span class="token keyword">if</span> policy<span class="token punctuation">.</span>policy_type <span class="token operator">==</span> REPL_POLICY<span class="token punctuation">:</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>override_policies <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span> <span class="token keyword">and</span>
                    <span class="token builtin">str</span><span class="token punctuation">(</span>policy<span class="token punctuation">.</span>idx<span class="token punctuation">)</span> <span class="token keyword">not</span> <span class="token keyword">in</span> override_policies<span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">continue</span>
            <span class="token comment">#针对每个policy，加载ring，然后调用build_replication_jobs收集任务</span>
            <span class="token comment"># ensure rings are loaded for policy</span>
            self<span class="token punctuation">.</span>load_object_ring<span class="token punctuation">(</span>policy<span class="token punctuation">)</span>
            jobs <span class="token operator">+=</span> self<span class="token punctuation">.</span>build_replication_jobs<span class="token punctuation">(</span>
                policy<span class="token punctuation">,</span> ips<span class="token punctuation">,</span> override_devices<span class="token operator">=</span>override_devices<span class="token punctuation">,</span>
                override_partitions<span class="token operator">=</span>override_partitions<span class="token punctuation">)</span>
    random<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span>jobs<span class="token punctuation">)</span> <span class="token comment">#把任务打乱</span>
    <span class="token keyword">if</span> self<span class="token punctuation">.</span>handoffs_first<span class="token punctuation">:</span>
        <span class="token comment"># Move the handoff parts to the front of the list</span>
        jobs<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span><span class="token keyword">lambda</span> job<span class="token punctuation">:</span> <span class="token keyword">not</span> job<span class="token punctuation">[</span><span class="token string">'delete'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    self<span class="token punctuation">.</span>job_count <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>jobs<span class="token punctuation">)</span>
    <span class="token keyword">return</span> jobs

<span class="token keyword">def</span> <span class="token function">build_replication_jobs</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> policy<span class="token punctuation">,</span> ips<span class="token punctuation">,</span> override_devices<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>
                            override_partitions<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 省略部分前期准备工作的代码</span>

        <span class="token comment"># 直接访问挂挂载的分区，将所有的目录，也就是partition的目录全部列举出来</span>
        <span class="token keyword">for</span> partition <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>obj_path<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>override_partitions <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span>
                    <span class="token keyword">and</span> partition <span class="token keyword">not</span> <span class="token keyword">in</span> override_partitions<span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">continue</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span>partition<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'auditor_status_'</span><span class="token punctuation">)</span> <span class="token keyword">and</span>
                    partition<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'.json'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token comment"># ignore auditor status files</span>
                <span class="token keyword">continue</span>

            part_nodes <span class="token operator">=</span> <span class="token boolean">None</span>
            <span class="token keyword">try</span><span class="token punctuation">:</span>
                job_path <span class="token operator">=</span> join<span class="token punctuation">(</span>obj_path<span class="token punctuation">,</span> partition<span class="token punctuation">)</span>
                <span class="token comment"># 根据partion获取该partition应该存放的节点信息</span>
                part_nodes <span class="token operator">=</span> policy<span class="token punctuation">.</span>object_ring<span class="token punctuation">.</span>get_part_nodes<span class="token punctuation">(</span>
                    <span class="token builtin">int</span><span class="token punctuation">(</span>partition<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token comment"># 将不是本机的节点找出来</span>
                nodes <span class="token operator">=</span> <span class="token punctuation">[</span>node <span class="token keyword">for</span> node <span class="token keyword">in</span> part_nodes
                            <span class="token keyword">if</span> node<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span> <span class="token operator">!=</span> local_dev<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
                jobs<span class="token punctuation">.</span>append<span class="token punctuation">(</span>
                    <span class="token builtin">dict</span><span class="token punctuation">(</span>path<span class="token operator">=</span>job_path<span class="token punctuation">,</span>
                            device<span class="token operator">=</span>local_dev<span class="token punctuation">[</span><span class="token string">'device'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                            obj_path<span class="token operator">=</span>obj_path<span class="token punctuation">,</span>
                            nodes<span class="token operator">=</span>nodes<span class="token punctuation">,</span>
                            delete<span class="token operator">=</span><span class="token builtin">len</span><span class="token punctuation">(</span>nodes<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token builtin">len</span><span class="token punctuation">(</span>part_nodes<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">#如果副本多了，就把自己删了</span>
                            policy<span class="token operator">=</span>policy<span class="token punctuation">,</span>
                            partition<span class="token operator">=</span>partition<span class="token punctuation">,</span>
                            region<span class="token operator">=</span>local_dev<span class="token punctuation">[</span><span class="token string">'region'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">except</span> ValueError<span class="token punctuation">:</span>
                <span class="token comment"># 失败处理，输出到日志</span>
                <span class="token keyword">continue</span>
    <span class="token keyword">if</span> <span class="token keyword">not</span> found_local<span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>logger<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">"Can't find itself in policy with index %d with"</span>
                            <span class="token string">" ips %s and with port %s in ring file, not"</span>
                            <span class="token string">" replicating"</span><span class="token punctuation">,</span>
                            <span class="token builtin">int</span><span class="token punctuation">(</span>policy<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">", "</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>ips<span class="token punctuation">)</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>port<span class="token punctuation">)</span>
    <span class="token keyword">return</span> jobs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>下面开始真正执行任务，进行复制：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">update_deleted</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> job<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 复制后删除本地副本</span>
    <span class="token comment"># 省略一部分初始化代码</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        responses <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        suffixes <span class="token operator">=</span> tpool<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>tpool_get_suffixes<span class="token punctuation">,</span> job<span class="token punctuation">[</span><span class="token string">'path'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        synced_remote_regions <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
        delete_objs <span class="token operator">=</span> <span class="token boolean">None</span>
        <span class="token keyword">if</span> suffixes<span class="token punctuation">:</span>
            <span class="token comment"># 对所有的节点进行复制</span>
            <span class="token keyword">for</span> node <span class="token keyword">in</span> job<span class="token punctuation">[</span><span class="token string">'nodes'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
                <span class="token comment"># 调用sync进行复制</span>
                success<span class="token punctuation">,</span> candidates <span class="token operator">=</span> self<span class="token punctuation">.</span>sync<span class="token punctuation">(</span>
                    node<span class="token punctuation">,</span> job<span class="token punctuation">,</span> suffixes<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
                <span class="token keyword">if</span> success<span class="token punctuation">:</span>
                    <span class="token keyword">with</span> Timeout<span class="token punctuation">(</span>self<span class="token punctuation">.</span>http_timeout<span class="token punctuation">)</span><span class="token punctuation">:</span>
                        <span class="token comment"># 复制成功，发送一个REPLICATE请求到目的节点，通知它针对对应目录重新计算hash</span>
                        conn <span class="token operator">=</span> http_connect<span class="token punctuation">(</span>
                            node<span class="token punctuation">[</span><span class="token string">'replication_ip'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                            node<span class="token punctuation">[</span><span class="token string">'replication_port'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                            node<span class="token punctuation">[</span><span class="token string">'device'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> job<span class="token punctuation">[</span><span class="token string">'partition'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'REPLICATE'</span><span class="token punctuation">,</span>
                            <span class="token string">'/'</span> <span class="token operator">+</span> <span class="token string">'-'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>suffixes<span class="token punctuation">)</span><span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>
                        conn<span class="token punctuation">.</span>getresponse<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token keyword">if</span> node<span class="token punctuation">[</span><span class="token string">'region'</span><span class="token punctuation">]</span> <span class="token operator">!=</span> job<span class="token punctuation">[</span><span class="token string">'region'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
                        synced_remote_regions<span class="token punctuation">[</span>node<span class="token punctuation">[</span><span class="token string">'region'</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> viewkeys<span class="token punctuation">(</span>
                            candidates<span class="token punctuation">)</span>
                <span class="token keyword">else</span><span class="token punctuation">:</span>
                    failure_devs_info<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token punctuation">(</span>node<span class="token punctuation">[</span><span class="token string">'replication_ip'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                                            node<span class="token punctuation">[</span><span class="token string">'device'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                responses<span class="token punctuation">.</span>append<span class="token punctuation">(</span>success<span class="token punctuation">)</span>
            <span class="token keyword">for</span> cand_objs <span class="token keyword">in</span> synced_remote_regions<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">if</span> delete_objs <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
                    delete_objs <span class="token operator">=</span> cand_objs
                <span class="token keyword">else</span><span class="token punctuation">:</span>
                    delete_objs <span class="token operator">=</span> delete_objs <span class="token operator">&amp;</span> cand_objs

        <span class="token keyword">if</span> self<span class="token punctuation">.</span>handoff_delete<span class="token punctuation">:</span>
            <span class="token comment"># 如果没有问题，删除本地文件</span>
            delete_handoff <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token punctuation">[</span>resp <span class="token keyword">for</span> resp <span class="token keyword">in</span> responses <span class="token keyword">if</span> resp<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">>=</span> \
                self<span class="token punctuation">.</span>handoff_delete
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token comment"># delete handoff if all syncs were successful</span>
            delete_handoff <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>responses<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token builtin">len</span><span class="token punctuation">(</span>job<span class="token punctuation">[</span><span class="token string">'nodes'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">and</span> \
                <span class="token builtin">all</span><span class="token punctuation">(</span>responses<span class="token punctuation">)</span>
        <span class="token keyword">if</span> delete_handoff<span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>stats<span class="token punctuation">[</span><span class="token string">'remove'</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'sync_method'</span><span class="token punctuation">,</span> <span class="token string">'rsync'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'ssync'</span> <span class="token keyword">and</span>
                    delete_objs <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                self<span class="token punctuation">.</span>logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span>_<span class="token punctuation">(</span><span class="token string">"Removing %s objects"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                                    <span class="token builtin">len</span><span class="token punctuation">(</span>delete_objs<span class="token punctuation">)</span><span class="token punctuation">)</span>
                _junk<span class="token punctuation">,</span> error_paths <span class="token operator">=</span> self<span class="token punctuation">.</span>delete_handoff_objs<span class="token punctuation">(</span>
                    job<span class="token punctuation">,</span> delete_objs<span class="token punctuation">)</span>
                <span class="token comment"># if replication works for a hand-off device and it failed,</span>
                <span class="token comment"># the remote devices which are target of the replication</span>
                <span class="token comment"># from the hand-off device will be marked. Because cleanup</span>
                <span class="token comment"># after replication failed means replicator needs to</span>
                <span class="token comment"># replicate again with the same info.</span>
                <span class="token keyword">if</span> error_paths<span class="token punctuation">:</span>
                    failure_devs_info<span class="token punctuation">.</span>update<span class="token punctuation">(</span>
                        <span class="token punctuation">[</span><span class="token punctuation">(</span>failure_dev<span class="token punctuation">[</span><span class="token string">'replication_ip'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                            failure_dev<span class="token punctuation">[</span><span class="token string">'device'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
                            <span class="token keyword">for</span> failure_dev <span class="token keyword">in</span> job<span class="token punctuation">[</span><span class="token string">'nodes'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                self<span class="token punctuation">.</span>delete_partition<span class="token punctuation">(</span>job<span class="token punctuation">[</span><span class="token string">'path'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
                handoff_partition_deleted <span class="token operator">=</span> <span class="token boolean">True</span>
        <span class="token keyword">elif</span> <span class="token keyword">not</span> suffixes<span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>delete_partition<span class="token punctuation">(</span>job<span class="token punctuation">[</span><span class="token string">'path'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            handoff_partition_deleted <span class="token operator">=</span> <span class="token boolean">True</span>
    <span class="token keyword">except</span> <span class="token punctuation">(</span>Exception<span class="token punctuation">,</span> Timeout<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>logger<span class="token punctuation">.</span>exception<span class="token punctuation">(</span>_<span class="token punctuation">(</span><span class="token string">"Error syncing handoff partition"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>_add_failure_stats<span class="token punctuation">(</span>failure_devs_info<span class="token punctuation">)</span>
    <span class="token keyword">finally</span><span class="token punctuation">:</span>
        target_devs_info <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span>target_dev<span class="token punctuation">[</span><span class="token string">'replication_ip'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                                    target_dev<span class="token punctuation">[</span><span class="token string">'device'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
                                <span class="token keyword">for</span> target_dev <span class="token keyword">in</span> job<span class="token punctuation">[</span><span class="token string">'nodes'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>stats<span class="token punctuation">[</span><span class="token string">'success'</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>target_devs_info <span class="token operator">-</span> failure_devs_info<span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> handoff_partition_deleted<span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>handoffs_remaining <span class="token operator">+=</span> <span class="token number">1</span>
        self<span class="token punctuation">.</span>partition_times<span class="token punctuation">.</span>append<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> begin<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>logger<span class="token punctuation">.</span>timing_since<span class="token punctuation">(</span><span class="token string">'partition.delete.timing'</span><span class="token punctuation">,</span> begin<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">update</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> job<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 正常复制，不删除本地数据</span>
    <span class="token comment"># 省略准备工作相关代码</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        <span class="token comment"># 计算当前partition的hash，（hashes.pkl文件）</span>
        hashed<span class="token punctuation">,</span> local_hash <span class="token operator">=</span> tpool_reraise<span class="token punctuation">(</span>
            df_mgr<span class="token punctuation">.</span>_get_hashes<span class="token punctuation">,</span> job<span class="token punctuation">[</span><span class="token string">'device'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
            job<span class="token punctuation">[</span><span class="token string">'partition'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> job<span class="token punctuation">[</span><span class="token string">'policy'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
            do_listdir<span class="token operator">=</span>_do_listdir<span class="token punctuation">(</span>
                <span class="token builtin">int</span><span class="token punctuation">(</span>job<span class="token punctuation">[</span><span class="token string">'partition'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                self<span class="token punctuation">.</span>replication_cycle<span class="token punctuation">)</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>suffix_hash <span class="token operator">+=</span> hashed
        self<span class="token punctuation">.</span>logger<span class="token punctuation">.</span>update_stats<span class="token punctuation">(</span><span class="token string">'suffix.hashes'</span><span class="token punctuation">,</span> hashed<span class="token punctuation">)</span>
        attempts_left <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>job<span class="token punctuation">[</span><span class="token string">'nodes'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        synced_remote_regions <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        random<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span>job<span class="token punctuation">[</span><span class="token string">'nodes'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        nodes <span class="token operator">=</span> itertools<span class="token punctuation">.</span>chain<span class="token punctuation">(</span>
            job<span class="token punctuation">[</span><span class="token string">'nodes'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
            job<span class="token punctuation">[</span><span class="token string">'policy'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>object_ring<span class="token punctuation">.</span>get_more_nodes<span class="token punctuation">(</span>
                <span class="token builtin">int</span><span class="token punctuation">(</span>job<span class="token punctuation">[</span><span class="token string">'partition'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">while</span> attempts_left <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>
            <span class="token comment"># If this throws StopIteration it will be caught way below</span>
            node <span class="token operator">=</span> <span class="token builtin">next</span><span class="token punctuation">(</span>nodes<span class="token punctuation">)</span>
            target_devs_info<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token punctuation">(</span>node<span class="token punctuation">[</span><span class="token string">'replication_ip'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> node<span class="token punctuation">[</span><span class="token string">'device'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            attempts_left <span class="token operator">-=</span> <span class="token number">1</span>
            <span class="token comment"># if we have already synced to this remote region,</span>
            <span class="token comment"># don't sync again on this replication pass</span>
            <span class="token keyword">if</span> node<span class="token punctuation">[</span><span class="token string">'region'</span><span class="token punctuation">]</span> <span class="token keyword">in</span> synced_remote_regions<span class="token punctuation">:</span>
                <span class="token keyword">continue</span>
            <span class="token keyword">try</span><span class="token punctuation">:</span>
                <span class="token keyword">with</span> Timeout<span class="token punctuation">(</span>self<span class="token punctuation">.</span>http_timeout<span class="token punctuation">)</span><span class="token punctuation">:</span>
                    <span class="token comment"># 首先去目标机器获取当前partition的hash值</span>
                    resp <span class="token operator">=</span> http_connect<span class="token punctuation">(</span>
                        node<span class="token punctuation">[</span><span class="token string">'replication_ip'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> node<span class="token punctuation">[</span><span class="token string">'replication_port'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                        node<span class="token punctuation">[</span><span class="token string">'device'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> job<span class="token punctuation">[</span><span class="token string">'partition'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'REPLICATE'</span><span class="token punctuation">,</span>
                        <span class="token string">''</span><span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>getresponse<span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token keyword">if</span> resp<span class="token punctuation">.</span>status <span class="token operator">==</span> HTTP_INSUFFICIENT_STORAGE<span class="token punctuation">:</span>
                        self<span class="token punctuation">.</span>logger<span class="token punctuation">.</span>error<span class="token punctuation">(</span>
                            _<span class="token punctuation">(</span><span class="token string">'%(replication_ip)s/%(device)s '</span>
                                <span class="token string">'responded as unmounted'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> node<span class="token punctuation">)</span>
                        attempts_left <span class="token operator">+=</span> <span class="token number">1</span>
                        failure_devs_info<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token punctuation">(</span>node<span class="token punctuation">[</span><span class="token string">'replication_ip'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                                                node<span class="token punctuation">[</span><span class="token string">'device'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                        <span class="token keyword">continue</span>
                    <span class="token keyword">if</span> resp<span class="token punctuation">.</span>status <span class="token operator">!=</span> HTTP_OK<span class="token punctuation">:</span>
                        self<span class="token punctuation">.</span>logger<span class="token punctuation">.</span>error<span class="token punctuation">(</span>_<span class="token punctuation">(</span><span class="token string">"Invalid response %(resp)s "</span>
                                            <span class="token string">"from %(ip)s"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                                            <span class="token punctuation">&#123;</span><span class="token string">'resp'</span><span class="token punctuation">:</span> resp<span class="token punctuation">.</span>status<span class="token punctuation">,</span>
                                            <span class="token string">'ip'</span><span class="token punctuation">:</span> node<span class="token punctuation">[</span><span class="token string">'replication_ip'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
                        failure_devs_info<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token punctuation">(</span>node<span class="token punctuation">[</span><span class="token string">'replication_ip'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                                                node<span class="token punctuation">[</span><span class="token string">'device'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                        <span class="token keyword">continue</span>
                    remote_hash <span class="token operator">=</span> pickle<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>resp<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token keyword">del</span> resp
                suffixes <span class="token operator">=</span> <span class="token punctuation">[</span>suffix <span class="token keyword">for</span> suffix <span class="token keyword">in</span> local_hash <span class="token keyword">if</span>
                            local_hash<span class="token punctuation">[</span>suffix<span class="token punctuation">]</span> <span class="token operator">!=</span>
                            remote_hash<span class="token punctuation">.</span>get<span class="token punctuation">(</span>suffix<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
                <span class="token keyword">if</span> <span class="token keyword">not</span> suffixes<span class="token punctuation">:</span>
                    self<span class="token punctuation">.</span>stats<span class="token punctuation">[</span><span class="token string">'hashmatch'</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>
                    <span class="token keyword">continue</span>
                <span class="token comment"># 重新计算当前partition下子目录的hash，（hashes.pkl文件）</span>
                hashed<span class="token punctuation">,</span> recalc_hash <span class="token operator">=</span> tpool_reraise<span class="token punctuation">(</span>
                    df_mgr<span class="token punctuation">.</span>_get_hashes<span class="token punctuation">,</span>
                    job<span class="token punctuation">[</span><span class="token string">'device'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> job<span class="token punctuation">[</span><span class="token string">'partition'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> job<span class="token punctuation">[</span><span class="token string">'policy'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                    recalculate<span class="token operator">=</span>suffixes<span class="token punctuation">)</span>
                self<span class="token punctuation">.</span>logger<span class="token punctuation">.</span>update_stats<span class="token punctuation">(</span><span class="token string">'suffix.hashes'</span><span class="token punctuation">,</span> hashed<span class="token punctuation">)</span>
                local_hash <span class="token operator">=</span> recalc_hash
                suffixes <span class="token operator">=</span> <span class="token punctuation">[</span>suffix <span class="token keyword">for</span> suffix <span class="token keyword">in</span> local_hash <span class="token keyword">if</span>
                            local_hash<span class="token punctuation">[</span>suffix<span class="token punctuation">]</span> <span class="token operator">!=</span>
                            remote_hash<span class="token punctuation">.</span>get<span class="token punctuation">(</span>suffix<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
                self<span class="token punctuation">.</span>stats<span class="token punctuation">[</span><span class="token string">'rsync'</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>
                <span class="token comment"># 如果本地的和远程的子目录hash不一致，调用sync操作进行复制</span>
                success<span class="token punctuation">,</span> _junk <span class="token operator">=</span> self<span class="token punctuation">.</span>sync<span class="token punctuation">(</span>node<span class="token punctuation">,</span> job<span class="token punctuation">,</span> suffixes<span class="token punctuation">)</span>
                <span class="token keyword">with</span> Timeout<span class="token punctuation">(</span>self<span class="token punctuation">.</span>http_timeout<span class="token punctuation">)</span><span class="token punctuation">:</span>
                    <span class="token comment"># 通知目标节点重新计算对应目录的hash</span>
                    conn <span class="token operator">=</span> http_connect<span class="token punctuation">(</span>
                        node<span class="token punctuation">[</span><span class="token string">'replication_ip'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> node<span class="token punctuation">[</span><span class="token string">'replication_port'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                        node<span class="token punctuation">[</span><span class="token string">'device'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> job<span class="token punctuation">[</span><span class="token string">'partition'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'REPLICATE'</span><span class="token punctuation">,</span>
                        <span class="token string">'/'</span> <span class="token operator">+</span> <span class="token string">'-'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>suffixes<span class="token punctuation">)</span><span class="token punctuation">,</span>
                        headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>
                    conn<span class="token punctuation">.</span>getresponse<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token keyword">if</span> <span class="token keyword">not</span> success<span class="token punctuation">:</span>
                    failure_devs_info<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token punctuation">(</span>node<span class="token punctuation">[</span><span class="token string">'replication_ip'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                                            node<span class="token punctuation">[</span><span class="token string">'device'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token comment"># add only remote region when replicate succeeded</span>
                <span class="token keyword">if</span> success <span class="token keyword">and</span> node<span class="token punctuation">[</span><span class="token string">'region'</span><span class="token punctuation">]</span> <span class="token operator">!=</span> job<span class="token punctuation">[</span><span class="token string">'region'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
                    synced_remote_regions<span class="token punctuation">.</span>add<span class="token punctuation">(</span>node<span class="token punctuation">[</span><span class="token string">'region'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
                self<span class="token punctuation">.</span>suffix_sync <span class="token operator">+=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>suffixes<span class="token punctuation">)</span>
                self<span class="token punctuation">.</span>logger<span class="token punctuation">.</span>update_stats<span class="token punctuation">(</span><span class="token string">'suffix.syncs'</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>suffixes<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">except</span> <span class="token punctuation">(</span>Exception<span class="token punctuation">,</span> Timeout<span class="token punctuation">)</span><span class="token punctuation">:</span>
                failure_devs_info<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token punctuation">(</span>node<span class="token punctuation">[</span><span class="token string">'replication_ip'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                                        node<span class="token punctuation">[</span><span class="token string">'device'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                self<span class="token punctuation">.</span>logger<span class="token punctuation">.</span>exception<span class="token punctuation">(</span>_<span class="token punctuation">(</span><span class="token string">"Error syncing with node: %s"</span><span class="token punctuation">)</span> <span class="token operator">%</span>
                                        node<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>suffix_count <span class="token operator">+=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>local_hash<span class="token punctuation">)</span>
    <span class="token keyword">except</span> <span class="token punctuation">(</span>Exception<span class="token punctuation">,</span> Timeout<span class="token punctuation">)</span><span class="token punctuation">:</span>
        failure_devs_info<span class="token punctuation">.</span>update<span class="token punctuation">(</span>target_devs_info<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>_add_failure_stats<span class="token punctuation">(</span>failure_devs_info<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>logger<span class="token punctuation">.</span>exception<span class="token punctuation">(</span>_<span class="token punctuation">(</span><span class="token string">"Error syncing partition"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">finally</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>stats<span class="token punctuation">[</span><span class="token string">'success'</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>target_devs_info <span class="token operator">-</span> failure_devs_info<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>partition_times<span class="token punctuation">.</span>append<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> begin<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>logger<span class="token punctuation">.</span>timing_since<span class="token punctuation">(</span><span class="token string">'partition.update.timing'</span><span class="token punctuation">,</span> begin<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>对于sync方法，实际就是调用了rsync方法，直接看rsync方法，很简单，就不解释了。：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">rsync</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">,</span> job<span class="token punctuation">,</span> suffixes<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">"""
        Uses rsync to implement the sync method. This was the first
        sync method in Swift.
        """</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>job<span class="token punctuation">[</span><span class="token string">'path'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
        args <span class="token operator">=</span> <span class="token punctuation">[</span>
            <span class="token string">'rsync'</span><span class="token punctuation">,</span>
            <span class="token string">'--recursive'</span><span class="token punctuation">,</span>
            <span class="token string">'--whole-file'</span><span class="token punctuation">,</span>
            <span class="token string">'--human-readable'</span><span class="token punctuation">,</span>
            <span class="token string">'--xattrs'</span><span class="token punctuation">,</span>
            <span class="token string">'--itemize-changes'</span><span class="token punctuation">,</span>
            <span class="token string">'--ignore-existing'</span><span class="token punctuation">,</span>
            <span class="token string">'--timeout=%s'</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>rsync_io_timeout<span class="token punctuation">,</span>
            <span class="token string">'--contimeout=%s'</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>rsync_io_timeout<span class="token punctuation">,</span>
            <span class="token string">'--bwlimit=%s'</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>rsync_bwlimit<span class="token punctuation">,</span>
            <span class="token string">'--exclude=.*.%s'</span> <span class="token operator">%</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">'[0-9a-zA-Z]'</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">]</span>
        <span class="token keyword">if</span> self<span class="token punctuation">.</span>rsync_compress <span class="token keyword">and</span> \
                job<span class="token punctuation">[</span><span class="token string">'region'</span><span class="token punctuation">]</span> <span class="token operator">!=</span> node<span class="token punctuation">[</span><span class="token string">'region'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
            <span class="token comment"># Allow for compression, but only if the remote node is in</span>
            <span class="token comment"># a different region than the local one.</span>
            args<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'--compress'</span><span class="token punctuation">)</span>
        rsync_module <span class="token operator">=</span> rsync_module_interpolation<span class="token punctuation">(</span>self<span class="token punctuation">.</span>rsync_module<span class="token punctuation">,</span> node<span class="token punctuation">)</span>
        had_any <span class="token operator">=</span> <span class="token boolean">False</span>
        <span class="token keyword">for</span> suffix <span class="token keyword">in</span> suffixes<span class="token punctuation">:</span>
            spath <span class="token operator">=</span> join<span class="token punctuation">(</span>job<span class="token punctuation">[</span><span class="token string">'path'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> suffix<span class="token punctuation">)</span>
            <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>spath<span class="token punctuation">)</span><span class="token punctuation">:</span>
                args<span class="token punctuation">.</span>append<span class="token punctuation">(</span>spath<span class="token punctuation">)</span>
                had_any <span class="token operator">=</span> <span class="token boolean">True</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> had_any<span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
        data_dir <span class="token operator">=</span> get_data_dir<span class="token punctuation">(</span>job<span class="token punctuation">[</span><span class="token string">'policy'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        args<span class="token punctuation">.</span>append<span class="token punctuation">(</span>join<span class="token punctuation">(</span>rsync_module<span class="token punctuation">,</span> node<span class="token punctuation">[</span><span class="token string">'device'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                    data_dir<span class="token punctuation">,</span> job<span class="token punctuation">[</span><span class="token string">'partition'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_rsync<span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>看完代码，可以总结一下<code>replicator</code>具体的流程了，首先会扫描本机上所有的<code>partition</code>，并找到所有<code>partition</code>对应的目标节点;有两种情况，当目标节点不在本机，也就是说需要转移数据时，直接将数据同步到目标节点，然后通知目标节点重新计算hash，确认成功后删除本地副本;第二种情况，会请求其他节点，对比hash，如果有不一致的情况，会进行相应同步操作，同步完成后，通知目标节点重新计算hash。总的来说，流程还是十分清晰的。</p>
]]></content>
      <categories>
        <category>OpenStack Swift</category>
      </categories>
      <tags>
        <tag>Openstack Swift</tag>
        <tag>object-replicator</tag>
      </tags>
  </entry>
  <entry>
    <title>反序列化AWS/阿里云样式的基于Query的API请求</title>
    <url>/2023/07/13/parse-aws-aliyun-like-api-request/</url>
    <content><![CDATA[<p>对于比较了解云计算的人来说，一定接触过AWS、阿里云的API接口，这两者的API调用方式很相似，当然具体谁参考谁这里就不深究了。以给EC2&#x2F;ECS添加Tag这个接口为例：</p>
<p>AWS:</p>
<pre class="line-numbers language-none"><code class="language-none">https:&#x2F;&#x2F;ec2.amazonaws.com&#x2F;?Action&#x3D;CreateTags
&amp;ResourceId.1&#x3D;ami-1a2b3c4d
&amp;ResourceId.2&#x3D;i-1234567890abcdef0
&amp;Tag.1.Key&#x3D;webserver
&amp;Tag.1.Value&#x3D;
&amp;Tag.2.Key&#x3D;stack
&amp;Tag.2.Value&#x3D;Production
&amp;AUTHPARAMS<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>阿里云：</p>
<pre class="line-numbers language-none"><code class="language-none">https:&#x2F;&#x2F;ecs.aliyuncs.com&#x2F;?Action&#x3D;TagResources
&amp;RegionId&#x3D;cn-hangzhou
&amp;ResourceId.1&#x3D;i-bp1j6qtvdm8w0z1o0****
&amp;ResourceId.2&#x3D;i-bp1j6qtvdm8w0z1oP****
&amp;ResourceType&#x3D;instance
&amp;Tag.1.Key&#x3D;TestKey
&amp;Tag.1.Value&#x3D;TestKey
&amp;&lt;公共请求参数&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<span id="more"></span>
<p>这种样式的接口设计，其实没有什么复杂的，相对比较特殊的地方在于，如果需要传入一个数组，则需要使用类似下标一样的<code>Tag.N.Key</code>这种格式进行传递，这个传递方式，和已有的一些诸如<a href="https://github.com/google/go-querystring">google&#x2F;go-querystring</a>的传递方式都不太相同，总之是个很特殊的设计。</p>
<p>如果需要写一个类似的服务，使用和这两家相同的API格式的话，针对这种数组格式的请求反序列化是个挺麻烦的事，而且找了一圈也没有类似的开源项目做这个。</p>
<p>今天借助ChatGPT写了一个反序列化函数，专门用来实现服务端对类似形态API的反序列化，通过这个函数可以很方便的将Query反序列化成一个对应的Struct：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"encoding/json"</span>
	<span class="token string">"fmt"</span>
	<span class="token string">"net/url"</span>
	<span class="token string">"reflect"</span>
	<span class="token string">"strconv"</span>
	<span class="token string">"strings"</span>
<span class="token punctuation">)</span>

<span class="token keyword">type</span> TagRequest <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	Action       <span class="token builtin">string</span>   <span class="token string">`query:"Action"`</span>
	RegionID     <span class="token builtin">string</span>   <span class="token string">`query:"RegionId"`</span>
	ResourceIds  <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token string">`query:"ResourceId"`</span>
	ResourceType <span class="token builtin">string</span>   <span class="token string">`query:"ResourceType"`</span>
	Tags         <span class="token punctuation">[</span><span class="token punctuation">]</span>Tag    <span class="token string">`query:"Tag"`</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">type</span> Tag <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	Key   <span class="token builtin">string</span> <span class="token string">`query:"Key"`</span>
	Value <span class="token builtin">string</span> <span class="token string">`query:"Value"`</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">Unmarshal</span><span class="token punctuation">(</span>queryStr <span class="token builtin">string</span><span class="token punctuation">,</span> output <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>
	values<span class="token punctuation">,</span> err <span class="token operator">:=</span> url<span class="token punctuation">.</span><span class="token function">ParseQuery</span><span class="token punctuation">(</span>queryStr<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> err
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">return</span> <span class="token function">unmarshalData</span><span class="token punctuation">(</span>values<span class="token punctuation">,</span> output<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">unmarshalData</span><span class="token punctuation">(</span>values url<span class="token punctuation">.</span>Values<span class="token punctuation">,</span> output <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>
	outputVal <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span>
	<span class="token keyword">if</span> outputVal<span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> reflect<span class="token punctuation">.</span>Ptr <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"output must be a pointer"</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	outputElem <span class="token operator">:=</span> outputVal<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	outputType <span class="token operator">:=</span> outputElem<span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> outputType<span class="token punctuation">.</span><span class="token function">NumField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
		field <span class="token operator">:=</span> outputType<span class="token punctuation">.</span><span class="token function">Field</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
		tag <span class="token operator">:=</span> field<span class="token punctuation">.</span>Tag<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"query"</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> tag <span class="token operator">==</span> <span class="token string">""</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">continue</span>
		<span class="token punctuation">&#125;</span>

		value <span class="token operator">:=</span> values<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span>
		fieldVal <span class="token operator">:=</span> outputElem<span class="token punctuation">.</span><span class="token function">FieldByName</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span>Name<span class="token punctuation">)</span>

		<span class="token keyword">if</span> field<span class="token punctuation">.</span>Type<span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> reflect<span class="token punctuation">.</span>Slice <span class="token punctuation">&#123;</span>
			elemType <span class="token operator">:=</span> field<span class="token punctuation">.</span>Type<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			<span class="token keyword">if</span> elemType<span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> reflect<span class="token punctuation">.</span>Struct <span class="token punctuation">&#123;</span>
				prefix <span class="token operator">:=</span> tag <span class="token operator">+</span> <span class="token string">"."</span>
				arrIndex <span class="token operator">:=</span> <span class="token number">1</span>
				<span class="token keyword">for</span> <span class="token punctuation">&#123;</span>
					currKey <span class="token operator">:=</span> prefix <span class="token operator">+</span> fmt<span class="token punctuation">.</span><span class="token function">Sprint</span><span class="token punctuation">(</span>arrIndex<span class="token punctuation">)</span>
					currValue <span class="token operator">:=</span> values<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>currKey<span class="token punctuation">)</span>
					<span class="token keyword">if</span> currValue <span class="token operator">==</span> <span class="token string">""</span> <span class="token punctuation">&#123;</span>
						<span class="token keyword">break</span>
					<span class="token punctuation">&#125;</span>

					currSliceVal <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>currValue<span class="token punctuation">)</span>
					fieldVal<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>fieldVal<span class="token punctuation">,</span> currSliceVal<span class="token punctuation">)</span><span class="token punctuation">)</span>
					arrIndex<span class="token operator">++</span>
				<span class="token punctuation">&#125;</span>
			<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
				prefix <span class="token operator">:=</span> tag <span class="token operator">+</span> <span class="token string">"."</span>
				objIndex <span class="token operator">:=</span> <span class="token number">1</span>
				outer <span class="token operator">:=</span> <span class="token boolean">true</span>
				<span class="token keyword">for</span> outer <span class="token punctuation">&#123;</span>
					innerValues <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span>Values<span class="token punctuation">)</span>
					<span class="token keyword">for</span> innerKey<span class="token punctuation">,</span> innerValue <span class="token operator">:=</span> <span class="token keyword">range</span> values <span class="token punctuation">&#123;</span>
						<span class="token keyword">if</span> strings<span class="token punctuation">.</span><span class="token function">HasPrefix</span><span class="token punctuation">(</span>innerKey<span class="token punctuation">,</span> prefix<span class="token operator">+</span>strconv<span class="token punctuation">.</span><span class="token function">Itoa</span><span class="token punctuation">(</span>objIndex<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"."</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
							innerValues<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>strings<span class="token punctuation">.</span><span class="token function">TrimPrefix</span><span class="token punctuation">(</span>innerKey<span class="token punctuation">,</span> prefix<span class="token operator">+</span>strconv<span class="token punctuation">.</span><span class="token function">Itoa</span><span class="token punctuation">(</span>objIndex<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">,</span> innerValue<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
						<span class="token punctuation">&#125;</span>
					<span class="token punctuation">&#125;</span>
					<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>innerValues<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
						<span class="token keyword">break</span>
					<span class="token punctuation">&#125;</span>

					newStructPtr <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>elemType<span class="token punctuation">)</span>
					err <span class="token operator">:=</span> <span class="token function">unmarshalData</span><span class="token punctuation">(</span>innerValues<span class="token punctuation">,</span> newStructPtr<span class="token punctuation">.</span><span class="token function">Interface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
					<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
						<span class="token keyword">return</span> err
					<span class="token punctuation">&#125;</span>
					fieldVal<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>fieldVal<span class="token punctuation">,</span> newStructPtr<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

					objIndex<span class="token operator">++</span>
				<span class="token punctuation">&#125;</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
			fieldVal<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	queryStr <span class="token operator">:=</span> <span class="token string">"?Action=TagResources&amp;RegionId=cn-hangzhou&amp;ResourceId.1=i-bp1j6qtvdm8w0z1o0&amp;ResourceId.2=i-bp1j6qtvdm8w0z1oP&amp;ResourceType=instance&amp;Tag.1.Key=TestKey&amp;Tag.1.Value=TestValue&amp;Tag.2.Key=TestKey&amp;Tag.2.Value=TestValue"</span>

	req <span class="token operator">:=</span> TagRequest<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
	err <span class="token operator">:=</span> <span class="token function">Unmarshal</span><span class="token punctuation">(</span>strings<span class="token punctuation">.</span><span class="token function">TrimLeft</span><span class="token punctuation">(</span>queryStr<span class="token punctuation">,</span> <span class="token string">"?"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>req<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Error:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">&#125;</span>

	jsonOutput<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">MarshalIndent</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"  "</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Unmarshaled output:"</span><span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span>jsonOutput<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>测试一下：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">% go run main.go
Unmarshaled output: <span class="token punctuation">&#123;</span>
  <span class="token string">"Action"</span><span class="token builtin class-name">:</span> <span class="token string">"TagResources"</span>,
  <span class="token string">"RegionID"</span><span class="token builtin class-name">:</span> <span class="token string">"cn-hangzhou"</span>,
  <span class="token string">"ResourceIds"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>
    <span class="token string">"i-bp1j6qtvdm8w0z1o0"</span>,
    <span class="token string">"i-bp1j6qtvdm8w0z1oP"</span>
  <span class="token punctuation">]</span>,
  <span class="token string">"ResourceType"</span><span class="token builtin class-name">:</span> <span class="token string">"instance"</span>,
  <span class="token string">"Tags"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">&#123;</span>
      <span class="token string">"Key"</span><span class="token builtin class-name">:</span> <span class="token string">"TestKey"</span>,
      <span class="token string">"Value"</span><span class="token builtin class-name">:</span> <span class="token string">"TestValue"</span>
    <span class="token punctuation">&#125;</span>,
    <span class="token punctuation">&#123;</span>
      <span class="token string">"Key"</span><span class="token builtin class-name">:</span> <span class="token string">"TestKey"</span>,
      <span class="token string">"Value"</span><span class="token builtin class-name">:</span> <span class="token string">"TestValue"</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>嗯，ChatGPT牛逼！为了方便大家使用，我创建了一个项目<a href="https://github.com/C0reFast/aws-querystring">c0refast&#x2F;aws-querystring</a>，可以方便地作为库使用：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"encoding/json"</span>
	<span class="token string">"fmt"</span>
	<span class="token string">"net/url"</span>

	<span class="token string">"github.com/c0refast/aws-querystring/query"</span>
<span class="token punctuation">)</span>

<span class="token keyword">type</span> TagRequest <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	Action       <span class="token builtin">string</span>   <span class="token string">`query:"Action"`</span>
	RegionID     <span class="token builtin">string</span>   <span class="token string">`query:"RegionId"`</span>
	ResourceIds  <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token string">`query:"ResourceId"`</span>
	ResourceType <span class="token builtin">string</span>   <span class="token string">`query:"ResourceType"`</span>
	Tags         <span class="token punctuation">[</span><span class="token punctuation">]</span>Tag    <span class="token string">`query:"Tag"`</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">type</span> Tag <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	Key   <span class="token builtin">string</span> <span class="token string">`query:"Key"`</span>
	Value <span class="token builtin">string</span> <span class="token string">`query:"Value"`</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	queryStr <span class="token operator">:=</span> <span class="token string">"Action=TagResources&amp;RegionId=cn-hangzhou&amp;ResourceId.1=i-bp1j6qtvdm8w0z1o0&amp;ResourceId.2=i-bp1j6qtvdm8w0z1oP&amp;ResourceType=instance&amp;Tag.1.Key=TestKey&amp;Tag.1.Value=TestValue&amp;Tag.2.Key=TestKey&amp;Tag.2.Value=TestValue"</span>
	urlValues<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> url<span class="token punctuation">.</span><span class="token function">ParseQuery</span><span class="token punctuation">(</span>queryStr<span class="token punctuation">)</span>
	req <span class="token operator">:=</span> TagRequest<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
	err <span class="token operator">:=</span> query<span class="token punctuation">.</span><span class="token function">BindQuery</span><span class="token punctuation">(</span>urlValues<span class="token punctuation">,</span> <span class="token operator">&amp;</span>req<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Error:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">&#125;</span>

	jsonOutput<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">MarshalIndent</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"  "</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Unmarshaled output:"</span><span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span>jsonOutput<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>日常折腾</category>
      </categories>
      <tags>
        <tag>Golang</tag>
        <tag>AWS</tag>
        <tag>Aliyun</tag>
        <tag>ChatGPT</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP扩展加载过程</title>
    <url>/2015/03/02/php-load-extension/</url>
    <content><![CDATA[<p>在PHP的配置文件中，添加一行extension&#x3D;xxxx.so，就可以使PHP加载xxx这个扩展，那么这个扩展具体是怎么被加载到PHP中的？可以看一下。</p>
<span id="more"></span>
<p>鸟哥之前写了一篇Blog，介绍了PHP扩展的载入过程：<a href="http://www.laruence.com/2009/06/14/945.html">深入理解PHP原理之扩展载入过程</a>。篇中使用了apache1的例子。</p>
<p>再看看apache2，在apache2handler&#x2F;mod_php5.c中:</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">AP_MODULE_DECLARE_DATA <span class="token keyword">module</span> <span class="token module">php5_module</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    STANDARD20_MODULE_STUFF<span class="token punctuation">,</span>
    create_php_config<span class="token punctuation">,</span>      <span class="token comment">/* create per-directory config structure */</span>
    merge_php_config<span class="token punctuation">,</span>       <span class="token comment">/* merge per-directory config structures */</span>
    <span class="token constant">NULL</span><span class="token punctuation">,</span>                   <span class="token comment">/* create per-server config structure */</span>
    <span class="token constant">NULL</span><span class="token punctuation">,</span>                   <span class="token comment">/* merge per-server config structures */</span>
    php_dir_cmds<span class="token punctuation">,</span>           <span class="token comment">/* command apr_table_t */</span>
    php_ap2_register_hook   <span class="token comment">/* register hooks */</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这中通过php_ap2_register_hook这个函数进行Apache的注入。<br>看一下php_ap2_register_hook这个函数：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">php_ap2_register_hook</span><span class="token punctuation">(</span>apr_pool_t <span class="token operator">*</span>p<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">ap_hook_pre_config</span><span class="token punctuation">(</span>php_pre_config<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> APR_HOOK_MIDDLE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">ap_hook_post_config</span><span class="token punctuation">(</span>php_apache_server_startup<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> APR_HOOK_MIDDLE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">ap_hook_handler</span><span class="token punctuation">(</span>php_handler<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> APR_HOOK_MIDDLE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">ap_hook_child_init</span><span class="token punctuation">(</span>php_apache_child_init<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> APR_HOOK_MIDDLE<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在post_config阶段会调用php_apache_server_startup：<br>而在php_apache_server_startup中，依次调用了sapi_startup和apache2_sapi_module.startup：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">static</span> <span class="token keyword">int</span>
<span class="token function">php_apache_server_startup</span><span class="token punctuation">(</span>apr_pool_t <span class="token operator">*</span>pconf<span class="token punctuation">,</span> apr_pool_t <span class="token operator">*</span>plog<span class="token punctuation">,</span> apr_pool_t <span class="token operator">*</span>ptemp<span class="token punctuation">,</span> server_rec <span class="token operator">*</span>s<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">//...</span>
    <span class="token function">sapi_startup</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>apache2_sapi_module<span class="token punctuation">)</span><span class="token punctuation">;</span>
    apache2_sapi_module<span class="token punctuation">.</span><span class="token function">startup</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>apache2_sapi_module<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//...</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre><code>而apache2_sapi_module.startup指向的函数是：
</code></pre>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">php_apache2_startup</span><span class="token punctuation">(</span>sapi_module_struct <span class="token operator">*</span>sapi_module<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">php_module_startup</span><span class="token punctuation">(</span>sapi_module<span class="token punctuation">,</span> <span class="token operator">&amp;</span>php_apache_module<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">==</span>FAILURE<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> FAILURE<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> SUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">static</span> sapi_module_struct apache2_sapi_module <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token string">"apache2handler"</span><span class="token punctuation">,</span>
    <span class="token string">"Apache 2.0 Handler"</span><span class="token punctuation">,</span>

    php_apache2_startup<span class="token punctuation">,</span>                <span class="token comment">/* startup */</span>
    <span class="token comment">//...</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在php_apache2_startup中，调用了php_module_start函数，下面的逻辑就和鸟哥的博文一样了。</p>
<p>再看看最后的php_dl里做了些啥：(php_dl函数中调用了php_load_extension，所以就直接看php_load_extension这个函数，这个函数和鸟哥中的php_dl的实现是一样的)位置在 {PHP_SRC}&#x2F;ext&#x2F;standard&#x2F;dl.c</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">PHPAPI <span class="token keyword">int</span> <span class="token function">php_load_extension</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>filename<span class="token punctuation">,</span> <span class="token keyword">int</span> type<span class="token punctuation">,</span> <span class="token keyword">int</span> start_now TSRMLS_DC<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>handle<span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>libpath<span class="token punctuation">;</span>
    zend_module_entry <span class="token operator">*</span>module_entry<span class="token punctuation">;</span>
    zend_module_entry <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>get_module<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> error_type<span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>extension_dir<span class="token punctuation">;</span>
    
    <span class="token comment">//省略一大段代码,就是计算出最终扩展文件的路径</span>
    <span class="token comment">//...</span>
    

    <span class="token comment">//这里打开这个动态库，DL_LOAD是一个宏，在Linux下就是dlopen，在Windows下就是LoadLibrary.</span>
    <span class="token comment">/* load dynamic symbol */</span>
    handle <span class="token operator">=</span> <span class="token function">DL_LOAD</span><span class="token punctuation">(</span>libpath<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">//一些错误处理</span>
    <span class="token comment">//...</span>
    
    <span class="token comment">//从动态库中获取get_module函数的入口</span>
    get_module <span class="token operator">=</span> <span class="token punctuation">(</span>zend_module_entry <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">DL_FETCH_SYMBOL</span><span class="token punctuation">(</span>handle<span class="token punctuation">,</span> <span class="token string">"get_module"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* Some OS prepend _ to symbol names while their dynamic linker
     * does not do that automatically. Thus we check manually for
     * _get_module. */</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>get_module<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        get_module <span class="token operator">=</span> <span class="token punctuation">(</span>zend_module_entry <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">DL_FETCH_SYMBOL</span><span class="token punctuation">(</span>handle<span class="token punctuation">,</span> <span class="token string">"_get_module"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>get_module<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">DL_FETCH_SYMBOL</span><span class="token punctuation">(</span>handle<span class="token punctuation">,</span> <span class="token string">"zend_extension_entry"</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">DL_FETCH_SYMBOL</span><span class="token punctuation">(</span>handle<span class="token punctuation">,</span> <span class="token string">"_zend_extension_entry"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token function">DL_UNLOAD</span><span class="token punctuation">(</span>handle<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">php_error_docref</span><span class="token punctuation">(</span><span class="token constant">NULL</span> TSRMLS_CC<span class="token punctuation">,</span> error_type<span class="token punctuation">,</span> <span class="token string">"Invalid library (appears to be a Zend Extension, try loading using zend_extension=%s from php.ini)"</span><span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> FAILURE<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token function">DL_UNLOAD</span><span class="token punctuation">(</span>handle<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">php_error_docref</span><span class="token punctuation">(</span><span class="token constant">NULL</span> TSRMLS_CC<span class="token punctuation">,</span> error_type<span class="token punctuation">,</span> <span class="token string">"Invalid library (maybe not a PHP library) '%s'"</span><span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> FAILURE<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">//调用目标动态库的get_module()函数，获取module_entry</span>
    module_entry <span class="token operator">=</span> <span class="token function">get_module</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">//进行一些判断和转换，主要是版本的比对</span>
    <span class="token comment">//...</span>
    
    module_entry<span class="token operator">-></span>type <span class="token operator">=</span> type<span class="token punctuation">;</span>
    module_entry<span class="token operator">-></span>module_number <span class="token operator">=</span> <span class="token function">zend_next_free_module</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    module_entry<span class="token operator">-></span>handle <span class="token operator">=</span> handle<span class="token punctuation">;</span>

    <span class="token comment">//调用zend_register_module_ex进行注册</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>module_entry <span class="token operator">=</span> <span class="token function">zend_register_module_ex</span><span class="token punctuation">(</span>module_entry TSRMLS_CC<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">DL_UNLOAD</span><span class="token punctuation">(</span>handle<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> FAILURE<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>type <span class="token operator">==</span> MODULE_TEMPORARY <span class="token operator">||</span> start_now<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">zend_startup_module_ex</span><span class="token punctuation">(</span>module_entry TSRMLS_CC<span class="token punctuation">)</span> <span class="token operator">==</span> FAILURE<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">DL_UNLOAD</span><span class="token punctuation">(</span>handle<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> FAILURE<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>type <span class="token operator">==</span> MODULE_TEMPORARY <span class="token operator">||</span> start_now<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> module_entry<span class="token operator">-></span>request_startup_func<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>module_entry<span class="token operator">-></span><span class="token function">request_startup_func</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> module_entry<span class="token operator">-></span>module_number TSRMLS_CC<span class="token punctuation">)</span> <span class="token operator">==</span> FAILURE<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token function">php_error_docref</span><span class="token punctuation">(</span><span class="token constant">NULL</span> TSRMLS_CC<span class="token punctuation">,</span> error_type<span class="token punctuation">,</span> <span class="token string">"Unable to initialize module '%s'"</span><span class="token punctuation">,</span> module_entry<span class="token operator">-></span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">DL_UNLOAD</span><span class="token punctuation">(</span>handle<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> FAILURE<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> SUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在zend_register_module_ex中，再有一些具体的工作，包括把扩展中定义的函数都复制到全局的funtcion_table中等等。</p>
<p>这样，一个扩展就被加载到PHP中了。</p>
]]></content>
      <categories>
        <category>源码分析</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>PHP扩展加载</tag>
      </tags>
  </entry>
  <entry>
    <title>替换PHP底层函数实现</title>
    <url>/2015/03/01/override-php-function/</url>
    <content><![CDATA[<p>在PHP中，有很多内置的函数，这些函数包括绝大部分的功能，还有一些函数，是PHP的扩展提供的，只有安装了扩展并开启，函数才可以被使用，这些函数的实现，都是用C来实现的，因此有着最好的效率。</p>
<p>在某些情况下，可能要对这些用C实现的函数进行一些额外的更改，比如说，对其进行一个伪实现，或者，在调用之前检查是否满足特定的情况，也就是说，对这些函数进行Hook。<br>比较暴力的办法，就是找到需要伪实现或者Hook的函数的源代码，直接把对应的源代码修改后重新编译，这样虽然能解决问题，但是相对的，非常麻烦，也不好移植。</p>
<p>下面就是另一个办法，我们可以自己新建一个扩展，然后，在扩展中找到对应的函数实现，然后直接把这个函数实现替换成自己的。</p>
<span id="more"></span>
<p>首先，需要知道的是，在PHP中的所有的函数，都会在执行期间存放在一个大的HashTable中，这个HashTable就是function_table，在PHP的扩展中，可以通过宏CG(function_table)去获取这个HashTable，所有的操作，都是围绕这个HashTable做的文章。</p>
<p>还要明确的一点，就是PHP扩展中的函数参数都是一样的，在PHP中提供了INTERNAL_FUNCTION_PARAMETERS这个宏来表示整个函数的参数列表。<br>同样，在PHP的扩展中，要想定义一个上层PHP代码能调用的函数，就必须使用<br>PHP_FUNCTION这个宏将函数名称包裹起来，就像：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">PHP_FUNCTION</span><span class="token punctuation">(</span>my_php_info<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>背景介绍完了，下面就是真正的实现了：</p>
<p>首先，我们先定义一个函数指针类型php_func，这个指针类型指向一个PHP扩展函数：</p>
<pre><code>typedef void (*php_func)(INTERNAL_FUNCTION_PARAMETERS);
</code></pre>
<p>接下来是实现一个php_override_func函数，这个函数的作用，就是从之前所说的function_table中找到需要被替换的函数，并且用自定义的函数替换掉原有的实现，同时，还可以根据需要，把原有的实现保留下来，用作它用。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// PHP 5版本</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">php_override_func</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">,</span> size_t len<span class="token punctuation">,</span> php_func handler<span class="token punctuation">,</span> php_func <span class="token operator">*</span>stash TSRMLS_DC<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    zend_function <span class="token operator">*</span>func<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">zend_hash_find</span><span class="token punctuation">(</span><span class="token function">CG</span><span class="token punctuation">(</span>function_table<span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> len<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>func<span class="token punctuation">)</span> <span class="token operator">==</span> SUCCESS<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>stash<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token operator">*</span>stash <span class="token operator">=</span> func<span class="token operator">-></span>internal_function<span class="token punctuation">.</span>handler<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        func<span class="token operator">-></span>internal_function<span class="token punctuation">.</span>handler <span class="token operator">=</span> handler<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// PHP 7版本</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">php_override_func</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">,</span> size_t len<span class="token punctuation">,</span> php_func handler<span class="token punctuation">,</span> php_func <span class="token operator">*</span>stash<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    zend_function <span class="token operator">*</span>func<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>func <span class="token operator">=</span> <span class="token function">zend_hash_str_find_ptr</span><span class="token punctuation">(</span><span class="token function">CG</span><span class="token punctuation">(</span>function_table<span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>stash<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token operator">*</span>stash <span class="token operator">=</span> func<span class="token operator">-></span>internal_function<span class="token punctuation">.</span>handler<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        func<span class="token operator">-></span>internal_function<span class="token punctuation">.</span>handler <span class="token operator">=</span> handler<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>有了这两个，就可以实现对某个函数的替换了，举个例子，假如现在需要将PHP的ini_get()这个函数重写了，让这个函数再任何情况下都返回一个字符串“Fake ini_get”:<br>首先我们先把伪实现后的函数定义并编写完成：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">PHP_FUNCTION</span><span class="token punctuation">(</span>fake_ini_get<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">RETURN_STRING</span><span class="token punctuation">(</span><span class="token string">"Fake ini_get"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>然后我们在扩展的初始化函数中调用：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">php_override_func</span><span class="token punctuation">(</span><span class="token string">"ini_get"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token string">"ini_get"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">PHP_FN</span><span class="token punctuation">(</span>fake_ini_get<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">NULL</span> TSRMLS_CC<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>就可以实现对ini_get()函数的伪实现了。</p>
<p>这样，当需要对PHP的函数进行一些修改的话，就可以直接通过自己的扩展来实现，而不用大动干戈的去修改PHP的源代码了。</p>
]]></content>
      <categories>
        <category>源码分析</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>扩展</tag>
        <tag>函数伪实现</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP设置open_basedir导致的性能问题</title>
    <url>/2016/12/04/openbasedir-lstat/</url>
    <content><![CDATA[<p>某天收到报警，发现某台PHP Web机器的CPU比较高，压力比较大，登录到机器看了一下，发现，user的CPU还行，但是system的CPU比较高，导致了整个机器的负载比较高，于是就怀疑是不是系统某些地方存在性能瓶颈。</p>
<p>于是先用perf+FlameGraph生成了一下火焰图看一下：<br><img src="/images/flame_before.png" alt="火焰图"></p>
<p>发现有很多 <code>__lxstat64</code> 调用占用了很多的CPU时间，这个调用是 <code>stat</code> 函数在64位Linux下的实现，正常情况下，PHP不应该会有这么多类似的调用，这是为什么呢？</p>
<span id="more"></span>>

<p>于是就尝试用strace看一下httpd进程在做些什么：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">..</span>.
getcwd<span class="token punctuation">(</span><span class="token string">"/data1/www/htdocs/41/ichenfu/1"</span>, <span class="token number">4096</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">35</span>
lstat<span class="token punctuation">(</span><span class="token string">"/data1/www/htdocs/41/ichenfu/1/./APP/Lib/Model/Api/RoutemapModel.class.php"</span>, <span class="token punctuation">&#123;</span>st_mode<span class="token operator">=</span>S_IFREG<span class="token operator">|</span>0600, <span class="token assign-left variable">st_size</span><span class="token operator">=</span><span class="token number">483</span>, <span class="token punctuation">..</span>.<span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span>
lstat<span class="token punctuation">(</span><span class="token string">"/data1/www/htdocs/41/ichenfu/1/./APP/Lib/Model/Api"</span>, <span class="token punctuation">&#123;</span>st_mode<span class="token operator">=</span>S_IFDIR<span class="token operator">|</span>0700, <span class="token assign-left variable">st_size</span><span class="token operator">=</span><span class="token number">4096</span>, <span class="token punctuation">..</span>.<span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span>
lstat<span class="token punctuation">(</span><span class="token string">"/data1/www/htdocs/41/ichenfu/1/./APP/Lib/Model"</span>, <span class="token punctuation">&#123;</span>st_mode<span class="token operator">=</span>S_IFDIR<span class="token operator">|</span>0700, <span class="token assign-left variable">st_size</span><span class="token operator">=</span><span class="token number">4096</span>, <span class="token punctuation">..</span>.<span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span>
lstat<span class="token punctuation">(</span><span class="token string">"/data1/www/htdocs/41/ichenfu/1/./APP/Lib"</span>, <span class="token punctuation">&#123;</span>st_mode<span class="token operator">=</span>S_IFDIR<span class="token operator">|</span>0700, <span class="token assign-left variable">st_size</span><span class="token operator">=</span><span class="token number">4096</span>, <span class="token punctuation">..</span>.<span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span>
lstat<span class="token punctuation">(</span><span class="token string">"/data1/www/htdocs/41/ichenfu/1/./APP"</span>, <span class="token punctuation">&#123;</span>st_mode<span class="token operator">=</span>S_IFDIR<span class="token operator">|</span>0700, <span class="token assign-left variable">st_size</span><span class="token operator">=</span><span class="token number">4096</span>, <span class="token punctuation">..</span>.<span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span>
lstat<span class="token punctuation">(</span><span class="token string">"/data1/www/htdocs/41/ichenfu/1"</span>, <span class="token punctuation">&#123;</span>st_mode<span class="token operator">=</span>S_IFDIR<span class="token operator">|</span>0700, <span class="token assign-left variable">st_size</span><span class="token operator">=</span><span class="token number">4096</span>, <span class="token punctuation">..</span>.<span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span>
lstat<span class="token punctuation">(</span><span class="token string">"/data1/www/htdocs/41/ichenfu"</span>, <span class="token punctuation">&#123;</span>st_mode<span class="token operator">=</span>S_IFDIR<span class="token operator">|</span>0777, <span class="token assign-left variable">st_size</span><span class="token operator">=</span><span class="token number">4096</span>, <span class="token punctuation">..</span>.<span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span>
lstat<span class="token punctuation">(</span><span class="token string">"/data1/www/htdocs/41/ichenfu/1/APP/Lib/Model/Api/RoutemapModel.class.php"</span>, <span class="token punctuation">&#123;</span>st_mode<span class="token operator">=</span>S_IFREG<span class="token operator">|</span>0600, <span class="token assign-left variable">st_size</span><span class="token operator">=</span><span class="token number">483</span>, <span class="token punctuation">..</span>.<span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span>
lstat<span class="token punctuation">(</span><span class="token string">"/data1/www/htdocs/41/ichenfu/1/APP/Lib/Model/Api"</span>, <span class="token punctuation">&#123;</span>st_mode<span class="token operator">=</span>S_IFDIR<span class="token operator">|</span>0700, <span class="token assign-left variable">st_size</span><span class="token operator">=</span><span class="token number">4096</span>, <span class="token punctuation">..</span>.<span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span>
lstat<span class="token punctuation">(</span><span class="token string">"/data1/www/htdocs/41/ichenfu/1/APP/Lib/Model"</span>, <span class="token punctuation">&#123;</span>st_mode<span class="token operator">=</span>S_IFDIR<span class="token operator">|</span>0700, <span class="token assign-left variable">st_size</span><span class="token operator">=</span><span class="token number">4096</span>, <span class="token punctuation">..</span>.<span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span>
lstat<span class="token punctuation">(</span><span class="token string">"/data1/www/htdocs/41/ichenfu/1/APP/Lib"</span>, <span class="token punctuation">&#123;</span>st_mode<span class="token operator">=</span>S_IFDIR<span class="token operator">|</span>0700, <span class="token assign-left variable">st_size</span><span class="token operator">=</span><span class="token number">4096</span>, <span class="token punctuation">..</span>.<span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span>
lstat<span class="token punctuation">(</span><span class="token string">"/data1/www/htdocs/41/ichenfu/1/APP"</span>, <span class="token punctuation">&#123;</span>st_mode<span class="token operator">=</span>S_IFDIR<span class="token operator">|</span>0700, <span class="token assign-left variable">st_size</span><span class="token operator">=</span><span class="token number">4096</span>, <span class="token punctuation">..</span>.<span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span>
lstat<span class="token punctuation">(</span><span class="token string">"/data1/www/htdocs/41/ichenfu/1"</span>, <span class="token punctuation">&#123;</span>st_mode<span class="token operator">=</span>S_IFDIR<span class="token operator">|</span>0700, <span class="token assign-left variable">st_size</span><span class="token operator">=</span><span class="token number">4096</span>, <span class="token punctuation">..</span>.<span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span>
lstat<span class="token punctuation">(</span><span class="token string">"/data1/www/htdocs/41/ichenfu"</span>, <span class="token punctuation">&#123;</span>st_mode<span class="token operator">=</span>S_IFDIR<span class="token operator">|</span>0777, <span class="token assign-left variable">st_size</span><span class="token operator">=</span><span class="token number">4096</span>, <span class="token punctuation">..</span>.<span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span>
lstat<span class="token punctuation">(</span><span class="token string">"/dev/urandom"</span>, <span class="token punctuation">&#123;</span>st_mode<span class="token operator">=</span>S_IFCHR<span class="token operator">|</span>0666, <span class="token assign-left variable">st_rdev</span><span class="token operator">=</span>makedev<span class="token punctuation">(</span><span class="token number">1</span>, <span class="token number">9</span><span class="token punctuation">)</span>, <span class="token punctuation">..</span>.<span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span>
lstat<span class="token punctuation">(</span><span class="token string">"/dev"</span>, <span class="token punctuation">&#123;</span>st_mode<span class="token operator">=</span>S_IFDIR<span class="token operator">|</span>0755, <span class="token assign-left variable">st_size</span><span class="token operator">=</span><span class="token number">4520</span>, <span class="token punctuation">..</span>.<span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span>
getcwd<span class="token punctuation">(</span><span class="token string">"/data1/www/htdocs/41/ichenfu/1"</span>, <span class="token number">4096</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">35</span>
lstat<span class="token punctuation">(</span><span class="token string">"/data1/www/htdocs/41/ichenfu/1/./APP/Lib/Model/Api/RoutemapModel.class.php"</span>, <span class="token punctuation">&#123;</span>st_mode<span class="token operator">=</span>S_IFREG<span class="token operator">|</span>0600, <span class="token assign-left variable">st_size</span><span class="token operator">=</span><span class="token number">483</span>, <span class="token punctuation">..</span>.<span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span>
lstat<span class="token punctuation">(</span><span class="token string">"/data1/www/htdocs/41/ichenfu/1/./APP/Lib/Model/Api"</span>, <span class="token punctuation">&#123;</span>st_mode<span class="token operator">=</span>S_IFDIR<span class="token operator">|</span>0700, <span class="token assign-left variable">st_size</span><span class="token operator">=</span><span class="token number">4096</span>, <span class="token punctuation">..</span>.<span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span>
<span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>结果发现，确实有很多的lstat系统调用，看这个调用的样子，猜测可能是PHP的open_basedir相关，为什么呢，因为这个目录刚好在open_basedir里，而且看调用，应该是在代码中require一个文件，从而触发了open_basedir的检查。<br>于是尝试用关键字open_basedir和lstat搜索了一下，读到了 <a href="https://bugs.php.net/bug.php?id=52312">PHP safe_mode&#x2F;open_basedir - lstat performance problem</a> 这个PHP的bug提交，里面讨论了一大堆，简单来说，就是在PHP的safe_mode打开或者设置了open_basedir的时候，PHP是无法做realpath cache的，主要是因为安全因素，当cache住的某个路径变成了一个软链接时，可能会有潜在的安全问题。所以当设置了open_basedir之后，PHP会将realpath_cache关掉，这就导致了在检查open_basedir的时候，无法利用缓存，从而产生了很多的lstat调用，产生性能问题。</p>
<p>找到原因了，但是，目前的情况，设置open_basedir是必须的，如何在设置open_basedir的同时也开启realpath cache呢？最后找到了一个PHP扩展 <a href="https://github.com/Whissi/realpath_turbo">realpath_turbo</a>，利用这个扩展，可以在设置open_basedir的同时，开启realpath cache，他的原理也很简单，就是将php.ini中open_basedir配置，替换成realpath_turbo.open_basedir，然后在每个请求初始化的时候，设置open_basedir，这样绕过PHP初始化时的判断，使得realpath cache可以生效。当然，使用了这个扩展之后，需要讲PHP创建软链接的权限去掉，避免上面说的安全性问题。</p>
<p>接下来就简单了，在我们的扩展里，加入相关的逻辑，在请求初始化的时候，设置open_basedir，刚好平台的PHP也是禁止创建软链接的。所以也不会有类似的安全性顾虑。</p>
<p>升级之后，又生成了一张火焰图，和之前相比，要好很多：</p>
<p><img src="/images/flame_after.png" alt="火焰图"></p>
<p>从系统监控上看，升级之前和升级之后，系统的负载，要下降接近一半左右，效果还是非常明显的。</p>
<p><img src="/images/system_load.png" alt="火焰图"></p>
]]></content>
      <tags>
        <tag>PHP</tag>
        <tag>open_basedir</tag>
        <tag>lstat</tag>
        <tag>火焰图</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP引擎实现（二）</title>
    <url>/2017/03/02/php-zend-compile-2/</url>
    <content><![CDATA[<p>上一次说到Zend的词法分析，现在该轮到语法分析和中间代码生成部分了。一般情况下，词法分析和语法分析是在一起的过程，所以一般词法分析器和语法分析器是交织在一起的，共同运行。<br>PHP的语法分析器使用的是<code>Bison</code>。具体的语法分析器定义在 <code>Zend/zend_language_parser.y</code>文件中。</p>
<span id="more"></span>

<p>在文件中，我们可以比较容易的找到针对 <code>T_ECHO</code>的语法规则：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token operator">|</span>   T_ECHO echo_expr_list <span class="token char">';'</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>即必须满足<code>T_ECHO</code> + 一个<code>echo_expr_list</code>，后面加<code>;</code>的语法，如果不满足，则直接就会报错了。我们还能继续找到<code>echo_expr_list</code>的定义：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">echo_expr_list<span class="token operator">:</span>
        echo_expr_list <span class="token char">','</span> expr <span class="token punctuation">&#123;</span> <span class="token function">zend_do_echo</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>$<span class="token number">3</span> TSRMLS_CC<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    <span class="token operator">|</span>   expr                    <span class="token punctuation">&#123;</span> <span class="token function">zend_do_echo</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>$<span class="token number">1</span> TSRMLS_CC<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>这里我们看到了一个递归的定义，即一个 <code>echo_expr_list</code> 可以包含一个 <code>echo_expr_list</code> + <code>,</code> + <code>expr(表达式)</code> 或者直接就是一个<code>expr(表达式)</code>，当只有一个表达式时，就直接调用<code>zend_do_echo()</code>，并将第一个参数(也就是expr的值)传给该函数，如果是递归的，也是一样，先递归调用，然后再将第三个参数也是就是<code>,</code>后面的<code>expr</code>传给<code>zend_do_echo()</code>。</p>
<pre><code>在Bison中，$$代表规则的结果，$1代表规则的第一个值，$2代表第二个，依次类推。
</code></pre>
<p>下面很自然的就要开始看一下 <code>zend_do_echo()</code>这个函数是干什么的了，这个函数的实现在<code>Zend/zend_compile.c</code>文件中：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">zend_do_echo</span><span class="token punctuation">(</span><span class="token keyword">const</span> znode <span class="token operator">*</span>arg TSRMLS_DC<span class="token punctuation">)</span> <span class="token comment">/* &#123;&#123;&#123; */</span>
<span class="token punctuation">&#123;</span>
	zend_op <span class="token operator">*</span>opline <span class="token operator">=</span> <span class="token function">get_next_op</span><span class="token punctuation">(</span><span class="token function">CG</span><span class="token punctuation">(</span>active_op_array<span class="token punctuation">)</span> TSRMLS_CC<span class="token punctuation">)</span><span class="token punctuation">;</span>

	opline<span class="token operator">-></span>opcode <span class="token operator">=</span> ZEND_ECHO<span class="token punctuation">;</span>
	<span class="token function">SET_NODE</span><span class="token punctuation">(</span>opline<span class="token operator">-></span>op1<span class="token punctuation">,</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">SET_UNUSED</span><span class="token punctuation">(</span>opline<span class="token operator">-></span>op2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">/* &#125;&#125;&#125; */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这个函数很简单，首先，从<code>CG(active_op_array)</code>中找到下一个opline，然后将这个OP的opcode设置为<code>ZEND_ECHO</code>，opline的第一个参数设置为传入的arg，设置第二个参数为UNUSED，也就是说，ZEND_ECHO这个OP，实际执行的时候，只会用到一个参数。</p>
<p>到目前为止。PHP编译部分算是基本理清了，语法分析器和词法分析器互相配合，从第一行开始，不断地将代码转化为一个个的opline存到<code>CG(active_op_array)</code>中，等到编译完成，再从<code>CG(active_op_array)</code>中一个个取出OP，然后执行。对应到实际的计算机，编译完成后的<code>CG(active_op_array)</code>就好比是内存中的代码段，在执行中也有个类似PC寄存器的指针指向这个代码段，然后不停的执行当前的OP，直到所有的OP全部执行完成推出。当然执行部分，是下面要说的东西了。</p>
<p>现在在回头看一下上篇说的那个例子：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
    <span class="token keyword">echo</span> <span class="token string single-quoted-string">'Hello '</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'World'</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token string single-quoted-string">'Hello '</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'World'</span><span class="token punctuation">;</span>
<span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>编译后的结果。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">line   <span class="token comment">#* E I O op    fetch  ext  return  operands</span>
---------------------------------------------------------
<span class="token number">2</span>   <span class="token number">0</span>  E <span class="token operator">></span>   CONCAT               ~0      <span class="token string">'Hello+'</span>, <span class="token string">'World'</span>
    <span class="token number">1</span>        ECHO                         ~0
<span class="token number">3</span>   <span class="token number">2</span>        ECHO                         <span class="token string">'Hello+'</span>
    <span class="token number">3</span>        ECHO                         <span class="token string">'World'</span>
<span class="token number">5</span>   <span class="token number">4</span>      <span class="token operator">></span> RETURN                       <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>同样是echo，当由<code>,</code>分隔的两个<code>expr</code>时，生成了2个<code>ECHO</code> OP，而中间用<code>.</code>操作符连接的两个字符串，是先通过<code>CONCAT</code>连接后，再调用一次<code>ECHO</code>输出，最后，调用<code>RETURN</code> 返回返回值。</p>
<p>参考：</p>
<ol>
<li><a href="http://www.php-internals.com/book/">http://www.php-internals.com/book/</a></li>
<li><a href="http://www.gnu.org/software/bison/manual/html_node/Action-Features.html#Action-Features">http://www.gnu.org/software/bison/manual/html_node/Action-Features.html#Action-Features</a></li>
</ol>
]]></content>
      <categories>
        <category>PHP Zend</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>Zend VM</tag>
        <tag>OPcode</tag>
        <tag>Bison</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP引擎实现（一）</title>
    <url>/2017/03/01/php-zend-compile/</url>
    <content><![CDATA[<p>本来这篇分析是作为一次内部分享而写的，然后就懒癌发作，一直没有写完，到目前也只是写了大约三分之一吧，原因之一也是PHP深入下去还是比较复杂的。最近空闲下来，还是觉得应该把这篇都写完吧。</p>
<p>手动分割线&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p>
<p>一段PHP脚本，到底最终是如何执行的呢？我们可以通过下面这一段最简单的代码，PHP的HelloWorld，看一步步看看到底PHP是如何执行的。</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
    <span class="token keyword">echo</span> <span class="token string single-quoted-string">'Hello '</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'World'</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token string single-quoted-string">'Hello '</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'World'</span><span class="token punctuation">;</span>
<span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>为啥要输出两次呢，当然是刻意构造好的，下面需要用的到 :-)</p>
<span id="more"></span>

<p>首先需要说明的是，也是大家都知道的，PHP是一个脚本语言，意味着，PHP代码不用经过编译，便可以直接运行，而运行PHP脚本的虚拟机，就是Zend Engine。</p>
<p>首先说说什么是虚拟机，这个词我们还是能经常听的到，有虚拟机比如VMware，VirtualBox这些可以模拟一台真正的计算机，有的虚拟机比如常见的JVM，用来执行Java字节码，某种意义上来说，如Python的解释器CPython，PHP的Zend，也都是虚拟机的一种。<br>在计算机领域，有句名言</p>
<blockquote>
<p>计算机科学领域的任何问题都可以通过增加一个间接的中间层来解决。 </p>
</blockquote>
<p>这句话，在这里也是适用的，Intel的CPU，使用的是x86指令集，大约有2000多条指令，我们可以称之为OPCode如果加上64位扩展x86_64的话，那就更多了，这么多的指令，就使得从源代码到机器指令的”翻译”变得太复杂了。看一下JVM，大约只有100多条指令，同样的Python也只有100多条指令，这就相当于，语言的虚拟机，充当了语言本身和CPU之间的一个中间层，有了这个中间层，语言的设计就变得简单了很多。因为对于”上层”的语言来说，虚拟机就是它的 “CPU”，这个”CPU”，执行的就是这个语言的OPCode，而真正执行机器码的物理CPU，对它来说就透明不可见了。</p>
<p>说了这么多，还是来看看这些虚拟机的OPCode都长啥样吧。</p>
<p>首先，看看Java的，同样还是Hello World。</p>
<pre><code>0: getstatic #2; //Field java/lang/System.out:Ljava/io/PrintStream;
3: ldc #3; //String Hello, world!
5: invokevirtual #4; //Method java/io/PrintStream.println:(Ljava/lang/String;)V
8: return
</code></pre>
<p>其中 ‘#’ + 数字，就是在引用上面定义的一些静态量，这里省略了，内容就是注释里所写的。</p>
<p>再来看看Python的：</p>
<pre><code>0 LOAD_CONST      0 // (&#39;Hello World.&#39;)
3 PRINT_ITEM
4 PRINT_NEWLINE
5 LOAD_CONST      1 // (None)
8 RETURN_VALUE
</code></pre>
<p>好像很类似哦，至少风格很接近。</p>
<p>接下来就看看PHP的吧。</p>
<p>PHP有一个插件，<a href="https://pecl.php.net/package/vld">PHP-VLD</a>，通过它，可以把PHP脚本的OPCodes打印出来。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">line   <span class="token comment">#* E I O op    fetch  ext  return  operands</span>
---------------------------------------------------------
<span class="token number">2</span>   <span class="token number">0</span>  E <span class="token operator">></span>   CONCAT               ~0      <span class="token string">'Hello+'</span>, <span class="token string">'World'</span>
    <span class="token number">1</span>        ECHO                         ~0
<span class="token number">3</span>   <span class="token number">2</span>        ECHO                         <span class="token string">'Hello+'</span>
    <span class="token number">3</span>        ECHO                         <span class="token string">'World'</span>
<span class="token number">5</span>   <span class="token number">4</span>      <span class="token operator">></span> RETURN                       <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>好像和Java&#x2F;Python的不太一样了，简单看来，Java&#x2F;Python的OPCode的操作参数很简单。而看一看PHP的呢，不仅操作的参数，而且还有返回值，fetch，ext这好几列。</p>
<p>实际上，虚拟机是一种抽象的计算机，是对真实计算机的虚拟和模拟，现在的计算机有不同的指令集架构(<a href="http://homedir.jct.ac.il/~citron/ca/isa.html">ISA: Instruction Set Architecture</a>)。ISA是处理器的一个部分，不同的处理器会有不同的架构，最常见的有3种：</p>
<ul>
<li>基于栈的Stack Machines: 操作数保存在栈上。 而不是使用寄存器来保存，现在很少有真实机器采用这个模型。对于虚拟机来说因为指令空间占用少， 并且实现简单。</li>
<li>基于累加器的Accumulator Machines。这个模型使用称作累加器(Accumulator)的的寄存器来保存 一个操作数以及操作的结果。</li>
<li>基于通用寄存器的General-Purpose-Register Machines，这些寄存器没有特殊的用途。 编译器可以将操作数保存在这些寄存器中。</li>
</ul>
<p>JVM和CPython就是基于栈的虚拟机，而Zend VM，则是基于通用寄存器的虚拟机，这也就是为什么Java&#x2F;Python的OPCodes和PHP的看起来差距的原因。</p>
<p>好了，铺垫的部分说完了，下面就要说说一段PHP代码，到底是如何转换成上面的OPCodes的吧。</p>
<p>一般的，对于编译型语言来说，编译程序把一个源程序翻译成目标程序的工作过程分为词法分析；语法分析；语义检查和中间代码生成；代码优化；目标代码生成等几个阶段，而PHP这种解释型语言稍有不同，只有词法分析；语法分析和中间代码生成这三个阶段，但是，第一步永远都是词法分析。</p>
<p>在PHP里，提供的一个函数token_get_all()，通过这个函数，可以把一段PHP代码所有的Tokens都获取出来，相当于对这段代码进行相应的词法分析，对于开头的那段代码，词法分析的结果大概是这样的：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php">Array
(
    [0] => Array
        (
            [0] => 376
            [1] => <span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
            <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=></span> <span class="token number">1</span>
        <span class="token punctuation">)</span>
    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=></span> <span class="token keyword">Array</span>
        <span class="token punctuation">(</span>
            <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=></span> <span class="token number">379</span>
            <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=></span>         
            <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=></span> <span class="token number">2</span>
        <span class="token punctuation">)</span>
    <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=></span> <span class="token keyword">Array</span>
        <span class="token punctuation">(</span>
            <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=></span> <span class="token number">319</span>
            <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=></span> <span class="token keyword">echo</span>
            <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=></span> <span class="token number">2</span>
        <span class="token punctuation">)</span>
    <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=></span> <span class="token keyword">Array</span>
        <span class="token punctuation">(</span>
            <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=></span> <span class="token number">379</span>
            <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=></span>  
            <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=></span> <span class="token number">2</span>
        <span class="token punctuation">)</span>
    <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=></span> <span class="token keyword">Array</span>
        <span class="token punctuation">(</span>
            <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=></span> <span class="token number">318</span>
            <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'Hello '</span>
            <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=></span> <span class="token number">2</span>
        <span class="token punctuation">)</span>
    <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=></span> <span class="token keyword">Array</span>
        <span class="token punctuation">(</span>
            <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=></span> <span class="token number">379</span>
            <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=></span>  
            <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=></span> <span class="token number">2</span>
        <span class="token punctuation">)</span>
    <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=></span> <span class="token operator">.</span>
    <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=></span> <span class="token keyword">Array</span>
        <span class="token punctuation">(</span>
            <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=></span> <span class="token number">379</span>
            <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=></span>  
            <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=></span> <span class="token number">2</span>
        <span class="token punctuation">)</span>
    <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=></span> <span class="token keyword">Array</span>
        <span class="token punctuation">(</span>
            <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=></span> <span class="token number">318</span>
            <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'World'</span>
            <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=></span> <span class="token number">2</span>
        <span class="token punctuation">)</span>
    <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">=></span> <span class="token punctuation">;</span>
    <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=></span> <span class="token keyword">Array</span>
        <span class="token punctuation">(</span>
            <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=></span> <span class="token number">379</span>
            <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=></span> 
        
            <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=></span> <span class="token number">2</span>
        <span class="token punctuation">)</span>
    <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span> <span class="token operator">=></span> <span class="token keyword">Array</span>
        <span class="token punctuation">(</span>
            <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=></span> <span class="token number">319</span>
            <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=></span> <span class="token keyword">echo</span>
            <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=></span> <span class="token number">3</span>
        <span class="token punctuation">)</span>
    <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span> <span class="token operator">=></span> <span class="token keyword">Array</span>
        <span class="token punctuation">(</span>
            <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=></span> <span class="token number">379</span>
            <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=></span>  
            <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=></span> <span class="token number">3</span>
        <span class="token punctuation">)</span>
    <span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span> <span class="token operator">=></span> <span class="token keyword">Array</span>
        <span class="token punctuation">(</span>
            <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=></span> <span class="token number">318</span>
            <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'Hello '</span>
            <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=></span> <span class="token number">3</span>
        <span class="token punctuation">)</span>
    <span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span> <span class="token operator">=></span> <span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">=></span> <span class="token keyword">Array</span>
        <span class="token punctuation">(</span>
            <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=></span> <span class="token number">379</span>
            <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=></span>  
            <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=></span> <span class="token number">3</span>
        <span class="token punctuation">)</span>
    <span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span> <span class="token operator">=></span> <span class="token keyword">Array</span>
        <span class="token punctuation">(</span>
            <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=></span> <span class="token number">318</span>
            <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'World'</span>
            <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=></span> <span class="token number">3</span>
        <span class="token punctuation">)</span>
    <span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span> <span class="token operator">=></span> <span class="token punctuation">;</span>
    <span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span> <span class="token operator">=></span> <span class="token keyword">Array</span>
        <span class="token punctuation">(</span>
            <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=></span> <span class="token number">379</span>
            <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=></span> 
            
            <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=></span> <span class="token number">3</span>
        <span class="token punctuation">)</span>
    <span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">]</span> <span class="token operator">=></span> <span class="token keyword">Array</span>
        <span class="token punctuation">(</span>
            <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=></span> <span class="token number">378</span>
            <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=></span> <span class="token delimiter important">?></span></span>
            [2] => 4
        )
)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>可以看到，每个Token都对应着一个数字376,379,318,319等等，这些，都是在Zend的zend_language_parser.h文件中定义的。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">T_ENCAPSED_AND_WHITESPACE</span> <span class="token expression"><span class="token number">317</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">T_CONSTANT_ENCAPSED_STRING</span> <span class="token expression"><span class="token number">318</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">T_ECHO</span> <span class="token expression"><span class="token number">319</span></span></span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">T_OPEN_TAG</span> <span class="token expression"><span class="token number">376</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">T_OPEN_TAG_WITH_ECHO</span> <span class="token expression"><span class="token number">377</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">T_CLOSE_TAG</span> <span class="token expression"><span class="token number">378</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">T_WHITESPACE</span> <span class="token expression"><span class="token number">379</span></span></span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看到，每个Token都被分配了一个唯一的标识。<br>PHP使用了re2c来生成词法分析器，在Zend中zend_language_scanner.l 文件里，定义了re2c的规则文件，通过它，就可以生成PHP的词法分析器。生成的词法分析器就是<code>zend_language_scanner.c</code>文件。</p>
<p>参考：</p>
<ol>
<li><a href="https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-6.html">https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-6.html</a></li>
<li><a href="http://www.php-internals.com/book/">http://www.php-internals.com/book/</a></li>
</ol>
]]></content>
      <categories>
        <category>PHP Zend</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>Zend VM</tag>
        <tag>OPcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Calico网络中的ProxyARP</title>
    <url>/2019/03/14/proxy-arp-in-calico/</url>
    <content><![CDATA[<p>如果K8s使用Calico作为网络方案的话，应该都会知道Calico是个纯3层的方案，也是就说，所有的数据包，都是通过路由的形式找到对应机器和容器的，然后通过BGP协议来将所有的路由同步到所有的机器或者数据中心，来完成整个网络的互联。<br>简单的来说，Calico针对一个容器，在主机上创建了一堆veth pair，其中一端在主机，一端在容器的网络空间里，然后在主机和容器中分别设置几条路由，来完成网络的互联，我们可以看一个例子：</p>
<p>主机上：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">ip</span> addr
<span class="token punctuation">..</span>.
<span class="token number">771</span>: cali45b9132fec1@if4: <span class="token operator">&lt;</span>BROADCAST,MULTICAST,UP,LOWER_UP<span class="token operator">></span> mtu <span class="token number">1440</span> qdisc noqueue state UP group default
    link/ether ee:ee:ee:ee:ee:ee brd ff:ff:ff:ff:ff:ff link-netnsid <span class="token number">14</span>
    inet6 fe80::ecee:eeff:feee:eeee/64 scope <span class="token function">link</span>
       valid_lft forever preferred_lft forever
<span class="token punctuation">..</span>.

$ <span class="token function">ip</span> route 
<span class="token punctuation">..</span>.
<span class="token number">10.218</span>.240.252 dev cali45b9132fec1 scope <span class="token function">link</span>
<span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>容器里：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">ip</span> a
<span class="token number">1</span>: lo: <span class="token operator">&lt;</span>LOOPBACK,UP,LOWER_UP<span class="token operator">></span> mtu <span class="token number">65536</span> qdisc noqueue state UNKNOWN qlen <span class="token number">1000</span>
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet <span class="token number">127.0</span>.0.1/8 scope <span class="token function">host</span> lo
       valid_lft forever preferred_lft forever
<span class="token number">3</span>: eth0@if771: <span class="token operator">&lt;</span>BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN<span class="token operator">></span> mtu <span class="token number">1440</span> qdisc noqueue state UP
    link/ether <span class="token number">66</span>:fb:34:db:c9:b4 brd ff:ff:ff:ff:ff:ff
    inet <span class="token number">10.218</span>.240.252/32 scope global eth0
       valid_lft forever preferred_lft forever

$ <span class="token function">ip</span> route
default via <span class="token number">169.254</span>.1.1 dev eth0
<span class="token number">169.254</span>.1.1 dev eth0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>按照上面的逻辑，可以理一下：</p>
<ul>
<li>当目的地址是<code>10.218.240.252</code>的数据包，也就是目的是容器的数据包，到达主机，主机根据<code>10.218.240.252 dev cali45b9132fec1 scope link</code>这条路由，将数据包丢给<code>cali45b9132fec1</code>这个veth<br>，然后容器中对应的<code>eth0</code>就可以收到数据包了。</li>
<li>当容器中的数据包需要发出，就是走默认路由，也就是<code>default via 169.254.1.1 dev eth0</code>，将数据包丢给<code>eth0</code>，这时主机对应的<code>cali45b9132fec1</code>可以收到包，然后继续进行路由选择，转发到对应端口。</li>
</ul>
<p>这么一看好像没什么问题，但是总觉得不对，为什么容器里的默认网关是<code>169.254.1.1</code>呢？二层是怎么处理的？</p>
<p>我们重新思考一下数据包的传输：<br>当一个数据包的目的地址不是本机，所以需要查询路由表，当查到路由表中的网关之后，需要获取网关的MAC地址，并将数据包的MAC地址修改成网关地址，然后发送到对应的网卡。</p>
<p>问题来了。在容器里的网关是<code>169.254.1.1</code>，那网关的MAC地址是什么？<br>正常情况下，内核会对外发送ARP请求，去询问整个二层网络中谁拥有<code>169.254.1.1</code>这个IP地址，拥有这个IP地址的设备会将自己的MAC返回。<br>但是现在的情况是，对于容器和主机，都没有<code>169.254.1.1</code>这个IP，甚至，在主机上的端口<code>cali45b9132fec1</code>，MAC地址也是一个无用的<code>ee:ee:ee:ee:ee:ee</code>。所以，如果仅仅是目前的状况，容器和主机网络根本就无法通信！<br>所以Calico是怎么做到的呢？在Calico的<a href="https://docs.projectcalico.org/v3.5/usage/troubleshooting/faq">FAQ</a>里，官方给了答案：</p>
<blockquote><h3 id="Why-can’t-I-see-the-169-254-1-1-address-mentioned-above-on-my-host"><a href="#Why-can’t-I-see-the-169-254-1-1-address-mentioned-above-on-my-host" class="headerlink" title="Why can’t I see the 169.254.1.1 address mentioned above on my host?"></a>Why can’t I see the 169.254.1.1 address mentioned above on my host?</h3><p>Calico tries hard to avoid interfering with any other configuration on the host. Rather than adding the gateway address to the host side of each workload interface, Calico sets the proxy_arp flag on the interface. This makes the host behave like a gateway, responding to ARPs for 169.254.1.1 without having to actually allocate the IP address to the interface.</p>
</blockquote>

<p>Calico利用了网卡的<code>proxy_arp</code>功能，具体的，是将<code>/proc/sys/net/ipv4/conf/DEV/proxy_arp</code>置为1，当设置这个标志之后，主机就会看起来像一个网关，会响应所有的ARP请求，并将自己的MAC地址告诉客户端。<br>也就是说，当容器发送ARP请求时，主机会告诉容器，我拥有<code>169.254.1.1</code>这个IP，我的MAC地址是XXX，这样，容器就可以顺利的将数据包发出来了，于是网络就通了。</p>
<p>其实Calico不仅仅设置了这个标志，但是这个标志是最重要的，毕竟关系到网络是否能通的问题。看了看Cailco的代码，发现Calico还设置了其他几个标志位：</p>
<ul>
<li><code>/proc/sys/net/ipv4/conf/DEV/rp_filter</code> &#x3D;&gt; 1：开启反向路径过滤，确认数据包来源，对于普通容器，IP基本无法伪装，但是如果是VM（Calico也支持VM），很容易伪装IP地址，所以为了安全打开这个选项。</li>
<li><code>/proc/sys/net/ipv4/conf/DEV/route_localnet</code> &#x3D;&gt; 1：允许路由到本地。</li>
<li><code>/proc/sys/net/ipv4/neigh/DEV/proxy_delay</code> &#x3D;&gt; 0：默认情况下，主机为了减少ARP风暴的可能，会延迟一段时间回复ARP包，这个选项关闭这个延迟。</li>
<li><code>/proc/sys/net/ipv4/conf/DEV/forwarding</code> &#x3D;&gt; 1：允许转发数据包（如果不允许转发的话，那数据包就出不去主机了）。</li>
</ul>
<p>上面是IPv4的情况，如果是IPv6的网络，则会设置：</p>
<ul>
<li><code>/proc/sys/net/ipv6/conf/DEV/proxy_ndp</code> &#x3D;&gt; 1：这个和<code>proxy_arp</code>是一样的。</li>
<li><code>/proc/sys/net/ipv4/conf/DEV/forwarding</code> &#x3D;&gt; 1：同IPv4。</li>
</ul>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Calico</tag>
        <tag>Kubernetes</tag>
        <tag>ProxyARP</tag>
      </tags>
  </entry>
  <entry>
    <title>netfilter数据流图</title>
    <url>/2018/09/09/packet-flow-in-netfilter/</url>
    <content><![CDATA[<p>这两天因为内部kubernetes的网络配置问题和同事交流了一下，由于内部使用了calico网络，在内部pod出网时有两种选择，使用nat或者不使用nat，为此还经历了一番讨论，突然发现自己对netfilter包括其相关的很多概念还是比较模糊，所以查了查资料，尝试深入了解一下。</p>
<h2 id="netfilter"><a href="#netfilter" class="headerlink" title="netfilter"></a>netfilter</h2><p>在网上找到了一张图，发现还是能比较清楚的描述整个netfilter架构的，来源来自<a href="http://xkr47.outerspace.dyndns.org/netfilter/packet_flow/">http://xkr47.outerspace.dyndns.org</a>，先把图贴出来：</p>
<p><img src="/images/netfilter_packet_flow.png" alt="netfilter packet flow"></p>
<p>这张图更像是从iptables chain的角度去描述netfilter数据流，总的来说其实不太影响最终的理解，实际netfilter提供了<code>NF_IP_PRE_ROUTING</code>、<code>NF_IP_LOCAL_IN</code>、<br><code>NF_IP_FORWARD</code>、<code>NF_IP_LOCAL_OUT</code>，<code>NF_IP_POST_ROUTING</code>几个HOOK点，具体到图上：</p>
<pre><code>- `PREROUTING`： 对应`NF_IP_PRE_ROUTING`，看名字就可以知道，该HOOK在收到数据包，进行路由判断之前触发；
- `INPUT`： 对应`NF_IP_LOCAL_IN`，当经过`PREROUTING`阶段，如果目的地址是本机，那么将触发`INPUT`，之后就可能被传给应用程序处理；
- `FORWARD`： 对应`NF_IP_FORWARD`，对应如果数据包在路由表中是需要转发到另一个网络接口的，那么将触发`FORWARD`；
- `POSTROUTING`： 对应`NF_IP_POST_ROUTING`，所有数据包在进行路由选择之后，在实际发送给网络接口之前，会触发`POSTROUTING`；
- `OUTPUT`： 对应`NF_IP_LOCAL_OUT`，对于所有本地生成的数据包，在路由选择之前会触发`OUTPUT`。

PS：根据文档描述，包括上图中的备注也说明了，在实际上，对于本地生成的数据包，是先进行过一次路由选择，拿到一些需要的信息（比如源IP和一些IP选项）后，再触发`OUTPUT`的。
</code></pre>
<p>实际上netfilter最重要的就是提供这些HOOK点，针对图上的这些HOOK点，可以方便的注册各种处理逻辑来实现对包的处理，像常用的LVS，也是利用了这一系列的HOOK，来实现负载均衡功能。</p>
<h2 id="iptables"><a href="#iptables" class="headerlink" title="iptables"></a>iptables</h2><p>说完netfilter的基本信息，需要在具体说一下iptables的主要数据流，实际上iptables也是在netfilter上注册了一系列的HOOK，并将这些HOOK通过几个table来管理，同样是针对上面的图，从iptables table这个角度来看，<br>也可以很直观的看到iptables的所有表，到底都在netfilter的哪些阶段被注册了，在很的教程中，都喜欢以table维度来介绍数据流，个人觉得是没有从hook这个维度看起来清晰的。</p>
<p>需要说明的是，因为NAT包含SNAT（修改源地址）和DNAT（修改目的地址），而这两种NAT发生作用的时间也是不一样的，在图上可以看到，DNAT发生在<code>NF_IP_PRE_ROUTING</code>和<code>NF_IP_LOCAL_OUT</code>阶段，<br>而SNAT发生在<code>NF_IP_POST_ROUTING</code>阶段，其实也很好理解，仔细想想就可以知道为什么是这样了。</p>
<p>不过对于上图里，和实际不对应的地方，iptables的SNAT其实也是可以在<code>INPUT</code>里实现的，而图上并没有画出来。</p>
<h2 id="Connection-Tracking"><a href="#Connection-Tracking" class="headerlink" title="Connection Tracking"></a>Connection Tracking</h2><p>最后再说一下<code>Connection Tracking</code>（连接跟踪），连接跟踪也是在netfilter上实现的，可以给iptables提供在连接的各个阶段对数据包进行操作的能力，也就是可以提供一个跟状态挂钩的服务（毕竟TCP链接是有状态的）。<br>数据包进入网络栈后，只经过一些基本的检查，以及raw表操作之后，很快就会被连接追踪给追踪了，根据收到的包，可以根据实际情况针对性的修改追踪中的各种链接状态，当然连接追踪也是可以跳过的，只需要在raw表中操作数据包将数据包添加<code>NOTRACK</code>标记，那么连接跟踪将会不处理数据包和其连接。</p>
<p>整体内容不是很多，也没有非常深入去了解所有的机制，特别是代码方面，但是一张图还是能提供非常多的信息，特别是对整体的架构了解帮助很大，具体到更多的应用，就额外再进行记录吧～</p>
<p>参考：</p>
<ol>
<li><a href="https://www.digitalocean.com/community/tutorials/a-deep-dive-into-iptables-and-netfilter-architecture">https://www.digitalocean.com/community/tutorials/a-deep-dive-into-iptables-and-netfilter-architecture</a></li>
<li><a href="https://www.netfilter.org/documentation/HOWTO//netfilter-hacking-HOWTO-3.html">https://www.netfilter.org/documentation/HOWTO//netfilter-hacking-HOWTO-3.html</a></li>
</ol>
]]></content>
      <categories>
        <category>Linux Kernel</category>
      </categories>
      <tags>
        <tag>iptables</tag>
        <tag>netfilter</tag>
        <tag>conntrack</tag>
      </tags>
  </entry>
  <entry>
    <title>一个epoll惊群导致的性能问题</title>
    <url>/2017/05/03/proxy-epoll-thundering-herd/</url>
    <content><![CDATA[<p>在我们内部的系统中，有一个tcp的代理服务，用户所有的网络相关的请求，比如访问外网，或者访问在内网的某些服务，都需要通过这个服务，一方面是实现对外网访问的计费，另外也通过白名单机制，对应用的内网访问进行相应的限制。<br>随着业务量的增加，发现提供服务的机器负载逐渐变高，当流量高峰的时候，经常出现客户端无法连接的情况，本来这个服务也是一个无状态的服务，可以很方便的水平扩容，在添加机器的同时，也尝试去分析一下程序本身的瓶颈，看能否提升一下程序本身的处理能力，通过分析和优化，还是在一定程度上提升了处理能力<span id="more"></span></p>
<p>首先还是在线上使用<code>perf</code>工具生成了一下火焰图：<br><img src="/images/proxy_flame_before.png" alt="火焰图"></p>
<p>第一次看到这个火焰图感觉很奇怪，主要的问题集中在为什么<code>__accept_nocancel</code>也就是<code>accept</code>的调用会如此频繁，首先想到的就是<code>惊群效应</code>了，但是应该在Linux内核2.6.18的时候，<code>accept</code>的惊群问题在内核中就已经解决了，我们线上用的CentOS 6.5内核版本已经到了2.6.32，理论上不应该会有类似的问题。<br>于是还是到线上尝试strace看一下程序的系统调用：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">epoll_wait<span class="token punctuation">(</span><span class="token number">7</span>, <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>EPOLLIN, <span class="token punctuation">&#123;</span>u32<span class="token operator">=</span><span class="token number">9484480</span>, <span class="token assign-left variable">u64</span><span class="token operator">=</span><span class="token number">9484480</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>, <span class="token number">1024</span>, <span class="token number">500</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span>
accept<span class="token punctuation">(</span><span class="token number">6</span>, 0x7fff90830890, <span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token operator">=</span> <span class="token parameter variable">-1</span> EAGAIN <span class="token punctuation">(</span>Resource temporarily unavailable<span class="token punctuation">)</span>
epoll_wait<span class="token punctuation">(</span><span class="token number">7</span>, <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>EPOLLIN, <span class="token punctuation">&#123;</span>u32<span class="token operator">=</span><span class="token number">9484480</span>, <span class="token assign-left variable">u64</span><span class="token operator">=</span><span class="token number">9484480</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>, <span class="token number">1024</span>, <span class="token number">500</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span>
accept<span class="token punctuation">(</span><span class="token number">6</span>, 0x7fff90830890, <span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token operator">=</span> <span class="token parameter variable">-1</span> EAGAIN <span class="token punctuation">(</span>Resource temporarily unavailable<span class="token punctuation">)</span>
epoll_wait<span class="token punctuation">(</span><span class="token number">7</span>, <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>EPOLLIN, <span class="token punctuation">&#123;</span>u32<span class="token operator">=</span><span class="token number">9484480</span>, <span class="token assign-left variable">u64</span><span class="token operator">=</span><span class="token number">9484480</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>, <span class="token number">1024</span>, <span class="token number">500</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span>
accept<span class="token punctuation">(</span><span class="token number">6</span>, 0x7fff90830890, <span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token operator">=</span> <span class="token parameter variable">-1</span> EAGAIN <span class="token punctuation">(</span>Resource temporarily unavailable<span class="token punctuation">)</span>
epoll_wait<span class="token punctuation">(</span><span class="token number">7</span>, <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>EPOLLIN, <span class="token punctuation">&#123;</span>u32<span class="token operator">=</span><span class="token number">9484480</span>, <span class="token assign-left variable">u64</span><span class="token operator">=</span><span class="token number">9484480</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>, <span class="token number">1024</span>, <span class="token number">500</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span>
accept<span class="token punctuation">(</span><span class="token number">6</span>, 0x7fff90830890, <span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token operator">=</span> <span class="token parameter variable">-1</span> EAGAIN <span class="token punctuation">(</span>Resource temporarily unavailable<span class="token punctuation">)</span>
epoll_wait<span class="token punctuation">(</span><span class="token number">7</span>, <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>EPOLLIN, <span class="token punctuation">&#123;</span>u32<span class="token operator">=</span><span class="token number">9484480</span>, <span class="token assign-left variable">u64</span><span class="token operator">=</span><span class="token number">9484480</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>, <span class="token number">1024</span>, <span class="token number">500</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span>
accept<span class="token punctuation">(</span><span class="token number">6</span>, 0x7fff90830890, <span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token operator">=</span> <span class="token parameter variable">-1</span> EAGAIN <span class="token punctuation">(</span>Resource temporarily unavailable<span class="token punctuation">)</span>
epoll_wait<span class="token punctuation">(</span><span class="token number">7</span>, <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>EPOLLIN, <span class="token punctuation">&#123;</span>u32<span class="token operator">=</span><span class="token number">9484480</span>, <span class="token assign-left variable">u64</span><span class="token operator">=</span><span class="token number">9484480</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>, <span class="token number">1024</span>, <span class="token number">500</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span>
accept<span class="token punctuation">(</span><span class="token number">6</span>, 0x7fff90830890, <span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token operator">=</span> <span class="token parameter variable">-1</span> EAGAIN <span class="token punctuation">(</span>Resource temporarily unavailable<span class="token punctuation">)</span>
epoll_wait<span class="token punctuation">(</span><span class="token number">7</span>, <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>EPOLLIN, <span class="token punctuation">&#123;</span>u32<span class="token operator">=</span><span class="token number">9484480</span>, <span class="token assign-left variable">u64</span><span class="token operator">=</span><span class="token number">9484480</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>, <span class="token number">1024</span>, <span class="token number">500</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span>
accept<span class="token punctuation">(</span><span class="token number">6</span>, 0x7fff90830890, <span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token operator">=</span> <span class="token parameter variable">-1</span> EAGAIN <span class="token punctuation">(</span>Resource temporarily unavailable<span class="token punctuation">)</span>
epoll_wait<span class="token punctuation">(</span><span class="token number">7</span>, <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>EPOLLIN, <span class="token punctuation">&#123;</span>u32<span class="token operator">=</span><span class="token number">9484480</span>, <span class="token assign-left variable">u64</span><span class="token operator">=</span><span class="token number">9484480</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>, <span class="token number">1024</span>, <span class="token number">500</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span>
accept<span class="token punctuation">(</span><span class="token number">6</span>, 0x7fff90830890, <span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token operator">=</span> <span class="token parameter variable">-1</span> EAGAIN <span class="token punctuation">(</span>Resource temporarily unavailable<span class="token punctuation">)</span>
epoll_wait<span class="token punctuation">(</span><span class="token number">7</span>, <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>EPOLLIN, <span class="token punctuation">&#123;</span>u32<span class="token operator">=</span><span class="token number">9484480</span>, <span class="token assign-left variable">u64</span><span class="token operator">=</span><span class="token number">9484480</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>, <span class="token number">1024</span>, <span class="token number">500</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span>
accept<span class="token punctuation">(</span><span class="token number">6</span>, 0x7fff90830890, <span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token operator">=</span> <span class="token parameter variable">-1</span> EAGAIN <span class="token punctuation">(</span>Resource temporarily unavailable<span class="token punctuation">)</span>
epoll_wait<span class="token punctuation">(</span><span class="token number">7</span>, <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>EPOLLIN, <span class="token punctuation">&#123;</span>u32<span class="token operator">=</span><span class="token number">9484480</span>, <span class="token assign-left variable">u64</span><span class="token operator">=</span><span class="token number">9484480</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>, <span class="token number">1024</span>, <span class="token number">500</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span>
accept<span class="token punctuation">(</span><span class="token number">6</span>, 0x7fff90830890, <span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token operator">=</span> <span class="token parameter variable">-1</span> EAGAIN <span class="token punctuation">(</span>Resource temporarily unavailable<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>绝大部分都是<code>epoll_wait</code>返回，尝试<code>accept</code>，但是<code>accept</code>返回<code>EAGAIN</code>，这应该就是火焰图中那么多<code>accept</code>调用的原因。又查找了一下资料，发现在<code>epoll</code>编程模型中是不会处理惊群的，当一个socket有事件，内核会唤醒所有监听的<code>epoll_wait</code>调用，从而导致这个问题。<br>我们先分析一下程序，目前程序的工作流程是：</p>
<ol>
<li>master进程启动，bind并监听一系列fd;</li>
<li>fork n个worker进程;</li>
<li>在worker进程中，获取master进程监听的fd，调用<code>epoll_create</code>创建epoll instance，并监听listen fd的事件;</li>
<li>如果有新连接，直接accept，然后进入代理流程;</li>
<li>重复执行第4步。</li>
</ol>
<p>由于线上机器是24核，所以线上运行的时候，会fork 24个worker进程，其实，当worker进程数比较少的时候，这个现象体现的不是很明显，但是当worker进程比较多的时候，惊群产生的而外的损耗，看起来已经无法忽略了。<br>对于这个问题，<code>nginx</code>的解决办法是，创建一个全局的锁，只有拿到这个锁的woker进程，才会去监听listen fd的事件进行accept，当某些条件满足，worker会放弃该锁，并停止监听listen fd事件，由其他woker得到锁后继续监听listen fd事件。<br>在nginx 1.9.1版本中，支持了一个新的特性<code>reuseport</code>，在Linux 3.9或更新内核中，可以开启<code>SO_REUSEPORT</code>选项，通过操作系统实现类似之前<code>accept</code>的隔离，来避免惊群现象，同时，能更好的利用多核，提升系统性能。</p>
<p>由于类似nginx的accpet锁实现比较复杂，刚好在我们线上系统CentOS 6.5中，<code>SO_REUSEPORT</code>这个特性已经被redhat backport回来了，也就说在CentOS 6.5的2.6.32内核中，也能开启<code>SO_REUSEPORT</code>这个选项，因此就修改了一下proxy的代码，尝试开启<code>SO_REUSEPORT</code>:</p>
<ol>
<li>master进程启动;</li>
<li>fork n个worker进程;</li>
<li>在worker进程中，bind并监听一系列fd，在bind之前设置<code>SO_REUSEPORT</code>选项，调用<code>epoll_create</code>创建epoll instance，并监听listen fd的事件;</li>
<li>如果有新连接，直接accept，然后进入代理流程;</li>
<li>重复执行第4步。</li>
</ol>
<p>修改后，同样进行strace，当有新连接的时候，只会有一个worker进程被唤醒进行accept，大大提升了效率，再看一眼火焰图：<br><img src="/images/proxy_flame_after.png" alt="火焰图"></p>
<p>可以看到已经看不到<code>accept</code>的调用了，取代的是<code>recv</code>和<code>send</code>以及<code>connect</code>，对于一个tcp代理来说，实现消耗在网络上，是比较正常的，<code>epoll_wait</code>的调用依然偏多，仍然有优化空间。</p>
<p>通过一个简单的测试，500个线程，50000个请求，在相同机器和配置的情况下，总体时间从约14.38秒减少到约10.27秒，性能大约提升了30%。</p>
<p>PS：在Linux 4.5内核中，引入了<code>EPOLLEXCLUSIVE</code>选项，同样可以解决epoll的惊群问题。 参考：<a href="https://github.com/torvalds/linux/commit/df0108c5da561c66c333bb46bfe3c1fc65905898">https://github.com/torvalds/linux/commit/df0108c5da561c66c333bb46bfe3c1fc65905898</a></p>
]]></content>
      <tags>
        <tag>epoll</tag>
        <tag>惊群</tag>
        <tag>SO_REUSEPOR</tag>
      </tags>
  </entry>
  <entry>
    <title>Qemu-KVM的CPUID初始化和自定义CPU Model显示</title>
    <url>/2020/12/28/qemu-kvm-fake-cpuid/</url>
    <content><![CDATA[<p>在上一篇Blog：<a href="https://www.ichenfu.com/2020/12/17/cpuinfo-model-name/">&#x2F;proc&#x2F;cpuinfo里的CPU型号怎么来的？</a>里，可以知道Linux系统是根据CPUID指令来显示具体的CPU型号的。所以很自然的一个想法：是不是可以自定义显示的内容呢？</p>
<p>答案显而易见，必然是可以的。但是如果要改物理CPU的寄存器，那确实会有些困难，不过没关系，我们还有虚拟机嘛，理论上虚拟机可以虚拟这些东西，那改动起来应该也是比较方便的。</p>
<p>想要修改这些寄存器，首先得先看看CPUID指令在Qemu里是怎么处理的：<span id="more"></span></p>
<p>经过一些搜索，发现KVM提供了一个接口<a href="https://www.kernel.org/doc/Documentation/virtual/kvm/api.txt">KVM_SET_CPUID2</a>，通过这个接口，可以在用户空间设置需要模拟的CPUID的信息，而我们使用Qemu，肯定是会打开KVM加速的，因此，只需要看看Qemu在这方面是怎么处理的就可以了。</p>
<p>知道了相关代码的关键字，找相关的逻辑就不难了，在<a href="https://github.com/qemu/qemu/blob/v5.1.0/target/i386/kvm.c#L1459">target&#x2F;i386&#x2F;kvm.c</a>文件里，定义了一个<code>int kvm_arch_init_vcpu(CPUState *cs)</code>函数：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">kvm_arch_init_vcpu</span><span class="token punctuation">(</span>CPUState <span class="token operator">*</span>cs<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">struct</span> <span class="token class-name">kvm_cpuid2</span> cpuid<span class="token punctuation">;</span>
        <span class="token keyword">struct</span> <span class="token class-name">kvm_cpuid_entry2</span> entries<span class="token punctuation">[</span>KVM_MAX_CPUID_ENTRIES<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> cpuid_data<span class="token punctuation">;</span>
    <span class="token comment">/*
     * The kernel defines these structs with padding fields so there
     * should be no extra padding in our cpuid_data struct.
     */</span>
    <span class="token function">QEMU_BUILD_BUG_ON</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>cpuid_data<span class="token punctuation">)</span> <span class="token operator">!=</span>
                      <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">kvm_cpuid2</span><span class="token punctuation">)</span> <span class="token operator">+</span>
                      <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">kvm_cpuid_entry2</span><span class="token punctuation">)</span> <span class="token operator">*</span> KVM_MAX_CPUID_ENTRIES<span class="token punctuation">)</span><span class="token punctuation">;</span>

    X86CPU <span class="token operator">*</span>cpu <span class="token operator">=</span> <span class="token function">X86_CPU</span><span class="token punctuation">(</span>cs<span class="token punctuation">)</span><span class="token punctuation">;</span>
    CPUX86State <span class="token operator">*</span>env <span class="token operator">=</span> <span class="token operator">&amp;</span>cpu<span class="token operator">-></span>env<span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> limit<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> cpuid_i<span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> unused<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">kvm_cpuid_entry2</span> <span class="token operator">*</span>c<span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> signature<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> kvm_base <span class="token operator">=</span> KVM_CPUID_SIGNATURE<span class="token punctuation">;</span>
    <span class="token keyword">int</span> max_nested_state_len<span class="token punctuation">;</span>
    <span class="token keyword">int</span> r<span class="token punctuation">;</span>
    Error <span class="token operator">*</span>local_err <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

    <span class="token comment">// ...</span>
    <span class="token function">cpu_x86_cpuid</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>limit<span class="token punctuation">,</span> <span class="token operator">&amp;</span>unused<span class="token punctuation">,</span> <span class="token operator">&amp;</span>unused<span class="token punctuation">,</span> <span class="token operator">&amp;</span>unused<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> limit<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// ...</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// ...</span>
        <span class="token keyword">default</span><span class="token operator">:</span>
            c<span class="token operator">-></span>function <span class="token operator">=</span> i<span class="token punctuation">;</span>
            c<span class="token operator">-></span>flags <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token function">cpu_x86_cpuid</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token operator">-></span>eax<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token operator">-></span>ebx<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token operator">-></span>ecx<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token operator">-></span>edx<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>c<span class="token operator">-></span>eax <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>c<span class="token operator">-></span>ebx <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>c<span class="token operator">-></span>ecx <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>c<span class="token operator">-></span>edx<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token comment">/*
                 * KVM already returns all zeroes if a CPUID entry is missing,
                 * so we can omit it and avoid hitting KVM's 80-entry limit.
                 */</span>
                cpuid_i<span class="token operator">--</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>


    <span class="token function">cpu_x86_cpuid</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token number">0x80000000</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>limit<span class="token punctuation">,</span> <span class="token operator">&amp;</span>unused<span class="token punctuation">,</span> <span class="token operator">&amp;</span>unused<span class="token punctuation">,</span> <span class="token operator">&amp;</span>unused<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0x80000000</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> limit<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>cpuid_i <span class="token operator">==</span> KVM_MAX_CPUID_ENTRIES<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"unsupported xlevel value: 0x%x\n"</span><span class="token punctuation">,</span> limit<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        c <span class="token operator">=</span> <span class="token operator">&amp;</span>cpuid_data<span class="token punctuation">.</span>entries<span class="token punctuation">[</span>cpuid_i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

        <span class="token keyword">switch</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// ...</span>
        <span class="token keyword">default</span><span class="token operator">:</span>
            c<span class="token operator">-></span>function <span class="token operator">=</span> i<span class="token punctuation">;</span>
            c<span class="token operator">-></span>flags <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token function">cpu_x86_cpuid</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token operator">-></span>eax<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token operator">-></span>ebx<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token operator">-></span>ecx<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token operator">-></span>edx<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>c<span class="token operator">-></span>eax <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>c<span class="token operator">-></span>ebx <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>c<span class="token operator">-></span>ecx <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>c<span class="token operator">-></span>edx<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token comment">/*
                 * KVM already returns all zeroes if a CPUID entry is missing,
                 * so we can omit it and avoid hitting KVM's 80-entry limit.
                 */</span>
                cpuid_i<span class="token operator">--</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    cpuid_data<span class="token punctuation">.</span>cpuid<span class="token punctuation">.</span>nent <span class="token operator">=</span> cpuid_i<span class="token punctuation">;</span>
    cpuid_data<span class="token punctuation">.</span>cpuid<span class="token punctuation">.</span>padding <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token comment">// 上面的代码都是在构造一个完整的cpuid_data</span>
    r <span class="token operator">=</span> <span class="token function">kvm_vcpu_ioctl</span><span class="token punctuation">(</span>cs<span class="token punctuation">,</span> KVM_SET_CPUID2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>cpuid_data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 通过KVM接口设置CPUID</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">goto</span> fail<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// ...</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>

 fail<span class="token operator">:</span>
    <span class="token function">migrate_del_blocker</span><span class="token punctuation">(</span>invtsc_mig_blocker<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> r<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>函数实现挺长，不过大部分都是些判断逻辑，最主要的两个逻辑：一个是构造KVM需要的cpuid_data数据，主要就是循环获取所有的CPUID信息，填充结构体；然后就是通过<code>KVM_SET_CPUID2</code>接口把数据设置给KVM。</p>
<p>其中，在获取CPUID信息的时候，调用了<code>cpu_x86_cpuid()</code>这个函数，这个函数的定义在<a href="https://github.com/qemu/qemu/blob/v5.1.0/target/i386/cpu.c#L5481">target&#x2F;i386&#x2F;cpu.c</a>:</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">cpu_x86_cpuid</span><span class="token punctuation">(</span>CPUX86State <span class="token operator">*</span>env<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> index<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> count<span class="token punctuation">,</span>
                   <span class="token class-name">uint32_t</span> <span class="token operator">*</span>eax<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> <span class="token operator">*</span>ebx<span class="token punctuation">,</span>
                   <span class="token class-name">uint32_t</span> <span class="token operator">*</span>ecx<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> <span class="token operator">*</span>edx<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    X86CPU <span class="token operator">*</span>cpu <span class="token operator">=</span> <span class="token function">env_archcpu</span><span class="token punctuation">(</span>env<span class="token punctuation">)</span><span class="token punctuation">;</span>
    CPUState <span class="token operator">*</span>cs <span class="token operator">=</span> <span class="token function">env_cpu</span><span class="token punctuation">(</span>env<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> die_offset<span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> limit<span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> signature<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    X86CPUTopoInfo topo_info<span class="token punctuation">;</span>
    <span class="token comment">// ... </span>

    <span class="token keyword">switch</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// ... </span>
    <span class="token keyword">case</span> <span class="token number">0x80000002</span><span class="token operator">:</span>
    <span class="token keyword">case</span> <span class="token number">0x80000003</span><span class="token operator">:</span>
    <span class="token keyword">case</span> <span class="token number">0x80000004</span><span class="token operator">:</span>
        <span class="token operator">*</span>eax <span class="token operator">=</span> env<span class="token operator">-></span>cpuid_model<span class="token punctuation">[</span><span class="token punctuation">(</span>index <span class="token operator">-</span> <span class="token number">0x80000002</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token operator">*</span>ebx <span class="token operator">=</span> env<span class="token operator">-></span>cpuid_model<span class="token punctuation">[</span><span class="token punctuation">(</span>index <span class="token operator">-</span> <span class="token number">0x80000002</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token operator">*</span>ecx <span class="token operator">=</span> env<span class="token operator">-></span>cpuid_model<span class="token punctuation">[</span><span class="token punctuation">(</span>index <span class="token operator">-</span> <span class="token number">0x80000002</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token operator">*</span>edx <span class="token operator">=</span> env<span class="token operator">-></span>cpuid_model<span class="token punctuation">[</span><span class="token punctuation">(</span>index <span class="token operator">-</span> <span class="token number">0x80000002</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token comment">// ...</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
        <span class="token comment">/* reserved values: zero */</span>
        <span class="token operator">*</span>eax <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token operator">*</span>ebx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token operator">*</span>ecx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token operator">*</span>edx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这个函数实现也是非常长，也是很多的case分支，但是大部分我们不用关心，只需要看<code>0x80000002</code>到<code>0x80000004</code>这几个case就行，代码也很简单，就是把<code>env-&gt;cpuid_model</code>的值赋值到对应的寄存器里。</p>
<p>看到这里，修改寄存器的方式就很明确了，直接修改<code>env-&gt;cpuid_model</code>里的值就可以了。其实还会有些小问题，比如参数里的<code>CPUX86State *env</code>具体是从哪来的，这个问题比较复杂，但是也很值得去研究，下次会专门开文章分析这部分逻辑。</p>
<p>要修改<code>env-&gt;cpuid_model</code>，先看看定义，在<a href="https://github.com/qemu/qemu/blob/v5.1.0/target/i386/cpu.h#L1576">target&#x2F;i386&#x2F;cpu.h</a>被定义成<code>uint32_t cpuid_model[12]</code>，很合理，三个ID，每个ID 4个寄存器，一共12个uint32。</p>
<p>然后呢，还需要寻找一个string到<code>uint32_t</code>的转换逻辑，简单看了一下代码里有个<a href="https://github.com/qemu/qemu/blob/v5.1.0/target/i386/cpu.c#L4587">x86_cpuid_set_model_id函数</a></p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">x86_cpuid_set_model_id</span><span class="token punctuation">(</span>Object <span class="token operator">*</span>obj<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>model_id<span class="token punctuation">,</span>
                                   Error <span class="token operator">*</span><span class="token operator">*</span>errp<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    X86CPU <span class="token operator">*</span>cpu <span class="token operator">=</span> <span class="token function">X86_CPU</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
    CPUX86State <span class="token operator">*</span>env <span class="token operator">=</span> <span class="token operator">&amp;</span>cpu<span class="token operator">-></span>env<span class="token punctuation">;</span>
    <span class="token keyword">int</span> c<span class="token punctuation">,</span> len<span class="token punctuation">,</span> i<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>model_id <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        model_id <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>model_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>env<span class="token operator">-></span>cpuid_model<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">48</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> len<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            c <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token punctuation">)</span>model_id<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        env<span class="token operator">-></span>cpuid_model<span class="token punctuation">[</span>i <span class="token operator">>></span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">|=</span> c <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>稍微有些区别，因为<code>x86_cpuid_set_model_id</code>函数参是一个X86CPU类型，但是问题不大，我们稍微修改一下逻辑，新建个函数<code>set_fake_cpuid_model</code>，把cpuid_model修改成<code>Intel(R) Xeon(R) A Really Fast CPU @ 10.0 GHz</code>:</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">set_fake_cpuid_model</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> fake_cpuid_model<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">// 这里修改成任何想填的信息</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>fake_model_id <span class="token operator">=</span> <span class="token string">"Intel(R) Xeon(R) A Really Fast CPU @ 10.0 GHz"</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>fake_cpuid_model<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> c<span class="token punctuation">,</span> len<span class="token punctuation">,</span> i<span class="token punctuation">;</span>
    len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>fake_model_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">48</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> len<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            c <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token punctuation">)</span>fake_model_id<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        fake_cpuid_model<span class="token punctuation">[</span>i <span class="token operator">>></span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">|=</span> c <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>然后在<code>cpu_x86_cpuid</code>函数里多加一行：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">cpu_x86_cpuid</span><span class="token punctuation">(</span>CPUX86State <span class="token operator">*</span>env<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> index<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> count<span class="token punctuation">,</span>
                   <span class="token class-name">uint32_t</span> <span class="token operator">*</span>eax<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> <span class="token operator">*</span>ebx<span class="token punctuation">,</span>
                   <span class="token class-name">uint32_t</span> <span class="token operator">*</span>ecx<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> <span class="token operator">*</span>edx<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    X86CPU <span class="token operator">*</span>cpu <span class="token operator">=</span> <span class="token function">env_archcpu</span><span class="token punctuation">(</span>env<span class="token punctuation">)</span><span class="token punctuation">;</span>
    CPUState <span class="token operator">*</span>cs <span class="token operator">=</span> <span class="token function">env_cpu</span><span class="token punctuation">(</span>env<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> die_offset<span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> limit<span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> signature<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    X86CPUTopoInfo topo_info<span class="token punctuation">;</span>
    <span class="token comment">// ... </span>

    <span class="token keyword">switch</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// ... </span>
    <span class="token keyword">case</span> <span class="token number">0x80000002</span><span class="token operator">:</span>
    <span class="token keyword">case</span> <span class="token number">0x80000003</span><span class="token operator">:</span>
    <span class="token keyword">case</span> <span class="token number">0x80000004</span><span class="token operator">:</span>
        <span class="token function">set_fake_cpuid_model</span><span class="token punctuation">(</span>env<span class="token operator">-></span>cpuid_model<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将CPUID设置成我们需要的</span>
        <span class="token operator">*</span>eax <span class="token operator">=</span> env<span class="token operator">-></span>cpuid_model<span class="token punctuation">[</span><span class="token punctuation">(</span>index <span class="token operator">-</span> <span class="token number">0x80000002</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token operator">*</span>ebx <span class="token operator">=</span> env<span class="token operator">-></span>cpuid_model<span class="token punctuation">[</span><span class="token punctuation">(</span>index <span class="token operator">-</span> <span class="token number">0x80000002</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token operator">*</span>ecx <span class="token operator">=</span> env<span class="token operator">-></span>cpuid_model<span class="token punctuation">[</span><span class="token punctuation">(</span>index <span class="token operator">-</span> <span class="token number">0x80000002</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token operator">*</span>edx <span class="token operator">=</span> env<span class="token operator">-></span>cpuid_model<span class="token punctuation">[</span><span class="token punctuation">(</span>index <span class="token operator">-</span> <span class="token number">0x80000002</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token comment">// ...</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>虽然暴力了点，但是作为测试的话，先实现测试的功能就好。如果确实需要有类似的逻辑，理论上放到<code>X86CPU</code>结构体初始化的地方，或者干脆自定义一个CPU类型，会比较友好。</p>
<p>最后，编译，运行！<br><img src="/images/lscpu_fake.png" alt="lscpu"></p>
]]></content>
      <categories>
        <category>Virtualization</category>
      </categories>
      <tags>
        <tag>Qemu</tag>
        <tag>KVM</tag>
        <tag>CPUID</tag>
      </tags>
  </entry>
  <entry>
    <title>一行Python生成随机字符串</title>
    <url>/2018/11/08/python-generate-random-string/</url>
    <content><![CDATA[<p>一行Python代码生成随机字符串：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> random<span class="token punctuation">,</span> string<span class="token punctuation">;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>string<span class="token punctuation">.</span>ascii_letters <span class="token operator">+</span> string<span class="token punctuation">.</span>digits<span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># python -c "import random, string; print(''.join(random.choice(string.ascii_letters + string.digits) for _ in range(15)))"</span>
hTvLXAGUzTISKmZ<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>如果是Python3，还可以使用：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> random<span class="token punctuation">,</span> string<span class="token punctuation">;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>random<span class="token punctuation">.</span>choices<span class="token punctuation">(</span>string<span class="token punctuation">.</span>ascii_letters <span class="token operator">+</span> string<span class="token punctuation">.</span>digits<span class="token punctuation">,</span> k<span class="token operator">=</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># python3 -c "import random, string; print(''.join(random.choices(string.ascii_letters + string.digits, k=15)))"            </span>
BRYr0FncnkXUL9F<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>效率配置</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Random String</tag>
      </tags>
  </entry>
  <entry>
    <title>树莓派启动时需要连接HDMI问题</title>
    <url>/2019/09/14/raspberrypi-boot-without-HDMI-connected/</url>
    <content><![CDATA[<p>前段时间将家里的树莓派3B系统换成了<code>ArchLinux Arm</code>，这样就可以用上64位指令集，不过遇到了一个问题，在没有连接HDMI时系统无法启动，刚开始还以为是什么其他的原因，因为之前接上显示器开机一切正常，但是换个地方不接显示器就启动不了，后来把显示器搬到旁边，一插上HDMI，立马就进入启动了。</p>
<p>定位到和HDMI相关之后，搜索了一下，刚开始以为和系统有关，后来搜到了<a href="https://www.raspberrypi.org/forums/viewtopic.php?t=11259">Won’t boot without HDMI connected (solved)</a>这个帖子，发现不是系统问题，是个简单的配置问题，很简单，在<code>/boot/config.txt</code>中，加入一行<code>hdmi_force_hotplug=1</code>就可以了，直接重启，没有接显示器也可以正常启动了。</p>
<p>这个配置信息在<a href="https://www.raspberrypi.org/documentation/configuration/config-txt/video.md">Video options in config.txt</a>有详细的解释，意思是强制认为HDMI已经连接，直接开启HDMI输出。</p>
<span id="more"></span>]]></content>
      <categories>
        <category>日常折腾</category>
      </categories>
      <tags>
        <tag>RaspberryPi</tag>
      </tags>
  </entry>
  <entry>
    <title>使用udev重命名网卡</title>
    <url>/2020/06/08/rename-nic-names/</url>
    <content><![CDATA[<p>在老的Linux中，特别是CentOS 6系统下，网卡大多数都是命名为<code>eth0</code>，<code>eth1</code>这样的形式，但是这样的命名是不稳定的，因为后面的数字是根据驱动的加载顺序来的，那么就有可能出现两次启动导致网卡名称不一样的情况了。<br>在CentOS 7中，由于有了Systemd，所以引入了一种新的命名规则叫<code>一致网络设备命名</code>，具体的可以参考文档<a href="https://access.redhat.com/documentation/zh_cn/red_hat_enterprise_linux/7/html/networking_guide/ch-consistent_network_device_naming">第 8 章 一致网络设备命名</a>，这里就不再赘述了。</p>
<p>现在问题来了，如何真正意义上实现按意愿去设置网卡的名称呢？这里有个通用的方法：</p>
<p>编辑<code>/etc/udev/rules.d/70-persistent-net.rules</code>文件，如果有这个文件，则直接编辑就可以，如果没有就新建一个。<br>然后在文件中按以下的格式输入规则：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">SUBSYSTEM</span><span class="token operator">==</span><span class="token string">"net"</span>, <span class="token assign-left variable">ACTION</span><span class="token operator">==</span><span class="token string">"add"</span>, <span class="token assign-left variable">DRIVERS</span><span class="token operator">==</span><span class="token string">"?*"</span>, ATTR<span class="token punctuation">&#123;</span>address<span class="token punctuation">&#125;</span><span class="token operator">==</span><span class="token string">"aa:bb:cc:dd:ee:01"</span>, <span class="token assign-left variable">NAME</span><span class="token operator">=</span><span class="token string">"eth0"</span>
<span class="token assign-left variable">SUBSYSTEM</span><span class="token operator">==</span><span class="token string">"net"</span>, <span class="token assign-left variable">ACTION</span><span class="token operator">==</span><span class="token string">"add"</span>, <span class="token assign-left variable">DRIVERS</span><span class="token operator">==</span><span class="token string">"?*"</span>, ATTR<span class="token punctuation">&#123;</span>address<span class="token punctuation">&#125;</span><span class="token operator">==</span><span class="token string">"00:11:22:33:44:02"</span>, <span class="token assign-left variable">NAME</span><span class="token operator">=</span><span class="token string">"ethxyz"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<div class="note primary"><p>需要注意的是，MAC地址中的字母，必须是小写，否则可能会无法正确匹配。</p>
</div>

<p>只需要根据情况，填写MAC地址和名字就可以了。另外，针对已有的网络配置，如CentOS下<code>/etc/sysconfig/network-scripts/</code>底下的那些ifcfg-xxxx配置文件，也需要针对性的进行修改。修改完成后重启机器即可生效。</p>
<p>针对udev规则，还有很多可以MATCH和修改的地方，可以实现很多复杂功能，具体的这里就不赘述了，感兴趣的可以参考一下<a href="https://wiki.archlinux.org/index.php/Udev">udev - ArchWiki</a>，或者其他udev相关的文章。</p>
]]></content>
      <categories>
        <category>效率配置</category>
      </categories>
      <tags>
        <tag>udev</tag>
        <tag>网卡重命名</tag>
      </tags>
  </entry>
  <entry>
    <title>Python的上下文管理器</title>
    <url>/2017/07/12/python-context-managers/</url>
    <content><![CDATA[<p>Python中的上下文管理器可以允许精确地分配和释放资源，最常用的就是使用<code>with</code>语句，比如：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'/tmp/file_x'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> file_x<span class="token punctuation">:</span>
    file_x<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'Hello'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>当<code>with</code>结束，文件也会被安全的关闭。不用担心回收资源的问题了。</p>
<p>如果一个自定义的类也想支持类似的调用方式，需要实现<code>__enter__(self)</code>和<code>__exit__(self, type, value, traceback)</code>这两个方法，具体的：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> file_name<span class="token punctuation">,</span> method<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>file_obj <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>file_name<span class="token punctuation">,</span> method<span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">__enter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>file_obj
    <span class="token keyword">def</span> <span class="token function">__exit__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">,</span> value<span class="token punctuation">,</span> traceback<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>file_obj<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>其中<code>__enter__</code>方法将打开的文件返回给<code>with</code>语句。<br>对于<code>__exit__(self, type, value, traceback)</code>方法，会在<code>with</code>语句退出时调用，如果在执行中发现异常，则异常的type,value和traceback会被传递给<code>__exit__</code>方法，在<code>__exit__</code>中可以对异常进行相应的处理，如果最终<br><code>__exit__</code>方法返回<code>None</code>，则认为异常被正确处理了，如果返回的不是<code>None</code>，则这个异常会被<code>with</code>抛出，期待上层进行相应的处理。</p>
<p>除了上面的方法，Python还提供了一个contextlib模块，通过这个模块加上装饰器(decorators)和生成器(generators)，也能实现类似的功能：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> contextlib <span class="token keyword">import</span> contextmanager

<span class="token decorator annotation punctuation">@contextmanager</span>
<span class="token keyword">def</span> <span class="token function">open_file</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>
    f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span>
    <span class="token keyword">yield</span> f
    f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这样在使用中，<code>open_file</code>变成了一个生成器，所以contextmanager可以通过调用这个生成器<code>next()</code>方法控制资源的释放，具体的源代码在这里：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 代码有所省略，具体可以参考： https://github.com/python/cpython/blob/master/Lib/contextlib.py</span>
<span class="token keyword">class</span> <span class="token class-name">_GeneratorContextManager</span><span class="token punctuation">(</span>_GeneratorContextManagerBase<span class="token punctuation">,</span>
                               AbstractContextManager<span class="token punctuation">,</span>
                               ContextDecorator<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""Helper for @contextmanager decorator."""</span>

    <span class="token keyword">def</span> <span class="token function">_recreate_cm</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>__class__<span class="token punctuation">(</span>self<span class="token punctuation">.</span>func<span class="token punctuation">,</span> self<span class="token punctuation">.</span>args<span class="token punctuation">,</span> self<span class="token punctuation">.</span>kwds<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">__enter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">try</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token builtin">next</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>gen<span class="token punctuation">)</span>
        <span class="token keyword">except</span> StopIteration<span class="token punctuation">:</span>
            <span class="token keyword">raise</span> RuntimeError<span class="token punctuation">(</span><span class="token string">"generator didn't yield"</span><span class="token punctuation">)</span> <span class="token keyword">from</span> <span class="token boolean">None</span>

    <span class="token keyword">def</span> <span class="token function">__exit__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">,</span> value<span class="token punctuation">,</span> traceback<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token builtin">type</span> <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            <span class="token keyword">try</span><span class="token punctuation">:</span>
                <span class="token builtin">next</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>gen<span class="token punctuation">)</span>
            <span class="token keyword">except</span> StopIteration<span class="token punctuation">:</span>
                <span class="token keyword">return</span> <span class="token boolean">False</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                <span class="token keyword">raise</span> RuntimeError<span class="token punctuation">(</span><span class="token string">"generator didn't stop"</span><span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> value <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
                value <span class="token operator">=</span> <span class="token builtin">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token keyword">try</span><span class="token punctuation">:</span>
                self<span class="token punctuation">.</span>gen<span class="token punctuation">.</span>throw<span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">,</span> value<span class="token punctuation">,</span> traceback<span class="token punctuation">)</span>
            <span class="token keyword">except</span> StopIteration <span class="token keyword">as</span> exc<span class="token punctuation">:</span>
                <span class="token keyword">return</span> exc <span class="token keyword">is</span> <span class="token keyword">not</span> value
            <span class="token keyword">except</span> RuntimeError <span class="token keyword">as</span> exc<span class="token punctuation">:</span>
                <span class="token keyword">if</span> exc <span class="token keyword">is</span> value<span class="token punctuation">:</span>
                    <span class="token keyword">return</span> <span class="token boolean">False</span>
                <span class="token keyword">if</span> <span class="token builtin">type</span> <span class="token keyword">is</span> StopIteration <span class="token keyword">and</span> exc<span class="token punctuation">.</span>__cause__ <span class="token keyword">is</span> value<span class="token punctuation">:</span>
                    <span class="token keyword">return</span> <span class="token boolean">False</span>
                <span class="token keyword">raise</span>
            <span class="token keyword">except</span><span class="token punctuation">:</span>
                <span class="token keyword">if</span> sys<span class="token punctuation">.</span>exc_info<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">is</span> value<span class="token punctuation">:</span>
                    <span class="token keyword">return</span> <span class="token boolean">False</span>
                <span class="token keyword">raise</span>
            <span class="token keyword">raise</span> RuntimeError<span class="token punctuation">(</span><span class="token string">"generator didn't stop after throw()"</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">contextmanager</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token decorator annotation punctuation">@wraps</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">helper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwds<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> _GeneratorContextManager<span class="token punctuation">(</span>func<span class="token punctuation">,</span> args<span class="token punctuation">,</span> kwds<span class="token punctuation">)</span>
    <span class="token keyword">return</span> helper<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>参考：</p>
<ol>
<li><a href="http://book.pythontips.com/en/latest/context_managers.html">http://book.pythontips.com/en/latest/context_managers.html</a></li>
<li><a href="https://github.com/python/cpython/blob/master/Lib/contextlib.py">https://github.com/python/cpython/blob/master/Lib/contextlib.py</a></li>
</ol>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>context-manager</tag>
      </tags>
  </entry>
  <entry>
    <title>/etc/resolv.conf search和ndots配置</title>
    <url>/2018/10/09/resolv-conf-desc/</url>
    <content><![CDATA[<p>先说说背景，为什么会要了解一下<code>/etc/resolv.conf</code>配置，起因是一个跑在k8s集群的一个业务出现问题，仔细排查后，发现其中一个Pod的域名解析有问题，域名<code>login.example.com</code>被解析到了一个IP，而这个IP地址是另一个范域名<code>*.ichenfu.com</code>的解析，经过一番调查，最终发现是同事在配置一台机器上的<code>kubelet</code>时填错了<code>clusterDomain</code>的配置，将原本需要配置为<code>c2.ichenfu.com</code>的配置写成了<code>c1.ichenfu.com</code>，那么问题来了，为什么这么配置会导致DNS解析到一个错误的，而且是完全不相干的地址的呢？下面就慢慢分析一下。</p>
<p>首先还原一下场景，默认情况下，<code>kubelet</code>启动Pod的时候，会将DNS配置注入到Pod中，出问题的Pod里<code>/etc/resove.conf</code>内容如下：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nameserver <span class="token number">10.254</span>.0.2
search default.svc.c1.ichenfu.com svc.c1.ichenfu.com c1.ichenfu.com localdomain
options ndots:5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<span id="more"></span>

<p>而提供k8s DNS解析服务的coredns的配置文件如下：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">.:53 <span class="token punctuation">&#123;</span>
        errors
        health
        kubernetes cluster.local c2.ichenfu.com in-addr.arpa ip6.arpa <span class="token punctuation">&#123;</span>
          pods insecure
          upstream
          fallthrough in-addr.arpa ip6.arpa
        <span class="token punctuation">&#125;</span>
        prometheus :9153
        proxy <span class="token builtin class-name">.</span> /etc/resolv.conf
        cache <span class="token number">30</span>
        reload
        loadbalance
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>需要解释一下Coredns的配置文件，大致的逻辑是接受所有的请求，并启用kubernetes插件，当请求属于<code>cluster.local</code>和<code>c2.ichenfu.com</code>两个域时，查询k8s数据，返回对应记录，对于没有记录的其他域，代理给本地的DNS进行查询。</p>
<p>问题来了，针对<code>login.example.com</code>的解析请求，为啥最终是<code>*.ichenfu.com</code>这条规则作出响应？</p>
<p>最根本的原因是Pod中<code>resove.conf</code>的配置，其中<code>search default.svc.c1.ichenfu.com svc.c1.ichenfu.com c1.ichenfu.com localdomain</code>和<code>options ndots:5</code>这两行配置表明，所有查询中，如果<code>.</code>的个数少于5个，则会根据<code>search</code>中配置的列表依次在对应域中先进行搜索，如果没有返回，则最后再直接查询域名本身。<br>所以针对<code>login.example.com</code>的情况是，先查询<code>login.example.com.default.svc.c1.ichenfu.com</code>，再查询<code>login.example.com.svc.c1.ichenfu.com</code>，再查询<code>login.example.com.c1.ichenfu.com</code>，然后<code>login.example.com.localdomain</code>，如果上面列表都没有解析返回，则最后再查询<code>login.example.com</code>，很显然，正常情况下，经过4次多余的查询之后，最终也会获得正确的结果，但是针对这次的情况，由于配置出问题，导致在第一次查询的时候，<code>login.example.com.default.svc.c1.ichenfu.com</code>这个域名并不在coredns所配置的<code>cluster.local</code>和<code>c2.ichenfu.com</code>域中，直接转发到本地DNS，走正常的递归查询逻辑，而最终命中<code>*.ichenfu.com</code>这条规则。</p>
<p>将配置文件修改之后，问题就解决了。</p>
<p>最后再来看看到底<code>resolv.conf</code>相关配置的具体说明：</p>
<blockquote><p><strong>search</strong> Search list for host-name lookup.</p>
<p>The search list is normally determined from the local domain name; by default, it contains only the local domain name. This may be changed by listing the desired domain search path following the search keyword with spaces or tabs separating the names. Resolver queries having fewer than ndots dots (default is 1) in them will be attempted using each component of the search path in turn until a match is found. For environments with multiple subdomains please read options ndots:n below to avoid man-in-the-middle attacks and unnecessary traffic for the root-dns-servers. Note that this process may be slow and will generate a lot of network traffic if the servers for the listed domains are not local, and that queries will time out if no server is available for one of the domains.<br>The search list is currently limited to six domains with a total of 256 characters.</p>
<p><strong>options</strong> option …</p>
<p>where option is one of the following:</p>
<p><strong>ndots</strong>:n</p>
<p>sets a threshold for the number of dots which must appear in a name given to res_query(3) (see resolver(3)) before an initial absolute query will be made. The default for n is 1, meaning that if there are any dots in a name, the name will be tried first as an absolute name before any search list elements are appended to it. The value for this option is silently capped to 15.</p>
</blockquote>
<p>至少文档里是这么说了，那么实际呢，是不是真的就是这样？使用<code>host</code>命令测试一下：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/ <span class="token comment"># host -v www.baidu.com</span>
Trying <span class="token string">"www.baidu.com.default.svc.c1.ichenfu.com"</span>
Trying <span class="token string">"www.baidu.com.svc.c1.ichenfu.com"</span>
Trying <span class="token string">"www.baidu.com.c1.ichenfu.com"</span>
Trying <span class="token string">"www.baidu.com.localdomain"</span>
Trying <span class="token string">"www.baidu.com"</span>
<span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>确实是这样。如此一来，在默认配置情况下，在容器内部解析域名的成本还是很高的，大部分的域名都不会有5个<code>.</code>，也就意味着大部分外部域名DNS解析请求都需要5次才能解析成功。<br>所以业务部署的时候，就需要根据情况，强制注入一个外部DNS了。</p>
<p>参考：</p>
<ol>
<li><a href="https://linux.die.net/man/5/resolv.conf">https://linux.die.net/man/5/resolv.conf</a></li>
</ol>
]]></content>
      <categories>
        <category>Linux部署</category>
      </categories>
      <tags>
        <tag>DNS</tag>
        <tag>resolv.conf</tag>
      </tags>
  </entry>
  <entry>
    <title>在RHEL系统中快速抓取火焰图</title>
    <url>/2023/10/18/rhel-perf-flamegraphs/</url>
    <content><![CDATA[<p>在之前的好几篇Blog里，都使用了火焰图来对业务进行性能优化，之前为了抓取火焰图，需要用到好几个工具进行组合，流程还是比较麻烦的。随着RHEL的版本更新，Redhat提供了一个更简单快速的方法实现了一键抓取火焰图的功能。</p>
<span id="more"></span>
<p>这个功能在<code>RHEL 8.2</code>及以上版本可以使用，当然RHEL对应的衍生版比如<code>OracleLinux</code>、<code>AlmaLinux</code>、<code>RockyLinux</code>等也是可以直接使用的。</p>
<p>首先需要安装<code>perf</code>和<code>js-d3-flame-graph</code>这两个软件包：</p>
<pre class="line-numbers language-none"><code class="language-none"># yum install js-d3-flame-graph perf -y<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>然后就可以通过<code>perf script flamegraph -a -F 99 sleep 60</code>命令抓取整个系统的火焰图了，其中<code>-a</code>参数表示需要记录整个系统的性能数据，<code>-F</code>参数指定每秒的收集频率，<code>sleep 60</code>表示收集60S的数据。</p>
<p>60秒后，命令自动退出并会在当前目录生成一个<code>flamegraph.html</code>文件，用任意浏览器打开这个文件，即可看到火焰图。</p>
<p>当然，如果要收集某个进程的火焰图，可以使用<code>perf script flamegraph -a -F 99 -p PID1,PID2 sleep 60</code>命令。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>火焰图</tag>
        <tag>perf</tag>
      </tags>
  </entry>
  <entry>
    <title>使用rpmbuild打包时不对文件进行strip操作</title>
    <url>/2017/11/20/rpmbuild-not-strip/</url>
    <content><![CDATA[<p>默认情况下，在使用rpmbuild打包时，会对安装的所有文件进行strip操作，去除文件的一些调试信息，并将这些调试信息放到debuginfo包中，但在很多时候，我们并不需要rpmbuild帮我们执行strip，也不需要生成debuginfo包，所以我们可以修改一下spec文件，关闭这些选项。</p>
<p>针对文件的strip操作是在<code>__os_install_post</code>这个宏中定义的，我们可以运行一下<code>rpmbuild --showrc</code>看一下原始的<code>__os_install_post</code>做了哪些操作：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">..</span>.
-14: __os_install_post
    /usr/lib/rpm/redhat/brp-compress
    %<span class="token punctuation">&#123;</span><span class="token operator">!</span>?__debug_package:/usr/lib/rpm/redhat/brp-strip %<span class="token punctuation">&#123;</span>__strip<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>
    /usr/lib/rpm/redhat/brp-strip-static-archive %<span class="token punctuation">&#123;</span>__strip<span class="token punctuation">&#125;</span>
    /usr/lib/rpm/redhat/brp-strip-comment-note %<span class="token punctuation">&#123;</span>__strip<span class="token punctuation">&#125;</span> %<span class="token punctuation">&#123;</span>__objdump<span class="token punctuation">&#125;</span>
    /usr/lib/rpm/brp-python-bytecompile
    /usr/lib/rpm/redhat/brp-python-hardlink
    %<span class="token punctuation">&#123;</span><span class="token operator">!</span>?__jar_repack:/usr/lib/rpm/redhat/brp-java-repack-jars<span class="token punctuation">&#125;</span>
<span class="token punctuation">..</span>.
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看到在打包时会对文件进行一系列操作，比如压缩，strip，编译Python脚本等，所以，我们只需要在spec文件中，加上<code>%define __os_install_post %&#123;nil&#125;</code>，将<code>__os_install_post</code>设置为空，这样在打包的时候，就不会执行上面的这些操作了，也就不会对文件进行strip操作了。同样的，如果不需要生成debuginfo包，只需要再加上<code>%define debug_package  %&#123;nil&#125;</code>就可以了。</p>
]]></content>
      <categories>
        <category>效率配置</category>
      </categories>
      <tags>
        <tag>rpmbuild</tag>
        <tag>strip</tag>
      </tags>
  </entry>
  <entry>
    <title>也许是最简单的新浪云 Channel服务教程</title>
    <url>/2016/08/17/sae-channel/</url>
    <content><![CDATA[<p>为什么说也许是最简单的Channel服务教程呢？因为真的很简单啊，总共只有两个文件，一共只有不到30行代码，但是已经完整的实现了HelloWorld了，除了把代码全写在一行里，不然恐怕这已经是最短的例子了～ <span id="more"></span></p>
<p>首先，当然得启用Channel服务（当然这是废话）：</p>
<p><img src="/images/channel_open.png" alt="启动Channel服务"> </p>
<p>初始化成功后，就可以正常使用了，这时候在代码中新建一个 <code>hello.php</code> 文件，内容如下：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
  <span class="token variable">$channel</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SaeChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token variable">$comment_url</span> <span class="token operator">=</span> <span class="token variable">$channel</span><span class="token operator">-></span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"hello"</span><span class="token punctuation">,</span> <span class="token number">36000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//新建一个叫hello的Channel</span>
<span class="token delimiter important">?></span></span>
<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">doctype</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge,chrome=1<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>utf-8<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>hello channel<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>http://channel.sinaapp.com/api.js<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>	<span class="token comment">&lt;!-- 引入Channel的JS库文件 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://lib.appchizi.com/js/jquery/1.8/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
        <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">var</span> $channel_url <span class="token operator">=</span> <span class="token string">'<span class="token php language-php"><span class="token delimiter important">&lt;?=</span><span class="token variable">$comment_url</span><span class="token delimiter important">?></span></span>'</span><span class="token punctuation">;</span>
            $channel <span class="token operator">=</span> sae<span class="token punctuation">.</span><span class="token function">Channel</span><span class="token punctuation">(</span>$channel_url<span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment">//打开Channel</span>
            $channel<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">message</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token function">alert</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//将收到的message弹出来</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>恩，数一下，整个文件只有23行…如果只算PHP的话，好像只有5行，当然HTML和JS也是Channel服务不可分割的一部分。</p>
<p>然后再新建一个 <code>send.php</code> 文件，用于发送消息，内容如下：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token variable">$channel</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SaeChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token variable">$channel</span><span class="token operator">-></span><span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"hello"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"hello channel!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//向hello这个Channel发送消息</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>有点过分了，只有3行…</p>
<p>好了，已经完成了。就差测试了，也很简单。首先访问用浏览器访问 <code>hello.php</code>，会发现是空白页。。是的，因为我们什么都没写。<br>然后呢，在新建一个页面访问一下 <code>send.php</code>，然后，原来 <code>hello.php</code> 页面就会弹出一个消息了。大概长下面这样，至少Chrome上长这样：</p>
<p><img src="/images/channel_alert.png" alt="alert-message"></p>
<p>好了，都说完了，有点太简单了，因为确实就这么简单。</p>
]]></content>
      <categories>
        <category>日常折腾</category>
      </categories>
      <tags>
        <tag>SinaCloud</tag>
        <tag>Channel</tag>
        <tag>HelloWorld</tag>
      </tags>
  </entry>
  <entry>
    <title>使用SAE提供的VPN隧道连接SAE服务</title>
    <url>/2016/05/29/sae-vpn/</url>
    <content><![CDATA[<p>SAE内部的一些服务，比如MySQL，包括独享型和共享型，默认是无法在外网访问的，这给本地调试带来了一些麻烦，但是，有了VPN隧道服务之后，可以利用VPN隧道服务连接到SAE的内网环境，这时候，就可以在本地计算机直接连接这些服务了。 <span id="more"></span></p>
<p>以在Windows下使用Navicat连接独享数据库为例：</p>
<p>首先，进入到VPN隧道服务页面，点击 <code>启动VPN隧道</code> 按钮，初始化VPN隧道服务：</p>
<p><img src="/images/vpn_open.png" alt="启动VPN服务"></p>
<p>初始化成功后，可以看到下载配置文件的链接，点击后，将配置文件下载到本地备用。</p>
<p><img src="/images/vpn_download.png" alt="下载配置文件"></p>
<p>然后就可以根据操作系统选择对应的OpenVPN客户端，下载并安装客户端了，可以使用页面里提供的版本，也可以去<a href="https://openvpn.net/index.php/open-source/downloads.html">OpenVPN官方</a>下载。</p>
<p>下载并安装之后，之前的配置文件就有用了。找到配置的目录，默认的应该是在 <code>C:\Program Files\OpenVPN\config</code>，将配置文件改名为 <code>client.ovpn</code> 并放到该目录下，后缀名很重要，必须要修改，因为默认的Windows版本的OpenVPN只支持 <code>.ovpn</code> 这个后缀名，如图：</p>
<p><img src="/images/vpn_config.png" alt="配置文件"></p>
<p>这时候再打开VPN，可以看到右下角的状态栏里多了一个小图标，是一个灰色的带锁的电脑，右击它，就会出现 <code>Connect</code> 选项，点击进行连接。</p>
<p><img src="/images/vpn_connect.png" alt="状态栏"></p>
<p>点击之后，会弹出认证窗口，这时候需要输入应用的Accesskey和Secretkey作为用户名和密码，这个可以在VPN隧道的服务页看到。</p>
<p><img src="/images/vpn_password.png" alt="认证"></p>
<p>连接成功后，那个灰色的电脑就变成了绿色，代表已经连接成功了。这时候就可以打开Navicat连接独享数据库了。连接的地址就填写独享数据库主库的域名，还有对应的端口，用户名和密码。<br>Navicat连接成功后，就可以看到独享数据库中的数据库和对应的表和数据了，这里是一个wordpress所需要的数据库：</p>
<p><img src="/images/vpn_success.png" alt="Navicat"></p>
<p>大功告成！还是挺简单的，只需要连接一下VPN，就可以访问内网的资源了，除了可以访问独享数据库，共享数据库也是可以访问的，新出的Redis服务也可以通过VPN进行访问。还是相当方便的。</p>
]]></content>
      <categories>
        <category>日常折腾</category>
      </categories>
      <tags>
        <tag>SAE</tag>
        <tag>VPN</tag>
        <tag>独享型数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>服务器网络启动方式探索Part1：Legacy启动篇</title>
    <url>/2021/11/28/server-net-boot-part-1-legacy/</url>
    <content><![CDATA[<p>最近花了很多时间、调研了服务器的网络启动方案，目的呢是想设计并实现一个更加统一和标准化的装机系统尽最大努力把物理机、裸金属、虚拟机、以及基于裸金属的虚拟机的操作系统镜像和装机方案融合起来，同时能适应现代的硬件。<br>本来以为是一件很轻松的事情，毕竟基于PXE的方案已经运行很多年了，似乎简单的修改一些问题、老方案上打打补丁就能很好的实现。但现实又被疯狂打脸，因为面对多个OEM厂商提供的服务器、每家厂商不同的BMC管理系统、每家厂商不同的接口格式和功能。在没有统一服务器供应商或者基于ODM方案之前，似乎那个“完美”的方案并不很容易实现。</p>
<p>不过呢，这些问题也都不重要，关键是在整个调研的过程中，也是补足了很多似懂非懂、一知半解的技术细节，也算是一个非常大的提升了，其实短期的妥协方案，也不影响最终的实现效果。所以准备写写这段时间学习到的知识，也算是补足了之前网络上找不到技术细节的坑吧，本篇算是第一部分吧，从最简单的开始，说说当前Legacy Boot相关的网络启动方案。</p>
<span id="more"></span>

<h2 id="UEFI-Legacy-Boot-PXE"><a href="#UEFI-Legacy-Boot-PXE" class="headerlink" title="UEFI Legacy Boot + PXE"></a>UEFI Legacy Boot + PXE</h2><p>虽然现在所有的服务器厂商都将<code>BIOS</code>的实现换成了<code>UEFI</code>，但为了兼容性考虑，所有的厂商依然提供老的<code>BIOS</code>形式的基于<code>MBR</code>的<code>Legacy</code>引导方式，在这个模式下，通过PXE可以实现最基础的功能。</p>
<p>在Legacy模式下，简单来说，PXE是通过网卡内置的一个小固件（PXE Client）实现的。大致的流程可以总结成这样：在系统启动的时候，会启动网卡里的<code>PXE Client</code>，固件启动后、会发起DHCP请求、当DHCP服务器收到<code>PXE Client</code>的DHCP请求后，会通过预定义的字段返回给客户端IP地址信息、TFTP地址信息、以及需要加载的<code>bootloader</code>的名字。<code>PXE Client</code>收到这些信息后，首先会配置IP地址，此时网络就可以通信了，再根据TFTP的地址和名字信息获取到<code>bootloader</code>并执行，剩下的，就由<code>bootloader</code>去拉起内核和OS。</p>
<p>接下来我们尝试搭建一个<code>PXE Server</code>试试：</p>
<p>首先<code>PXE Server</code>依赖两个组件：DHCP Server和TFTP，先配置DHCP Server：</p>
<p>这里使用<code>isc-dhcp-server</code>，附上配置文件：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">option domain-name-servers <span class="token number">10.1</span>.1.1<span class="token punctuation">;</span>
option routers <span class="token number">10.1</span>.1.1<span class="token punctuation">;</span>
default-lease-time <span class="token number">14400</span><span class="token punctuation">;</span>
ddns-update-style none<span class="token punctuation">;</span>
subnet <span class="token number">10.1</span>.1.0 netmask <span class="token number">255.255</span>.255.0 <span class="token punctuation">&#123;</span>
    range dynamic-bootp <span class="token number">10.1</span>.1.100 <span class="token number">10.1</span>.1.120<span class="token punctuation">;</span>
    default-lease-time <span class="token number">14400</span><span class="token punctuation">;</span>
    max-lease-time <span class="token number">172800</span><span class="token punctuation">;</span>
    next-server <span class="token number">10.1</span>.1.10<span class="token punctuation">;</span>   <span class="token comment">#关键配置！用于指明tftp server的地址</span>
    filename <span class="token string">"pxelinux.0"</span><span class="token punctuation">;</span>   <span class="token comment">#关键配置！用于指明bootloader的名字</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>其他部分的配置并不重要，针对PXE启动来说，最重要的配置只有<code>next-server</code>和<code>filename</code>，<code>next-server</code>指明了tftp server服务器的地址，<code>filename</code>指明了<code>bootloader</code>的名字，有了这俩信息，<code>PXE Client</code>就可以去tftp上去获取bootloader并加载了。</p>
<p>接下来，配置tftp。tftp其实不需要配置，安装并启动就行了。主要是需要准备好启动所需要的bootloader和内核、initrd等文件。在配置文件里的<code>pxelinux.0</code>是从哪来的呢？为了简单、一般来说PXE里不使用grub作为<code>bootloader</code>、使用最多的还是<code>PXELINUX</code>，他是<code>syslinux</code>的一部分，所以很简单，只需要安装<code>syslinux</code>就行了，在我的CentOS系统里，这个文件在<code>/usr/share/syslinux/pxelinux.0</code>。直接拷贝到tftp root目录下就行。需要注意的是，在<code>syslinux</code> 5.0以上的版本，还需要把<code>ldlinux.c32</code>这个文件同步拷贝到tftp root下。</p>
<p>有了<code>bootloader</code>、还需要<code>bootloader</code>配置文件，针对<code>pxelinux</code>而言，默认会根据以下的顺序加载配置文件：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/pxelinux.cfg/b8945908-d6a6-41a9-611d-74a6ab80b83d
/pxelinux.cfg/01-88-99-aa-bb-cc-dd
/pxelinux.cfg/C0A8025B
/pxelinux.cfg/C0A8025
/pxelinux.cfg/C0A802
/pxelinux.cfg/C0A80
/pxelinux.cfg/C0A8
/pxelinux.cfg/C0A
/pxelinux.cfg/C0
/pxelinux.cfg/C
/pxelinux.cfg/default<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>其中根目录指的是和<code>pxelinux.0</code>相同的目录，具体每个文件所代表的含义，可以参考<a href="https://wiki.syslinux.org/wiki/index.php?title=PXELINUX">PXELINUX的文档</a>这么做的目的呢，是为了方便同一个PXE Server为多个机器服务，每个机器可以通过单独的配置文件进行配置，而不用为每台客户端配置一个PXE Server了。实际上、有一个广泛使用的装机系统<code>cobbler</code>、也是基于这个特性，来解决不同机器的不同装机配置问题的。</p>
<p>在我们只有一台机器的情况下，默认写一个<code>pxelinux.cfg/default</code>文件就行了：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">DEFAULT test-pxe-boot
LABEL test-pxe-boot
  MENU LABEL ^Test Boot
  KERNEL vmlinuz
  APPEND <span class="token assign-left variable">initrd</span><span class="token operator">=</span>initrd.img<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>配置文件很简单，指明KERNEL和initrd的位置就行，默认情况下这些文件依然会从tftp里去取。至于<code>vmlinuz</code>和<code>initrd.img</code>这两个文件的获取，这里就不多说了，最简单的办法，就是从发行版的iso安装镜像里去找就可以了。</p>
<p>到目前为止，一个最简单的PXE Server就搭建完成了。已经可以测试是否能拉起一个RamOS了。当然，我们用的<code>PXELINUX</code>还有很多高级的用法，比如基于http去加载kernel和initrd，从而绕开tftp协议进行加速，或者通过dhcpd下发一些配置等等，这里就不多说了，可以继续参考<a href="https://wiki.syslinux.org/wiki/index.php?title=PXELINUX">PXELINUX的文档</a>。</p>
<h2 id="UEFI-Legacy-Boot-iPXE"><a href="#UEFI-Legacy-Boot-iPXE" class="headerlink" title="UEFI Legacy Boot + iPXE"></a>UEFI Legacy Boot + iPXE</h2><p>基于PXE的启动已经很成熟了，但是对于PXE的一个重要依赖，tftp来说，大家还是会觉得他太慢了，毕竟tftp还是比较适用于小文件的传输，在实际的应用中，如果你的initrd.img比较大的话，那么需要花的时间就比较可观了，根据我自己的测试，大概传输200M左右的数据至少也需要60s，即使你用的是25GbE的网卡，依然是这个速度。那么，有没有支持更多协议的方法呢？</p>
<p>答案自然是有的，那就是iPXE，相比于比较原始的PXE来说，iPXE极大的增强了功能，根据<a href="https://ipxe.org/">官网</a>的描述，相比PXE来说，主要有以下的提升：</p>
<blockquote><ul>
<li>boot from a web server via HTTP</li>
<li>boot from an iSCSI SAN</li>
<li>boot from a Fibre Channel SAN via FCoE</li>
<li>boot from an AoE SAN</li>
<li>boot from a wireless network</li>
<li>boot from a wide-area network</li>
<li>boot from an Infiniband network</li>
<li>control the boot process with a script</li>
</ul>
</blockquote>

<p>可以看到，功能和可编程性提升了很多，尤其重要的，一个是可以支持HTTP协议了，另外还有脚本执行能力，易用性大幅度的提升了。</p>
<p>而对于iPXE，主要有两种使用方式，一种方式，就是把iPXE直接烧进网卡的ROM里，替换掉网卡老的PXE ROM，这样就直接启动到iPXE环境了，另外一种，就是使用链式加载的模式，iPXE支持通过PXE环境、ISO、UEFI、以及其他引导器运行，也就是说，可以先通过PXE启动到iPXE环境，再对iPXE环境进行配置，从而实现系统启动。</p>
<p>这里主要还是会以链式加载的方式进行试验，相比直接刷ROM的方式，兼容性和可操作性都比较好。</p>
<p>那首先第一步还是要实现PXE的配置，只是这次的bootloader要从<code>PXELINUX</code>换成了<code>iPXE</code>，对于DHCP Server来说，配置不会变化太大：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">option domain-name-servers <span class="token number">10.1</span>.1.1<span class="token punctuation">;</span>
option routers <span class="token number">10.1</span>.1.1<span class="token punctuation">;</span>
default-lease-time <span class="token number">14400</span><span class="token punctuation">;</span>
ddns-update-style none<span class="token punctuation">;</span>
subnet <span class="token number">10.1</span>.1.0 netmask <span class="token number">255.255</span>.255.0 <span class="token punctuation">&#123;</span>
    range dynamic-bootp <span class="token number">10.1</span>.1.100 <span class="token number">10.1</span>.1.120<span class="token punctuation">;</span>
    default-lease-time <span class="token number">14400</span><span class="token punctuation">;</span>
    max-lease-time <span class="token number">172800</span><span class="token punctuation">;</span>
    next-server <span class="token number">10.1</span>.1.10<span class="token punctuation">;</span>  <span class="token comment">#关键配置！用于指明tftp server的地址</span>
    filename <span class="token string">"ipxe.pxe"</span><span class="token punctuation">;</span>    <span class="token comment">#关键配置！用于指明ipxe的名字</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看到，只要把filename换成ipxe的名字就可以了，而这个<code>ipxe.pxe</code>，可以从<a href="http://boot.ipxe.org/">http://boot.ipxe.org</a>直接下载，顺便说一下，这个网站里还包括了其他环境使用的iPXE，比如UFEI使用的，或者iso、U盘启动使用的启动文件，触类旁通，可以根据需求下载不同的文件。</p>
<p>配置好DHCP Server、下载好文件之后，只要一启动，iPXE就会被拉起。但是问题还没结束，为什么呢，因为iPXE被拉起之后，还是会通过DHCP协议获取IP地址和其他启动的配置，但是思考一下，当iPXE获取DHCP配置的时候，按我们现在的配置，服务器依然会把<code>filename: ipxe.pxe</code>返回给iPXE客户端，然后iPXE拉起iPXE，如此反复，进入了一个死循环。</p>
<p>所以得需要有个办法来打破这个死循环，对于这个问题，官方也给出了对应的<a href="https://ipxe.org/howto/chainloading">方案</a>，一种是将脚本直接嵌入到ipxe文件里，另外一个，就是通过配置DHCP Server实现，由于将脚本嵌入到ipxe文件里需要自己编译，那肯定不是个简单的方案，所以这里还是优先通过配置DHCP Server完成目标。</p>
<p>先想想原理，其实也比较简单，如果DHCP Server能感知到客户端是PXE还是iPXE，如果是PXE，就把”ipxe.pxe”作为文件名传给客户端，如果是iPXE，就把iPXE Script的文件名传给客户端，这样一个简单的if判断，就可以打破这个死循环了，而iPXE确实给我们一个非常明确的区分方式：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">option domain-name-servers <span class="token number">10.1</span>.1.1<span class="token punctuation">;</span>
option routers <span class="token number">10.1</span>.1.1<span class="token punctuation">;</span>
default-lease-time <span class="token number">14400</span><span class="token punctuation">;</span>
ddns-update-style none<span class="token punctuation">;</span>
subnet <span class="token number">10.1</span>.1.0 netmask <span class="token number">255.255</span>.255.0 <span class="token punctuation">&#123;</span>
    range dynamic-bootp <span class="token number">10.1</span>.1.100 <span class="token number">10.1</span>.1.120<span class="token punctuation">;</span>
    default-lease-time <span class="token number">14400</span><span class="token punctuation">;</span>
    max-lease-time <span class="token number">172800</span><span class="token punctuation">;</span>
    next-server <span class="token number">10.1</span>.1.10<span class="token punctuation">;</span>   <span class="token comment">#关键配置！用于指明tftp server的地址</span>
    <span class="token keyword">if</span> exists user-class and option user-class <span class="token operator">=</span> <span class="token string">"iPXE"</span> <span class="token punctuation">&#123;</span> <span class="token comment">#根据user-class字段来判断客户端类型</span>
      filename <span class="token string">"http://10.1.1.10/boot.script"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      filename <span class="token string">"ipxe.pxe"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>对于iPXE来说，在发送DHCP请求的时候，会加上一个user-class Option，值是”iPXE”，根据这个信息，我们就可以区分到底现在是PXE环境还是iPXE环境了。然后就是filename的配置，因为iPXE支持http协议，所以在filename字段，就可以直接填一个URL了，这样就可以把boot.script放到一个HTTP服务器上了。一个最简单的boot.script可以这样写：</p>
<pre class="line-numbers language-none"><code class="language-none">#!ipxe

kernel http:&#x2F;&#x2F;10.1.1.10&#x2F;vmlinuz initrd&#x3D;initrd.img
initrd http:&#x2F;&#x2F;10.1.1.10&#x2F;initrd.img
boot<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>因为支持HTTP协议，内核和initrd.img文件也都可以放在HTTP服务器上了，相比用tftp协议去获取，速度快了10倍不止。同样的，因为支持HTTP协议，对于多台机器同时装机的需求，可以实现的方式就更多了。一个最简单的思路就是使用php或者其他编程语言实现一个页面，在DHCP服务器把返回filename配置成<code>http://10.1.1.10/boot.php</code>，然后程序里根据不同机器的配置，生成不同的<code>ipxe script</code>。iPXE根据不同机器的不同script，来定制化不同的启动逻辑。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>到这里，基于UEFI Legacy Boot的网络启动方式基本就说完了，当初PXE协议的设计者们的思路还是十分清晰的。而每个bootloader对于在PXE环境下多配置文件的支持，也是很早就设计好的，在上面的这些例子里，特别是PXE的例子，除了<code>PXELINUX</code>之外，理论上<code>grub</code>或者其他bootloader，都可以很好的完成类似的任务，比如grub的配置文件加载顺序，也可以找到非常完整的<a href="https://www.gnu.org/software/grub/manual/grub/html_node/Network.html">文档</a>。而对于后来者iPXE，确实功能上增强了不少，可编程性也有了很大的提升，同时自身也可以作为bootloader，相比之下，确实iPXE会是一个非常好的选择。</p>
<p>下一篇我们再说说UFEI模式下的网络启动，尽情期待！</p>
]]></content>
      <categories>
        <category>日常折腾</category>
      </categories>
      <tags>
        <tag>UEFI</tag>
        <tag>Legacy</tag>
        <tag>PXE</tag>
      </tags>
  </entry>
  <entry>
    <title>编写Udev规则文件开机设置网卡SR-IOV</title>
    <url>/2020/08/23/simple-example-for-enabling-sriov-using-udev/</url>
    <content><![CDATA[<p>在虚拟化场景下，<code>SR-IOV</code>（<code>Single Root I/O Virtualization</code>）是一个很常用的功能，通过SR-IOV，一个物理的设备（<code>Physical Function</code>），可以派生出很多虚拟设备（<code>Virtual Function</code>），这些虚拟设备具有简单的PCIe功能。以网卡为例，通过<code>SR-IOV</code>，我们可以将一块网卡，虚拟化成很多块网卡，这些虚拟出来的网卡，有自己独立的PCIe地址，中断，配置空间等，这些虚拟出来的网卡，可以作为单独的PCIe设备被attach到虚拟机中，实现网络功能，当然，场景并不局限于VM。</p>
<p>这里先不关注<code>SR-IOV</code>的应用场景，或者其实现原理，而是关心一个简单的问题：如何设置<code>SR-IOV</code>，并且能稳定的实现开机启动时就设置好呢？</p>
<span id="more"></span>

<p>这里以网卡为例，假设要开启<code>SR-IOV</code>的网卡名字为<code>eth0</code>，文档里会提示你<code>echo 7 &gt; /sys/class/net/eth0/device/sriov_numvfs</code>。在系统启动完成之后，这么做肯定是没有问题。问题是，在系统启动阶段，这么做是不是可以呢？红帽的文档<a href="https://access.redhat.com/documentation/zh-cn/red_hat_enterprise_linux_openstack_platform/7/html/networking_guide/sec-sr-iov">第 8 章 配置 SR-IOV 网络</a>通过<code>rc.local</code>来实现：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># chmod +x /etc/rc.d/rc.local</span>
<span class="token comment"># echo "echo 7 > /sys/class/net/enp4s0f1/device/sriov_numvfs" >> /etc/rc.local</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>但是呢，文档里也提示了：</p>
<blockquote><p>注意<br>因为额外的 systemd，Red Hat Enterprise Linux 将会并行启动服务，而不是依次启动它们。这意味着，rc.local 在引导过程中被执行的位置是不固定的。因此，一些不可预见的情况可能会出现，我们不推荐使用这个方法。</p>
</blockquote>
<p>也就是说，因为<code>systemd</code>的并行特性，可能这么做不一定能获得预期的结果。</p>
<p>同样是这篇文档，还提供了驱动options的方式：</p>
<pre class="line-numbers language-none"><code class="language-none">[root@compute ~]# echo &quot;options igb max_vfs&#x3D;7&quot; &gt;&gt;&#x2F;etc&#x2F;modprobe.d&#x2F;igb.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>然而不巧的是，并不是所有的网卡驱动都支持这个option，在例子里使用的<code>igb</code>驱动，这个驱动对应的主要是Intel的千兆网卡芯片比如<code>I350</code>，而我们使用的是<code>X700</code>系列的网卡，加载的驱动是<code>i40e</code>，这个驱动并没有对应的<code>max_vfs</code>参数，只提供了一个<code>debug</code>参数：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># modinfo i40e</span>
filename:       /lib/modules/3.10.0-957.21.3.el7.x86_64/updates/drivers/net/ethernet/intel/i40e/i40e.ko
version:        <span class="token number">2.8</span>.43
license:        GPL
description:    Intel<span class="token punctuation">(</span>R<span class="token punctuation">)</span> <span class="token number">40</span>-10 Gigabit Ethernet Connection Network Driver
author:         Intel Corporation, <span class="token operator">&lt;</span>e1000-devel@lists.sourceforge.net<span class="token operator">></span>
retpoline:      Y
rhelversion:    <span class="token number">7.6</span>
srcversion:     F8774F317E76D8D6B699043
<span class="token punctuation">..</span>.
depends:        ptp
vermagic:       <span class="token number">3.10</span>.0-957.21.3.el7.x86_64 SMP mod_unload modversions
parm:           debug:Debug level <span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">=</span>none,<span class="token punctuation">..</span>.,16<span class="token operator">=</span>all<span class="token punctuation">)</span> <span class="token punctuation">(</span>int<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>那怎么办呢？经历了一番折腾，算是找到了一个比较稳定的办法，利用Udev，通过编写Udev Rule文件，实现开机自动打开<code>SR-IOV</code>功能，这么做还额外带来另一个好处，还记得之前写的文章<a href="https://www.ichenfu.com/2020/06/08/rename-nic-names/">使用udev重命名网卡</a>么，这里顺便也把网卡名字改成统一的了，既实现了<code>SR-IOV</code>的开机配置，又统一了网卡名字，一举两得！</p>
<p>既然是Udev，那就需要一些匹配规则了，针对网卡来说，最稳定的匹配规则之一，就是网卡的Mac地址，所以，可以确定的是，肯定会根据网卡Mac地址去匹配：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">SUBSYSTEM</span><span class="token operator">==</span><span class="token string">"net"</span>, <span class="token assign-left variable">ACTION</span><span class="token operator">==</span><span class="token string">"add"</span>, <span class="token assign-left variable">DRIVERS</span><span class="token operator">==</span><span class="token string">"?*"</span>, ATTR<span class="token punctuation">&#123;</span>address<span class="token punctuation">&#125;</span><span class="token operator">==</span><span class="token string">"00:11:22:33:44:01"</span>, <span class="token assign-left variable">NAME</span><span class="token operator">=</span><span class="token string">"eth0"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>然后呢，这里仅仅是设置了网卡名字，<code>SR-IOV</code>怎么开呢？我们先进到网卡的目录看一眼：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@compute ~<span class="token punctuation">]</span><span class="token comment"># ls /sys/class/net/eth0/</span>
addr_assign_type  carrier          dev_port  gro_flush_timeout  link_mode     phys_port_id    proto_down  subsystem
address           carrier_changes  dormant   ifalias            mtu           phys_port_name  queues      tx_queue_len
addr_len          device           duplex    ifindex            netdev_group  phys_switch_id  speed       <span class="token builtin class-name">type</span>
broadcast         dev_id           flags     iflink             operstate     power           statistics  uevent<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以这么理解：规则里的<code>ATTR&#123;address&#125;</code>，相当于<code>/sys/class/net/eth0/address</code>文件，那么也就是说ATTR所代表的目录就是<code>/sys/class/net/eth0/</code>，那<code>/sys/class/net/eth0/device/sriov_numvfs</code>这个配置文件不就是<code>ATTR&#123;device/sriov_numvfs&#125;</code>么？是这样么？是的，没错，那在规则文件里，使用<code>=</code>号赋值就行了吧：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">SUBSYSTEM</span><span class="token operator">==</span><span class="token string">"net"</span>, <span class="token assign-left variable">ACTION</span><span class="token operator">==</span><span class="token string">"add"</span>, <span class="token assign-left variable">DRIVERS</span><span class="token operator">==</span><span class="token string">"?*"</span>, ATTR<span class="token punctuation">&#123;</span>address<span class="token punctuation">&#125;</span><span class="token operator">==</span><span class="token string">"00:11:22:33:44:01"</span>, ATTR<span class="token punctuation">&#123;</span>device/sriov_numvfs<span class="token punctuation">&#125;</span><span class="token operator">=</span><span class="token string">"7"</span>, <span class="token assign-left variable">NAME</span><span class="token operator">=</span><span class="token string">"eth0"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>是不是真的可以呢？可以测试一下，把上面的内容保存到<code>/etc/udev/rules.d/70-persistent-net.rules</code>：执行<code>udevadm test /sys/class/net/eth0</code>，从一大堆输出里找到：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@compute ~<span class="token punctuation">]</span><span class="token comment"># udevadm test /sys/class/net/eth0</span>
<span class="token punctuation">..</span>.
ATTR <span class="token string">'/sys/devices/pci0000:17/0000:17:02.0/0000:19:00.1/net/eth0/device/sriov_numvfs'</span> writing <span class="token string">'7'</span> <span class="token number">70</span>-persistent-net.rules:1
NAME <span class="token string">'eth0'</span> /etc/udev/rules.d/70-persistent-net.rules:1
<span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>确实可以！重启试试，依然能工作。问题解决。</p>
<p>当然，这自然不是唯一的办法，目前呢，还能想到的一个办法，就是写个Oneshot的Systemd Service，在network-pre.target这个阶段执行，这样可以比较稳定的确定执行的时间，不至于像<code>rc.local</code>那样不知道什么时候被执行了。</p>
<p>最后感慨一下：Udev真的是个强大的工具！</p>
]]></content>
      <categories>
        <category>效率配置</category>
      </categories>
      <tags>
        <tag>udev</tag>
        <tag>SR-IOV</tag>
        <tag>Udev Rules</tag>
      </tags>
  </entry>
  <entry>
    <title>服务器网络启动方式探索Part2：UEFI启动篇</title>
    <url>/2021/12/25/server-net-boot-part-2-uefi/</url>
    <content><![CDATA[<p>上一篇<a href="/2021/11/28/server-net-boot-part-1-legacy/">服务器网络启动方式探索Part1：Legacy启动篇</a>里，总结了一些在Legacy启动模式下的一些网络启动方案，那么这一篇，很自然的就需要介绍一下在纯UEFI模式下的网络启动了。</p>
<p>相比Legacy启动直接读取MBR启动分区的第一个扇区作为引导的逻辑，UEFI启动变得强大了很多，在UEFI模式下，固件直接具有的读取FAT文件系统的能力，并且直接通过运行EFI可执行文件的方式进行引导。<br>因为这个显而易见的变化，导致对应到PXE相关的实现上，也会有相应的区别。不过相比于Legacy启动的那些方案，区别不是那么大，依然是可以做到功能上一一对应的，同样的，我们从最简单的情况开始看起。</p>
<span id="more"></span>
<h2 id="UEFI-Boot-PXE"><a href="#UEFI-Boot-PXE" class="headerlink" title="UEFI Boot + PXE"></a>UEFI Boot + PXE</h2><p>这个方案依然是配置最简单的方案，和Legacy+PXE一样，也是需要ftp server和DHCP，只是DHCP服务器的配置有些不一样：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">option domain-name-servers <span class="token number">10.1</span>.1.1<span class="token punctuation">;</span>
option routers <span class="token number">10.1</span>.1.1<span class="token punctuation">;</span>
default-lease-time <span class="token number">14400</span><span class="token punctuation">;</span>
ddns-update-style none<span class="token punctuation">;</span>
subnet <span class="token number">10.1</span>.1.0 netmask <span class="token number">255.255</span>.255.0 <span class="token punctuation">&#123;</span>
    range dynamic-bootp <span class="token number">10.1</span>.1.100 <span class="token number">10.1</span>.1.120<span class="token punctuation">;</span>
    default-lease-time <span class="token number">14400</span><span class="token punctuation">;</span>
    max-lease-time <span class="token number">172800</span><span class="token punctuation">;</span>
    next-server <span class="token number">10.1</span>.1.10<span class="token punctuation">;</span>   <span class="token comment">#关键配置！用于指明tftp server的地址</span>
    filename <span class="token string">"grubx64.efi"</span><span class="token punctuation">;</span>   <span class="token comment">#关键配置！用于指明bootloader的名字</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以发现其他的都没变化，只是把<code>filename</code>的配置换成了<code>grubx64.efi</code>，这意味着在UEFI启动里，放弃了使用<code>pxelinux</code>，转而使用了<code>grub</code>，当然其实SYSLINX也是有efi的，文件名<code>syslinux.efi</code>，但是因为确实用的比较少，所以在这个环境里就换成了<code>grub</code>作为Bootloader。</p>
<p>接下来是<code>grubx64.efi</code>和配置文件的准备，以rhel举例，如果本身机器就是用的UEFI启动，那直接可以从<code>/boot/efi/EFI/redhat/grubx64.efi</code>拷贝，如果系统本身还是MBR安装，那可以可以参考<a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/installation_guide/chap-installation-server-setup">红帽的文档</a></p>
<p>然后是配置文件，和<code>PXELINUX</code>一样，grub也是支持根据客户端的不同加载不同的配置文件的。具体的可以参考一下grub的文档:<a href="https://www.gnu.org/software/grub/manual/grub/grub.html#Network">8 Booting GRUB from the network</a><br>不过我们也不需要多配置文件了，只需要配置一个<code>grub.cfg</code>就行，把这个配置文件放在和grubx64.efi同目录下：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">set</span> <span class="token assign-left variable">timeout</span><span class="token operator">=</span><span class="token number">5</span>
menuentry <span class="token string">'RHEL'</span> <span class="token punctuation">&#123;</span>
  linuxefi images/vmlinuz
  initrdefi images/initrd.img
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>至此一个最简单的UEFI的PXE启动方式就配置完成了。</p>
<h2 id="UEFI-Boot-iPXE"><a href="#UEFI-Boot-iPXE" class="headerlink" title="UEFI Boot + iPXE"></a>UEFI Boot + iPXE</h2><p>接下来就是iPXE了，相比于PXE来说，iPXE的变化要小的多，因为自带了bootloader，所以只需要把<code>filename</code>换成<code>ipxe.efi</code>就行了:</p>
<pre class="line-numbers language-none"><code class="language-none">option domain-name-servers 10.1.1.1;
option routers 10.1.1.1;
default-lease-time 14400;
ddns-update-style none;
subnet 10.1.1.0 netmask 255.255.255.0 &#123;
    range dynamic-bootp 10.1.1.100 10.1.1.120;
    default-lease-time 14400;
    max-lease-time 172800;
    next-server 10.1.1.10;   #关键配置！用于指明tftp server的地址
    if exists user-class and option user-class &#x3D; &quot;iPXE&quot; &#123; #根据user-class字段来判断客户端类型
      filename &quot;http:&#x2F;&#x2F;10.1.1.10&#x2F;boot.script&quot;;
    &#125; else &#123;
      filename &quot;ipxe.efi&quot;;
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>同样的，<code>ipxe.efi</code>可以从<a href="http://boot.ipxe.org/">http://boot.ipxe.org</a>直接下载。剩下的关于<code>boot.script</code>配置，和上一篇Legacy里的配置是一致的。这里就不用赘述了。</p>
<h2 id="UEFI-HTTP-Boot"><a href="#UEFI-HTTP-Boot" class="headerlink" title="UEFI HTTP Boot"></a>UEFI HTTP Boot</h2><p>对于iPXE来说，支持通过HTTP&#x2F;FTP等等基于TCP传输的协议来获取kernel和initrd文件，速度相比于之前的PXE的tftp要快很多倍，但是如果稍微有那么一点点强迫症的话，依然会觉得整个iPXE方案里始终存在一个不太和谐的点。<br>是的，虽然kernel和initrd等文件可以通过HTTP获取，但是对于iPXE本身，无论是Legacy模式还是UEFI模式下，都依然需要用到tftp，虽然iPXE文件本身很小，只有KB级别，不会影响启动的速度了，但是tftp始终是一个依赖，这对于一个想Keep it Simple、Stupid的启动方式来说，实在是有那么些不舒服，如果能有什么办法（当然，直接把网卡刷成iPXE的方案不算）解决掉tftp的依赖，那显然是极好的。</p>
<p>对于这个问题呢，设计固件的聪明人们自然也想到了，于是就在UEFI 2.5的SPEC里，加上了<code>HTTP Boot</code>的功能，直接让UEFI可以从HTTP URL获取启动文件，并通过这个启动文件启动系统，对于这个方案，目前已知的情况是，Intel提供的UEFI标准实现<a href="https://github.com/tianocore/edk2">edk2</a>是支持的，文档可以参考<a href="https://edk2-docs.gitbook.io/getting-started-with-uefi-https-boot-on-edk-ii/">Getting Started with UEFI HTTPS Boot on EDK II
</a>，除此之外，<a href="https://www.dell.com/support/kbdoc/zh-cn/000138011/http-boot-in-sles-15?lang=en">Dell</a>、<a href="https://lenovopress.com/lp0736-using-http-boot-to-install-an-operating-system">联想</a>、<a href="https://support.hpe.com/hpesc/public/docDisplay?docId=c05088241&docLocale=en_US">HPE</a>等等国际大厂以及<a href="https://www.redhat.com/sysadmin/uefi-http-boot-libvirt">虚拟机</a>也是明确有相关文档支持的，，而对于国内的一些厂商，目前我知道的情况是大部分都支持，不过因为确实国内用的比较少，很多厂商并没有非常仔细的测试。</p>
<p>我找了一台Dell的服务器，目前测试是没问题的，对于HTTP Boot来说，依然是通过DHCP获取启动配置，和iPXE类似，会带上一个特殊的标记，来区分普通PXE和HTTP Boot的区别，在iPXE文档<a href="https://ipxe.org/appnote/uefihttp">UEFI HTTP chainloading</a>里，也明确表示了iPXE支持这种启动方式。下面是个可以参考的DHCP服务器的配置：</p>
<pre class="line-numbers language-none"><code class="language-none">option domain-name-servers 10.1.1.1;
option routers 10.1.1.1;
default-lease-time 14400;
ddns-update-style none;
subnet 10.1.1.0 netmask 255.255.255.0 &#123;
    range dynamic-bootp 10.1.1.100 10.1.1.120;
    default-lease-time 14400;
    max-lease-time 172800;
    next-server 10.1.1.10;
    if exists user-class and option user-class &#x3D; &quot;iPXE&quot; &#123; #根据user-class字段来判断客户端类型
      filename &quot;http:&#x2F;&#x2F;10.1.1.10&#x2F;boot.script&quot;;
    &#125; elsif substring (option vendor-class-identifier, 0, 10) &#x3D; &quot;HTTPClient&quot; &#123; # UEFI HTTP BOOT
      filename &quot;http:&#x2F;&#x2F;10.1.1.10&#x2F;ipxe.efi&quot;;
    &#125; else &#123;
      filename &quot;ipxe.efi&quot;;
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>通过判断<code>vendor-class-identifier</code>字段是否是<code>HTTPClient</code>，来确认是否是UEFI HTTP BOOT，如果是HTTP Boot，那就把iPXE启动文件的URL返回，这样UEFI固件就可以通过HTTP协议获取iPXE启动文件，接下来的过程就和iPXE没有区别了。如此一来，如果UFEI支持HTTP Boot并开启，那么就完全不需要tftp，只需要一个HTTP服务器就可以完成所有的启动过程了。真正意义上去除了对tftp的依赖。<br>当然，如果想基于grub或者其他bootloader启动的话，也是可以的，基本原理也差不多，感兴趣的话，可以试试。</p>
<h2 id="Secure-boot"><a href="#Secure-boot" class="headerlink" title="Secure boot"></a>Secure boot</h2><p>对于UEFI来说，还有一个非常重要的特性：Secure boot（安全启动），开启Secure boot之后，UEFI会利用数字签名来确认EFI驱动程序或者应用程序是否是受信任的，这其中就包括了从网络下载的bootloader，一般来说，大多数常见的OS发行版都会对Secure boot进行支持，具体支持的原理，这里就不作过多的介绍了，具体的可以参考一下红帽的文档：<a href="https://access.redhat.com/articles/5254641">What is UEFI Secure Boot and how it works?</a>。<br>需要说明的事，这篇Blog以及上一篇Blog所讨论的方法，都不涉及Secure boot，或者说这些配置都无法在Secure boot开启的情况下正常工作。但是也需要稍微进行一些修改，就可以顺利的在Secure boot环境下启动。大致的思路就是把bootloader换成一个受信任的shim，具体的实践，还需要大家自己去测试。</p>
<h2 id="真正的总结"><a href="#真正的总结" class="headerlink" title="真正的总结"></a>真正的总结</h2><p>最近确实花了很多时间去研究服务器的网络启动方案，从PXE开始，到HTTP Boot结束，几乎把所有相关的可能性都测试了一遍，想找到一个依赖少、稳定、兼容性好的网络启动方案。然而实际情况是，面对的OEM厂商实在是太多了，每个厂商开发固件时的侧重点也不尽相同，导致在我个人内心中最完美的HTTP Boot方案，几乎没办法真正意义上在线上环境跑通。相对的，反而是最原始功能最少的方案，跨厂商的兼容性最好。</p>
<p>其实一开始的目的不仅于此，如果要深究的话，其实在UEFI这种模式下，甚至有可能去除掉DHCP服务器这个依赖，理论上在UEFI模式下，固件是有自己的一套协议栈的，在PXE之前，是可以手动给网卡配置静态的IP地址，网关，DNS等等网络配置，同样的bootloader的位置也是可以静态指定的，除此之外，还有很多tricky的手段，不过这些方案总归兼容性堪忧，特别是国内的很多服务器厂商，大多对于这些高级功能缺乏测试。感兴趣的同学可以花点时间时间研究研究，还是挺有意思的😄。同样也是希望国内厂商能给力起来，像国际大厂们看齐，不断完善好固件等等各个方面。</p>
]]></content>
      <categories>
        <category>日常折腾</category>
      </categories>
      <tags>
        <tag>UEFI</tag>
        <tag>PXE</tag>
        <tag>HTTP Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>删除Thunderbird默认签名分割符的两条横线</title>
    <url>/2016/10/14/remove-thunderbird-signature-separator/</url>
    <content><![CDATA[<p>默认的Thunderbird设置签名后，会在新建邮件时在前面自动添加两个短横线，类似：</p>
<pre><code>--
xxxxxx
</code></pre>
<p>如果要去掉这两个短横线分割符，需要在 <code>工具-&gt; 选项-&gt; 高级-&gt; 配置编辑</code> 中，将 <code>mail.identity.default.suppress_signature_separator</code> 配置项的值修改为 <code>true</code>。即可去掉分割符。</p>
<p>原文在 <a href="http://kb.mozillazine.org/Signatures_(Thunderbird)">Signatures - Thunderbird</a></p>
<blockquote><p>If you don’t want a “– “ signature separator (the divider between the message body and the signature)<br>use the config editor to change mail.identity.default.suppress_signature_separator from false to true.<br>This requires Thunderbird 5.0 or later. If you are using Windows go to Tools → Options → Advanced → General<br>and press the Config Editor button. Enter suppress_signature_separator in the Filter: field and press return.<br>Find mail.identity.default.suppress_signature_separator in the results and double click on false in its Value column<br>to toggle it to true, then close the config editor and press the OK button. </p>
</blockquote>
]]></content>
      <tags>
        <tag>thunderbird</tag>
        <tag>签名</tag>
        <tag>分割符</tag>
      </tags>
  </entry>
  <entry>
    <title>也许是一个最简单的poll实现Socket代理</title>
    <url>/2017/07/27/simplest-proxy-use-poll/</url>
    <content><![CDATA[<p>这几天翻了翻项目的代码，看到了一个非常简单的代理程序，使用<code>poll</code>实现，可以在代理过程中输出数据流，基本上算是教科书级别的<code>poll</code>使用例子了，分享一下：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdlib></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iterator></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;errno.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/time.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;arpa/inet.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;poll.h></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PROXY_PORT</span>  <span class="token expression"><span class="token number">8888</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">BIN_TXT</span>     <span class="token expression"><span class="token number">0</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RAW_TXT</span>     <span class="token expression"><span class="token number">1</span></span></span>

<span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>backendHost <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">int</span> backendPort<span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">int</span> oflag <span class="token operator">=</span> RAW_TXT<span class="token punctuation">;</span>

bool <span class="token function">proxy</span><span class="token punctuation">(</span><span class="token keyword">int</span> cfd<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// g++ -o proxy proxy.cpp -I. -Wall</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">==</span> <span class="token number">3</span> <span class="token operator">||</span> argc <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        backendHost <span class="token operator">=</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  
        backendPort <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
        <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span> oflag <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"usage: %s BackendHost BackendPort oflag\n"</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> addr<span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>addr<span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    addr<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span>
    addr<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span>PROXY_PORT<span class="token punctuation">)</span><span class="token punctuation">;</span>
    addr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr <span class="token operator">=</span> <span class="token function">htonl</span><span class="token punctuation">(</span>INADDR_ANY<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> flags <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token function">setsockopt</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> SOL_SOCKET<span class="token punctuation">,</span> SO_REUSEADDR<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>flags<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>flags<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">bind</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>addr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"[error] bind error, %s\n"</span><span class="token punctuation">,</span> <span class="token function">strerror</span><span class="token punctuation">(</span>errno<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> EXIT_FAILURE<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">listen</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> cfd<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>cfd <span class="token operator">=</span> <span class="token function">accept</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">USE_FORK</span></span>
        <span class="token class-name">pid_t</span> pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
            <span class="token function">proxy</span><span class="token punctuation">(</span>cfd<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">close</span><span class="token punctuation">(</span>cfd<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">USE_FORK</span></span>
            <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"[error] fork error, %s\n"</span><span class="token punctuation">,</span> <span class="token function">strerror</span><span class="token punctuation">(</span>errno<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            <span class="token function">close</span><span class="token punctuation">(</span>cfd<span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token punctuation">&#125;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">connectBackend</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> sfd <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>sfd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"socket error, %s\n"</span><span class="token punctuation">,</span> <span class="token function">strerror</span><span class="token punctuation">(</span>errno<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> addr<span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>addr<span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    addr<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span>
    addr<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span>backendPort<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">inet_pton</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> backendHost<span class="token punctuation">,</span> <span class="token operator">&amp;</span>addr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">connect</span><span class="token punctuation">(</span>sfd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>addr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"connect backed error, %s\n"</span><span class="token punctuation">,</span> <span class="token function">strerror</span><span class="token punctuation">(</span>errno<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">close</span><span class="token punctuation">(</span>sfd<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token string">"[debug %d] connect backend ok\n"</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> sfd<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">txtPrint</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>buffer<span class="token punctuation">,</span> <span class="token class-name">size_t</span> size<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">/* stderr unbuffered */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>oflag <span class="token operator">==</span> BIN_TXT<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">size_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"%02x"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token punctuation">)</span> buffer<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">size_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isprint</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token punctuation">)</span> buffer<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"%c"</span><span class="token punctuation">,</span> buffer<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   
            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"%%%02x"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token punctuation">)</span> buffer<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

bool <span class="token function">proxy</span><span class="token punctuation">(</span><span class="token keyword">int</span> cfd<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> <span class="token class-name">size_t</span> len <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> buf<span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token class-name">ssize_t</span> n<span class="token punctuation">;</span>

    <span class="token function">fcntl</span><span class="token punctuation">(</span>cfd<span class="token punctuation">,</span> F_SETFL<span class="token punctuation">,</span> <span class="token function">fcntl</span><span class="token punctuation">(</span>cfd<span class="token punctuation">,</span> F_GETFL<span class="token punctuation">)</span> <span class="token operator">|</span> O_NONBLOCK<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> sfd <span class="token operator">=</span> <span class="token function">connectBackend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>sfd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span>

    <span class="token function">fcntl</span><span class="token punctuation">(</span>sfd<span class="token punctuation">,</span> F_SETFL<span class="token punctuation">,</span> <span class="token function">fcntl</span><span class="token punctuation">(</span>sfd<span class="token punctuation">,</span> F_GETFL<span class="token punctuation">)</span> <span class="token operator">|</span> O_NONBLOCK<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">struct</span> <span class="token class-name">pollfd</span> pfd<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
        <span class="token punctuation">&#123;</span>cfd<span class="token punctuation">,</span> POLLIN<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>   
        <span class="token punctuation">&#123;</span>sfd<span class="token punctuation">,</span> POLLIN<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> nfds <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>

    bool stop <span class="token operator">=</span> false<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stop<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> nready <span class="token operator">=</span> <span class="token function">poll</span><span class="token punctuation">(</span>pfd<span class="token punctuation">,</span> nfds<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>nready <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"[error] poll, %s\n"</span><span class="token punctuation">,</span> <span class="token function">strerror</span><span class="token punctuation">(</span>errno<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
            <span class="token function">close</span><span class="token punctuation">(</span>sfd<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> false<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nfds<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>pfd<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>revents <span class="token operator">&amp;</span> POLLIN<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">=</span> <span class="token function">recv</span><span class="token punctuation">(</span>pfd<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>fd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> len<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token punctuation">(</span>pfd<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>fd <span class="token operator">==</span> cfd<span class="token punctuation">)</span> <span class="token operator">?</span> sfd <span class="token operator">:</span> cfd<span class="token punctuation">;</span>
                    <span class="token class-name">ssize_t</span> nn<span class="token punctuation">;</span>
                    <span class="token class-name">size_t</span> offset <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>nn <span class="token operator">=</span> <span class="token function">send</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> buf <span class="token operator">+</span> offset<span class="token punctuation">,</span> n <span class="token operator">-</span> offset<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                        offset <span class="token operator">+=</span> nn<span class="token punctuation">;</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>offset <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token class-name">size_t</span><span class="token punctuation">)</span> n<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
                    <span class="token punctuation">&#125;</span>
                    <span class="token keyword">struct</span> <span class="token class-name">timeval</span> tv<span class="token punctuation">;</span>
                    <span class="token function">gettimeofday</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tv<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>pfd<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>fd <span class="token operator">==</span> cfd<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token string">"[debug] %lu:%lu client read\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> tv<span class="token punctuation">.</span>tv_sec<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> tv<span class="token punctuation">.</span>tv_usec<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token string">"[debug] %lu:%lu server read\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> tv<span class="token punctuation">.</span>tv_sec<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> tv<span class="token punctuation">.</span>tv_usec<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">&#125;</span>
                    <span class="token function">txtPrint</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>pfd<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>fd <span class="token operator">==</span> cfd<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token string">"[debug] client closed\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token string">"[debug] server closed\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">&#125;</span>
                    stop <span class="token operator">=</span> true<span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> errno <span class="token operator">!=</span> EAGAIN<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"[error] read %s error, %s\n"</span><span class="token punctuation">,</span> pfd<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>fd <span class="token operator">==</span> cfd <span class="token operator">?</span> <span class="token string">"client"</span> <span class="token operator">:</span> <span class="token string">"backend"</span><span class="token punctuation">,</span>
                                                                 <span class="token function">strerror</span><span class="token punctuation">(</span>errno<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
                    <span class="token function">close</span><span class="token punctuation">(</span>sfd<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">return</span> false<span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token string">"[debug %d] disconnect\n"</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">close</span><span class="token punctuation">(</span>sfd<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> true<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>使用<code>g++ -o proxy proxy.cpp -I. -Wall</code> 命令编译，运行时直接指定需要代理的后端IP和Port即可，也支持<code>fork</code>以支持多条链接。</p>
]]></content>
      <categories>
        <category>网络编程</category>
      </categories>
      <tags>
        <tag>Socket</tag>
        <tag>poll</tag>
      </tags>
  </entry>
  <entry>
    <title>新浪云换7指南</title>
    <url>/2016/09/27/sinacloud-php7-migrate/</url>
    <content><![CDATA[<p>新浪云的PHP 7版本运行环境上线了，相对于PHP 5,PHP 7的性能，在官方宣传和实际应用测试中，都有极好的性能表现，大多数的主流应用和框架都有超过1倍的性能提升。</p>
<p>随着新浪云支持PHP 7运行环境，将应用切换到PHP 7版本运行无疑是更好的选择，但是，由于PHP 7的修改十分巨大，因此，有极少部分的代码是不兼容的，需要针对性的进行修改，想比较巨大的性能提升，这些小的修改就变得微不足道了～ <span id="more"></span></p>
<p>目前新浪云的PHP 7极度接近标准PHP 7环境，几乎对原版PHP 7没有任何修改，因此，能在原版PHP 7环境中运行的程序，一定可以在新浪云无缝的运行。</p>
<p>针对PHP 7的修改，官方也提出了<a href="http://php.net/manual/zh/migration70.php">迁移指南</a>，通过迁移指南，可以根据实际情况，满足PHP 7的代码编写要求。其中，最终要的，大概有这几项：</p>
<ol>
<li>mysql系列函数被移除，mysql系列函数(mysql_connect, mysql_query …)，在PHP 5.5.0 起已经被标记为废弃状态，并在PHP 7版本中已经移除，官方更加推荐使用mysqli系列函数，或者PDO进行数据库的相关操作，如果您在代码中使用了mysql系列函数，需要将其修改为mysqli，或者使用PDO，以便能在PHP 7环境运行。</li>
<li><code>$HTTP_RAW_POST_DATA</code> 被移除。同样的，<code>$HTTP_RAW_POST_DATA</code>变量在PHP 5.6.0 中被标记为废弃状态，在PHP 7中已经移除，因此，需要使用 php:&#x2F;&#x2F;input 作为替代。</li>
<li><code>ereg</code>系列函数(ereg, eregi, ereg_replace …)等也同样被移除了，如果有类似的调用，需要替换为<code>preg</code>相关的函数。</li>
<li>针对新浪云的服务，原有的SaeCounter，SaeRank已经不再支持，需要使用Redis服务进行替换。</li>
</ol>
<p>除了上述的一些比较大的修改，还有一些小的变更，可以参考<a href="http://php.net/manual/zh/migration70.php">迁移指南</a>，或者，直接切换到PHP 7版本，根据错误日志，找到不符合规范的地方，直接修改就好啦～</p>
<p>最后，放一个针对PHP 7运行环境的性能测试，结果会让你大吃一惊的！</p>
<p>首先说一下测试环境：<br>在一台机器上，使用ab进行压测，设置连接数为30，测试请求总数为1000，应用为WordPress 4.6.1全新安装版本，换用不同的PHP版本，可以得到下面的结果：<br>PHP 5.3：</p>
<pre><code>Concurrency Level:      30
Time taken for tests:   21.246 seconds
Complete requests:      1000
Failed requests:        0
Write errors:           0
Total transferred:      11064000 bytes
HTML transferred:       10845000 bytes
Requests per second:    47.07 [#/sec] (mean)
Time per request:       637.381 [ms] (mean)
Time per request:       21.246 [ms] (mean, across all concurrent requests)
Transfer rate:          508.55 [Kbytes/sec] received
</code></pre>
<p>PHP 5.6：</p>
<pre><code>Concurrency Level:      30
Time taken for tests:   22.701 seconds
Complete requests:      1000
Failed requests:        0
Write errors:           0
Total transferred:      11064000 bytes
HTML transferred:       10845000 bytes
Requests per second:    44.05 [#/sec] (mean)
Time per request:       681.031 [ms] (mean)
Time per request:       22.701 [ms] (mean, across all concurrent requests)
Transfer rate:          475.96 [Kbytes/sec] received
</code></pre>
<p>PHP 7：</p>
<pre><code>Concurrency Level:      30
Time taken for tests:   4.473 seconds
Complete requests:      1000
Failed requests:        0
Write errors:           0
Total transferred:      11064000 bytes
HTML transferred:       10845000 bytes
Requests per second:    223.54 [#/sec] (mean)
Time per request:       134.202 [ms] (mean)
Time per request:       4.473 [ms] (mean, across all concurrent requests)
Transfer rate:          2415.31 [Kbytes/sec] received
</code></pre>
<p>可以看到，性能差距巨大，同样的请求数和并发，生成的内容长度也相同，PHP 7的QPS从PHP 5的44.05&#x2F;sec和47.07&#x2F;sec，暴涨到223.54&#x2F;sec，实现了几乎5倍的增长，每个请求的时间也从650ms左右降低到了只有130ms。有如此提升，还不赶紧试试PHP 7的强大威力！</p>
]]></content>
      <categories>
        <category>日常折腾</category>
      </categories>
      <tags>
        <tag>SinaCloud</tag>
        <tag>PHP 7</tag>
        <tag>Migrate</tag>
        <tag>迁移</tag>
      </tags>
  </entry>
  <entry>
    <title>SPDK的“Reduce”块压缩算法</title>
    <url>/2022/04/05/spdk-reduce-block-compression-algorithm/</url>
    <content><![CDATA[<p>本文是SPDK文档<a href="https://spdk.io/doc/reduce.html">SPDK “Reduce” Block Compression Algorithm</a>的翻译，在读SPDK的文档过程中，刚好看到了SPDK里<code>bdev reduce</code>模块实现背后的算法描述，于是就想着翻译一下，正好也借翻译的同时仔细理解一下背后算法的原理，当然本人的水平有限，如果译文有任何歧义，还请参考原文并以实际原文为准。</p>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>SPDK的“reduce”块压缩方案使用SSD存储压缩后的块数据，同时将元数据存放到持久内存中。此元数据包含用户数据的逻辑块到压缩后的物理块的对应关系。本文档中描述的方案是通用的，不依赖于包括<code>SPDK</code>在内任何特定的块设备框架。该算法会在一个叫做<code>libreduce</code>的库中实现。更高层次的软件可以基于该模块创建和呈现特定的块设备。对于SPDK来说，<code>bdev_reduce</code>模块封装了<code>libreduce</code>库，从而在SPDK中提供一个bdev以实现压缩功能。</p>
<p>本方案仅仅解释压缩后的数据块和用于跟踪这些数据块的元数据的管理。它依赖于高层软件模块来执行压缩操作。对于SPDK，<code>bdev_reduce</code>模块利用<code>DPDK compressdev</code>框架执行压缩和解压缩。</p>
<p>（需要注意的是，在某些情况下，数据块可能是不可压缩的，或者无法压缩到足以实现空间节省的程度。在这些情况下，数据可能不经过压缩，直接存储在磁盘上。“压缩的存储块”包括这些不经压缩的块。）</p>
<span id="more"></span>
<p>一个压缩块存储设备是一个建立在拥有相似大小的后备存储设备之上的一个逻辑实体。其中的后备存储设备必须是精简置备（thin-provisioned）的从而才能真正意义上从后文描述的实现中获得空间节省。同样该算法除了一直使用后备存储设备上可用的编号最低的块之外，对后备存储设备的实现没有直接的了解。这保证了在精简配置的后备存储设备上使用此算法时，在实际需要空间之前不会分配对应空间。</p>
<p>后备存储的大小，必须考虑最坏情况，也就是所有数据都不可压缩的情况。在这种情况下，后备存储的大小和压缩块设备的大小是一致的。另外，本算法基于永远不会原地写这个前台来保证原子性，所以在更新元数据之前，可能还需要额外的一些后备存储空间来作为临时写缓存。</p>
<p>为了最佳性能考虑，所有后备存储设备都将以4KB为最小单位进行分配、读取和写入。这些4KB的单元被称作“后备IO单元”（backing IO units）。他们被一个称作“后备IO单元索引”（backing IO unit indices）的索引列表中以0到N-1编号进行索引。在一开始，这个完整的索引代表了“空闲后备IO单元列表”（free backing IO unit list）。</p>
<p>一个压缩块存储设备基于chunk进行压缩和解压操作，chunk大小至少是两个4K的后备IO单元，每个chunk所需要的后备IO单元数量，也同样表明了chunk的大小，这个数量或者大小需要在压缩块存储设备创建时指定。一个chunk，需要消耗至少1个，至多chunk大小个后备IO单元数量。举个例子，一个16KB的chunk，有可能消耗1，2，3，4个后备IO单元，最终消耗的数量取决于这个chunk的压缩率。磁盘blocks和chunk的对应关系，存储在持久内存中的一个<code>chunk map</code>里。每个<code>chunk map</code>包含了N个64-bit的值，其中N是每个chunk所包含的后备IO单元的数量。每个64-bit值表示一个后备IO单元的索引。一个特殊的值（举个例子，2^64-1）用来表示因为压缩节省而不需要使用实际的后备存储。<code>chunk map</code>的数量，等于压缩块设备的容量除以它的chunk大小，再加上少量用于保证原子写操作额外的一些<code>chunk map</code>。一开始所有的<code>chunk map</code>都表示“空闲chunk map列表”。</p>
<p>最后，压缩块设备的逻辑映射表通过“logical map”进行表示。这里的“logical map”指的是压缩块存储设备对于对于chunk map的偏移的对于关系。logical map里每个条目是一个64-bit的值，表示所关联的chunk map。一个特殊值（UINT64_MAX）表示没有对应关联的chunk map。映射是通过将字节偏移量除以块大小得到一个索引来确定的，该索引用作块映射条目数组的数组索引。 开始时，逻辑映射表中的所有条目都没有关联的块映射。 请注意，虽然对后备存储设备的访问以 4KB 为单位，但逻辑映射表可能允许以4KB或512B为单位进行访问。</p>
<h2 id="一些例子"><a href="#一些例子" class="headerlink" title="一些例子"></a>一些例子</h2><p>为了说明这个算法，我们将使用一个真实的非常小规模的例子。</p>
<p>压缩块设备的大小为64KB，chunk大小为16KB。 这会实现以下几点：</p>
<ul>
<li>“后备存储” 需要是一个80KB大小的精简置备（thin-provisioned）逻辑设备。这包括了64KB的压缩设备原始大小，以及为了在最坏情况下保证写原子性而额外分配的16KB大小。</li>
<li>“空闲后备IO单元列表”（free backing IO unit list）由一个0-19的索引组成，这些索引表示在后备存储里的20个4KB最小IO单元。</li>
<li>一个”chunk map”的大小是32字节， 对应每个chunk需要4个后备存储单元（16KB&#x2F;4KB），以及每个存储单元需要8个字节（64bit）进行表示。</li>
<li>需要从持久内存中分配5个chunk map，共160B的空间。这包含了压缩块设备的4个chunk（64KB &#x2F; 16KB）所对应的4个chunk map以及为了改写已有chunk时需要的额外1个chunk map</li>
<li>“空闲后备IO单元列表”（Free chunk map list） 将由0 - 4（包含4）进行索引。 这些索引表示这5个被分配的chunk map</li>
<li>“逻辑映射表”（logical map）需要在持久内存中分配32B空间，这包含了压缩块设备4个chunk的索引，每个索引需要8B（64bit）。</li>
</ul>
<p>在下面的例子中，”X”符号代表上面所说的那个特殊值特殊值（2^64-1）。</p>
<h3 id="创建初始化（Initial-Creation）"><a href="#创建初始化（Initial-Creation）" class="headerlink" title="创建初始化（Initial Creation）"></a>创建初始化（Initial Creation）</h3><pre class="line-numbers language-text" data-language="text"><code class="language-text">                +--------------------+
Backing Device  |                    |
                +--------------------+

Free Backing IO Unit List  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19

           +------------+------------+------------+------------+------------+
Chunk Maps |            |            |            |            |            |
           +------------+------------+------------+------------+------------+

Free Chunk Map List  0, 1, 2, 3, 4

            +---+---+---+---+
Logical Map | X | X | X | X |
            +---+---+---+---+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="在32KB偏移量处写入16KB（Write-16KB-at-Offset-32KB）"><a href="#在32KB偏移量处写入16KB（Write-16KB-at-Offset-32KB）" class="headerlink" title="在32KB偏移量处写入16KB（Write 16KB at Offset 32KB）"></a>在32KB偏移量处写入16KB（Write 16KB at Offset 32KB）</h3><ul>
<li>找到逻辑映射表（logical map）对应的index。32KB偏移量除以16KB的chunk size，得到index为2。</li>
<li>Logical map里的第2个单元是一个“X”，也就是说当前这16KB还没有被写入过。</li>
<li>在内存中分配16KB的buffer。</li>
<li>将写入的这16KB数据压缩后，存入到刚刚分配的buffer中。</li>
<li>假设数据被压缩到只剩6KB，那么就需要2个4KB的后备IO单元。</li>
<li>从空闲后备IO单元列表中分配2个block（编号0和1）。需要注意的是，永远都从空闲后备IO单元列表中最小的单元还是分配，这样可以保证在thin-provision情况下，不会用到多余的后端存储，从而节省容量。</li>
<li>将压缩后的6KB数据存储到后备存储的第0和第一个单元。</li>
<li>从空闲chunk map列表中分配一个chunk map 0。</li>
<li>将（0，1，X，X）存储到chunk map 0中。这表示只有2个后备IO单元被用来存储这16KB数据。</li>
<li>把chunk map的编号0，写到逻辑映射表（logical map）的第二个单元中。</li>
</ul>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">                +--------------------+
Backing Device  |01                  |
                +--------------------+

Free Backing IO Unit List  2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19

           +------------+------------+------------+------------+------------+
Chunk Maps | 0 1 X X    |            |            |            |            |
           +------------+------------+------------+------------+------------+

Free Chunk Map List  1, 2, 3, 4

            +---+---+---+---+
Logical Map | X | X | 0 | X |
            +---+---+---+---+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="在8KB偏移量处写入4KB（Write-4KB-at-Offset-8KB）"><a href="#在8KB偏移量处写入4KB（Write-4KB-at-Offset-8KB）" class="headerlink" title="在8KB偏移量处写入4KB（Write 4KB at Offset 8KB）"></a>在8KB偏移量处写入4KB（Write 4KB at Offset 8KB）</h3><ul>
<li>在逻辑映射表中找到对应的index。 8KB偏移量，除以16KB的chunk size，得到index为0。</li>
<li>逻辑映射表中的0号条目是“X”，这表示这16KB还没有被写入过数据。</li>
<li>写入请求不是一个完整的16KB chunk大小，所以我们必须要先分配一个16KB的buffer用于暂存源数据。</li>
<li>把需要写入的4KB数据写入到这16KB buffer的8KB偏移处，并把buffer其他的地方填0。</li>
<li>再分配16KB的目标buffer。</li>
<li>把16KB的源数据，压缩后存入到目标buffer中。</li>
<li>假设数据被压缩到3KB，这将需要1个4KB的后备IO单元。</li>
<li>从空闲后备单元列表中分配一个block（编号2）。</li>
<li>把3KB数据写入到编号2的block中。</li>
<li>从空闲chunk map列表中分配一个空闲chunk map(编号1)。</li>
<li>把（2，X，X，X）写入到chunk map中。</li>
<li>将chunk map的索引（编号1）写入到逻辑映射表的第0个条目里。</li>
</ul>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">                +--------------------+
Backing Device  |012                 |
                +--------------------+

Free Backing IO Unit List  3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19

           +------------+------------+------------+------------+------------+
Chunk Maps | 0 1 X X    | 2 X X X    |            |            |            |
           +------------+------------+------------+------------+------------+

Free Chunk Map List  2, 3, 4

            +---+---+---+---+
Logical Map | 1 | X | 0 | X |
            +---+---+---+---+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="在16K偏移量处读取16KB数据（Read-16KB-at-Offset-16KB）"><a href="#在16K偏移量处读取16KB数据（Read-16KB-at-Offset-16KB）" class="headerlink" title="在16K偏移量处读取16KB数据（Read 16KB at Offset 16KB）"></a>在16K偏移量处读取16KB数据（Read 16KB at Offset 16KB）</h3><ul>
<li>16KB偏移量，在逻辑映射表中对应第1个条目。</li>
<li>逻辑映射表第1个条目是“X”，这说明这个16KB空间还没有被写入过任何数据。</li>
<li>由于这16KB的chunk还没有被写入过任何数据，所以直接这个读请求直接返回全0。</li>
</ul>
<h3 id="在4KB偏移量处写入4KB（Write-4KB-at-Offset-4KB）"><a href="#在4KB偏移量处写入4KB（Write-4KB-at-Offset-4KB）" class="headerlink" title="在4KB偏移量处写入4KB（Write 4KB at Offset 4KB）"></a>在4KB偏移量处写入4KB（Write 4KB at Offset 4KB）</h3><ul>
<li>4KB偏移量，在逻辑映射表中对应第0个条目。</li>
<li>逻辑映射表的第0个条目是“1”，由于我们并不是覆盖写整个chunk，所以我们必须要进行一个读-改-写（read-modify-write）操作。</li>
<li>chunk map 1仅仅指定了一个后备IO单元（编号2），分配一个16KB的buffer，并讲编号2的后备IO单元读入到这个buffer，这个buffer后面会被叫做压缩数据buffer。<br>需要注意的是，因为我们一下子分配了16KB的buffer而不是只分配4KB，我们可以继续使用这个buffer作为后面新压缩数据的存放地点。</li>
<li>再分配一个16KB的buffer用于存放解压后的数据。解压压缩数据buffer里的数据，并将数据存入刚分配的buffer里。</li>
<li>把需要写入的4KB数据写入到解压数据buffer的4KB偏移处。</li>
<li>把解压数据buffer里的数据压缩，并放到压缩数据buffer中。</li>
<li>假设新的数据压缩后大小5KB，这将需要2个4KB的后备IO单元。</li>
<li>从空闲后备IO单元列表里，分配编号为3和4的两个block。</li>
<li>将这个5KB数据写入到3和4这两个block中。</li>
<li>从空闲chunk map列表中分配编号2的chunk map。</li>
<li>将（3，4，X，X）写入到编号2的chunk map中。需要注意的是，到当前节点，这个chunk map还没有被逻辑映射表引用，如果此时出现了掉电，当前chunk的数据依然是保持完整的。</li>
<li>将chunk map的编号2写入到逻辑映射表中。</li>
<li>释放编号为1的chunk map，并放入到空闲chunk map列表中。</li>
<li>释放编号为2的后备IO单元，并将编号放入到空闲后备IO单元列表中。</li>
</ul>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">                +--------------------+
Backing Device  |01 34               |
                +--------------------+

Free Backing IO Unit List  2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19

           +------------+------------+------------+------------+------------+
Chunk Maps | 0 1 X X    |            | 3 4 X X    |            |            |
           +------------+------------+------------+------------+------------+

Free Chunk Map List  1, 3, 4

            +---+---+---+---+
Logical Map | 2 | X | 0 | X |
            +---+---+---+---+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="跨越多个chunks的请求（Operations-that-span-across-multiple-chunks）"><a href="#跨越多个chunks的请求（Operations-that-span-across-multiple-chunks）" class="headerlink" title="跨越多个chunks的请求（Operations that span across multiple chunks）"></a>跨越多个chunks的请求（Operations that span across multiple chunks）</h3><p>针对跨越多个chunks的请求，逻辑上这个请求会被分割成多个请求，每个请求关联一个chunk。</p>
<p>举例：在4KB偏移处写入20KB数据</p>
<p>在这个场景下，这个写请求会被分割成：一个在4KB偏移处写入12KB数据的请求（只影响逻辑映射表的第0个条目），以及一个在偏移量16KB处写入8KB的请求（只影响逻辑映射表的第1个条目）。<br>每个子请求都独立的基于上述的算法进行处理，直到这两个子请求全部完成时，原始的20KB写入操作才会返回。</p>
<h3 id="Unmap操作（Unmap-Operations）"><a href="#Unmap操作（Unmap-Operations）" class="headerlink" title="Unmap操作（Unmap Operations）"></a>Unmap操作（Unmap Operations）</h3><p>Unmap操作通过从逻辑映射表中删除对应的（如果有）chunk map条目来实现，对应的chunk map会被放回到空闲chunk map列表中，并且任何相关的后备IO单元也会被释放并放回到空闲后备IO单元列表中。</p>
<p>而对于针对chunk的某一部分进行Unmap的操作，相当于对chunk的这一部分写0，如果整个chunk在多次的操作中被整体Unmap掉了，那么未压缩的数据就变成全0了，这样就可以被检测出来，在这种情况下，整个chunk的映射条目也会从逻辑映射表里被移除。</p>
<p>当整个chunk都被Umap掉之后，后续针对该chunk的读操作都会返回全0，这个表现就和上述在16K偏移量处读取16KB数据（Read 16KB at Offset 16KB）的例子一致。</p>
<h3 id="写0操作（Write-Zeroes-Operations）"><a href="#写0操作（Write-Zeroes-Operations）" class="headerlink" title="写0操作（Write Zeroes Operations）"></a>写0操作（Write Zeroes Operations）</h3><p>写0操作的流程和Unmap操作类似，如果一个写0操作覆盖了整个chunk，我们也可以在逻辑映射表中完全移除整个chunk的对应条目，然后后续的读操作也会返回全0。</p>
<h3 id="Restart"><a href="#Restart" class="headerlink" title="Restart"></a>Restart</h3><p>一个使用<code>libreduce</code>模块的应用程序，有可能需要定期退出并重新启动。当应用程序重新启动的时候，会重新加载压缩卷，从而恢复到应用程序退出之前的状态。</p>
<p>当压缩卷被加载的时候，空闲chunk map列表和空闲后备IO单元列表会通过扫描逻辑映射表的形式进行重建。逻辑映射表只会保存有效的chunk map索引，同样的，chunk map只会保存有效后备单元索引。<br>任何没有被引用的chunk map以及后备IO单元，都会被认为是空的，并加入到对应的空闲列表中。</p>
<p>这就保证了如果系统在一个写操作的中间状态下崩溃后（比如在chunk map被更新，但还没写入逻辑映射表的过程中崩溃）重启的过程中，所有未完成的写入操作都会被忽略。</p>
<h3 id="对同一个chunk的并发操作（Overlapping-operations-on-same-chunk）"><a href="#对同一个chunk的并发操作（Overlapping-operations-on-same-chunk）" class="headerlink" title="对同一个chunk的并发操作（Overlapping operations on same chunk）"></a>对同一个chunk的并发操作（Overlapping operations on same chunk）</h3><p>具体实现时，必须要考虑针对同一个chunk并发操作的情况。比如第一个IO需要对chunk A写入某些数据，同时又有第二个IO也需要对chunk A进行写入。在这种情况下，第二个IO必须等第一个IO完成之后才能开始。<br>针对类似情况的进一步优化，超出了本文档的描述范围。</p>
<h3 id="精简置备的后备存储（Thin-provisioned-backing-storage）"><a href="#精简置备的后备存储（Thin-provisioned-backing-storage）" class="headerlink" title="精简置备的后备存储（Thin provisioned backing storage）"></a>精简置备的后备存储（Thin provisioned backing storage）</h3><p>后备存储设备必须是精简置备的，从而才能在压缩场景下实现空间节约。本文的算法永远都会使用（重用）后备存储上最靠近偏移量0的后备IO单元。<br>这确保了即使后备存储的空间和压缩块设备的大小接近，但是直到确实需要后备IO单元的时候，才会真正从后备存储设备上分配存储空间。</p>
]]></content>
      <categories>
        <category>SPDK</category>
      </categories>
      <tags>
        <tag>SPDK</tag>
        <tag>Reduce</tag>
        <tag>bdev reduce</tag>
      </tags>
  </entry>
  <entry>
    <title>speedtest.net命令行版本</title>
    <url>/2017/06/29/speedtest-cli/</url>
    <content><![CDATA[<p>找到一个命令行版本的<code>speedtest.net</code>，可以在没有浏览器的情况下进行网络测速，具体的地址在[sivel&#x2F;speedtest-cli][1]<br>[1]: <a href="https://github.com/sivel/speedtest-cli">https://github.com/sivel/speedtest-cli</a></p>
<p>单文件，只依赖Python，可以直接下载：</p>
<pre class="line-numbers language-none"><code class="language-none">curl -Lo speedtest-cli https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;sivel&#x2F;speedtest-cli&#x2F;master&#x2F;speedtest.py
chmod +x speedtest-cli<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>下载后直接运行即可：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@test ~<span class="token punctuation">]</span><span class="token comment"># ./speedtest-cli</span>
Retrieving speedtest.net configuration<span class="token punctuation">..</span>.
Testing from XXX Networks <span class="token punctuation">(</span>x.x.x.x<span class="token punctuation">)</span><span class="token punctuation">..</span>.
Retrieving speedtest.net server list<span class="token punctuation">..</span>.
Selecting best server based on ping<span class="token punctuation">..</span>.
Hosted by Atlantic Metro <span class="token punctuation">(</span>Los Angeles, CA<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token number">1.30</span> km<span class="token punctuation">]</span>: <span class="token number">1.565</span> ms
Testing download speed<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>
Download: <span class="token number">631.41</span> Mbit/s
Testing upload speed<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>
Upload: <span class="token number">48.73</span> Mbit/s
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>日常折腾</category>
      </categories>
      <tags>
        <tag>speedtest.net</tag>
        <tag>cli</tag>
      </tags>
  </entry>
  <entry>
    <title>dmesg中持续打印的诡异日志追踪记</title>
    <url>/2021/06/14/systemd-privatenetwork-cause-annoying-logs/</url>
    <content><![CDATA[<p>在我们内部的一个系统是跑在K8S之上的，而这批机器上的<code>dmesg</code>日志里，老是会不停的刷下面的这个日志：</p>
<pre class="line-numbers language-none"><code class="language-none">03:52:42 localhost kernel: nf_conntrack: falling back to vmalloc.
03:52:42 localhost kernel: IPVS: Creating netns size&#x3D;2048 id&#x3D;97719
03:54:37 localhost kernel: nf_conntrack: falling back to vmalloc.
03:54:37 localhost kernel: nf_conntrack: falling back to vmalloc.
03:54:37 localhost kernel: IPVS: Creating netns size&#x3D;2048 id&#x3D;97720
03:56:48 localhost kernel: nf_conntrack: falling back to vmalloc.
03:56:48 localhost kernel: nf_conntrack: falling back to vmalloc.
03:56:48 localhost kernel: IPVS: Creating netns size&#x3D;2048 id&#x3D;97721
03:58:20 localhost kernel: IPVS: Creating netns size&#x3D;2048 id&#x3D;97722<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>本来这些日志刷就刷了，也没什么大问题，但是呢，时间一长，因为logrotate机制，会把之前产生的日志给顶掉，导致有些时候想看之前的<code>dmesg</code>日志看不了了，这就比较难受了，终于，在当鸵鸟很长时间之后，想想还是找找原因，把这个问题解决一下。</p>
<span id="more"></span>

<p>如果直接用Google搜索<code>IPVS: Creating netns size=XXX id=XXX</code>或者<code>nf_conntrack: falling back to vmalloc</code>这些关键词，得到的解决方案不痛不痒，针对nf_conntrack，大部分的答案都是提示<code>vm.min_free_kbytes</code>比较小，需要调大这个参数，或者，<code>net.netfilter.nf_conntrack_*</code>相关的几个参数太大了，需要调小。而IPVS基本都没有什么相关的结果。所以我们还是得自己尝试解决一下。</p>
<p>一开始呢，就觉得大概率是K8S的问题，一方面因为这些日志，只有在跑了K8S的机器上才会出现；另外一方面因为这个<code>nf_conntrack</code>和<code>IPVS</code>和网络强相关，在K8S的Node节点上两个组件之一的<code>kube-proxy</code>，也会定期去同步一些网络配置，那很明显的<code>kube-proxy</code>嫌疑最大。于是我就配置了一下，把<code>kube-proxy</code>的日志等级开到最大，让运行中所有的tracing日志也都打印出来：</p>
<pre class="line-numbers language-none"><code class="language-none">22:10:23 localhost kube-proxy[20761]: I0611 22:10:23.021677   20761 proxier.go:708] Syncing iptables rules
22:10:23 localhost kube-proxy[20761]: I0611 22:10:23.021703   20761 iptables.go:437] running iptables -N [KUBE-EXTERNAL-SERVICES -t filter]
...
22:10:23 localhost kube-proxy[20761]: I0611 22:10:23.038491   20761 iptables.go:397] running iptables-restore [-w --noflush --counters]
22:10:23 localhost kube-proxy[20761]: I0611 22:10:23.040739   20761 proxier.go:687] syncProxyRules took 19.090909ms
22:10:23 localhost kube-proxy[20761]: I0611 22:10:23.040756   20761 bounded_frequency_runner.go:221] sync-runner: ran, next possible in 0s, periodic in 30s
22:10:23 localhost kube-proxy[20761]: I0611 22:10:23.109303   20761 config.go:167] Calling handler.OnEndpointsUpdate
22:10:23 localhost kube-proxy[20761]: I0611 22:10:23.842263   20761 config.go:167] Calling handler.OnEndpointsUpdate
22:10:25 localhost kube-proxy[20761]: I0611 22:10:25.120048   20761 config.go:167] Calling handler.OnEndpointsUpdate
...
22:10:51 localhost kube-proxy[20761]: I0611 22:10:51.268046   20761 config.go:167] Calling handler.OnEndpointsUpdate
22:10:52 localhost kube-proxy[20761]: I0611 22:10:52.018512   20761 config.go:167] Calling handler.OnEndpointsUpdate
22:10:53 localhost kube-proxy[20761]: I0611 22:10:53.040907   20761 proxier.go:708] Syncing iptables rules
22:10:53 localhost kube-proxy[20761]: I0611 22:10:53.040933   20761 iptables.go:437] running iptables -N [KUBE-EXTERNAL-SERVICES -t filter]
...
22:10:53 localhost kube-proxy[20761]: I0611 22:10:53.056819   20761 iptables.go:397] running iptables-restore [-w --noflush --counters]
22:10:53 localhost kube-proxy[20761]: I0611 22:10:53.058812   20761 proxier.go:687] syncProxyRules took 17.935822ms
22:10:53 localhost kube-proxy[20761]: I0611 22:10:53.058827   20761 bounded_frequency_runner.go:221] sync-runner: ran, next possible in 0s, periodic in 30s
22:10:53 localhost kube-proxy[20761]: I0611 22:10:53.278609   20761 config.go:167] Calling handler.OnEndpointsUpdate
22:10:54 localhost kube-proxy[20761]: I0611 22:10:54.026900   20761 config.go:167] Calling handler.OnEndpointsUpdate
22:10:55 localhost kube-proxy[20761]: I0611 22:10:55.287980   20761 config.go:167] Calling handler.OnEndpointsUpdate<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>从日志可以看到，确实<code>kube-proxy</code>会定时同步<code>iptables</code>的规则，但是周期不一样，<code>dmesg</code>里日志的周期大概两分钟一次，而这里每30s就会同步一次了，而且同步的时间和日志也对应不上，那其实基本就可以排除是<code>kube-proxy</code>导致的了。不过除此之外，日志里发现了比较反常的<code>Calling handler.OnEndpointsUpdate</code>的输出，频率还挺高，这个和之前的预想不太相符，这里暂时忽略了，等着下篇继续分析原因吧。</p>
<p>既然直接原因不是<code>kube-proxy</code>，那就得继续看看是为啥了。</p>
<p>于是就又仔细分析了一下<code>journalctl</code>的输出，因为掺杂了各种K8S组件的凌乱输出，日志非常乱，不过功夫不负有心人，最终还是发现了和<code>dmesg</code>输出时间高度对应的日志：</p>
<pre class="line-numbers language-none"><code class="language-none">03:52:42 localhost dbus[11450]: [system] Activating via systemd: service name&#x3D;&#39;org.freedesktop.hostname1&#39; unit&#x3D;&#39;dbus-org.freedesktop.hostname1.service&#39;
03:52:42 localhost dbus[11450]: [system] Successfully activated service &#39;org.freedesktop.hostname1&#39;
03:54:37 localhost dbus[11450]: [system] Activating via systemd: service name&#x3D;&#39;org.freedesktop.hostname1&#39; unit&#x3D;&#39;dbus-org.freedesktop.hostname1.service&#39;
03:54:37 localhost dbus[11450]: [system] Successfully activated service &#39;org.freedesktop.hostname1&#39;
03:56:48 localhost dbus[11450]: [system] Activating via systemd: service name&#x3D;&#39;org.freedesktop.hostname1&#39; unit&#x3D;&#39;dbus-org.freedesktop.hostname1.service&#39;
03:56:48 localhost dbus[11450]: [system] Successfully activated service &#39;org.freedesktop.hostname1&#39;
03:58:20 localhost dbus[11450]: [system] Activating via systemd: service name&#x3D;&#39;org.freedesktop.hostname1&#39; unit&#x3D;&#39;dbus-org.freedesktop.hostname1.service&#39;
03:58:20 localhost dbus[11450]: [system] Successfully activated service &#39;org.freedesktop.hostname1&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>似乎是<code>systemd-hostnamed</code>？再通过<code>journalctl -u systemd-hostnamed.service</code>看看<code>hostnamed</code>的日志：</p>
<pre class="line-numbers language-none"><code class="language-none">03:52:42 localhost systemd[1]: Starting Hostname Service...
03:52:42 localhost systemd[1]: Started Hostname Service.
03:54:37 localhost systemd[1]: Starting Hostname Service...
03:54:37 localhost systemd[1]: Started Hostname Service.
03:56:48 localhost systemd[1]: Starting Hostname Service...
03:56:48 localhost systemd[1]: Started Hostname Service.
03:58:20 localhost systemd[1]: Starting Hostname Service...
03:58:20 localhost systemd[1]: Started Hostname Service.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>还真是，那么问题来了：为什么<code>hostnamed</code>启动会刷两条<code>dmesg</code>日志？以及为什么<code>hostnamed</code>会这样定时启动？</p>
<p>先说明第二个问题吧，因为这个是已知的，我们系统的配置，都是用<code>puppet</code>这个自动化运维工具下发的，然后下发之后呢，为了防止人为的原因配置被修改了，所以又加了个Cron，定时2分钟+一小段随机时间执行，确保任何时候我们机器上的配置都是和我们预期是一样的。</p>
<p>而这些配置里，就包含了机器的主机名。具体的定义类似这样：</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">exec <span class="token punctuation">&#123;</span> <span class="token string-literal"><span class="token string">'set hostname'</span></span><span class="token operator">:</span>
    command <span class="token operator">=></span> <span class="token string-literal"><span class="token string">"hostnamectl set-hostname $&#123;local_hostname&#125;"</span></span><span class="token punctuation">,</span>
    <span class="token keyword">unless</span>  <span class="token operator">=></span> <span class="token string-literal"><span class="token string">"test `hostnamectl --static` == '$&#123;local_hostname&#125;'"</span></span><span class="token punctuation">,</span>
    path    <span class="token operator">=></span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">'/usr/bin'</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">'/bin'</span></span><span class="token punctuation">]</span>
  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>简单解释下，就是每次都会执行<code>hostnamectl --static</code>命令，获得当前hostname，如果和预期不一致，就调用<code>hostnamectl set-hostname $&#123;local_hostname&#125;</code>命令把本地的hostname修改成我们期望的。</p>
<p>然后再来看看第一个问题，为什么<code>hostnamed</code>启动的时候会输出日志？看了下服务的service配置文件，一下就明白了：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@<span class="token punctuation">]</span><span class="token comment"># cat /usr/lib/systemd/system/systemd-hostnamed.service</span>
<span class="token comment">#  This file is part of systemd.</span>
<span class="token comment">#</span>
<span class="token comment">#  systemd is free software; you can redistribute it and/or modify it</span>
<span class="token comment">#  under the terms of the GNU Lesser General Public License as published by</span>
<span class="token comment">#  the Free Software Foundation; either version 2.1 of the License, or</span>
<span class="token comment">#  (at your option) any later version.</span>

<span class="token punctuation">[</span>Unit<span class="token punctuation">]</span>
<span class="token assign-left variable">Description</span><span class="token operator">=</span>Hostname Service
<span class="token assign-left variable">Documentation</span><span class="token operator">=</span>man:systemd-hostnamed.service<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> man:hostname<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> man:machine-info<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
<span class="token assign-left variable">Documentation</span><span class="token operator">=</span>http://www.freedesktop.org/wiki/Software/systemd/hostnamed

<span class="token punctuation">[</span>Service<span class="token punctuation">]</span>
<span class="token assign-left variable">ExecStart</span><span class="token operator">=</span>/usr/lib/systemd/systemd-hostnamed
<span class="token assign-left variable">BusName</span><span class="token operator">=</span>org.freedesktop.hostname1
<span class="token assign-left variable">CapabilityBoundingSet</span><span class="token operator">=</span>CAP_SYS_ADMIN
<span class="token assign-left variable">WatchdogSec</span><span class="token operator">=</span>3min
<span class="token assign-left variable">PrivateTmp</span><span class="token operator">=</span>yes
<span class="token assign-left variable">PrivateDevices</span><span class="token operator">=</span>yes
<span class="token assign-left variable">PrivateNetwork</span><span class="token operator">=</span>yes
<span class="token assign-left variable">ProtectSystem</span><span class="token operator">=</span>yes
<span class="token assign-left variable">ProtectHome</span><span class="token operator">=</span>yes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>可以看到在Service的配置里添加了<code>PrivateNetwork=yes</code>选项，那这个选项是什么作用呢？在<code>man systemd.exec</code>里找到了对应的说明：</p>
<blockquote><p>PrivateNetwork&#x3D;<br>           Takes a boolean argument. If true, sets up a new network namespace for the executed processes and configures only the loopback network device “lo” inside it. No other network devices will be available to the executed process. This is<br>           useful to securely turn off network access by the executed process. Defaults to false. It is possible to run two or more units within the same private network namespace by using the JoinsNamespaceOf&#x3D; directive, see systemd.unit(5) for<br>           details. Note that this option will disconnect all socket families from the host, this includes AF_NETLINK and AF_UNIX. The latter has the effect that AF_UNIX sockets in the abstract socket namespace will become unavailable to the<br>           processes (however, those located in the file system will continue to be accessible).</p>
</blockquote>

<p>也就是说，如果打开<code>PrivateNetwork</code>，那么systemd在启动这个服务时会创建一个新的<code>network namespace</code>，来隔离这个进程和主机的network，而刚好我们的<code>hostnamed</code>不需要访问网络，所以默认情况下就加上了这个限制。这个也就能解释为啥<code>LVS模块</code>的日志提示是<code>Creating netns</code>了，因为真的是在创建一个新的ns。同理<code>nf_conntrack模块</code>的输出也是因为新ns需要一些初始化操作。</p>
<p>另外呢，<code>hostnamed</code>这个服务也比较特殊，因为获取或者设置hostname不是一个很常见的操作，而且因为有dbus可以在需要的时候触发启动，所以这个进程运行一段时间后没有新的请求会自动退出，具体可以看下它的<a href="https://github.com/systemd/systemd/blob/v219/src/hostname/hostnamed.c">代码</a>:</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        Context context <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        r <span class="token operator">=</span> <span class="token function">bus_event_loop_with_idle</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> bus<span class="token punctuation">,</span> <span class="token string">"org.freedesktop.hostname1"</span><span class="token punctuation">,</span> DEFAULT_EXIT_USEC<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token function">log_error_errno</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> <span class="token string">"Failed to run event loop: %m"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">goto</span> finish<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

finish<span class="token operator">:</span>
        <span class="token function">context_free</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> r <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> EXIT_FAILURE <span class="token operator">:</span> EXIT_SUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这个<code>DEFAULT_EXIT_USEC</code>定义在其他文件中，原型是<code>#define DEFAULT_EXIT_USEC (30*USEC_PER_SEC)</code>，也就是30s。</p>
<p>到这里呢，问题算是理清楚了：</p>
<pre><code>1. 自动化运维脚本会定时check hostname，这会导致hostnamed被拉起来
2. 因为hostnamed service描述里有PrivateNetwork=yes，所以systemd会创建network namespace
3. 因为主机上加载了conntrack和ipvs相关模块（这个是kube-proxy需要的），模块会在netns里初始化，又因为一些参数的原因，会打印相关的日志
4. hostnamed 30s后自定退出，导致下次执行会重新创建新的network namespace，如此反复
</code></pre>
<p>那最终的解决方案也比较明白了，根据上面的情况：</p>
<pre><code>1. 调整自动化运维脚本，不使用hostnamectl命令获取当前主机名
2. 合理调整conntrack相关参数，尽可能避免内核内存被耗尽的情况
3. 因为我们的业务比较特殊，不需要kube-proxy，所以决定把kube-proxy服务停了，同时就不会依赖ipvs模块，顺便把ipvs模块也移除
</code></pre>
<p>其实被这个PrivateXXXX选项坑了不止一次了，之前还发生过<code>PrivateTmp=yes</code>导致服务启动卡住的情况，唉一言难尽啊。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>nf_conntrack</tag>
        <tag>netns</tag>
        <tag>systemd-hostnamed</tag>
        <tag>PrivateNetwork</tag>
      </tags>
  </entry>
  <entry>
    <title>TCP神奇的40ms延迟</title>
    <url>/2017/09/13/tcp-40ms-delay/</url>
    <content><![CDATA[<p>这个问题是很久之前解决的，现在想起来，还是把之前的问题解决过程总结一下。<br>问题的起因是内部的一个Socket代理，用户对独享数据库的所有请求都需要经过这个Socket代理，某天一个用户反馈，切换到独享数据库之后，页面响应变得异常的慢，大概从1s左右直接到了60s左右，明显是有问题的，首先让用户开了xhprof看了一下，发现用户一个页面牵涉到了超过1000次SQL查询，这1000多次查询占据了绝大部分的时间，因为仅仅切换了数据库，所以问题的原因肯定还是数据库相关。<br>这个场景还是稍微有点特殊，一个页面里有超过1000次SQL查询的设计也不算合理，所以，我们就编写了测试用例，在PHP中，查询数据库1000次，测试直接连接数据库，和通过Socket代理连接数据库的情况：最后发现直连的速度非常快，但是过代理则慢的不可接受了，很明显是代理的问题。<br>于是我们尝试在代理机器上抓包分析一下：</p>
<p><img src="/images/socket_proxy_tcpdump.png" alt="tcpdump"></p>
<p>其中<code>10.67.15.102</code>是我们Web运行环境的机器IP，<code>10.67.15.212</code>是Socket代理所在的机器<code>10.13.144.139</code>是数据库所在的机器，从id为22953的数据包开始，到22957，是一个SQL查询从Web运行环境到数据库的整个过程：</p>
<pre><code>id为22953：运行环境102发送select语句到Socket代理212。数据包长度为296byte 时间：23.877515
id为22954：Socket代理212发送了一部分select语句128byte到数据库139。       时间：23.877611
id为22955：Socket代理212回运行环境103的ack。                             时间：23.917294
id为22956：数据库139回Socket代理212的ack。                               时间：23.918398
id为22957：Socket代理212发送剩余部分select语句168byte到数据库139。       时间：23.918415
</code></pre>
<span id="more"></span>
<p>这其中有个很奇怪的现象，就是运行环境发送给代理的一条完整的SQL语句，在代理收到并发给数据库的过程中，是分了22954和22957两个数据包发送的，而且，这两次发送之间间隔了<code>23.918415-23.877611=0.0408040s</code>，为什么一个数据包要分两次发送，而且还要间隔差不多40ms呢？首先想到的是不是代码有问题，于是我们在代理机器上strace了一下，看下程序运行的具体状态：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">18</span>:42:52.119359 epoll_wait<span class="token punctuation">(</span><span class="token number">7</span>, <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>EPOLLIN, <span class="token punctuation">&#123;</span>u32<span class="token operator">=</span><span class="token number">38391536</span>, <span class="token assign-left variable">u64</span><span class="token operator">=</span><span class="token number">38391536</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>, <span class="token number">1024</span>, <span class="token number">500</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;</span><span class="token number">0.00017</span><span class="token operator"><span class="token file-descriptor important">5</span>></span>
<span class="token number">18</span>:42:52.119672 recvfrom<span class="token punctuation">(</span><span class="token number">8</span>, <span class="token string">"<span class="token entity" title="\240">\240</span><span class="token entity" title="\0">\0</span><span class="token entity" title="\0">\0</span><span class="token entity" title="\0">\0</span><span class="token entity" title="\3">\3</span>SELECT cat_id, cat_name, parent_id, is_show FROM <span class="token variable"><span class="token variable">`</span>jiewang300<span class="token variable">`</span></span>.<span class="token variable"><span class="token variable">`</span>jw_category<span class="token variable">`</span></span>WHERE parent_id = '1401' AND is_show = 1 ORDER B"</span>, <span class="token number">128</span>, <span class="token number">0</span>, NULL, NULL<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">128</span> <span class="token operator">&lt;</span><span class="token number">0.00001</span><span class="token operator"><span class="token file-descriptor important">4</span>></span>
<span class="token number">18</span>:42:52.119758 recvfrom<span class="token punctuation">(</span><span class="token number">8</span>, <span class="token string">"Y sort_order ASC, cat_id ASC limit 8"</span>, <span class="token number">128</span>, <span class="token number">0</span>, NULL, NULL<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">36</span> <span class="token operator">&lt;</span><span class="token number">0.00001</span><span class="token operator"><span class="token file-descriptor important">6</span>></span>
<span class="token number">18</span>:42:52.119823 recvfrom<span class="token punctuation">(</span><span class="token number">8</span>, 0x24a4494, <span class="token number">92</span>, <span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token parameter variable">-1</span> EAGAIN <span class="token punctuation">(</span>Resource temporarily unavailable<span class="token punctuation">)</span> <span class="token operator">&lt;</span><span class="token number">0.00001</span><span class="token operator"><span class="token file-descriptor important">3</span>></span>
<span class="token number">18</span>:42:52.119929 epoll_wait<span class="token punctuation">(</span><span class="token number">7</span>, <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>EPOLLOUT, <span class="token punctuation">&#123;</span>u32<span class="token operator">=</span><span class="token number">38394672</span>, <span class="token assign-left variable">u64</span><span class="token operator">=</span><span class="token number">38394672</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>, <span class="token number">1024</span>, <span class="token number">500</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;</span><span class="token number">0.00002</span><span class="token operator"><span class="token file-descriptor important">2</span>></span>
<span class="token number">18</span>:42:52.120074 sendto<span class="token punctuation">(</span><span class="token number">9</span>, <span class="token string">"<span class="token entity" title="\240">\240</span><span class="token entity" title="\0">\0</span><span class="token entity" title="\0">\0</span><span class="token entity" title="\0">\0</span><span class="token entity" title="\3">\3</span>SELECT cat_id, cat_name, parent_id, is_show FROM <span class="token variable"><span class="token variable">`</span>jiewang300<span class="token variable">`</span></span>.<span class="token variable"><span class="token variable">`</span>jw_category<span class="token variable">`</span></span>WHERE parent_id = '1401' AND is_show = 1 ORDER B"</span>, <span class="token number">128</span>, <span class="token number">0</span>, NULL, <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">128</span> <span class="token operator">&lt;</span><span class="token number">0.00005</span><span class="token operator"><span class="token file-descriptor important">2</span>></span>
<span class="token number">18</span>:42:52.120238 sendto<span class="token punctuation">(</span><span class="token number">9</span>, <span class="token string">"Y sort_order ASC, cat_id ASC limit 8"</span>, <span class="token number">36</span>, <span class="token number">0</span>, NULL, <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">36</span> <span class="token operator">&lt;</span><span class="token number">0.00002</span><span class="token operator"><span class="token file-descriptor important">2</span>></span>
<span class="token number">18</span>:42:52.120406 epoll_wait<span class="token punctuation">(</span><span class="token number">7</span>, <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>EPOLLIN, <span class="token punctuation">&#123;</span>u32<span class="token operator">=</span><span class="token number">38394672</span>, <span class="token assign-left variable">u64</span><span class="token operator">=</span><span class="token number">38394672</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>, <span class="token number">1024</span>, <span class="token number">500</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;</span><span class="token number">0.04108</span><span class="token operator"><span class="token file-descriptor important">2</span>></span>
<span class="token number">18</span>:42:52.161624 recvfrom<span class="token punctuation">(</span><span class="token number">9</span>, <span class="token string">"<span class="token entity" title="\1">\1</span><span class="token entity" title="\0">\0</span><span class="token entity" title="\0">\0</span><span class="token entity" title="\1">\1</span><span class="token entity" title="\4">\4</span>B<span class="token entity" title="\0">\0</span><span class="token entity" title="\0">\0</span><span class="token entity" title="\2">\2</span><span class="token entity" title="\3">\3</span>def<span class="token entity" title="\n">\n</span>jiewang300<span class="token entity" title="\v">\v</span>jw_category<span class="token entity" title="\v">\v</span>jw_category<span class="token entity" title="\6">\6</span>cat_id<span class="token entity" title="\6">\6</span>cat_id<span class="token entity" title="\f">\f</span>?<span class="token entity" title="\0">\0</span><span class="token entity" title="\5">\5</span><span class="token entity" title="\0">\0</span><span class="token entity" title="\0">\0</span><span class="token entity" title="\0">\0</span><span class="token entity" title="\2">\2</span>#B<span class="token entity" title="\0">\0</span><span class="token entity" title="\0">\0</span><span class="token entity" title="\0">\0</span>F<span class="token entity" title="\0">\0</span><span class="token entity" title="\0">\0</span><span class="token entity" title="\3">\3</span><span class="token entity" title="\3">\3</span>def<span class="token entity" title="\n">\n</span>jiewang300<span class="token entity" title="\v">\v</span>jw_category<span class="token entity" title="\v">\v</span>jw_category<span class="token entity" title="\10">\10</span>cat_name<span class="token entity" title="\10">\10</span>"</span>, <span class="token number">128</span>, <span class="token number">0</span>, NULL, NU
<span class="token number">18</span>:42:52.161736 recvfrom<span class="token punctuation">(</span><span class="token number">9</span>, <span class="token string">"cat_name<span class="token entity" title="\f">\f</span>!<span class="token entity" title="\0">\0</span><span class="token entity" title="\16">\16</span><span class="token entity" title="\1">\1</span><span class="token entity" title="\0">\0</span><span class="token entity" title="\0">\0</span><span class="token entity" title="\375">\375</span><span class="token entity" title="\1">\1</span><span class="token entity" title="\0">\0</span><span class="token entity" title="\0">\0</span><span class="token entity" title="\0">\0</span><span class="token entity" title="\0">\0</span>H<span class="token entity" title="\0">\0</span><span class="token entity" title="\0">\0</span><span class="token entity" title="\4">\4</span><span class="token entity" title="\3">\3</span>def<span class="token entity" title="\n">\n</span>jiewang300<span class="token entity" title="\v">\v</span>jw_category<span class="token entity" title="\v">\v</span>jw_category<span class="token entity" title="\t">\t</span>parent_id<span class="token entity" title="\t">\t</span>parent_id<span class="token entity" title="\f">\f</span>?<span class="token entity" title="\0">\0</span><span class="token entity" title="\5">\5</span><span class="token entity" title="\0">\0</span><span class="token entity" title="\0">\0</span><span class="token entity" title="\0">\0</span><span class="token entity" title="\2">\2</span>)@<span class="token entity" title="\0">\0</span><span class="token entity" title="\0">\0</span><span class="token entity" title="\0">\0</span>D<span class="token entity" title="\0">\0</span><span class="token entity" title="\0">\0</span><span class="token entity" title="\5">\5</span><span class="token entity" title="\3">\3</span>def<span class="token entity" title="\n">\n</span>jiewang300<span class="token entity" title="\v">\v</span>jw_category"</span>, <span class="token number">128</span>, <span class="token number">0</span>, NUL<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>其中fd 8是和Web运行环境的连接fd，fd 9是和数据库连接的fd，可以看到，程序接收和发送的buffer大小都是128字节，同时，根据第一列的时间可以看到，程序接收完所有数据，就立马通过<code>sendto</code>将数据发送出去了，所以这个40ms的数据包发送延迟应该不是代理程序的问题（不过针对这种场景，可能128字节buffer有点太小了，这也是可以优化的一个点）</p>
<p>不是程序的问题，那肯定就是内核或者其他什么原因导致了这个延迟了，于是搜索了一番，发现确实是内核导致了这个延迟，具体牵扯到两个TCP的机制<code>Nagle&#39;s algorithm</code>和<code>TCP delayed acknowledgment</code>,最主要的原因还是因为这个<code>Nagle&#39;s algorithm</code>。<br><a href="https://en.wikipedia.org/wiki/Nagle's_algorithm">Wiki</a>上的解释如下：</p>
<blockquote><p>Nagle’s algorithm is a means of improving the efficiency of TCP&#x2F;IP networks by reducing the number of packets that need to be sent over the network. It was defined by John Nagle while working for Ford Aerospace. It was published in 1984 as a Request for Comments (RFC) with title Congestion Control in IP&#x2F;TCP Internetworks (see RFC 896).</p>
<p>The RFC describes what he called the “small-packet problem”, where an application repeatedly emits data in small chunks, frequently only 1 byte in size. Since TCP packets have a 40-byte header (20 bytes for TCP, 20 bytes for IPv4), this results in a 41-byte packet for 1 byte of useful information, a huge overhead. This situation often occurs in Telnet sessions, where most keypresses generate a single byte of data that is transmitted immediately. Worse, over slow links, many such packets can be in transit at the same time, potentially leading to congestion collapse.</p>
<p>Nagle’s algorithm works by combining a number of small outgoing messages and sending them all at once. Specifically, as long as there is a sent packet for which the sender has received no acknowledgment, the sender should keep buffering its output until it has a full packet’s worth of output, thus allowing output to be sent all at once.</p>
</blockquote>

<p>大致意思就是Nagle算法会避免发送小的数据包，增加网络利用率，但是这么做会导致更大的延时。<br>这个算法大致的伪代码是这样的：</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">if</span> there is <span class="token keyword">new</span> data to send
    <span class="token keyword">if</span> the window size <span class="token operator">>=</span> <span class="token constant">MSS</span> <span class="token keyword">and</span> available data is <span class="token operator">>=</span> <span class="token constant">MSS</span>
        send complete <span class="token constant">MSS</span> segment now
    <span class="token keyword">else</span>
        <span class="token keyword">if</span> there is unconfirmed data sill <span class="token keyword">in</span> the pipe
            enqueue data <span class="token keyword">in</span> the buffer <span class="token keyword">until</span> an acknowledge is received
        <span class="token keyword">else</span>
            send data immediately
        <span class="token keyword">end</span> <span class="token keyword">if</span>
    <span class="token keyword">end</span> <span class="token keyword">if</span>
<span class="token keyword">end</span> <span class="token keyword">if</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>从伪代码可以看出，在发送队列里有没有确认的数据，并且，新数据包的大小又小于MSS，那么该算法会触发，数据会被缓存，直到待发送的数据总大小大于MSS或者收到了确认的Ack。<br>其实如果正常来看，这个算法没有问题，因为只要对端回复了ack，数据还是可以立即发送的，但是如果对端开启了<code>TCP delayed acknowledgment</code>功能，数据包的ack被延迟发送，那么，这两个功能一起作用，就会导致延迟。</p>
<p>那怎么避免这个情况发生呢，既然是两个机制共同作用导致的，那就任意破坏其中一个就可以了。关闭<code>TCP delayed acknowledgment</code>功能，或者关闭<code>Nagle&#39;s algorithm</code>，很显然，关闭<code>TCP delayed acknowledgment</code>是不明智的，因为多回复的那个ack，实际并没有很大的必要，反而还多增加了延迟。<br>好在TCP提供了关闭<code>Nagle&#39;s algorithm</code>的办法，也就是使用<code>setsockopt</code>设置<code>TCP_NODELAY</code>选项，即可关闭<code>Nagle&#39;s algorithm</code>。</p>
<p>在程序中设置了<code>TCP_NODELAY</code>选项后，问题解决。</p>
<p>参考：</p>
<ol>
<li><a href="http://blog.csdn.net/zhangskd/article/details/7712002">http://blog.csdn.net/zhangskd/article/details/7712002</a></li>
</ol>
]]></content>
      <categories>
        <category>网络编程</category>
      </categories>
      <tags>
        <tag>TCP Nalge</tag>
        <tag>TCP_NODELAY</tag>
      </tags>
  </entry>
  <entry>
    <title>关于URE(Unrecoverable Read Error Rate)的一些知识更新</title>
    <url>/2021/05/23/the-ure-improvements-on-todays-hard-disks/</url>
    <content><![CDATA[<p>在几年前，写的一篇Blog：<a href="https://www.ichenfu.com/2016/12/04/ure/">Unrecoverable Read Error Rate (URE)</a>，主要说起硬盘的一个重要指标：不可恢复读取错误率，在当时的场景下，如果是非企业级硬盘，一般这个指标是在<code>1 bit per 10^14bit</code>这个水平，也就是说每读取<code>10^14bit</code>的数据，其中某个bit有可能就是错误的，这会导致一些问题，比如如果是组建了一个比较大的RAID5阵列，当容量越大时，如果出现硬盘损坏，就会有很大概率无法恢复数据。</p>
<p>当然也不是没有其他办法，比如使用RAID 6，或者购买企业级硬盘，因为企业级硬盘在当时就可以提供<code>1 bit per 10^15bit</code>的指标，这样算下来读取100TB数据都是没什么大问题的。</p>
<p>不过随着近几年硬盘技术的发展，机械硬盘的容量越来越大，很多桌面级硬盘已经超过了10T，很显然，如果URE这个指标继续保持原有的水准，那这个硬盘就不太合格了，那么现在这些大容量硬盘的这个指标做到了多少呢？</p>
<p>于是我就找了找希捷桌面级硬盘的<a href="https://www.seagate.com/www-content/datasheets/pdfs/barracuda-pro-14-tb-DS1901-10-2006CN-zh_CN.pdf">文档</a>：</p>
<p><img src="/images/barracuda-pro.png" alt="barracuda-pro"></p>
<span id="more"></span>
<p>从图里可以看到，在希捷大于10TB的硬盘产品中，在最大不可恢复错误&#x2F;被读数据（位）也就是URE这个指标上，已经向企业级硬盘看齐，达到了<code>1/10E15</code>，另外，考虑到硬盘厂商在标称这些指标时一般会比较保守。那么从单一的指标上看，完全可以组建超过几十TB的磁盘阵列而不用担心数据丢失，不过考虑到恢复时间等等各种因素，个人依然是不建议以RAID方式组建这种超大的磁盘阵列。</p>
<p>当然，虽然桌面级硬盘在某些指标上已经看齐了企业级硬盘，但实际上企业级硬盘在稳定性和数据安全性方面依然会比桌面级好很多，比如一般的桌面硬盘是不会有传输层面的CRC或者ECC功能的，但是企业级硬盘，一般都会有类似的能力。当然除了这些数据安全性相关的指标，平均故障时间等等指标也会比桌面级硬盘高出许多。关于这个话题，又是有非常多的内容了，简单的可以参考一些文档，比如Intel的这篇文档<a href="https://www.intel.com/content/dam/support/us/en/documents/server-products/Enterprise_vs_Desktop_HDDs_2.0.pdf">Enterprise-class versus Desktop-class Hard Drives</a>就在很多方面对比了桌面和企业级硬盘的区别。</p>
<p>从另外一个方面来说，比如需要基于这些机械硬盘开发一个企业级的存储系统，对数据的安全性要求极高，那么就不能100%的相信从磁盘上读取出的数据，在整个环节中，有太多的情况会导致读取出来的数据和当初写入的数据不相符。所以，在业务层，一般也需要考虑引入CRC等数据校验能力，通过读取并校验数据CRC，来保证数据一致性。</p>
<p>BTW，SSD硬盘，因为工作方式的不同，URE这些指标天生的就比机械硬盘好很多。同样以希捷的SSD为例：<br><img src="/images/nytro-ssd.png" alt="barracuda-pro"></p>
<p>URE这个指标是<code>1/10E17</code>，比机械盘好了两个数量级！当然代价是每GB价格也贵了很多。</p>
<p>总的来说，随着硬件的更新，很多曾经因为硬件产生的各种限制也会慢慢被打开。当然因为硬件的更新越来越快和特性和限制越来越多，软件层也需要适应这些变化，从而更好的利用好硬件所提供的能力。</p>
]]></content>
      <categories>
        <category>日常折腾</category>
      </categories>
      <tags>
        <tag>SSD</tag>
        <tag>RAID</tag>
        <tag>URE</tag>
      </tags>
  </entry>
  <entry>
    <title>一个UFO引发的惨案</title>
    <url>/2024/04/01/ufo-feature-caused-network-failure/</url>
    <content><![CDATA[<p>首先需要解释一下标题，原谅我当了一回标题党，此UFO不是<code>Unidentified flying object</code>，而是在网络中的一个Oflload卸载技术<code>UDP fragmentation offload</code>。事情的起因是这样的，我们最近尝试将线上的虚拟机，从基于网卡SR-IOV+直通的方案，切换到基于DPDK+vhost-user的方案，以换取热迁移的效率提升。</p>
<p>从之前的模拟压测和线上灰度效果来看，新的DPDK方案的性能和稳定性都处于很好的水平，在我们的场景下可以很好地满足需求。<br>直到灰度到某个业务的时候，发生了一些问题，导致了虚拟机的网络中断。<span id="more"></span></p>
<p>我们通过热拔插方式进行网络切换，首先，会把当前直通的网卡从虚拟机中热拔出来，然后，再把一个vhost-user网卡热插到虚拟机中，从而实现网卡的切换。在切换过程中，大致会有3-5s左右的网络中断，但根据和业务的沟通，在单线程的操作情况下，这样的中断是没有问题的，不会影响业务。</p>
<p>为了保证业务的稳定，我们在网卡切换后，会持续ping 10s对应的虚拟机，确保网络正常后才会进行下一台的操作。</p>
<p>然后问题就发生了，在某些虚拟机切换网卡之后，大约5分钟内，网络是正常的，但是超过5分钟之后，突然网络就不通了，这个问题也是随机的，而对于网络不通的机器，通过重启DPDK进程的方式，网络又可以恢复几分钟，然后继续不通。这些现象确实在之前的测试中没有遇到过。从日志看，有少量的DPDK进程打印了这两条日志：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">VHOST_DATA: <span class="token punctuation">(</span>/tmp/ens8f0-2.sock<span class="token punctuation">)</span> failed to allocate memory <span class="token keyword">for</span> mbuf.
VHOST_DATA: <span class="token punctuation">(</span>/tmp/ens8f0-2.sock<span class="token punctuation">)</span> failed to copy desc to mbuf.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>从日志看，应该是给DPDK分配的内存不够了，导致DPDK从内存池里分配mbuf时无内存可用，但是DPDK使用的内存，是经过精确计算的呀？看看内存分配数量相关的代码：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DEFAULT_IP_MTU</span>	  <span class="token expression"><span class="token punctuation">(</span><span class="token number">1500</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">L2_OVERHEAD</span>		  <span class="token expression"><span class="token punctuation">(</span><span class="token number">14</span> <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">VF_RX_OFFSET</span>	  <span class="token expression"><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DEFAULT_MBUF_SIZE</span> <span class="token expression"><span class="token punctuation">(</span>DEFAULT_IP_MTU <span class="token operator">+</span> L2_OVERHEAD <span class="token operator">+</span> RTE_PKTMBUF_HEADROOM <span class="token operator">+</span> VF_RX_OFFSET<span class="token punctuation">)</span></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAX_VHOST_QUEUE_PAIRS</span> <span class="token expression"><span class="token number">16</span></span></span>

<span class="token comment">/* rxq/txq descriptors numbers */</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RXQ_TXQ_DESC_1K</span> <span class="token expression"><span class="token number">1024</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RXQ_TXQ_DESC_8K</span> <span class="token expression"><span class="token number">8192</span></span></span>

<span class="token comment">/* relay mempool config */</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DEFAULT_NR_RX_QUEUE</span> <span class="token expression">MAX_VHOST_QUEUE_PAIRS</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DEFAULT_NR_TX_QUEUE</span> <span class="token expression">MAX_VHOST_QUEUE_PAIRS</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DEFAULT_NR_RX_DESC</span>	<span class="token expression">RXQ_TXQ_DESC_8K</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DEFAULT_NR_TX_DESC</span>	<span class="token expression">RXQ_TXQ_DESC_1K</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NUM_PKTMBUF_POOL</span>	<span class="token expression"><span class="token punctuation">(</span>DEFAULT_NR_RX_DESC <span class="token operator">*</span> DEFAULT_NR_RX_QUEUE <span class="token operator">+</span> DEFAULT_NR_TX_DESC <span class="token operator">*</span> DEFAULT_NR_TX_QUEUE <span class="token operator">+</span> <span class="token number">4096</span><span class="token punctuation">)</span></span></span>

<span class="token comment">// ...</span>
mpool <span class="token operator">=</span> <span class="token function">rte_pktmbuf_pool_create</span><span class="token punctuation">(</span>mp_name<span class="token punctuation">,</span> n_mbufs<span class="token punctuation">,</span> RTE_MEMPOOL_CACHE_MAX_SIZE<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> DEFAULT_MBUF_SIZE<span class="token punctuation">,</span> request_socket_id<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>我们给每个VM分配了最多16个队列，MTU为1500，网卡侧同样支持16个发送队列+16个接收队列，其中每个接收队列设置ring buffer大小为8192，发送队列ring buffer大小1024，经过一系列的计算<code>NUM_PKTMBUF_POOL</code>这个值应该在所有场景都能满足需求，那为什么会出现内存不够的情况呢？我们再深入看一下DPDK相关的代码：</p>
<p>首先这个日志，在DPDK中有两个地方会打印，一个是在<code>virtio_dev_tx_split</code>函数中，另一个函数是<code>vhost_dequeue_single_packed</code>，这俩函数的功能是一致的，只是一个是用来处理老的<code>virtio split ring</code>的场景，另一个是处理<code>packed ring</code>的场景，而我们目前用的还是老的<code>split ring</code>，于是着重看下相关的代码：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">__rte_always_inline
<span class="token keyword">static</span> <span class="token class-name">uint16_t</span>
<span class="token function">virtio_dev_tx_split</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">virtio_net</span> <span class="token operator">*</span>dev<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">vhost_virtqueue</span> <span class="token operator">*</span>vq<span class="token punctuation">,</span>
	<span class="token keyword">struct</span> <span class="token class-name">rte_mempool</span> <span class="token operator">*</span>mbuf_pool<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">rte_mbuf</span> <span class="token operator">*</span><span class="token operator">*</span>pkts<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> count<span class="token punctuation">,</span>
	bool legacy_ol_flags<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">// ...省略</span>

    <span class="token comment">// 一次循环，最多取32个数据</span>
	count <span class="token operator">=</span> <span class="token function">RTE_MIN</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span> MAX_PKT_BURST<span class="token punctuation">)</span><span class="token punctuation">;</span>
	count <span class="token operator">=</span> <span class="token function">RTE_MIN</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span> avail_entries<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">VHOST_LOG_DATA</span><span class="token punctuation">(</span>dev<span class="token operator">-></span>ifname<span class="token punctuation">,</span> DEBUG<span class="token punctuation">,</span> <span class="token string">"about to dequeue %u buffers\n"</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">rte_pktmbuf_alloc_bulk</span><span class="token punctuation">(</span>mbuf_pool<span class="token punctuation">,</span> pkts<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// ...省略</span>

        <span class="token comment">// 拷贝Guest中的网络包到pkts(rte_mbuf)中</span>
		err <span class="token operator">=</span> <span class="token function">desc_to_mbuf</span><span class="token punctuation">(</span>dev<span class="token punctuation">,</span> vq<span class="token punctuation">,</span> buf_vec<span class="token punctuation">,</span> nr_vec<span class="token punctuation">,</span> pkts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>
				   mbuf_pool<span class="token punctuation">,</span> legacy_ol_flags<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> false<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">unlikely</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>allocerr_warned<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token comment">// 拷贝失败了，打印了第二条日志，第一条日志在desc_to_mbuf打印了</span>
				<span class="token function">VHOST_LOG_DATA</span><span class="token punctuation">(</span>dev<span class="token operator">-></span>ifname<span class="token punctuation">,</span> ERR<span class="token punctuation">,</span> <span class="token string">"failed to copy desc to mbuf.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				allocerr_warned <span class="token operator">=</span> true<span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span>
			dropped <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
			i<span class="token operator">++</span><span class="token punctuation">;</span>
			<span class="token keyword">break</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>

	<span class="token punctuation">&#125;</span>
    <span class="token comment">// ...省略</span>

	<span class="token keyword">return</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> dropped<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">static</span> __rte_always_inline <span class="token keyword">int</span>
<span class="token function">desc_to_mbuf</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">virtio_net</span> <span class="token operator">*</span>dev<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">vhost_virtqueue</span> <span class="token operator">*</span>vq<span class="token punctuation">,</span>
		  <span class="token keyword">struct</span> <span class="token class-name">buf_vector</span> <span class="token operator">*</span>buf_vec<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> nr_vec<span class="token punctuation">,</span>
		  <span class="token keyword">struct</span> <span class="token class-name">rte_mbuf</span> <span class="token operator">*</span>m<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">rte_mempool</span> <span class="token operator">*</span>mbuf_pool<span class="token punctuation">,</span>
		  bool legacy_ol_flags<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> slot_idx<span class="token punctuation">,</span> bool is_async<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>

    <span class="token comment">// ...省略</span>

	buf_addr <span class="token operator">=</span> buf_vec<span class="token punctuation">[</span>vec_idx<span class="token punctuation">]</span><span class="token punctuation">.</span>buf_addr<span class="token punctuation">;</span>
	buf_iova <span class="token operator">=</span> buf_vec<span class="token punctuation">[</span>vec_idx<span class="token punctuation">]</span><span class="token punctuation">.</span>buf_iova<span class="token punctuation">;</span>
	buf_len <span class="token operator">=</span> buf_vec<span class="token punctuation">[</span>vec_idx<span class="token punctuation">]</span><span class="token punctuation">.</span>buf_len<span class="token punctuation">;</span>
	buf_offset <span class="token operator">=</span> hdr_remain<span class="token punctuation">;</span>
	buf_avail <span class="token operator">=</span> buf_vec<span class="token punctuation">[</span>vec_idx<span class="token punctuation">]</span><span class="token punctuation">.</span>buf_len <span class="token operator">-</span> hdr_remain<span class="token punctuation">;</span>

	<span class="token function">PRINT_PACKET</span><span class="token punctuation">(</span>dev<span class="token punctuation">,</span>
			<span class="token punctuation">(</span><span class="token class-name">uintptr_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span>buf_addr <span class="token operator">+</span> buf_offset<span class="token punctuation">)</span><span class="token punctuation">,</span>
			<span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span>buf_avail<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	mbuf_offset <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	mbuf_avail  <span class="token operator">=</span> m<span class="token operator">-></span>buf_len <span class="token operator">-</span> RTE_PKTMBUF_HEADROOM<span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>is_async<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		pkts_info <span class="token operator">=</span> async<span class="token operator">-></span>pkts_info<span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">async_iter_initialize</span><span class="token punctuation">(</span>dev<span class="token punctuation">,</span> async<span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// buf_avail是Guest中网络包的剩余长度，mbuf_avail是当前mbuf中剩余的容量</span>
        <span class="token comment">// 本次拷贝数据量是这两者的小值</span>
		cpy_len <span class="token operator">=</span> <span class="token function">RTE_MIN</span><span class="token punctuation">(</span>buf_avail<span class="token punctuation">,</span> mbuf_avail<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 拷贝数据</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>is_async<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">async_fill_seg</span><span class="token punctuation">(</span>dev<span class="token punctuation">,</span> vq<span class="token punctuation">,</span> cur<span class="token punctuation">,</span> mbuf_offset<span class="token punctuation">,</span>
					   buf_iova <span class="token operator">+</span> buf_offset<span class="token punctuation">,</span> cpy_len<span class="token punctuation">,</span> false<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
				<span class="token keyword">goto</span> error<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">likely</span><span class="token punctuation">(</span>hdr <span class="token operator">&amp;&amp;</span> cur <span class="token operator">==</span> m<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token function">rte_memcpy</span><span class="token punctuation">(</span><span class="token function">rte_pktmbuf_mtod_offset</span><span class="token punctuation">(</span>cur<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">,</span> mbuf_offset<span class="token punctuation">)</span><span class="token punctuation">,</span>
				<span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uintptr_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span>buf_addr <span class="token operator">+</span> buf_offset<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
				cpy_len<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
			<span class="token function">sync_fill_seg</span><span class="token punctuation">(</span>dev<span class="token punctuation">,</span> vq<span class="token punctuation">,</span> cur<span class="token punctuation">,</span> mbuf_offset<span class="token punctuation">,</span>
				      buf_addr <span class="token operator">+</span> buf_offset<span class="token punctuation">,</span>
				      buf_iova <span class="token operator">+</span> buf_offset<span class="token punctuation">,</span> cpy_len<span class="token punctuation">,</span> false<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>

        <span class="token comment">// 计算拷贝后的结果</span>
		mbuf_avail  <span class="token operator">-=</span> cpy_len<span class="token punctuation">;</span>
		mbuf_offset <span class="token operator">+=</span> cpy_len<span class="token punctuation">;</span>
		buf_avail <span class="token operator">-=</span> cpy_len<span class="token punctuation">;</span>
		buf_offset <span class="token operator">+=</span> cpy_len<span class="token punctuation">;</span>

		<span class="token comment">/* This buf reaches to its end, get the next one */</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>buf_avail <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// 如果Guest里的数据都拷贝完了，直接break循环</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>vec_idx <span class="token operator">>=</span> nr_vec<span class="token punctuation">)</span>
				<span class="token keyword">break</span><span class="token punctuation">;</span>

			buf_addr <span class="token operator">=</span> buf_vec<span class="token punctuation">[</span>vec_idx<span class="token punctuation">]</span><span class="token punctuation">.</span>buf_addr<span class="token punctuation">;</span>
			buf_iova <span class="token operator">=</span> buf_vec<span class="token punctuation">[</span>vec_idx<span class="token punctuation">]</span><span class="token punctuation">.</span>buf_iova<span class="token punctuation">;</span>
			buf_len <span class="token operator">=</span> buf_vec<span class="token punctuation">[</span>vec_idx<span class="token punctuation">]</span><span class="token punctuation">.</span>buf_len<span class="token punctuation">;</span>

			buf_offset <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
			buf_avail  <span class="token operator">=</span> buf_len<span class="token punctuation">;</span>

			<span class="token function">PRINT_PACKET</span><span class="token punctuation">(</span>dev<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">uintptr_t</span><span class="token punctuation">)</span>buf_addr<span class="token punctuation">,</span>
					<span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span>buf_avail<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>

		<span class="token comment">/*
		 * This mbuf reaches to its end, get a new one
		 * to hold more data.
		 */</span>
        <span class="token comment">// 拷贝未结束，但是mbuf空间用完了，需要重新申请一个新的mbuf</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>mbuf_avail <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			cur <span class="token operator">=</span> <span class="token function">rte_pktmbuf_alloc</span><span class="token punctuation">(</span>mbuf_pool<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 申请新的mbuf失败了，打印第一条日志，跳到error退出</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">unlikely</span><span class="token punctuation">(</span>cur <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
				<span class="token function">VHOST_LOG_DATA</span><span class="token punctuation">(</span>dev<span class="token operator">-></span>ifname<span class="token punctuation">,</span> ERR<span class="token punctuation">,</span>
					<span class="token string">"failed to allocate memory for mbuf.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token keyword">goto</span> error<span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span>

			prev<span class="token operator">-></span>next <span class="token operator">=</span> cur<span class="token punctuation">;</span>
			prev<span class="token operator">-></span>data_len <span class="token operator">=</span> mbuf_offset<span class="token punctuation">;</span>
			m<span class="token operator">-></span>nb_segs <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
			m<span class="token operator">-></span>pkt_len <span class="token operator">+=</span> mbuf_offset<span class="token punctuation">;</span>
			prev <span class="token operator">=</span> cur<span class="token punctuation">;</span>

			mbuf_offset <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
			mbuf_avail  <span class="token operator">=</span> cur<span class="token operator">-></span>buf_len <span class="token operator">-</span> RTE_PKTMBUF_HEADROOM<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
    <span class="token comment">// ...省略</span>
error<span class="token operator">:</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>is_async<span class="token punctuation">)</span>
		<span class="token function">async_iter_cancel</span><span class="token punctuation">(</span>async<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>从代码里可以看到确实是内存池不够用了，但是只有在Guest里数据包很大，超过我们预设的MTU的时候才会出现，什么时候Guest会发送超过MTU大小的包到网卡呢？很容易想到的一个点就是各种的Offload，特别是和网卡相关的分包Offload。于是就找了一台业务机器的现场看了一下网卡的特性开启情况：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># ethtool -k eth0</span>
Features <span class="token keyword">for</span> eth0:
rx-checksumming: on <span class="token punctuation">[</span>fixed<span class="token punctuation">]</span>
tx-checksumming: on
        tx-checksum-ipv4: off <span class="token punctuation">[</span>fixed<span class="token punctuation">]</span>
        tx-checksum-ip-generic: on
        tx-checksum-ipv6: off <span class="token punctuation">[</span>fixed<span class="token punctuation">]</span>
        tx-checksum-fcoe-crc: off <span class="token punctuation">[</span>fixed<span class="token punctuation">]</span>
        tx-checksum-sctp: off <span class="token punctuation">[</span>fixed<span class="token punctuation">]</span>
scatter-gather: on
        tx-scatter-gather: on
        tx-scatter-gather-fraglist: off <span class="token punctuation">[</span>fixed<span class="token punctuation">]</span>
tcp-segmentation-offload: off
        tx-tcp-segmentation: off <span class="token punctuation">[</span>fixed<span class="token punctuation">]</span>
        tx-tcp-ecn-segmentation: off <span class="token punctuation">[</span>fixed<span class="token punctuation">]</span>
        tx-tcp6-segmentation: off <span class="token punctuation">[</span>fixed<span class="token punctuation">]</span>
udp-fragmentation-offload: on
generic-segmentation-offload: on
generic-receive-offload: on
<span class="token comment"># ...省略</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>再找一台没有问题的机器：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># ethtool -k eth0</span>
Features <span class="token keyword">for</span> eth0:
rx-checksumming: on <span class="token punctuation">[</span>fixed<span class="token punctuation">]</span>
tx-checksumming: on
        tx-checksum-ipv4: off <span class="token punctuation">[</span>fixed<span class="token punctuation">]</span>
        tx-checksum-ip-generic: on
        tx-checksum-ipv6: off <span class="token punctuation">[</span>fixed<span class="token punctuation">]</span>
        tx-checksum-fcoe-crc: off <span class="token punctuation">[</span>fixed<span class="token punctuation">]</span>
        tx-checksum-sctp: off <span class="token punctuation">[</span>fixed<span class="token punctuation">]</span>
scatter-gather: on
        tx-scatter-gather: on
        tx-scatter-gather-fraglist: off <span class="token punctuation">[</span>fixed<span class="token punctuation">]</span>
tcp-segmentation-offload: off
        tx-tcp-segmentation: off <span class="token punctuation">[</span>fixed<span class="token punctuation">]</span>
        tx-tcp-ecn-segmentation: off <span class="token punctuation">[</span>requested on<span class="token punctuation">]</span>
        tx-tcp-mangleid-segmentation: off <span class="token punctuation">[</span>fixed<span class="token punctuation">]</span>
        tx-tcp6-segmentation: off <span class="token punctuation">[</span>fixed<span class="token punctuation">]</span>
generic-segmentation-offload: on
<span class="token comment"># ...省略</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>发现像TSO这种常用的Offload特性都关了，但是出问题的机器，比没出问题的机器，多了一个特性<code>udp-fragmentation-offload: on</code>，这个特性就是<code>UFO</code>，和TSO类似，TSO是TCP的offload，而UFO是UDP的offload，既然这里有不同，那是不是出问题里有应用会发送大的UDP包呢？再尝试抓包看下：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># tcpdump -i eth0 udp</span>
tcpdump: verbose output suppressed, use <span class="token parameter variable">-v</span> or <span class="token parameter variable">-vv</span> <span class="token keyword">for</span> full protocol decode
listening on eth0, link-type EN10MB <span class="token punctuation">(</span>Ethernet<span class="token punctuation">)</span>, capture size <span class="token number">65535</span> bytes
<span class="token number">17</span>:55:43.880517 IP localhost.29784 <span class="token operator">></span> <span class="token number">192.168</span>.100.111.8333: UDP, length <span class="token number">9082</span>
<span class="token number">17</span>:55:43.880526 IP localhost <span class="token operator">></span> <span class="token number">192.168</span>.100.111: udp
<span class="token number">17</span>:55:43.880528 IP localhost <span class="token operator">></span> <span class="token number">192.168</span>.100.111: udp
<span class="token number">17</span>:55:43.880539 IP localhost <span class="token operator">></span> <span class="token number">192.168</span>.100.111: udp
<span class="token number">17</span>:55:43.880541 IP localhost <span class="token operator">></span> <span class="token number">192.168</span>.100.111: udp
<span class="token number">17</span>:55:43.880542 IP localhost <span class="token operator">></span> <span class="token number">192.168</span>.100.111: udp
<span class="token number">17</span>:55:43.880543 IP localhost <span class="token operator">></span> <span class="token number">192.168</span>.100.111: udp
<span class="token number">17</span>:55:43.881681 IP localhost.29784 <span class="token operator">></span> <span class="token number">192.168</span>.100.111.8333: UDP, length <span class="token number">9076</span>
<span class="token number">17</span>:55:43.881684 IP localhost <span class="token operator">></span> <span class="token number">192.168</span>.100.111: udp
<span class="token number">17</span>:55:43.881686 IP localhost <span class="token operator">></span> <span class="token number">192.168</span>.100.111: udp
<span class="token number">17</span>:55:43.881687 IP localhost <span class="token operator">></span> <span class="token number">192.168</span>.100.111: udp
<span class="token number">17</span>:55:43.881689 IP localhost <span class="token operator">></span> <span class="token number">192.168</span>.100.111: udp
<span class="token number">17</span>:55:43.881690 IP localhost <span class="token operator">></span> <span class="token number">192.168</span>.100.111: udp
<span class="token number">17</span>:55:43.881692 IP localhost <span class="token operator">></span> <span class="token number">192.168</span>.100.111: udp
<span class="token number">17</span>:55:43.882214 IP localhost.17670 <span class="token operator">></span> <span class="token number">192.168</span>.100.1.domain: <span class="token number">4442</span>+ PTR? <span class="token number">192.168</span>.100.1.in-addr.arpa. <span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span>
<span class="token number">17</span>:55:43.882341 IP <span class="token number">192.168</span>.100.1.domain <span class="token operator">></span> localhost.17670: <span class="token number">4442</span> NXDomain <span class="token number">0</span>/1/0 <span class="token punctuation">(</span><span class="token number">119</span><span class="token punctuation">)</span>
<span class="token number">17</span>:55:43.882828 IP localhost.29784 <span class="token operator">></span> <span class="token number">192.168</span>.100.111.8333: UDP, length <span class="token number">9046</span>
<span class="token number">17</span>:55:43.882835 IP localhost <span class="token operator">></span> <span class="token number">192.168</span>.100.111: udp
<span class="token number">17</span>:55:43.882837 IP localhost <span class="token operator">></span> <span class="token number">192.168</span>.100.111: udp
<span class="token number">17</span>:55:43.882850 IP localhost <span class="token operator">></span> <span class="token number">192.168</span>.100.111: udp
<span class="token number">17</span>:55:43.882852 IP localhost <span class="token operator">></span> <span class="token number">192.168</span>.100.111: udp
<span class="token number">17</span>:55:43.882853 IP localhost <span class="token operator">></span> <span class="token number">192.168</span>.100.111: udp
<span class="token number">17</span>:55:43.882854 IP localhost <span class="token operator">></span> <span class="token number">192.168</span>.100.111: udp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>没错，除了DNS的请求之外，业务还会发送一些超过9000长度的UDP包，这些UDP包会占用预期外的mbuf资源，知道了这个问题，那就尝试把ufo特性关闭一下看看效果：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># ethtoo -K eth0 ufo off</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>关闭UFO之后，观察一段时间，虚拟机的网络恢复正常了。随后我们在测试环境也通过iperf复现了问题，便于后续的验证。</p>
<p>关闭UFO临时解决问题之余，又抛出来一个新的问题，为啥之前之前灰度的机器为什么没有出现同样的问题？为什么没有问题的机器里<code>udp-fragmentation-offload: on</code>这个特性直接消失了？</p>
<p>通过一些搜索，找到了答案，来着内核的官方<a href="https://www.kernel.org/doc/html/latest/networking/segmentation-offloads.html">文档: Segmentation Offloads</a>：</p>
<blockquote><p>UDP Fragmentation Offload<br>UDP fragmentation offload allows a device to fragment an oversized UDP datagram into multiple IPv4 fragments. Many of the requirements for UDP fragmentation offload are the same as TSO. However the IPv4 ID for fragments should not increment as a single IPv4 datagram is fragmented.</p>
<p>UFO is deprecated: modern kernels will no longer generate UFO skbs, but can still receive them from tuntap and similar devices. Offload of UDP-based tunnel protocols is still supported.</p>
</blockquote>

<p>原来UFO已经被废弃了，现代内核不会再发送大的UFO skbs，但是仍然允许从tuntap等类似设备上接收这些包。再看一下这俩机器的内核版本：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#uname -r</span>
<span class="token number">3.10</span>.0-514.el7.x86_64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#uname -r</span>
<span class="token number">5.14</span>.0-284.25.1.el9_2.x86_64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>确实差了不少。</p>
<p>最后呢，解决办法是将虚拟机的网卡配置调整了一下，修改成了：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>interface</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>vhostuser<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mac</span> <span class="token attr-name">address</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>&#123;&#123;.MACAddress&#125;&#125;<span class="token punctuation">'</span></span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>unix<span class="token punctuation">'</span></span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>&#123;&#123;.VhostPath&#125;&#125;<span class="token punctuation">'</span></span> <span class="token attr-name">mode</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>server<span class="token punctuation">'</span></span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>model</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>virtio<span class="token punctuation">'</span></span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>driver</span> <span class="token attr-name">queues</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>16<span class="token punctuation">'</span></span> <span class="token attr-name">rx_queue_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>1024<span class="token punctuation">'</span></span> <span class="token attr-name">tx_queue_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>1024<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>host</span> <span class="token attr-name">tso4</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>off<span class="token punctuation">'</span></span> <span class="token attr-name">tso6</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>off<span class="token punctuation">'</span></span> <span class="token attr-name">ufo</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>off<span class="token punctuation">'</span></span> <span class="token attr-name">ecn</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>off<span class="token punctuation">'</span></span> <span class="token attr-name">mrg_rxbuf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>off<span class="token punctuation">'</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>guest</span> <span class="token attr-name">tso4</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>off<span class="token punctuation">'</span></span> <span class="token attr-name">tso6</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>off<span class="token punctuation">'</span></span> <span class="token attr-name">ufo</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>off<span class="token punctuation">'</span></span> <span class="token attr-name">ecn</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>off<span class="token punctuation">'</span></span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>driver</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>interface</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>其实TSO这个特性是在DPDK里关闭的，但是因为已经上线了不少业务，UFO在DPDK里关闭的话，会影响老虚拟机的热迁移，因此还是在qemu这侧关闭吧。</p>
]]></content>
      <categories>
        <category>Linux Kernel</category>
      </categories>
      <tags>
        <tag>DPDK</tag>
        <tag>virtio</tag>
        <tag>UFO</tag>
      </tags>
  </entry>
  <entry>
    <title>Harbor折腾升级记</title>
    <url>/2018/08/07/upgrade-harbor/</url>
    <content><![CDATA[<p>Harbor是vmware中国开发的一款企业级的DockerRegistry服务器，我们内部也是有搭建了一个Harbor，但是版本是0.5，对于当前最新的release版本1.5.2而言已经太老了，确实也有一些问题，比如不支持多级的镜像名称，某些情况下会触发bug导致panic。</p>
<p>所以需要升级一下，既然考虑升级了，就干脆升级到最新的版本1.5.2了。首先说一下目前的Harbor，官方提供的离线安装包里，默认是本地启动一个MySQL，将Harbor需要的一些数据存储在本地的MySQL中的，这个是不能接受的，所以在之前的部署中，是使用了外部的一个MySQL，同样，registry的存储在线上也是使用了共享存储，保证可用性。</p>
<p>不过Harbor的1.5.2版本对于0.5版本变化还是比较大的，首先是增加了adminserver这个角色，将所有的配置都拿到adminserver中存储，ui组件通过http请求定期向adminserver请求当前最新的配置信息，其次是数据库结构，新版本和旧版本相比数据库结构发生了很大的变化。</p>
<p>对于升级操作，官方也提供了解决方案，可以参考<a href="https://github.com/vmware/harbor/blob/d1f2b2311f98e1d3bb00203af01e87ce7f0087de/docs/migration_guide.md">migration_guide</a>进行升级，升级工具的镜像官方也是提供了，但是这其中存在一个问题，就是升级工具依赖本地的MySQL，也就是说，这个工具只能工作在MySQL是Harbor离线安装包启动的情况下，如果使用了外部的MySQL，这个升级工具就无法直接使用了。</p>
<p>所以呢，最终还是需要去看一下官方的升级工具是如何实现的，看能否通过其他办法手动升级，于是就花了点时间看了一下代码，找到了最后的实现方式，具体的代码在<a href="https://github.com/vmware/harbor/tree/d1f2b2311f98e1d3bb00203af01e87ce7f0087de/tools/migration/db/alembic/mysql">alembic&#x2F;mysql</a>这个目录下，原理也很简单，官方使用了一个Python的工具<code>alembic</code>实现了数据库结构的版本管理。</p>
<p>手动运行数据库升级，首先需要安装<code>alembic</code>工具，可以通过<code>pip</code>安装，或者针对不同的发行版找对应的软件包。</p>
<p>下面开始操作：</p>
<span id="more"></span>
<p>目录下有一个<code>alembic.tpl</code>文件，这个文件是alembic运行所需要配置文件的模板，我们可以通过<code>source alembic.tpl &gt; alembic.ini</code>实例化一个配置文件，然后打开配置文件，可以看到最关键的两个配置：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">script_location <span class="token operator">=</span> /harbor-migration/db/alembic/mysql/migration_harbor
sqlalchemy.url <span class="token operator">=</span> mysql://:@localhost:3306/registry?unix_socket<span class="token operator">=</span>/var/run/mysqld/mysqld.sock<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>分别是脚本路径和连接MySQL的地址，默认的在工具镜像中脚本路径是放在<code>/harbor-migration/</code>这个目录下，这个需要根据机器上的情况修改到对应目录，然后<code>sqlalchemy.url</code>配置也很明显，需要修改为实际线上数据库的连接地址。</p>
<p>修改完成后，就可以调用<code>alembic</code>工具升级数据库了:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">PYTHONPATH</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token builtin class-name">pwd</span><span class="token variable">`</span></span>    <span class="token comment"># 添加PYTHONPATH</span>
alembic <span class="token parameter variable">-c</span> alembic.ini current <span class="token comment"># 查看当前数据库版本</span>
alembic <span class="token parameter variable">-c</span> alembic.ini upgrade <span class="token number">1.5</span>  <span class="token comment"># 升级到1.5版本</span>
alembic <span class="token parameter variable">-c</span> alembic.ini current <span class="token comment"># 查看升级后数据库版本</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>脚本运行完成后，数据库结构就能升级成功了。需要提醒的是，建议先导出线上数据到单独的一个数据库中做一下测试，确认没有问题后再进行线上操作，另外，做好备份！</p>
<p>数据库升级完成，该升级各个组建了，新版Harbor的配置也有比较大的变化，默认安装时会有个<code>harbor.cfg</code>，官方也提供了一个工具去做<code>harbor.cfg</code>的版本迁移，但是我们也不需要通过这个工具了，在安装时，<code>prepare</code>脚本会根据<code>harbor.cfg</code>文件生成对应组件所需要的配置和env文件，所以我们直接使用新版的默认<code>harbor.cfg</code>生成配置文件，再对比老的配置文件，然后直接修改最后的配置文件保持一致。</p>
<p>需要注意的是，新版Harbor大部分的配置都集中在<code>common/config/adminserver/env</code>文件中，而adminserver是老版本没有的角色，老版本大部分配置都集中在<code>common/config/ui/app.conf</code>和<code>common/config/ui/env</code>中。<br>最终我们采取的办法是，先用默认配置生成一份实际的配置文件，特别是<code>common/config/adminserver/env</code>文件，再根据老版本的线上配置文件比对，直接修改生成后的配置文件而不是<code>harbor.cfg</code>，相当于新旧配置文件做一次merge。等配置文件准备完成，直接调用<code>docker-compose up -d</code>以新配置文件启动Harbor容器。</p>
<p>总体来说，升级还是很顺利的，具体的步骤如下：<br>    1. 备份数据库<br>    2. 停止并删除老Harbor容器<br>    3. 通过alembic升级数据库版本<br>    4. 通过docker-compose up -d启动新版本Harbor容器</p>
<p>升级过程很顺利，容器启动后工作正常，但是遇到一个小问题，就是Harbor管理平台里显示的日志的时间差了8个小时，这个其实是在容器化中很容易遇到的一个情况，容器中的时区和宿主机不一致，毕竟我们在中国嘛，还是应该用北京时间，虽然问题挺常见，但是在Harbor解决这个问题还是费了一些力气。<br>正常的思路，就是修改一下<code>docker-compose.yaml</code>将<code>/usr/share/zoneinfo/Asia/Shanghai</code>挂载到<code>/etc/localtime</code>，这样容器内部时区就正确了。测试了一下，确实如此，在容器中执行date命令已经可以正常返回正确的时间。<br>但是日志的时间并没有变化，这个确实令人费解，由于Harbor的镜像相关日志都是写到数据库中的，所以还是需要看一下具体插入日志的代码，看是否能够发现一些问题：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 需要记录日志的地方调用dao.AddAccessLog插入日志，可以看到OpTime就是time.Now()。</span>
<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> err <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">AddAccessLog</span><span class="token punctuation">(</span>
		models<span class="token punctuation">.</span>AccessLog<span class="token punctuation">&#123;</span>
			Username<span class="token punctuation">:</span>  p<span class="token punctuation">.</span>SecurityCtx<span class="token punctuation">.</span><span class="token function">GetUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
			ProjectID<span class="token punctuation">:</span> projectID<span class="token punctuation">,</span>
			RepoName<span class="token punctuation">:</span>  pro<span class="token punctuation">.</span>Name <span class="token operator">+</span> <span class="token string">"/"</span><span class="token punctuation">,</span>
			RepoTag<span class="token punctuation">:</span>   <span class="token string">"N/A"</span><span class="token punctuation">,</span>
			Operation<span class="token punctuation">:</span> <span class="token string">"create"</span><span class="token punctuation">,</span>
			OpTime<span class="token punctuation">:</span>    time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		log<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"failed to add access log: %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// AddAccessLog具体实现</span>
<span class="token comment">// AddAccessLog persists the access logs</span>
<span class="token keyword">func</span> <span class="token function">AddAccessLog</span><span class="token punctuation">(</span>accessLog models<span class="token punctuation">.</span>AccessLog<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">// the max length of username in database is 255, replace the last</span>
	<span class="token comment">// three charaters with "..." if the length is greater than 256</span>
	<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>accessLog<span class="token punctuation">.</span>Username<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">255</span> <span class="token punctuation">&#123;</span>
		accessLog<span class="token punctuation">.</span>Username <span class="token operator">=</span> accessLog<span class="token punctuation">.</span>Username<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">252</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"..."</span>
	<span class="token punctuation">&#125;</span>

	o <span class="token operator">:=</span> <span class="token function">GetOrmer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> o<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>accessLog<span class="token punctuation">)</span>
	<span class="token keyword">return</span> err
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>看到这边，基本可以确定和ORM实现没有关系了，因为用的mysql驱动是<code>go-sql-driver/mysql</code>，而这个驱动可以单独设置时区，而且驱动默认的时区是<code>UTC</code>，所以需要修改，具体可以参考<a href="https://github.com/go-sql-driver/mysql#loc">mysql#loc</a>，于是问题就变成了如何将这个参数传到驱动了，继续看代码：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// NewMySQL returns an instance of mysql</span>
<span class="token keyword">func</span> <span class="token function">NewMySQL</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">,</span> usr<span class="token punctuation">,</span> pwd<span class="token punctuation">,</span> database <span class="token builtin">string</span><span class="token punctuation">)</span> Database <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> <span class="token operator">&amp;</span>mysql<span class="token punctuation">&#123;</span>
		host<span class="token punctuation">:</span>     host<span class="token punctuation">,</span>
		port<span class="token punctuation">:</span>     port<span class="token punctuation">,</span>
		usr<span class="token punctuation">:</span>      usr<span class="token punctuation">,</span>
		pwd<span class="token punctuation">:</span>      pwd<span class="token punctuation">,</span>
		database<span class="token punctuation">:</span> database<span class="token punctuation">,</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// Register registers MySQL as the underlying database used</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>mysql<span class="token punctuation">)</span> <span class="token function">Register</span><span class="token punctuation">(</span>alias <span class="token operator">...</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>

	<span class="token keyword">if</span> err <span class="token operator">:=</span> utils<span class="token punctuation">.</span><span class="token function">TestTCPConn</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>host<span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>m<span class="token punctuation">.</span>port<span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> err
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">if</span> err <span class="token operator">:=</span> orm<span class="token punctuation">.</span><span class="token function">RegisterDriver</span><span class="token punctuation">(</span><span class="token string">"mysql"</span><span class="token punctuation">,</span> orm<span class="token punctuation">.</span>DRMySQL<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> err
	<span class="token punctuation">&#125;</span>

	an <span class="token operator">:=</span> <span class="token string">"default"</span>
	<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>alias<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
		an <span class="token operator">=</span> alias<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
	<span class="token punctuation">&#125;</span>
    <span class="token comment">// 关键代码！根据配置组合一个MySQL URI，初始化驱动。</span>
	conn <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%s:%s@tcp(%s:%s)/%s"</span><span class="token punctuation">,</span> m<span class="token punctuation">.</span>usr<span class="token punctuation">,</span>
		m<span class="token punctuation">.</span>pwd<span class="token punctuation">,</span> m<span class="token punctuation">.</span>host<span class="token punctuation">,</span> m<span class="token punctuation">.</span>port<span class="token punctuation">,</span> m<span class="token punctuation">.</span>database<span class="token punctuation">)</span>
	<span class="token keyword">return</span> orm<span class="token punctuation">.</span><span class="token function">RegisterDataBase</span><span class="token punctuation">(</span>an<span class="token punctuation">,</span> <span class="token string">"mysql"</span><span class="token punctuation">,</span> conn<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>也就是说，可以在database名字后面加上<code>?loc=Local</code>来让MySQL驱动使用本地的时区设置。于是就简单了，直接修改<code>common/config/adminserver/env</code>文件，将其中的<code>MYSQL_DATABASE=registry</code>改成<code>MYSQL_DATABASE=registry?loc=Local</code>就行了，虽然有点hack，但是，起码不用修改代码再编译打镜像了吧～<br>一波hack操作，重启对应组建，启动完成，果然时区也正常了～</p>
<p>PS：Harbor 1.6为了保持和Clair数据库的一致性，将MySQL迁移到PostgreSQL了，所以上面的做法可能就不适用于1.6了，由于暂时内部还没有PostgreSQL的支持，也不需要Clair，所以短期内没有考虑升级1.6，等哪天需要升级了，再看相应的解决方案吧。</p>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Harbor升级</tag>
        <tag>Harbor Migration</tag>
        <tag>alembic</tag>
      </tags>
  </entry>
  <entry>
    <title>Unrecoverable Read Error Rate (URE)</title>
    <url>/2016/12/04/ure/</url>
    <content><![CDATA[<p>很久之前，对于磁盘的了解，就知道一个很关键的指标MTBF，即相邻两次故障之间的平均工作时间，也称为平均故障间隔，这个值越大越好，越大意味着硬盘更不容易坏。<br>对于RAID，也是很相信，觉得大多数情况下，使用RAID，就能保证数据的安全性，几乎不会有数据丢失的风险。</p>
<p>突然的，读到一篇对于RAID 6的文章 <a href="http://www.zdnet.com/article/why-raid-6-stops-working-in-2019/">Why RAID 6 stops working in 2019</a>，这是一篇2010年的文章，很遗憾到目前才读到。<br>这篇文章里提到了一个指标，叫URE，也就是Unrecoverable Read Error Rate，不可恢复读取错误，一般普通的桌面级别硬盘，这个指标的值为1 × 10^-14，意味着每读取10^14bit的数据，就有可能产生1bit的错误。</p>
<p>问题在于，这个错误是无法被检测和修复的。10^14bit，大约相当于12.5TB的数据，也就是说，每读取12.5TB的数据，就有可能产生一个错误的读取。而对于目前现在硬盘的容量越来越大，4TB，6TB硬盘的价格越来越低，这种现象会越来越严重。</p>
<p>在RAID5中，当整个集群有一块硬盘出现损坏需要替换时，需要进行重建，重建时，需要读取其他硬盘的数据，计算出替换的那块硬盘的数据，在重建过程中，除了需要考虑重建的时间之外，还要考虑的就是URE的影响，如果集群的容量足够大，比如超过10TB，那么，其实是有很大的概率出现读取错误的，而一旦读取出错，则RAID的重建就会失败，基本也就意味着，数据能恢复的可能性变得相当低了。所以在使用RAID5时，就需要考虑重建的问题。</p>
<p>不过对于企业级的硬盘，URE普遍能做到1×10^-15，就意味着大约能读取125TB的数据，容量有比较大的提升，对于SSD，这个值会更加优秀，有些SSD能达到1×10^-17甚至1×10^-18，能提供更好的数据安全性。</p>
<p>所以，稳定点的话，还是RAID10吧。</p>
]]></content>
      <tags>
        <tag>RAID</tag>
        <tag>URE</tag>
        <tag>MTBF</tag>
      </tags>
  </entry>
  <entry>
    <title>syslog协议的Facility, Severity数字代号和PRI计算</title>
    <url>/2017/08/31/syslog-facility-and-severity/</url>
    <content><![CDATA[<p>一条syslog信息包含三部分，PRI, HEADER和MSG，其中PRI是<code>&lt;&gt;</code>扩起来的一个数字，这个数字就代表了不同Facility和Severity的消息。<br>其中Facility, Severity的数字代号列表如下：</p>
<h4 id="Facility"><a href="#Facility" class="headerlink" title="Facility:"></a>Facility:</h4><table>
<thead>
<tr>
<th align="left">Code</th>
<th align="left">Keyword</th>
<th align="left">Description</th>
</tr>
</thead>
<tbody><tr>
<td align="left">0</td>
<td align="left">kern</td>
<td align="left">kernel messages</td>
</tr>
<tr>
<td align="left">1</td>
<td align="left">user</td>
<td align="left">user-level messages</td>
</tr>
<tr>
<td align="left">2</td>
<td align="left">mail</td>
<td align="left">mail system</td>
</tr>
<tr>
<td align="left">3</td>
<td align="left">daemon</td>
<td align="left">system daemons</td>
</tr>
<tr>
<td align="left">4</td>
<td align="left">auth</td>
<td align="left">security&#x2F;authorization messages</td>
</tr>
<tr>
<td align="left">5</td>
<td align="left">syslog</td>
<td align="left">messages generated internally by syslogd</td>
</tr>
<tr>
<td align="left">6</td>
<td align="left">lpr</td>
<td align="left">line printer subsystem (archaic subsystem)</td>
</tr>
<tr>
<td align="left">7</td>
<td align="left">news</td>
<td align="left">network news subsystem (archaic subsystem)</td>
</tr>
<tr>
<td align="left">8</td>
<td align="left">uucp</td>
<td align="left">UUCP subsystem (archaic subsystem)</td>
</tr>
<tr>
<td align="left">9</td>
<td align="left"></td>
<td align="left">clock daemon</td>
</tr>
<tr>
<td align="left">10</td>
<td align="left">authpriv</td>
<td align="left">security&#x2F;authorization messages</td>
</tr>
<tr>
<td align="left">11</td>
<td align="left">ftp</td>
<td align="left">FTP daemon</td>
</tr>
<tr>
<td align="left">12</td>
<td align="left">-</td>
<td align="left">NTP subsystem</td>
</tr>
<tr>
<td align="left">13</td>
<td align="left">-</td>
<td align="left">log audit</td>
</tr>
<tr>
<td align="left">14</td>
<td align="left">-</td>
<td align="left">log alert</td>
</tr>
<tr>
<td align="left">15</td>
<td align="left">cron</td>
<td align="left">scheduling daemon</td>
</tr>
<tr>
<td align="left">16</td>
<td align="left">local0</td>
<td align="left">local use 0  (local0)</td>
</tr>
<tr>
<td align="left">17</td>
<td align="left">local1</td>
<td align="left">local use 1  (local1)</td>
</tr>
<tr>
<td align="left">18</td>
<td align="left">local2</td>
<td align="left">local use 2  (local2)</td>
</tr>
<tr>
<td align="left">19</td>
<td align="left">local3</td>
<td align="left">local use 3  (local3)</td>
</tr>
<tr>
<td align="left">20</td>
<td align="left">local4</td>
<td align="left">local use 4  (local4)</td>
</tr>
<tr>
<td align="left">21</td>
<td align="left">local5</td>
<td align="left">local use 5  (local5)</td>
</tr>
<tr>
<td align="left">22</td>
<td align="left">local6</td>
<td align="left">local use 6  (local6)</td>
</tr>
<tr>
<td align="left">23</td>
<td align="left">local7</td>
<td align="left">local use 7  (local7)</td>
</tr>
</tbody></table>
<h4 id="Severity"><a href="#Severity" class="headerlink" title="Severity:"></a>Severity:</h4><table>
<thead>
<tr>
<th align="left">Code</th>
<th align="left">Keyword</th>
<th align="left">Description</th>
</tr>
</thead>
<tbody><tr>
<td align="left">0</td>
<td align="left">emerg</td>
<td align="left">System is unusable</td>
</tr>
<tr>
<td align="left">1</td>
<td align="left">alert</td>
<td align="left">Should be corrected immediately</td>
</tr>
<tr>
<td align="left">2</td>
<td align="left">crit</td>
<td align="left">Critical conditions</td>
</tr>
<tr>
<td align="left">3</td>
<td align="left">err</td>
<td align="left">Error conditions</td>
</tr>
<tr>
<td align="left">4</td>
<td align="left">warning</td>
<td align="left">May indicate that an error will occur if action is not taken.</td>
</tr>
<tr>
<td align="left">5</td>
<td align="left">notice</td>
<td align="left">Events that are unusual, but not error conditions.</td>
</tr>
<tr>
<td align="left">6</td>
<td align="left">info</td>
<td align="left">Normal operational messages that require no action.</td>
</tr>
<tr>
<td align="left">7</td>
<td align="left">debug</td>
<td align="left">Information useful to developers for debugging the application.</td>
</tr>
</tbody></table>
<p>针对PRI的计算公式：<code>PRI = FacilityCode*8 + SeverityCode</code><br>举个例子： local3.info的日志，它的PRI就是<code>19*8+6=158</code>，所以这条消息在传输中的格式为<code>&lt;158&gt; &#123;HEADER&#125; &#123;MEG&#125;</code><br>再一个例子，如果看到一条PRI为14的消息，那么它实际的级别就是<code>user.info</code> (1*8+6&#x3D;14)</p>
<p>参考：</p>
<ol>
<li><a href="https://tools.ietf.org/html/rfc3164">https://tools.ietf.org/html/rfc3164</a></li>
<li><a href="https://wiki.archlinux.org/index.php/systemd#Journal">https://wiki.archlinux.org/index.php/systemd#Journal</a></li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>syslog协议</tag>
        <tag>Facility</tag>
        <tag>Severity</tag>
        <tag>PRI</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次SAE Web服务器的调优过程</title>
    <url>/2015/12/07/tuning-webruntime/</url>
    <content><![CDATA[<p>事情的原因，是发生在某个晚上的9点30左右，SAE的报警系统突然报出了异常，所有的Web服务器的负载突然变得很高，流量也变得异常的大。<br>这个是很有问题的，在SAE最前面的反向代理上，是部署了SAE自己开发的‘CC防火墙’的，如果出现了异常的被攻击的情况，这些异常的流量是不会到达<br>Web服务器的，现在这些流量都到达了Web服务器，说明要么是攻击没有被正常判断，要没就是这不是一次攻击。</p>
<p>事实上确实这也不是一次攻击。</p>
<p>随后的分析，我们发现了一堆比较‘奇怪’的应用，为什么说‘奇怪’呢，因为这些应用的访问趋势是这样子的：</p>
<p><img src="/images/webruntime-strange-pv.png"></p>
<p>这是其中一个应用的数据，然而在这个应用的帐号下面，大约有十个类似的应用，都是这样的趋势，所以对于我们的Web服务器来说，在特定的时刻要接受<br>接近10倍左右的流量，对于当前的规模就有点‘顶不住’了。</p>
<span id="more"></span>

<p>所以讨论过后，大家的想法还是要对Web服务器进行扩容，来满足这样突发的流量增长。但与此同时，Web服务器也有些不一样的异常，在报警的时候，系统负载<br>比较高，CPU也没有什么空闲了，但是有个比较特殊的现象，就是system占用的CPU比user占用的CPU要高，这是明显不合理的，一般情况下，system占用CPU较高<br>意味着系统可能存在瓶颈，比如大量的锁争用等情况。</p>
<p>所以，在着手准备扩容Web服务器的同时，也尝试对现有系统进行一些性能分析，看是否能找到瓶颈，便于做一些优化，提升单Web服务器的容量。</p>
<p>分析的第一步，就是要收集系统运行时的信息，因此我们使用了 <code>perf</code> 这个工具，在系统中对httpd进程进行了抓取，并使用<br><a href="https://github.com/brendangregg/FlameGraph">FlameGraph</a>生成相应的火焰图。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ perf record <span class="token parameter variable">-g</span> <span class="token parameter variable">-a</span> <span class="token comment"># 等待收集一段时间后Ctrl-c 退出</span>
$ perf script <span class="token operator">|</span> stackcollapse-perf.pl <span class="token operator">|</span> flamegraph.pl <span class="token operator">></span> flame.svg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>最终生成的火焰图如下：</p>
<p><img src="/images/webruntime-flame-before.png"></p>
<p>看到这个图，一切都明白了，系统在此阶段调用了太多的connect，尝试建立TCP连接，造成了大量的系统开销，从而影响了整体的性能。<br>那么为什么会导致这个问题？</p>
<p>用户的代码逻辑非常简单，只是从memcache中取出一个值，然后做一个简单的转换，然后输出。那么，问题就出在了memcache上。</p>
<p>这其实是一个历史遗留问题，SAE的Web服务器是一个纯共享的环境，用户与用户之间，可以做到请求与请求之间的隔离，因此，服务器上的<br>每个httpd进程都可以为所有的应用服务，实现动态调度，这样的设计，保证了资源的高利用性，能够实现资源利用的最大化。</p>
<p>在当初实现资源隔离的时候，对于memcache，用户初始化memcache时总会帮他建立一个独立的连接，当使用完成，再把连接断掉。<br>问题就出在了这里，当应用访问量很大，每个请求占用的时间又很短，就出现了频繁和memcache建立连接-断开，又建立连接-断开的死循环。<br>造成的系统开销非常巨大。</p>
<p>找到了原因，那对应的解决办法就简单了，只需要修改memcache的扩展，把短链接修改为长连接就好，除此之外，如果遇到连接断掉的情况，则<br>尝试重新连接，保证一个用户的使用不会影响到下个用户。<br>就这样，最突出的问题就基本解决了。</p>
<p>当然，对于用户来说，其实完全不用关心用的是长连接或者是短连接，不需要调整代码，初始化的Memcache自动地就变成了长连接，完全没有感知。</p>
<p>再看一看调整之后的火焰图：</p>
<p><img src="/images/webruntime-flame-after.png"></p>
<p>好了不少，没有像之前的火焰图那样非常夸张，相对的消耗都比较平均。</p>
<p>最后在一台即将上线的机器上使用ab测试了一下。</p>
<p>修改前：</p>
<pre class="line-numbers language-none"><code class="language-none">Concurrency Level:      100
Time taken for tests:   77.282 seconds
Complete requests:      100000
Failed requests:        3863
   (Connect: 0, Receive: 0, Length: 3863, Exceptions: 0)
Write errors:           0
Non-2xx responses:      3863
Total transferred:      29684301 bytes
HTML transferred:       9357111 bytes
Requests per second:    1293.96 [#&#x2F;sec] (mean)
Time per request:       77.282 [ms] (mean)
Time per request:       0.773 [ms] (mean, across all concurrent requests)
Transfer rate:          375.10 [Kbytes&#x2F;sec] received<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>修改后：</p>
<pre class="line-numbers language-none"><code class="language-none">Concurrency Level:      100
Time taken for tests:   16.554 seconds
Complete requests:      100000
Failed requests:        6080
   (Connect: 0, Receive: 0, Length: 6080, Exceptions: 0)
Write errors:           0
Non-2xx responses:      6086
Total transferred:      29450237 bytes
HTML transferred:       9218982 bytes
Requests per second:    6040.76 [#&#x2F;sec] (mean)
Time per request:       16.554 [ms] (mean)
Time per request:       0.166 [ms] (mean, across all concurrent requests)
Transfer rate:          1737.32 [Kbytes&#x2F;sec] received<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>QPS 从1293.96 [#&#x2F;sec] 提升到了6040.76 [#&#x2F;sec]，效果还是比较明显的。</p>
<p>修改了memcache的逻辑，又加上扩容了几台服务器，之后，就没有再出现报警的情况，问题算是得到比较好的解决。</p>
<p>当然，使用了长连接之后，服务器维护的连接数会有很大的提升，基本上从原来了200个连接上升到接近2000个连接，不过对于我们的服务器来说，<br>这些连接其实不算什么，所以其实也不会有太大的影响，和长连接带来的性能提升相比，还是相当值得的。</p>
]]></content>
      <tags>
        <tag>PHP</tag>
        <tag>火焰图</tag>
        <tag>perf</tag>
      </tags>
  </entry>
  <entry>
    <title>WSL2 Ubuntu 21.04原生Docker无法运行的问题</title>
    <url>/2021/10/23/wsl2-ubuntu-dockerd-iptables-problem/</url>
    <content><![CDATA[<p>最近为了用上更新一点的软件，把运行在WSL2里的Ubuntu 20.04 LTS版本升级了一下，升级到了Ubuntu 21.04，升级之后呢，大部分功能都正常（当然本身我用的功能也不会很多），但是确实也遇到了个小问题：Docker Daemon无法启动了。这个确实很影响工作，因为很多时候写完代码会本地打个镜像运行一下，简单测试一下代码是否有问题。但是升级之后，突然发现Docker用不了了。</p>
<p>具体点呢，是会报一个<code>iptables</code>相关的错误：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>
WARN<span class="token punctuation">[</span><span class="token number">2021</span>-10-23T11:30:05.864210900+08:00<span class="token punctuation">]</span> Your kernel does not support cgroup blkio throttle.write_iops_device
INFO<span class="token punctuation">[</span><span class="token number">2021</span>-10-23T11:30:05.864538700+08:00<span class="token punctuation">]</span> Loading containers: start.
INFO<span class="token punctuation">[</span><span class="token number">2021</span>-10-23T11:30:06.135353300+08:00<span class="token punctuation">]</span> stopping event stream following graceful <span class="token function">shutdown</span>  <span class="token assign-left variable">error</span><span class="token operator">=</span><span class="token string">"context canceled"</span> <span class="token assign-left variable">module</span><span class="token operator">=</span>libcontainerd <span class="token assign-left variable">namespace</span><span class="token operator">=</span>moby
INFO<span class="token punctuation">[</span><span class="token number">2021</span>-10-23T11:30:06.135542600+08:00<span class="token punctuation">]</span> stopping healthcheck following graceful <span class="token function">shutdown</span>  <span class="token assign-left variable">module</span><span class="token operator">=</span>libcontainerd
INFO<span class="token punctuation">[</span><span class="token number">2021</span>-10-23T11:30:06.136083800+08:00<span class="token punctuation">]</span> stopping event stream following graceful <span class="token function">shutdown</span>  <span class="token assign-left variable">error</span><span class="token operator">=</span><span class="token string">"context canceled"</span> <span class="token assign-left variable">module</span><span class="token operator">=</span>libcontainerd <span class="token assign-left variable">namespace</span><span class="token operator">=</span>plugins.moby
failed to start daemon: Error initializing network controller: error obtaining controller instance: unable to <span class="token function">add</span> <span class="token builtin class-name">return</span> rule <span class="token keyword">in</span> DOCKER-ISOLATION-STAGE-1 chain:  <span class="token punctuation">(</span>iptables failed: iptables <span class="token parameter variable">--wait</span> <span class="token parameter variable">-A</span> DOCKER-ISOLATION-STAGE-1 <span class="token parameter variable">-j</span> RETURN: iptables v1.8.7 <span class="token punctuation">(</span>nf_tables<span class="token punctuation">)</span>:  RULE_APPEND failed <span class="token punctuation">(</span>No such <span class="token function">file</span> or directory<span class="token punctuation">)</span>: rule <span class="token keyword">in</span> chain DOCKER-ISOLATION-STAGE-1
 <span class="token punctuation">(</span>exit status <span class="token number">4</span><span class="token punctuation">))</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<span id="more"></span>
<p>提示<code>iptables</code> <code>RULE_APPEND</code>也不知道是咋回事，不过想着估计和Docker的网络有点关系，还好一般情况下编译和打镜像也不需要网络隔离，所以前几天就临时在启动Docker Daemon时加上<code>--iptables=false</code>参数，不加载iptables规则，当然<code>docker builld</code>和<code>docker run</code>的时候也得加上<code>--network=host</code>使用不隔离的Host网络，勉强扛了几天。</p>
<p>今天有时间就查了查资料，一开始查到的大部分都是让用<code>Docker Desktop for Windows</code>并且开启WSL2后端，然后在WSL2里直接用Windows的<code>docker.exe</code>命令。这个方案我没试过，不过说实话即使能用，也觉得有点太别扭了。想想还是放弃了。于是继续找资料。终于找到一篇<a href="https://patrickwu.space/2021/03/09/wsl-solution-to-native-docker-daemon-not-starting/">文章</a>，文章里贴了个Ubuntu的<a href="https://bugs.launchpad.net/ubuntu-wsl-integration/+bug/1908539">bug report</a>，大致意思是说：</p>
<blockquote><p>Ubuntu从20.10开始，将默认的防火墙切换到了<code>nftables</code>实现，这个实现需要5.8版本及以上的内核，而微软在WSL2中提供的5.4版本的内核没有<code>nftables</code>，所以导致iptables功能出错了。</p>
</blockquote>

<p>解决方法也简单，直接把<code>iptables</code>实现切换回<code>iptables-legacy</code>就好了：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">~<span class="token punctuation">]</span><span class="token comment"># sudo update-alternatives --config iptables</span>
There are <span class="token number">2</span> choices <span class="token keyword">for</span> the alternative iptables <span class="token punctuation">(</span>providing /usr/sbin/iptables<span class="token punctuation">)</span>.

  Selection    Path                       Priority   Status
------------------------------------------------------------
* <span class="token number">0</span>            /usr/sbin/iptables-nft      <span class="token number">20</span>        auto mode
  <span class="token number">1</span>            /usr/sbin/iptables-legacy   <span class="token number">10</span>        manual mode
  <span class="token number">2</span>            /usr/sbin/iptables-nft      <span class="token number">20</span>        manual mode

Press <span class="token operator">&lt;</span>enter<span class="token operator">></span> to keep the current choice<span class="token punctuation">[</span>*<span class="token punctuation">]</span>, or <span class="token builtin class-name">type</span> selection number: <span class="token number">1</span>
update-alternatives: using /usr/sbin/iptables-legacy to provide /usr/sbin/iptables <span class="token punctuation">(</span>iptables<span class="token punctuation">)</span> <span class="token keyword">in</span> manual mode<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>切换回去之后，果然就好了，又可以开心的用原生docker了。</p>
<p>最后我又看了眼现在跑的内核：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">~<span class="token punctuation">]</span><span class="token comment"># uname -r</span>
<span class="token number">5.10</span>.60.1-microsoft-standard-WSL2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>因为升级了Windows11，现在内核已经到了5.10了。按理不应该有问题才对。除非微软编译内核的时候没开相关的选项？</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">~<span class="token punctuation">]</span><span class="token comment"># zcat /proc/config.gz |grep NF_TABLES</span>
<span class="token assign-left variable">CONFIG_NF_TABLES</span><span class="token operator">=</span>y
<span class="token assign-left variable">CONFIG_NF_TABLES_INET</span><span class="token operator">=</span>y
<span class="token comment"># CONFIG_NF_TABLES_NETDEV is not set</span>
<span class="token assign-left variable">CONFIG_NF_TABLES_IPV4</span><span class="token operator">=</span>y
<span class="token comment"># CONFIG_NF_TABLES_ARP is not set</span>
<span class="token assign-left variable">CONFIG_NF_TABLES_IPV6</span><span class="token operator">=</span>y
<span class="token comment"># CONFIG_NF_TABLES_BRIDGE is not set</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>确实有些选项没打开，而且WSL的github issue里似乎也有类似的讨论：<a href="https://github.com/microsoft/WSL/issues/6655">#6655</a>、<a href="https://github.com/microsoft/WSL/issues/6044">#6044</a>、<a href="https://github.com/microsoft/WSL/issues/4165">#4165</a>。不过微软似乎也没想着解决，不过问题不大啦，也没到要自己编译内核的地步。能用就行~</p>
]]></content>
      <categories>
        <category>日常折腾</category>
      </categories>
      <tags>
        <tag>iptables</tag>
        <tag>WSL2</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>在XFS文件系统上实现针对目录的配额限制</title>
    <url>/2017/02/20/xfs-per-directory-quota/</url>
    <content><![CDATA[<p>在Linux系统上支持对用户以及对用户组设置磁盘配额的文件系统很多，常见的Ext4文件系统对配额的支持就很好，但是如果要针对某个目录进行配额限制的话，就比较难办了。<br>至少在Ext4文件系统上并没有什么好的办法，有些比较hack的办法，比如使用 <code>fuse</code> 挂载一个目录，并在这个文件系统里实现目录级别的配额，虽然可以实现，但是问题就是 <code>fuse</code> 的性能要差很多。<br>然后调查了一下XFS，XFS文件系统支持 <code>Project Quota</code> 功能，通过该特性，可以支持目录级别的配额限制。<span id="more"></span></p>
<p>要使用<code>Project Quota</code> 功能，需要在挂载时指定<code>-o prjquota</code>参数，并且这个参数还不能和<code>usrquota</code>、<code>grpquota</code>一起使用，也就是说，如果开启<code>Project Quota</code>就无法使用针对用户和用户组的配额限制。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@test ~<span class="token punctuation">]</span><span class="token comment"># mount -o prjquota /dev/sdb1 /tmp/data0</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这里把<code>/dev/sdb1</code>挂载到<code>/tmp/data0</code>。挂载之后，就可以使用<code>xfs_quota</code> 工具对该分区的quota进行操作了。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@test ~<span class="token punctuation">]</span><span class="token comment"># xfs_quota -x -c report /tmp/data0</span>
Project <span class="token function">quota</span> on /tmp/data0 <span class="token punctuation">(</span>/dev/sdb1<span class="token punctuation">)</span>
                               Blocks
Project ID       Used       Soft       Hard    Warn/Grace
---------- --------------------------------------------------
<span class="token comment">#0                  4          0          0     00 [--------]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>使用<code>-x</code>开启专家模式，<code>-c report</code>执行report命令，后面跟上挂载点，这样可以列出所有的Project ID以及对应的配额使用情况。</p>
<p>如果要限制某个目录的配额，首先需要保证该目录存在，然后调用<code>project</code>命令创建一个project，再调用<code>limit</code>命令设置配额。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@test ~<span class="token punctuation">]</span><span class="token comment"># mkdir /tmp/data0/100MB   # 创建对应文件夹</span>
<span class="token punctuation">[</span>root@test ~<span class="token punctuation">]</span><span class="token comment"># xfs_quota -x -c 'project -s -p /tmp/data0/100MB 1'   # 为文件夹分配ProjectID 1</span>
Setting up project <span class="token number">1</span> <span class="token punctuation">(</span>path /tmp/data0/100MB<span class="token punctuation">)</span><span class="token punctuation">..</span>.
Processed <span class="token number">1</span> <span class="token punctuation">(</span>/etc/projects and cmdline<span class="token punctuation">)</span> paths <span class="token keyword">for</span> project <span class="token number">1</span> with recursion depth infinite <span class="token punctuation">(</span>-1<span class="token punctuation">)</span>.
<span class="token punctuation">[</span>root@test ~<span class="token punctuation">]</span><span class="token comment"># xfs_quota -x -c 'limit -p bhard=100m 1' /tmp/data0/  # 限制Project 1的配额为100MB</span>
<span class="token punctuation">[</span>root@test ~<span class="token punctuation">]</span><span class="token comment"># xfs_quota -x -c report /tmp/data0</span>
Project <span class="token function">quota</span> on /tmp/data0 <span class="token punctuation">(</span>/dev/sdb1<span class="token punctuation">)</span>
                               Blocks
Project ID       Used       Soft       Hard    Warn/Grace
---------- --------------------------------------------------
<span class="token comment">#0                  4          0          0     00 [--------]</span>
<span class="token comment">#1                  0          0     102400     00 [--------]</span>

<span class="token punctuation">[</span>root@test ~<span class="token punctuation">]</span><span class="token comment"># dd if=/dev/zero of=/tmp/data0/100MB/test bs=1M count=101</span>
dd: error writing <span class="token string">'/tmp/data0/100MB/test'</span><span class="token builtin class-name">:</span> No space left on device  <span class="token comment"># 配额生效</span>
<span class="token number">101</span>+0 records <span class="token keyword">in</span>
<span class="token number">100</span>+0 records out
<span class="token number">104857600</span> bytes <span class="token punctuation">(</span><span class="token number">105</span> MB, <span class="token number">100</span> MiB<span class="token punctuation">)</span> copied, <span class="token number">1.01324</span> s, <span class="token number">103</span> MB/s

<span class="token punctuation">[</span>root@test ~<span class="token punctuation">]</span><span class="token comment"># xfs_quota -x -c report /tmp/data0                       </span>
Project <span class="token function">quota</span> on /tmp/data0 <span class="token punctuation">(</span>/dev/sdb1<span class="token punctuation">)</span>
                               Blocks                     
Project ID       Used       Soft       Hard    Warn/Grace     
---------- -------------------------------------------------- 
<span class="token comment">#0                  4          0          0     00 [--------]</span>
<span class="token comment">#1             102400          0     102400     00 [--------]</span>

<span class="token punctuation">[</span>root@test ~<span class="token punctuation">]</span><span class="token comment"># xfs_quota -c 'quota -p 1' /tmp/data0     #查询某个project的配额使用情况</span>
Disk quotas <span class="token keyword">for</span> Project <span class="token comment">#1 (1)</span>
Filesystem              Blocks      Quota      Limit  Warn/Time      Mounted on
/dev/loop0              <span class="token number">102400</span>          <span class="token number">0</span>     <span class="token number">102400</span>   00 <span class="token punctuation">[</span>--------<span class="token punctuation">]</span> /tmp/data0
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>看到已经设置好对应的配额。并能正常工作。其中需要注意的。使用 <code>-c quota</code> 查询某个project的配额使用情况时，只有当使用的空间超过0才会被正常显示，否则是无法通过该方式查询的。</p>
<p>上面的测试是在本地的机器上做测试的，所有的功能都能正常工作，但是在线上机器上做测试的时候，发现可以正常设置quota，并且quota也能正常生效，但是在调用 <code>report</code> 命令的时候，线上机器永远只会显示Project ID为0的<br>配额情况，而不会显示其他Project的配额，需要说明的是本地的系统是ArchLinx，使用4.9版本内核，线上系统使用CentOS 7，使用3.10的内核。因为内核版本不一样，不排除是内核版本导致的问题，但是也不能确定就是内核问题。</p>
<p>于是决定看一下<code>xfs_quota</code>这个工具的代码，看一下 <code>report</code> 这个命令是如何实现的。<code>xfs_quota</code>这个工具属于<code>xfsprogs</code>这个包，所以在<code>https://www.kernel.org/pub/linux/utils/fs/xfs/xfsprogs/xfsprogs-4.9.0.tar.xz</code>下载了4.9版本的源代码。<br>发现在 <code>quota/report.c</code> 文件中，<code>report_mount</code>函数有这样一段代码：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>flags <span class="token operator">&amp;</span> GETNEXTQUOTA_FLAG<span class="token punctuation">)</span>
		cmd <span class="token operator">=</span> XFS_GETNEXTQUOTA<span class="token punctuation">;</span>
	<span class="token keyword">else</span>
		cmd <span class="token operator">=</span> XFS_GETQUOTA<span class="token punctuation">;</span>

	<span class="token comment">/* Fall back silently if XFS_GETNEXTQUOTA fails, warn on XFS_GETQUOTA*/</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">xfsquotactl</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> dev<span class="token punctuation">,</span> type<span class="token punctuation">,</span> id<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>d<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>errno <span class="token operator">!=</span> ENOENT <span class="token operator">&amp;&amp;</span> errno <span class="token operator">!=</span> ENOSYS <span class="token operator">&amp;&amp;</span> errno <span class="token operator">!=</span> ESRCH <span class="token operator">&amp;&amp;</span>
		    cmd <span class="token operator">==</span> XFS_GETQUOTA<span class="token punctuation">)</span>
			<span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"XFS_GETQUOTA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>看到注释，尝试使用<code>XFS_GETNEXTQUOTA</code>操作失败后，自动fall back到<code>XFS_GETQUOTA</code>，会不会是这个问题？尝试一下，如果<code>XFS_GETNEXTQUOTA</code>失败，直接打印错误信息。<br>将代码修改成：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">xfsquotactl</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> dev<span class="token punctuation">,</span> type<span class="token punctuation">,</span> id<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>d<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
       <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"not support XFS_GETNEXTQUOTA\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>errno <span class="token operator">!=</span> ENOENT <span class="token operator">&amp;&amp;</span> errno <span class="token operator">!=</span> ENOSYS <span class="token operator">&amp;&amp;</span> errno <span class="token operator">!=</span> ESRCH <span class="token operator">&amp;&amp;</span>
	    cmd <span class="token operator">==</span> XFS_GETQUOTA<span class="token punctuation">)</span>
		<span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"XFS_GETQUOTA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>编译后运行一下，果然在线上机器上打印出<code>not support XFS_GETNEXTQUOTA</code>，说明CentOS 7的3.10内核不支持<code>XFS_GETNEXTQUOTA</code>这个操作。</p>
<p>然后就去翻了一下内核代码，发现了这个提交 <a href="https://git.kernel.org/cgit/linux/kernel/git/dgc/linux-xfs.git/commit/?id=296c24e26ee3af2dbfecb482e6bc9560bd34c455">wire up Q_XGETNEXTQUOTA &#x2F; get_nextdqblk</a>，这个操作应该是在Linux 4.6版本引入的，所以CentOS 7的3.10内核就不支持该操作了。<br>不过没有这个特性，也不会影响实际的Quota功能，所以线上可以正常使用。</p>
]]></content>
      <tags>
        <tag>XFS</tag>
        <tag>Directory Quota</tag>
        <tag>Project Quota</tag>
      </tags>
  </entry>
  <entry>
    <title>在KVM虚拟机中开启TSC作为时钟源</title>
    <url>/2024/12/17/enable-tsc-virtualization-on-kvm/</url>
    <content><![CDATA[<p>上一篇<a href="/2024/11/11/facts-about-x86-tsc/">x86平台的TSC（TIME-STAMP COUNTER）</a>中大概分析了一下TSC的一些相关的特性，以及TSC作为系统时钟源的一些基础条件。那么，在虚拟化的场景下，如何让Guest也用上TSC呢？这篇文章就来讨论一下TSC在KVM虚拟化中的使用。</p>
<h2 id="基础分析"><a href="#基础分析" class="headerlink" title="基础分析"></a>基础分析</h2><p>默认情况下，KVM虚拟机首选的时钟源是<code>kvm-clock</code>，即使将VM的CPU Model设置为<code>host-passthrough</code>，也不会使用TSC作为时钟源。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># lscpu|grep Flags</span>
Flags:                                fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts mmx fxsr sse sse2 ss ht syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology cpuid tsc_known_freq pni pclmulqdq dtes64 vmx ssse3 fma cx16 pdcm pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand hypervisor lahf_lm abm 3dnowprefetch cpuid_fault ssbd ibrs ibpb stibp ibrs_enhanced tpr_shadow flexpriority ept vpid ept_ad fsgsbase tsc_adjust bmi1 avx2 smep bmi2 erms invpcid avx512f avx512dq rdseed adx smap avx512ifma clflushopt clwb avx512cd sha_ni avx512bw avx512vl xsaveopt xsavec xgetbv1 xsaves wbnoinvd arat vnmi avx512vbmi umip pku ospke avx512_vbmi2 gfni vaes vpclmulqdq avx512_vnni avx512_bitalg avx512_vpopcntdq la57 rdpid fsrm md_clear flush_l1d arch_capabilities
<span class="token comment"># cat /sys/devices/system/clocksource/clocksource0/available_clocksource</span>
kvm-clock acpi_pm
<span class="token comment"># cat /sys/devices/system/clocksource/clocksource0/current_clocksource</span>
kvm-clock<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<span id="more"></span>
<p>可以看到，即使CPU有大部分TSC相关的Flags，但是<code>available_clocksource</code>里并没有TSC，current_clocksource也是kvm-clock，原因可以从dmesg里看到：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># dmesg |grep -i tsc</span>
<span class="token punctuation">[</span>    <span class="token number">0.000000</span><span class="token punctuation">]</span> tsc: Detected <span class="token number">2199.998</span> MHz processor
<span class="token punctuation">[</span>    <span class="token number">0.001000</span><span class="token punctuation">]</span> clocksource: tsc-early: mask: 0xffffffffffffffff max_cycles: 0x1fb63109b96, max_idle_ns: <span class="token number">440795265316</span> ns
<span class="token punctuation">[</span>    <span class="token number">0.001000</span><span class="token punctuation">]</span> TSC deadline timer enabled
<span class="token punctuation">[</span>    <span class="token number">0.577230</span><span class="token punctuation">]</span> clocksource: tsc: mask: 0xffffffffffffffff max_cycles: 0x1fb63109b96, max_idle_ns: <span class="token number">440795265316</span> ns
<span class="token punctuation">[</span>    <span class="token number">0.692265</span><span class="token punctuation">]</span> tsc: Marking TSC unstable due to TSC halts <span class="token keyword">in</span> idle states deeper than C2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>可以看到，在启动的时候，但是由于TSC在C2状态下会停止，所以被标记为不稳定。<br>当然，还有另外一种情况：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># cat /sys/devices/system/clocksource/clocksource0/available_clocksource</span>
kvm-clock tsc acpi_pm
<span class="token comment"># cat /sys/devices/system/clocksource/clocksource0/current_clocksource</span>
kvm-clock<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>这种情况下，虽然TSC是可用的，但是还是没有被优先使用。虽然有两种可能性，但其实根因都是一个，那就是在Guest里，CPU缺少一个关键特性，那就是上篇文章提到的<code>Invariant TSC</code>。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># cpuid -1 -l 0x80000007</span>
CPU:
   RAS Capability <span class="token punctuation">(</span>0x80000007/ebx<span class="token punctuation">)</span>:
      MCA overflow recovery support <span class="token operator">=</span> <span class="token boolean">false</span>
      SUCCOR support                <span class="token operator">=</span> <span class="token boolean">false</span>
      HWA: hardware assert support  <span class="token operator">=</span> <span class="token boolean">false</span>
      scalable MCA support          <span class="token operator">=</span> <span class="token boolean">false</span>
   Advanced Power Management Features <span class="token punctuation">(</span>0x80000007/ecx<span class="token punctuation">)</span>:
      CmpUnitPwrSampleTimeRatio <span class="token operator">=</span> 0x0 <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
   Advanced Power Management Features <span class="token punctuation">(</span>0x80000007/edx<span class="token punctuation">)</span>:
      TS: temperature sensing diode           <span class="token operator">=</span> <span class="token boolean">false</span>
      FID: frequency ID control               <span class="token operator">=</span> <span class="token boolean">false</span>
      VID: voltage ID control                 <span class="token operator">=</span> <span class="token boolean">false</span>
      TTP: thermal trip                       <span class="token operator">=</span> <span class="token boolean">false</span>
      TM: thermal monitor                     <span class="token operator">=</span> <span class="token boolean">false</span>
      STC: software thermal control           <span class="token operator">=</span> <span class="token boolean">false</span>
      <span class="token number">100</span> MHz multiplier control              <span class="token operator">=</span> <span class="token boolean">false</span>
      hardware P-State control                <span class="token operator">=</span> <span class="token boolean">false</span>
      TscInvariant                            <span class="token operator">=</span> <span class="token boolean">false</span>
      CPB: core performance boost             <span class="token operator">=</span> <span class="token boolean">false</span>
      read-only effective frequency interface <span class="token operator">=</span> <span class="token boolean">false</span>
      processor feedback interface            <span class="token operator">=</span> <span class="token boolean">false</span>
      APM power reporting                     <span class="token operator">=</span> <span class="token boolean">false</span>
      connected standby                       <span class="token operator">=</span> <span class="token boolean">false</span>
      RAPL: running average power limit       <span class="token operator">=</span> <span class="token boolean">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看到，关键的<code>TscInvariant</code>是false，在第一种情况下，<code>intel_idle</code>驱动正常加载，在<a href="https://github.com/torvalds/linux/blob/v6.12/drivers/idle/intel_idle.c#L2008">驱动代码中</a>：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> bool __init <span class="token function">intel_idle_verify_cstate</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> mwait_hint<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">int</span> mwait_cstate <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">MWAIT_HINT2CSTATE</span><span class="token punctuation">(</span>mwait_hint<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>
					MWAIT_CSTATE_MASK<span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">int</span> num_substates <span class="token operator">=</span> <span class="token punctuation">(</span>mwait_substates <span class="token operator">>></span> mwait_cstate <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>
					MWAIT_SUBSTATE_MASK<span class="token punctuation">;</span>

	<span class="token comment">/* Ignore the C-state if there are NO sub-states in CPUID for it. */</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>num_substates <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> false<span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>mwait_cstate <span class="token operator">></span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">boot_cpu_has</span><span class="token punctuation">(</span>X86_FEATURE_NONSTOP_TSC<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token function">mark_tsc_unstable</span><span class="token punctuation">(</span><span class="token string">"TSC halts in idle states deeper than C2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> true<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>会检测CPU是否有<code>X86_FEATURE_NONSTOP_TSC</code>也就是<code>TscInvariant</code>，如果没有，就会标记TSC为不稳定。那么在这种情况下，因为TSC被标记为不稳定了，所以tsc是不会出现在available_clocksource中的。</p>
<p>那第二种情况呢，TSC没有被标记为不稳定，也出现在了<code>available_clocksource</code>中，但是为什么还是没有被优先使用呢？这是因为默认情况下，kvm-clock的优先级比TSC要高，可以看到在内核中的<a href="https://github.com/torvalds/linux/blob/v6.12/arch/x86/kernel/kvmclock.c">代码</a>：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">clocksource</span> kvm_clock <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
	<span class="token punctuation">.</span>name	<span class="token operator">=</span> <span class="token string">"kvm-clock"</span><span class="token punctuation">,</span>
	<span class="token punctuation">.</span>read	<span class="token operator">=</span> kvm_clock_get_cycles<span class="token punctuation">,</span>
    <span class="token comment">// 默认情况下，kvm-clock的rating是400，这比TSC的rating 300要高，所以当两者同时存在时，系统会优先使用kvm-clock作为时钟源</span>
	<span class="token punctuation">.</span>rating	<span class="token operator">=</span> <span class="token number">400</span><span class="token punctuation">,</span>
	<span class="token punctuation">.</span>mask	<span class="token operator">=</span> <span class="token function">CLOCKSOURCE_MASK</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token punctuation">.</span>flags	<span class="token operator">=</span> CLOCK_SOURCE_IS_CONTINUOUS<span class="token punctuation">,</span>
	<span class="token punctuation">.</span>id     <span class="token operator">=</span> CSID_X86_KVM_CLK<span class="token punctuation">,</span>
	<span class="token punctuation">.</span>enable	<span class="token operator">=</span> kvm_cs_enable<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>但是在<code>kvm-clock</code>初始化的过程中，如果发现TSC满足条件的话，会主动降低自己的rating：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> __init <span class="token function">kvmclock_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">// ...</span>

	<span class="token comment">/*
	 * X86_FEATURE_NONSTOP_TSC is TSC runs at constant rate
	 * with P/T states and does not stop in deep C-states.
	 *
	 * Invariant TSC exposed by host means kvmclock is not necessary:
	 * can use TSC as clocksource.
	 *
	 */</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">boot_cpu_has</span><span class="token punctuation">(</span>X86_FEATURE_CONSTANT_TSC<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
	    <span class="token function">boot_cpu_has</span><span class="token punctuation">(</span>X86_FEATURE_NONSTOP_TSC<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
	    <span class="token operator">!</span><span class="token function">check_tsc_unstable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		kvm_clock<span class="token punctuation">.</span>rating <span class="token operator">=</span> <span class="token number">299</span><span class="token punctuation">;</span>

	<span class="token function">clocksource_register_hz</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>kvm_clock<span class="token punctuation">,</span> NSEC_PER_SEC<span class="token punctuation">)</span><span class="token punctuation">;</span>
	pv_info<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"KVM"</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看到，只要CPU支持<code>TscInvariant</code>，那么kvm-clock的rating会主动降低自己的rating到299，那么在这种情况下，TSC将会成为rating更高的时钟源，从而被优先使用。但是由于Guest里CPU不支持<code>TscInvariant</code>，所以TSC并没有被优先使用。</p>
<p>到这里可以看出，要想让Guest支持并默认使用TSC作为时钟源，<code>TscInvariant</code>这个特性是十分关键的。</p>
<h2 id="开启TscInvariant特性"><a href="#开启TscInvariant特性" class="headerlink" title="开启TscInvariant特性"></a>开启TscInvariant特性</h2><p>Qemu最早在2.1版本中已经支持了<code>TscInvariant</code>，可以看到在这个版本的<a href="https://wiki.qemu.org/ChangeLog/2.1">Changelog</a>中：</p>
<blockquote>
<p>New “invtsc” (Invariant TSC) CPU feature. When enabled, this will block migration and savevm, so it is not enabled by default on any CPU model. To enable invtsc, the migratable&#x3D;no flag (supported only by -cpu host, by now) is required. So, invtsc is available only if using: -cpu host,migratable&#x3D;no,+invtsc.</p>
</blockquote>
<p>开启方法很简单，只需要在启动时加上参数<code>-cpu host,migratable=no,+invtsc</code>即可，或者等价的，在Libvirt的XML中：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cpu</span> <span class="token attr-name">mode</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>host-passthrough<span class="token punctuation">'</span></span> <span class="token attr-name">migratable</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>off<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>feature</span> <span class="token attr-name">policy</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>require<span class="token punctuation">'</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>invtsc<span class="token punctuation">'</span></span><span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cpu</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>按文档启动一个虚拟机，然后查看对应的效果：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># lscpu |grep Fla</span>
Flags:                              fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ss ht syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon rep_good nopl xtopology nonstop_tsc cpuid tsc_known_freq pni pclmulqdq vmx ssse3 fma cx16 pdcm pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand hypervisor lahf_lm abm 3dnowprefetch cpuid_fault ssbd ibrs ibpb stibp ibrs_enhanced tpr_shadow flexpriority ept vpid ept_ad fsgsbase tsc_adjust bmi1 avx2 smep bmi2 erms invpcid avx512f avx512dq rdseed adx smap avx512ifma clflushopt clwb avx512cd sha_ni avx512bw avx512vl xsaveopt xsavec xgetbv1 xsaves wbnoinvd arat vnmi avx512vbmi umip pku ospke avx512_vbmi2 gfni vaes vpclmulqdq avx512_vnni avx512_bitalg avx512_vpopcntdq la57 rdpid fsrm md_clear arch_capabilities
<span class="token comment"># dmesg |grep tsc</span>
<span class="token punctuation">[</span>    <span class="token number">0.000005</span><span class="token punctuation">]</span> tsc: Detected <span class="token number">2199.998</span> MHz processor
<span class="token punctuation">[</span>    <span class="token number">0.112544</span><span class="token punctuation">]</span> clocksource: tsc-early: mask: 0xffffffffffffffff max_cycles: 0x1fb63109b96, max_idle_ns: <span class="token number">440795265316</span> ns
<span class="token punctuation">[</span>    <span class="token number">0.310799</span><span class="token punctuation">]</span> clocksource: tsc: mask: 0xffffffffffffffff max_cycles: 0x1fb63109b96, max_idle_ns: <span class="token number">440795265316</span> ns
<span class="token punctuation">[</span>    <span class="token number">0.310905</span><span class="token punctuation">]</span> clocksource: Switched to clocksource tsc
<span class="token comment"># cpuid -1 -l 0x80000007|grep TscInvariant</span>
      TscInvariant                            <span class="token operator">=</span> <span class="token boolean">true</span>
<span class="token comment"># cat /sys/devices/system/clocksource/clocksource0/available_clocksource</span>
tsc kvm-clock acpi_pm
<span class="token comment"># cat /sys/devices/system/clocksource/clocksource0/current_clocksource</span>
tsc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看到，TSC已经成为可用并且是默认的时钟源了。</p>
<h2 id="VM热迁移"><a href="#VM热迁移" class="headerlink" title="VM热迁移"></a>VM热迁移</h2><p>现在我们已经实现了Guest默认使用TSC作为时钟源，但是还有一个问题，从上面的changelog里其实也能看出来，那就是现在的配置，VM是没有迁移能力的，当前的配置下，如果尝试迁移VM，会出现如下错误：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Requested operation is not valid: cannot migrate domain: State blocked by non-migratable CPU device <span class="token punctuation">(</span>invtsc flag<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>为什么有了<code>TscInvariant</code>之后就无法迁移了呢？我们可以简单想象一下，一开始VM运行在Host1上，并且使用了TSC作为时钟源，这时如果VM被迁移到Host2上，但是有个问题，Host2的TSC频率和Host1不一致，那很显然此时VM读取到的TSC频率就会发生变化，这很显然并不是我们想要的结果。<br>但是，KVM是支持用户自定义VM的TSC频率的，如果我们手动设置一个TSC频率，让迁移前后，Guest看到的TSC频率保持一致，自然也就不会导致问题了，因此在Qemu 2.9版本中，也是支持了这种情况，当用户指定了TSC的频率，即使在有invtsc的情况下，依然可以支持热迁移，具体的修改可以参考<a href="https://github.com/qemu/qemu/commit/d99569d">这个commit</a>。而我们需要做的，就是在启动参数里加上<code>-cpu host,migratable=on,+invtsc,tsc-freq=XXX</code>，或者等价的，使用libvirt xml：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cpu</span> <span class="token attr-name">mode</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>host-passthrough<span class="token punctuation">'</span></span> <span class="token attr-name">migratable</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>on<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>feature</span> <span class="token attr-name">policy</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>require<span class="token punctuation">'</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>invtsc<span class="token punctuation">'</span></span><span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cpu</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>clock</span> <span class="token attr-name">offset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>utc<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>timer</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>tsc<span class="token punctuation">'</span></span> <span class="token attr-name">frequency</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>2200000000<span class="token punctuation">'</span></span><span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>clock</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="TSC虚拟化的硬件加速"><a href="#TSC虚拟化的硬件加速" class="headerlink" title="TSC虚拟化的硬件加速"></a>TSC虚拟化的硬件加速</h2><p>还剩下最后的一个问题，KVM是如何高效的实现固定Guest TSC频率的？当Guest TSC频率和Host TSC频率不一致时，这中间又是如何转换的？以及如何在迁移过程中确保TSC不会发生跳变？<br>在这种场景下，CPU支持的<code>TSC scaling</code>以及<code>TSC offseting</code>这两个特性就十分重要了，怎么理解呢，如果启用了<code>TSC offseting</code>，那么Guest在读取TSC的时候，硬件会在原始TSC值的基础上，加上一个设置的offset，这样在迁移过程中，源和目的宿主机的TSC base值不一样的情况下，只需要改一下这个offset值就好了，由于这个offset也只会在Guest读取时加上，因此也不会影响宿主机使用TSC。<br><code>TSC scaling</code>也是类似的机制，通过设置一个频率倍率，让Guest读取TSC时将CPU当前的TSC值乘以这个倍率之后返回给Geust，从而解决用户设置的TSC频率和CPU本身TSC频率不一致的问题。<br>具体的信息，可以参考一下Intel的<a href="https://cdrdv2.intel.com/v1/dl/getContent/671506">开发手册</a>：</p>
<blockquote><h4 id="26-6-5-Time-Stamp-Counter-Offset-and-Multiplier"><a href="#26-6-5-Time-Stamp-Counter-Offset-and-Multiplier" class="headerlink" title="26.6.5 Time-Stamp Counter Offset and Multiplier"></a>26.6.5 Time-Stamp Counter Offset and Multiplier</h4><p> The VM-execution control fields include a 64-bit TSC-offset field. If the “RDTSC exiting” control is 0 and the “use TSC offsetting” control is 1, this field controls executions of the RDTSC and RDTSCP instructions. It also controls executions of the RDMSR instruction that read from the IA32_TIME_STAMP_COUNTER MSR. For all of these, the value of the TSC offset is added to the value of the time-stamp counter, and the sum is returned to guest software in EDX:EAX.<br> Processors that support the 1-setting of the “use TSC scaling” control also support a 64-bit TSC-multiplier field. If this control is 1 (and the “RDTSC exiting” control is 0 and the “use TSC offsetting” control is 1), this field also affects the executions of the RDTSC, RDTSCP, and RDMSR instructions identified above. Specifically, the contents of the time-stamp counter is first multiplied by the TSC multiplier before adding the TSC offset.<br> See Chapter 26 for a detailed treatment of the behavior of RDTSC, RDTSCP, and RDMSR in VMX non-root operation.</p>
<h3 id="27-3-CHANGES-TO-INSTRUCTION-BEHAVIOR-IN-VMX-NON-ROOT-OPERATION"><a href="#27-3-CHANGES-TO-INSTRUCTION-BEHAVIOR-IN-VMX-NON-ROOT-OPERATION" class="headerlink" title="27.3 CHANGES TO INSTRUCTION BEHAVIOR IN VMX NON-ROOT OPERATION"></a>27.3 CHANGES TO INSTRUCTION BEHAVIOR IN VMX NON-ROOT OPERATION</h3><p>• RDTSC. Behavior of the RDTSC instruction is determined by the settings of the “RDTSC exiting” and “use TSC offsetting” VM-execution controls:<br>    — If both controls are 0, RDTSC operates normally.<br>    — If the “RDTSC exiting” VM-execution control is 0 and the “use TSC offsetting” VM-execution control is 1, the value returned is determined by the setting of the “use TSC scaling” VM-execution control:<br>        • If the control is 0, RDTSC loads EAX:EDX with the sum of the value of the IA32_TIME_STAMP_COUNTER MSR and the value of the TSC offset.<br>        • If the control is 1, RDTSC first computes the product of the value of the IA32_TIME_STAMP_COUNTER MSR and the value of the TSC multiplier. It then shifts the value of the product right 48 bits and loads EAX:EDX with the sum of that shifted value and the value of the TSC offset.<br>    — If the “RDTSC exiting” VM-execution control is 1, RDTSC causes a VM exit.</p>
</blockquote>

<p>可以看到在Intel平台，<code>TSC-offset</code>以及<code>TSC multiplier</code>是VMCS中的两个字段，通过修改这两个以及<code>RDTSC exiting</code>字段，可以很好的控制Guest中TSC的行为。</p>
<p>当然，AMD的实现和Intel还有一些区别，具体的也可以参考<a href="https://www.amd.com/content/dam/amd/en/documents/processor-tech-docs/programmer-references/40332.pdf">AMD的文档</a></p>
<blockquote><h3 id="15-30-5-TSC-Ratio-MSR-C000-0104h"><a href="#15-30-5-TSC-Ratio-MSR-C000-0104h" class="headerlink" title="15.30.5 TSC Ratio MSR (C000_0104h)"></a>15.30.5 TSC Ratio MSR (C000_0104h)</h3><p>Writing to the TSC Ratio MSR allows the hypervisor to control the guest’s view of the Time Stamp Counter. The contents of TSC Ratio MSR sets the value of the TSCRatio. This constant scales the timestamp value returned when the TSC is read by a guest via the RDTSC or RDTSCP instructions or when the TSC, MPERF, or MPerfReadOnly MSRs are read via the RDMSR instruction by a guest running under virtualization.</p>
<p>This facility allows the hypervisor to provide a consistent TSC, MPERF, and MPerfReadOnly rate for a guest process when moving that process between cores that have a differing P0 rate. The TSCRatio does not affect the value read from the TSC, MPERF, and MPerfReadOnly MSRs when in host mode or when virtualization is disabled. System Management Mode (SMM) code sees unscaled TSC, MPERF and MPerfReadOnly values unless the SMM code is executed within a guest container. The TSCRatio value does not affect the rate of the underlying TSC, MPERF, and MPerfReadOnly counters, nor the value that gets written to the TSC, MPERF, and MPerfReadOnly MSRs counters on a write by either the host or the guest.</p>
<p>The TSC Ratio MSR specifies the TSCRatio value as a fixed-point binary number in 8.32 format, which is composed of 8 bits of integer and 32 bits of fraction. This number is the ratio of the desired P0 frequency to be presented to the guest relative to the P0 frequency of the core (See Section 17.1, “PState Control,” on page 657). The reset value of the TSCRatio is 1.0, which sets the guest P0 frequency to match the core P0 frequency.</p>
<p>Note that:<br>        <code>TSCFreq = Core P0 frequency * TSCRatio, so TSCRatio = (Desired TSCFreq) / Core P0 frequency.</code></p>
<p>The TSC value read by the guest is computed using the TSC Ratio MSR along with the TSC_OFFSET field from the VMCB so that the actual value returned is:<br>        <code>TSC Value (in guest) = (P0 frequency * TSCRatio * t) + VMCB.TSC_OFFSET + (Last Value Written to TSC) * TSCRatio</code><br>            Where t is time since the TSC was last written via the TSC MSR (or since reset if not written)</p>
</blockquote>

<p>和Intel相比，AMD的TSC offset值是设置在VMCB中的，而TSC Scaling的倍率是基于MSR来实现的。实现的逻辑有区别并不重要，毕竟KVM会隔离掉不同平台的实现细节。重要的是，软硬件的协同配合，使得在虚拟化场景下，TSC可以作为一个高效的时钟源被VM使用。</p>
<h2 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h2><p>最后来看看相比于<code>kvm-clock</code>时钟源，使用<code>tsc</code>作为时钟源能够带来多大的性能提升吧。从红帽找到了一个测试时钟性能的<a href="https://docs.redhat.com/en/documentation/red_hat_enterprise_linux_for_real_time/7/html/reference_guide/sect-posix_clocks">例子</a>：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;time.h></span></span>

<span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> rc<span class="token punctuation">;</span>
	<span class="token keyword">long</span> i<span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">timespec</span> ts<span class="token punctuation">;</span>

	<span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">500000000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		rc <span class="token operator">=</span> <span class="token function">clock_gettime</span><span class="token punctuation">(</span>CLOCK_MONOTONIC<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ts<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>编译运行：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># cat /sys/devices/system/clocksource/clocksource0/current_clocksource</span>
tsc
<span class="token comment"># time taskset -c 6 ./clock_timing</span>

real    0m10.858s
user    0m10.821s
sys     0m0.000s
<span class="token comment"># echo kvm-clock |sudo tee /sys/devices/system/clocksource/clocksource0/current_clocksource</span>
kvm-clock
<span class="token comment"># cat /sys/devices/system/clocksource/clocksource0/current_clocksource</span>
kvm-clock
<span class="token comment"># time taskset -c 6 ./clock_timing</span>

real    0m13.530s
user    0m13.482s
sys     0m0.002s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>同样是获取<code>500000000</code>次时间，<code>tsc</code>需要<code>10.821s</code>，而<code>kvm-clock</code>需要<code>13.482s</code>，差不多提升了20%，算是相当大的提升幅度了。</p>
]]></content>
      <categories>
        <category>虚拟化</category>
      </categories>
      <tags>
        <tag>TSC Virtualization</tag>
        <tag>TSC直通</tag>
      </tags>
  </entry>
</search>
