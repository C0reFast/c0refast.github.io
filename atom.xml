<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>C0reFast记事本</title>
  <icon>https://www.gravatar.com/avatar/7b99452f171f3120130de41cdc5b9541</icon>
  <subtitle>to inspire confidence in somebody.</subtitle>
  <link href="https://www.ichenfu.com/atom.xml" rel="self"/>
  
  <link href="https://www.ichenfu.com/"/>
  <updated>2025-08-25T08:39:12.872Z</updated>
  <id>https://www.ichenfu.com/</id>
  
  <author>
    <name>陈孚</name>
    <email>topcenfu[at]qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>一个Solidigm P41 Plus的冷数据问题</title>
    <link href="https://www.ichenfu.com/2025/08/25/solidigm-p41-plus-cold-data-problem/"/>
    <id>https://www.ichenfu.com/2025/08/25/solidigm-p41-plus-cold-data-problem/</id>
    <published>2025-08-25T11:35:02.000Z</published>
    <updated>2025-08-25T08:39:12.872Z</updated>
    
    <content type="html"><![CDATA[<p>现在用的笔记本电脑是公司去年发的HP EliteBook 640 G10，机器自带了一块Solidigm的SSD，从型号上应该就是P41 Plus的OEM版本，最近使用中发现机器越来越慢了，一开始以为是内存用的多，直到有一次重启发现了一些异常，这机器重启竟然需要20分钟的时间！重启进入桌面之后，系统也非常卡顿，完全没办法使用，好不容易打开任务管理器，发现磁盘一直100%占用，响应时间已经飙上了天。很显然，磁盘遇到问题了。</p><span id="more"></span><h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>由于和磁盘相关，赶紧用<a href="https://crystalmark.info/en/software/crystaldiskinfo/">CrystalDiskInfo</a>看看是不是出现<code>0E</code>错误了，之前三星还有其他品牌的SSD，出现0E问题的案例不少，要是有问题，我就赶紧备份数据准备报修换盘了。</p><p>但是看了SMART信息，发现并没有什么异常，所有的数值都在正常范围内，连警告都没有，写入量也很低，不到30T：<br><img src="/images/solidigm-p41-plus/cdi-info.png"></p><p>从数据上看一切正常，但实际表现呢？肯定还是有问题的，这时候开始怀疑是有些冷数据的问题，毕竟这块盘一开始使用的时候是没有问题的，现在使用了将近1年时间，刚好又是QLC颗粒，如果颗粒漏电导致需要ECC纠错的情况还是有可能的。</p><h2 id="拷贝测试"><a href="#拷贝测试" class="headerlink" title="拷贝测试"></a>拷贝测试</h2><p>尝试找了一个大文件，进行拷贝测试，看看实际的读写速度如何。<br><img src="/images/solidigm-p41-plus/copy-file.png"><br><img src="/images/solidigm-p41-plus/copy-perfermance.png"></p><p>看起来确实有点问题，一方面在拷贝过程中，速度会降到十几M&#x2F;s，另外一方面，从任务管理器看磁盘的性能数据，延迟已经接近1s了，这个性能数据对于一块PCIe 4.0的NVMe SSD来说，实在是太差了。现在的性能基本就是一个大号U盘的水平了。</p><h2 id="底层读取测试"><a href="#底层读取测试" class="headerlink" title="底层读取测试"></a>底层读取测试</h2><p>感觉已经找到了问题，但还是有点不放心，比较拷贝文件这个动作，和文件系统，还有cache以及磁盘写入性能等等都相关，有没有什么工具可以绕过文件系统，直接读原始磁盘，并且不写入磁盘呢？这样可以更好的反映SSD本身的性能了，Linux下有个非常好用的工具<code>fio</code>，专门用于做类似的事情，不过使用起来有点麻烦，于是又想到另外一个工具：<code>dd</code>。相比<code>fio</code>来说，<code>dd</code>本身也不是一个磁盘测试工具，只能进行简单的读写操作，功能上也差距很大，但架不住简单啊，针对当前的需求，也够用了。</p><p>于是就找到了一个<a href="http://www.chrysocome.net/dd">DD for Windows</a>，使用管理员权限的Powershell执行一下：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">PS</span> C:\WINDOWS\system32> dd<span class="token punctuation">.</span>exe <span class="token keyword">if</span>=\\<span class="token punctuation">.</span>\PhysicalDrive0 of=<span class="token operator">/</span>dev/null bs=1M <span class="token operator">--</span>progressrawwrite dd <span class="token keyword">for</span> windows version 0<span class="token punctuation">.</span>6beta3<span class="token punctuation">.</span>Written by John Newbigin &lt;jn@it<span class="token punctuation">.</span>swin<span class="token punctuation">.</span>edu<span class="token punctuation">.</span>au>This program is covered by terms of the GPL Version 2<span class="token punctuation">.</span>202<span class="token punctuation">,</span>227M<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行过程中再看看任务管理器的性能数据：<br><img src="/images/solidigm-p41-plus/dd-perfermance.png"></p><p>可以看到在纯读的场景，性能依然是非常不稳定的，一方面读取速度和过山车一样，忽高忽低，另外一方面，延迟也是接近100ms，虽然相比拷贝文件时的延迟好一点，但依然不是一块NVMe的正常性能。</p><h2 id="网络案例和报修"><a href="#网络案例和报修" class="headerlink" title="网络案例和报修"></a>网络案例和报修</h2><p>又尝试搜索了一下网络上的案例，也许是这块盘用的人确实不多的原因，几乎没找到有人明确反馈类似的问题，最后找到一个帖子：<a href="https://post.smzdm.com/p/a0x62gez/">NVMe P41PL NVMe SOLIDIGM 512GB也有“SSD冷数据门”问题</a>。这个帖子里说的是DELL的机器，也是<code>P41 Plus</code>这块盘，只不过是DELL的OEM版本。不过问题确实也是类似的，开机慢，读取慢。概率也不是很高，大概也就5%的样子。看来不是我一个人的问题啊，既然这样，还是尝试找下机器的售后吧，希望能给我换一块盘才是最好的。<br>可惜经过了一番和HP售后的强力对线，HP的售后依然没办法以性能相关的问题给我换盘，只能当磁盘出现0E或者其他告警时，才能走换盘流程😂。</p><h2 id="DiskFresh"><a href="#DiskFresh" class="headerlink" title="DiskFresh"></a>DiskFresh</h2><p>既然售后不给换盘，我也没什么更好的办法了，只能给HP打差评了。<br>好在上面的帖子里说了一个工具<a href="https://www.puransoftware.com/DiskFresh.html">DiskFresh</a>，可以用来复写一下磁盘。理论上如果因为NAND漏电，冷数据会出现读取问题，但是对于新写入的数据，这个问题不应该存在，<code>DiskFresh</code>就是这样一个工具，它可以读取所有扇区的数据，并且写回源扇区，将“老”数据变成“新”数据，从而解决类似冷数据的问题。对于SSD来说，即使写入时扇区号是一样的，但是由于磨损均衡等等算法，新写的数据极大概率已经不在原始的NAND块上了。应该可以解决遇到的问题。</p><p>虽然这个工具是2013年的，距离现在已经十几年了，不过值得一试！使用也非常简单，直接选择全盘Refresh就行了：</p><p><img src="/images/solidigm-p41-plus/diskfresh.png"></p><p>经过漫长的时间（真的很慢😫），终于完成重写入：</p><p><img src="/images/solidigm-p41-plus/good-perfermance.png"></p><p>再尝试dd一下，发现读取速度立马接近1G&#x2F;s了。延迟也降到了900us，性能恢复了。只是不知道这个性能能够坚持多久，毕竟本质上还是由于NAND体质问题影响了数据，重新写入的数据很快又会经历漏电变冷的过程，只能到时再继续刷新了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;现在用的笔记本电脑是公司去年发的HP EliteBook 640 G10，机器自带了一块Solidigm的SSD，从型号上应该就是P41 Plus的OEM版本，最近使用中发现机器越来越慢了，一开始以为是内存用的多，直到有一次重启发现了一些异常，这机器重启竟然需要20分钟的时间！重启进入桌面之后，系统也非常卡顿，完全没办法使用，好不容易打开任务管理器，发现磁盘一直100%占用，响应时间已经飙上了天。很显然，磁盘遇到问题了。&lt;/p&gt;</summary>
    
    
    
    <category term="日常折腾" scheme="https://www.ichenfu.com/categories/%E6%97%A5%E5%B8%B8%E6%8A%98%E8%85%BE/"/>
    
    
    <category term="QLC" scheme="https://www.ichenfu.com/tags/QLC/"/>
    
    <category term="冷数据" scheme="https://www.ichenfu.com/tags/%E5%86%B7%E6%95%B0%E6%8D%AE/"/>
    
    <category term="DiskFresh" scheme="https://www.ichenfu.com/tags/DiskFresh/"/>
    
  </entry>
  
  <entry>
    <title>测试ARP/ND双发效果的小工具</title>
    <link href="https://www.ichenfu.com/2025/08/14/testing-broadcast-arp-and-nd/"/>
    <id>https://www.ichenfu.com/2025/08/14/testing-broadcast-arp-and-nd/</id>
    <published>2025-08-14T12:30:24.000Z</published>
    <updated>2025-08-25T08:39:12.868Z</updated>
    
    <content type="html"><![CDATA[<p>在<a href="/2025/07/18/broadcast-arp-and-nd-on-hw-offloaded-bonding/">上一篇Blog</a>里说了一下关于ARP&#x2F;ND双发的实现，但是还遗留了一个小问题，就是如何测试最终的效果，毕竟正常情况下，ARP还有ND相关的报文，都是由内核协议栈根据需要发出的，不太稳定，总不能一直抓包等着内核发包吧？所以还是需要借助一些工具来实现。</p><span id="more"></span><h2 id="ARP双发检测"><a href="#ARP双发检测" class="headerlink" title="ARP双发检测"></a>ARP双发检测</h2><p>ARP双发的测试还是比较简单的，毕竟大家都知道<code>arping</code>这个工具，可以用来发送ARP请求并接收ARP应答。使用起来也是非常顺畅的：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># arping 192.68.100.1 -c 2</span>ARPING <span class="token number">192.68</span>.100.1 from <span class="token number">192.68</span>.100.21 eth0Unicast reply from <span class="token number">192.68</span>.100.1 <span class="token punctuation">[</span>00:11:22:33:44:01<span class="token punctuation">]</span>  <span class="token number">1</span>.315msUnicast reply from <span class="token number">192.68</span>.100.1 <span class="token punctuation">[</span>00:11:22:33:44:01<span class="token punctuation">]</span>  <span class="token number">1</span>.355msUnicast reply from <span class="token number">192.68</span>.100.1 <span class="token punctuation">[</span>00:11:22:33:44:01<span class="token punctuation">]</span>  <span class="token number">1</span>.112msUnicast reply from <span class="token number">192.68</span>.100.1 <span class="token punctuation">[</span>00:11:22:33:44:01<span class="token punctuation">]</span>  <span class="token number">1</span>.233msSent <span class="token number">2</span> probes <span class="token punctuation">(</span><span class="token number">1</span> broadcast<span class="token punctuation">(</span>s<span class="token punctuation">))</span>Received <span class="token number">4</span> response<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以发现，<code>arping</code>工具发送了2个ARP请求，成功地收到了4次ARP应答，这表明ARP双发功能正常。两次请求中，第一次是广播请求，可以模拟第一次学习MAC地址时的场景，第二次是单播请求，可以模拟已有MAC后的确认场景，尝试抓包，也是可以看到结果是符合预期的：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># sudo tcpdump -i eth0 arp -nnn</span>dropped privs to tcpdumptcpdump: verbose output suppressed, use -v<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">..</span>. <span class="token keyword">for</span> full protocol decodelistening on eth0, link-type EN10MB <span class="token punctuation">(</span>Ethernet<span class="token punctuation">)</span>, snapshot length <span class="token number">262144</span> bytes<span class="token number">20</span>:16:03.982709 ARP, Request who-has <span class="token number">192.68</span>.100.1 <span class="token punctuation">(</span>ff:ff:ff:ff:ff:ff<span class="token punctuation">)</span> tell <span class="token number">192.68</span>.100.21, length <span class="token number">28</span><span class="token number">20</span>:16:03.983231 ARP, Reply <span class="token number">192.68</span>.100.1 is-at 00:11:22:33:44:01, length <span class="token number">46</span><span class="token number">20</span>:16:03.983298 ARP, Reply <span class="token number">192.68</span>.100.1 is-at 00:11:22:33:44:01, length <span class="token number">46</span><span class="token number">20</span>:16:04.982738 ARP, Request who-has <span class="token number">192.68</span>.100.1 <span class="token punctuation">(</span>00:11:22:33:44:01<span class="token punctuation">)</span> tell <span class="token number">192.68</span>.100.21, length <span class="token number">28</span><span class="token number">20</span>:16:04.983343 ARP, Reply <span class="token number">192.68</span>.100.1 is-at 00:11:22:33:44:01, length <span class="token number">46</span><span class="token number">20</span>:16:04.983412 ARP, Reply <span class="token number">192.68</span>.100.1 is-at 00:11:22:33:44:01, length <span class="token number">46</span><span class="token number">6</span> packets captured<span class="token number">6</span> packets received by filter<span class="token number">0</span> packets dropped by kernel<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ND双发检测"><a href="#ND双发检测" class="headerlink" title="ND双发检测"></a>ND双发检测</h2><p>接下来轮到IPv6的ND报文了，这里介绍一个工具包<a href="https://www.remlab.net/ndisc6/">NDisc6</a>，可以部分替代<code>arping</code>的功能，为什么是部分替代呢？因为和<code>arping</code>不同，<code>ndisc6</code>不支持发送单播NS报文，只支持发送组播报文，这样就只能模拟第一次学习的情况，没办法模拟后续了，我们先用这个工具模拟一下组播的场景：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># sudo ndisc6 2408:fffe::1 eth0 -m</span>Soliciting <span class="token number">2408</span>:fffe::1 <span class="token punctuation">(</span><span class="token number">2408</span>:fffe::1<span class="token punctuation">)</span> on eth0<span class="token punctuation">..</span>.Target link-layer address: 00:10:00:54:00:24 from <span class="token number">2408</span>:fffe::1Target link-layer address: 00:10:00:54:00:24 from <span class="token number">2408</span>:fffe::1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到发送一个NS，收到两个NA，说明ND双发功能也是正常的。尝试抓包，也是可以看到结果是符合预期的：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># sudo tcpdump -i eth0 icmp6 -nnn</span>dropped privs to tcpdumptcpdump: verbose output suppressed, use -v<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">..</span>. <span class="token keyword">for</span> full protocol decodelistening on eth0, link-type EN10MB <span class="token punctuation">(</span>Ethernet<span class="token punctuation">)</span>, snapshot length <span class="token number">262144</span> bytes<span class="token number">20</span>:18:18.959590 IP6 fe80::f816:3eff:fefa:556f <span class="token operator">></span> ff02::1:ff00:1: ICMP6, neighbor solicitation, <span class="token function">who</span> has <span class="token number">2408</span>:fffe::1, length <span class="token number">32</span><span class="token number">20</span>:18:18.961594 IP6 <span class="token number">2408</span>:fffe::1 <span class="token operator">></span> fe80::f816:3eff:fefa:556f: ICMP6, neighbor advertisement, tgt is <span class="token number">2408</span>:fffe::1, length <span class="token number">32</span><span class="token number">20</span>:18:18.962687 IP6 <span class="token number">2408</span>:fffe::1 <span class="token operator">></span> fe80::f816:3eff:fefa:556f: ICMP6, neighbor advertisement, tgt is <span class="token number">2408</span>:fffe::1, length <span class="token number">32</span><span class="token number">3</span> packets captured<span class="token number">3</span> packets received by filter<span class="token number">0</span> packets dropped by kernel<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那单播NS报文怎么办呢？因为没找到合适的工具，因此还是借助AI自己实现了一个脚本来完成这个任务：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python3</span><span class="token triple-quoted-string string">"""IPv6邻居发现工具 - 类似arping的NS/NA实现使用Scapy发送和接收ICMPv6邻居发现报文"""</span><span class="token keyword">import</span> argparse<span class="token keyword">import</span> time<span class="token keyword">from</span> scapy<span class="token punctuation">.</span><span class="token builtin">all</span> <span class="token keyword">import</span> Ether<span class="token punctuation">,</span> IPv6<span class="token punctuation">,</span> ICMPv6ND_NS<span class="token punctuation">,</span> ICMPv6ND_NA<span class="token punctuation">,</span> srp<span class="token punctuation">,</span> get_if_list<span class="token keyword">def</span> <span class="token function">send_ns</span><span class="token punctuation">(</span>target_ip<span class="token punctuation">,</span> iface<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> retry<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> verbose<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> dst_mac<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    发送一个NS报文并等待所有NA响应    :param target_ip: 目标IPv6地址    :param iface: 网络接口名称    :param timeout: 超时时间(秒)    :param retry: 重试次数(仅在没有收到任何响应时重试)    :param verbose: 详细输出模式    :param dst_mac: 目标MAC地址(单播模式)    :return: 响应列表 [(src_ip, src_mac), ...] 或 []    """</span>    <span class="token keyword">if</span> iface <span class="token keyword">and</span> iface <span class="token keyword">not</span> <span class="token keyword">in</span> get_if_list<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"警告: 接口 </span><span class="token interpolation"><span class="token punctuation">&#123;</span>iface<span class="token punctuation">&#125;</span></span><span class="token string"> 不存在"</span></span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    dst_mac <span class="token operator">=</span> dst_mac <span class="token keyword">if</span> dst_mac <span class="token keyword">else</span> <span class="token string">"33:33:ff:00:00:00"</span>    ns_pkt <span class="token operator">=</span> Ether<span class="token punctuation">(</span>dst<span class="token operator">=</span>dst_mac<span class="token punctuation">)</span> <span class="token operator">/</span> \             IPv6<span class="token punctuation">(</span>dst<span class="token operator">=</span>target_ip<span class="token punctuation">)</span> <span class="token operator">/</span> \             ICMPv6ND_NS<span class="token punctuation">(</span>tgt<span class="token operator">=</span>target_ip<span class="token punctuation">)</span>        <span class="token keyword">if</span> verbose<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"发送NS报文:"</span><span class="token punctuation">)</span>        ns_pkt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>    all_responses <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> attempt <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>retry<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> verbose<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"尝试 </span><span class="token interpolation"><span class="token punctuation">&#123;</span>attempt<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">&#125;</span></span><span class="token string">/</span><span class="token interpolation"><span class="token punctuation">&#123;</span>retry<span class="token punctuation">&#125;</span></span><span class="token string">..."</span></span><span class="token punctuation">)</span>                <span class="token comment"># 发送一个NS报文并收集所有响应，在超时时间内持续监听</span>        answered<span class="token punctuation">,</span> unanswered <span class="token operator">=</span> srp<span class="token punctuation">(</span>ns_pkt<span class="token punctuation">,</span> iface<span class="token operator">=</span>iface<span class="token punctuation">,</span> timeout<span class="token operator">=</span>timeout<span class="token punctuation">,</span> verbose<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> multi<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>                <span class="token comment"># 处理所有收到的响应</span>        <span class="token keyword">for</span> sent<span class="token punctuation">,</span> received <span class="token keyword">in</span> answered<span class="token punctuation">:</span>            <span class="token keyword">if</span> received<span class="token punctuation">.</span>haslayer<span class="token punctuation">(</span>ICMPv6ND_NA<span class="token punctuation">)</span><span class="token punctuation">:</span>                src_ip <span class="token operator">=</span> received<span class="token punctuation">[</span>IPv6<span class="token punctuation">]</span><span class="token punctuation">.</span>src                src_mac <span class="token operator">=</span> received<span class="token punctuation">[</span>Ether<span class="token punctuation">]</span><span class="token punctuation">.</span>src                response_info <span class="token operator">=</span> <span class="token punctuation">(</span>src_ip<span class="token punctuation">,</span> src_mac<span class="token punctuation">)</span>                all_responses<span class="token punctuation">.</span>append<span class="token punctuation">(</span>response_info<span class="token punctuation">)</span>                <span class="token keyword">if</span> verbose<span class="token punctuation">:</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"收到NA响应 #</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token builtin">len</span><span class="token punctuation">(</span>all_responses<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">:"</span></span><span class="token punctuation">)</span>                    received<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment"># 如果收到了响应，就不再重试</span>        <span class="token keyword">if</span> all_responses<span class="token punctuation">:</span>            <span class="token keyword">if</span> verbose<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"收到 </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token builtin">len</span><span class="token punctuation">(</span>all_responses<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string"> 个NA响应，停止重试"</span></span><span class="token punctuation">)</span>            <span class="token keyword">break</span>        <span class="token keyword">elif</span> verbose<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"本轮未收到响应"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> all_responses<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    parser <span class="token operator">=</span> argparse<span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span>description<span class="token operator">=</span><span class="token string">"IPv6邻居发现工具"</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"target"</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">"目标IPv6地址"</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"-i"</span><span class="token punctuation">,</span> <span class="token string">"--iface"</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">"网络接口名称"</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"-t"</span><span class="token punctuation">,</span> <span class="token string">"--timeout"</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>                       <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">"超时时间(秒)"</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"-c"</span><span class="token punctuation">,</span> <span class="token string">"--count"</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>                       <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">"重试次数(默认1次，仅在无响应时重试)"</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"-v"</span><span class="token punctuation">,</span> <span class="token string">"--verbose"</span><span class="token punctuation">,</span> action<span class="token operator">=</span><span class="token string">"store_true"</span><span class="token punctuation">,</span>                       <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">"详细输出模式"</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"-m"</span><span class="token punctuation">,</span> <span class="token string">"--mac"</span><span class="token punctuation">,</span>                       <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">"指定目标MAC地址(单播模式)"</span><span class="token punctuation">)</span>    args <span class="token operator">=</span> parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> args<span class="token punctuation">.</span>verbose<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"可用网络接口:"</span><span class="token punctuation">,</span> <span class="token string">", "</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>get_if_list<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    results <span class="token operator">=</span> send_ns<span class="token punctuation">(</span>args<span class="token punctuation">.</span>target<span class="token punctuation">,</span> args<span class="token punctuation">.</span>iface<span class="token punctuation">,</span> args<span class="token punctuation">.</span>timeout<span class="token punctuation">,</span>                     args<span class="token punctuation">.</span>count<span class="token punctuation">,</span> args<span class="token punctuation">.</span>verbose<span class="token punctuation">,</span> args<span class="token punctuation">.</span>mac<span class="token punctuation">)</span>    <span class="token keyword">if</span> results<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"\n收到 </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token builtin">len</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string"> 个NA响应:"</span></span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i<span class="token punctuation">,</span> <span class="token punctuation">(</span>ip<span class="token punctuation">,</span> mac<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>results<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"  </span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">. </span><span class="token interpolation"><span class="token punctuation">&#123;</span>args<span class="token punctuation">.</span>target<span class="token punctuation">&#125;</span></span><span class="token string"> 的MAC地址是 </span><span class="token interpolation"><span class="token punctuation">&#123;</span>mac<span class="token punctuation">&#125;</span></span><span class="token string"> (来自 </span><span class="token interpolation"><span class="token punctuation">&#123;</span>ip<span class="token punctuation">&#125;</span></span><span class="token string">)"</span></span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"\n无法获取 </span><span class="token interpolation"><span class="token punctuation">&#123;</span>args<span class="token punctuation">.</span>target<span class="token punctuation">&#125;</span></span><span class="token string"> 的MAC地址"</span></span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>借助这个脚本，就可以实现发送单播NS，并收集所有的ND返回：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># sudo python3 ip6ndisc.py 2408:fffe::1 -m 00:10:00:54:00:24</span>收到 <span class="token number">2</span> 个NA响应:  <span class="token number">1</span>. <span class="token number">2408</span>:fffe::1 的MAC地址是 00:10:00:54:00:24 <span class="token punctuation">(</span>来自 <span class="token number">2408</span>:fffe::1<span class="token punctuation">)</span>  <span class="token number">2</span>. <span class="token number">2408</span>:fffe::1 的MAC地址是 00:10:00:54:00:24 <span class="token punctuation">(</span>来自 <span class="token number">2408</span>:fffe::1<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>抓包也符合预期：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># sudo tcpdump -i eth0 icmp6 -nnn</span>dropped privs to tcpdumptcpdump: verbose output suppressed, use -v<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">..</span>. <span class="token keyword">for</span> full protocol decodelistening on eth0, link-type EN10MB <span class="token punctuation">(</span>Ethernet<span class="token punctuation">)</span>, snapshot length <span class="token number">262144</span> bytes<span class="token number">14</span>:27:25.782766 IP6 <span class="token number">2408</span>:fffe::21:1 <span class="token operator">></span> <span class="token number">2408</span>:fffe::1: ICMP6, neighbor solicitation, <span class="token function">who</span> has <span class="token number">2408</span>:fffe::1, length <span class="token number">24</span><span class="token number">14</span>:27:25.784537 IP6 <span class="token number">2408</span>:fffe::1 <span class="token operator">></span> <span class="token number">2408</span>:fffe::21:1: ICMP6, neighbor advertisement, tgt is <span class="token number">2408</span>:fffe::1, length <span class="token number">32</span><span class="token number">14</span>:27:25.784739 IP6 <span class="token number">2408</span>:fffe::1 <span class="token operator">></span> <span class="token number">2408</span>:fffe::21:1: ICMP6, neighbor advertisement, tgt is <span class="token number">2408</span>:fffe::1, length <span class="token number">32</span><span class="token number">3</span> packets captured<span class="token number">3</span> packets received by filter<span class="token number">0</span> packets dropped by kernel<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;在&lt;a href=&quot;/2025/07/18/broadcast-arp-and-nd-on-hw-offloaded-bonding/&quot;&gt;上一篇Blog&lt;/a&gt;里说了一下关于ARP&amp;#x2F;ND双发的实现，但是还遗留了一个小问题，就是如何测试最终的效果，毕竟正常情况下，ARP还有ND相关的报文，都是由内核协议栈根据需要发出的，不太稳定，总不能一直抓包等着内核发包吧？所以还是需要借助一些工具来实现。&lt;/p&gt;</summary>
    
    
    
    <category term="虚拟化" scheme="https://www.ichenfu.com/categories/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
    
    <category term="ARP双发" scheme="https://www.ichenfu.com/tags/ARP%E5%8F%8C%E5%8F%91/"/>
    
    <category term="单播ND报文" scheme="https://www.ichenfu.com/tags/%E5%8D%95%E6%92%ADND%E6%8A%A5%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>硬件Bonding卸载场景下的ARP/ND双发</title>
    <link href="https://www.ichenfu.com/2025/07/18/broadcast-arp-and-nd-on-hw-offloaded-bonding/"/>
    <id>https://www.ichenfu.com/2025/07/18/broadcast-arp-and-nd-on-hw-offloaded-bonding/</id>
    <published>2025-07-18T11:58:08.000Z</published>
    <updated>2025-08-14T02:29:58.360Z</updated>
    
    <content type="html"><![CDATA[<p>大约在2019年的时候，公司的服务器接入网络架构开始向双上联去堆叠方向迁移，相比于之前老的接入网络而言，新的网络架构在各方面的提升都非常明显，尤其是在带宽利用率和冗余性方面，关于网络架构的部分，这里暂时就不多做介绍了，具体的可以参考京东以及H3C的相关分享和文档：<a href="https://zhuanlan.zhihu.com/p/62024674">异构去堆叠 | 一种完美提升网络高可用SLA的方案</a>，<a href="https://www.h3c.com/cn/Service/Document_Software/Document_Center/Home/Switches/00-Public/Configure/Practice/H3C_S_MLAG-BP_Long/">H3C数据中心交换机S-MLAG最佳实践</a>。</p><p>在新的网络架构中，我们的方案是通过ARP转主机路由方式来实现网络层面的负载均衡和高可用的，这个方案有个依赖，需要主机实现ARP&#x2F;ND相关协议包的双发。</p><span id="more"></span><h1 id="Bonding的双发问题"><a href="#Bonding的双发问题" class="headerlink" title="Bonding的双发问题"></a>Bonding的双发问题</h1><p>为什么会有这个双发的需求呢？因为在我们选择的去堆叠方案中，主机的网卡是通过Bonding的方式来实现双上联的，要想实现对负载均衡和高可用的同时支持，Bonding的流量分载只能是基于hash的模式，这会带来一个问题：对于Host侧的ARP请求&#x2F;响应报文，只会发送给某一台交换机，假设Host连接了LeafA和leafB两台交换机，当LeafA交换机的ARP表项即将过期，需要发送ARP请求探测Host状态时，Host回复的响应报文可能因为hash原因回复给LeafB了，这样一来，LeafA就无法及时获取到Host的最新状态信息，从而影响到整个网络的稳定性和可靠性。</p><p>因为上面的这个原因，Host侧内核的Bonding模块必须作出相应的调整，将所有ARP的请求和响应报文，都进行复制，并在所有的子接口上进行发送。当然实现的方法并不麻烦，具体的可以参考龙蜥社区的实现<a href="https://gitee.com/anolis/cloud-kernel/commit/b90e28f7170e">anolis: bond: broadcast ARP or ND messages to all slaves</a>。</p><p>至此就基本解决了物理服务器层面对新接入网络架构融合的问题。</p><h1 id="虚拟化的网卡Bonding"><a href="#虚拟化的网卡Bonding" class="headerlink" title="虚拟化的网卡Bonding"></a>虚拟化的网卡Bonding</h1><p>作为第一个接入新网络架构的虚拟化平台，只解决物理服务器层面的问题还不够，因为虚拟化的核心产品：VM的网络也需要解决。对于虚拟化业务的网卡，选择的都是Mellanox（现NVIDIA）的产品，不得不说，Mellanox的网卡对于虚拟化的场景来说，还是非常友好的，相比于普通的网卡而言，支持很多虚拟化相关的Offload特性，完全可以称得上是SmartNIC。</p><p>对于Mellanox的网卡，有个比较重要的特性是<a href="https://docs.nvidia.com/networking/display/mlnxofedv24102180lts/ovs+offload+using+asap%C2%B2+direct">OVS Offload Using ASAP² Direct</a>，基于这个特性，可以将虚拟化网络常见的封装等等都卸载到硬件，极大的提升网络的性能，这个特性里还有一个功能<a href="https://docs.nvidia.com/networking/display/mlnxofedv24102180lts/ovs+offload+using+asap%C2%B2+direct#src-3658395192_safe-id-T1ZTT2ZmbG9hZFVzaW5nQVNBUMKyRGlyZWN0LVNSLUlPVlZGTEFH">SR-IOV VF LAG</a>，可以将Bonding的功能卸载到硬件，这两个特性，就是虚拟化平台最需要的能力。</p><p>对于大部分公有云的场景，存在VPC的概念，不同用户的VM之间有租户的隔离，VM与VM之间的通信，会通过overlay网络通信，针对这种场景，ASAP²+SR-IOV VF LAG的功能可以很好的满足需求。VM的流量通过硬件卸载，Bonding通过硬件卸载，VM感知不到Bonding的存在，但是却可以享受到Bonding带来的高可用和负载均衡。与此同时，因为VM所有的流量都会额外封装一层隧道，所以对于交换机来说，只能看到宿主机的隧道端点IP地址，因此，对于类似的场景来说，只需要针对宿主机的IP进行ARP&#x2F;ND双发即可。而这个需求，通过上面的patch就已经可以实现了。</p><h1 id="Underlay网络的ARP双发"><a href="#Underlay网络的ARP双发" class="headerlink" title="Underlay网络的ARP双发"></a>Underlay网络的ARP双发</h1><p>我们的场景和公有云有些不同，因为我们是一个私有云，并没有VPC的概念，所有的VM也是直接通过underlay网络通信的，这个网络模型，其实有点像早期公有云的经典网络。相比overlay网络而言，underlay网络的最大好处就是简单，所有VM的流量，只需要额外打上一个VLAN TAG即可，整个网络是扁平的，可以规避很多overlay的问题。并且作为一个私有云，所有的用户就是我们自己，也没有像公有云那样的租户隔离需求，因此使用这个模型是很自然的。</p><p>但是这也带来了一个原本不存在的问题：因为VM的流量是直接通过underlay网络通信的，所以VM的ARP&#x2F;ND请求也需要“双发”了。一个可行的办法是把网络的结构暴露给VM，在VM里也打上bonding，然后就可以复用上面的patch，和物理服务器一样实现ARP&#x2F;ND双发。很显然这不是想要的，既然提供了VM服务，就应该给用户更好的体验，尽可能隔离掉底层的这些细节。</p><p>这时候SR-IOV VF LAG的功能就派上用场了，SR-IOV VF LAG的功能可以将Bonding的功能卸载到硬件，这样一来，VM就感知不到Bonding的存在了。但是用上VF LAG之后，VM的流量都会被卸载到硬件里，就无法直接在网络层面实现ARP&#x2F;ND双发了，因为硬件卸载的Bonding并不支持ARP&#x2F;ND双发。当然修改网卡的固件也许能够解决这个问题，但定制固件的方案在时间和成本上都不太可行。</p><p>我们先看看在VF LAG的场景下，网卡硬件是如何转发流量的。在ASAP²的场景下，网卡工作在一个叫做“switchdev”的模式下。在这个模式下，网卡化身为一个交换机，这个交换机，可以根据“流表”来转发流量。这个流表是由OVS来管理的，当网卡中一条流表规则也没有的时候，网卡默认会把网络包原封不动的转发给OVS，靠OVS实现流表的学习和转发，一旦OVS学习到流表之后，再通过Linux的TC flower或者DPDK的rte_flow下发给网卡，当有后续的流量可以匹配到对应的流表规则，网卡会直接根据流表规则转发流量，不再把流量转发给OVS。</p><p>那流表长啥样？下面是一个线上实际的OVS流表例子和一些解释：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 00:11:22:33:44:01是交换机（网关）的MAC地址，port(1)是交换机侧在OVS里的代表口</span><span class="token comment"># 52:11:22:33:44:55是VM的MAC地址，port(2)是VM侧在OVS里的代表口</span><span class="token comment"># 交换机发送的ARP请求，将VLAN TAG去掉，转发给VM</span>recirc_id<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>,in_port<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>,eth<span class="token punctuation">(</span>src<span class="token operator">=</span>00:11:22:33:44:01,dst<span class="token operator">=</span><span class="token number">52</span>:11:22:33:44:55<span class="token punctuation">)</span>,eth_type<span class="token punctuation">(</span>0x8100<span class="token punctuation">)</span>,vlan<span class="token punctuation">(</span>vid<span class="token operator">=</span><span class="token number">1000</span>,pcp<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>,encap<span class="token punctuation">(</span>eth_type<span class="token punctuation">(</span>0x0806<span class="token punctuation">))</span>, packets:7, bytes:448, used:0.067s, actions:pop_vlan,2<span class="token comment"># VM发送的ARP请求，打上VLAN TAG，转发给交换机</span>recirc_id<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>,in_port<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>,eth<span class="token punctuation">(</span>src<span class="token operator">=</span><span class="token number">52</span>:11:22:33:44:55,dst<span class="token operator">=</span>00:11:22:33:44:01<span class="token punctuation">)</span>,eth_type<span class="token punctuation">(</span>0x0806<span class="token punctuation">)</span>, packets:2, bytes:104, used:0.081s, actions:push_vlan<span class="token punctuation">(</span>vid<span class="token operator">=</span><span class="token number">1000</span>,pcp<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>,1<span class="token comment"># 交换机发送的IPv4数据包（eth_type 0x0800是IPv4），将VLAN TAG去掉，转发给VM</span>recirc_id<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>,in_port<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>,eth<span class="token punctuation">(</span>src<span class="token operator">=</span>00:11:22:33:44:01,dst<span class="token operator">=</span><span class="token number">52</span>:11:22:33:44:55<span class="token punctuation">)</span>,eth_type<span class="token punctuation">(</span>0x8100<span class="token punctuation">)</span>,vlan<span class="token punctuation">(</span>vid<span class="token operator">=</span><span class="token number">1000</span>,pcp<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>,encap<span class="token punctuation">(</span>eth_type<span class="token punctuation">(</span>0x0800<span class="token punctuation">))</span>, packets:22772, bytes:4038655, used:2.350s, actions:pop_vlan,2<span class="token comment"># VM发送的IPv4数据包，打上VLAN TAG，转发给交换机</span>recirc_id<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>,in_port<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>,eth<span class="token punctuation">(</span>src<span class="token operator">=</span><span class="token number">52</span>:11:22:33:44:55,dst<span class="token operator">=</span>00:11:22:33:44:01<span class="token punctuation">)</span>,eth_type<span class="token punctuation">(</span>0x0800<span class="token punctuation">)</span>, packets:26714, bytes:3151911, used:0.300s, actions:push_vlan<span class="token punctuation">(</span>vid<span class="token operator">=</span><span class="token number">1000</span>,pcp<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>,1<span class="token comment"># 交换机发送的IPv6数据包（eth_type 0x86dd是IPv6），将VLAN TAG去掉，转发给VM</span>recirc_id<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>,in_port<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>,eth<span class="token punctuation">(</span>src<span class="token operator">=</span>00:11:22:33:44:01,dst<span class="token operator">=</span><span class="token number">52</span>:11:22:33:44:55<span class="token punctuation">)</span>,eth_type<span class="token punctuation">(</span>0x8100<span class="token punctuation">)</span>,vlan<span class="token punctuation">(</span>vid<span class="token operator">=</span><span class="token number">1000</span>,pcp<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>,encap<span class="token punctuation">(</span>eth_type<span class="token punctuation">(</span>0x86dd<span class="token punctuation">))</span>, packets:111019, bytes:140906750, used:1.490s, actions:pop_vlan,2<span class="token comment"># VM发送的IPv6数据包，打上VLAN TAG，转发给交换机</span>recirc_id<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>,in_port<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>,eth<span class="token punctuation">(</span>src<span class="token operator">=</span><span class="token number">52</span>:11:22:33:44:55,dst<span class="token operator">=</span>00:11:22:33:44:01<span class="token punctuation">)</span>,eth_type<span class="token punctuation">(</span>0x86dd<span class="token punctuation">)</span>, packets:96546, bytes:8451184, used:1.490s, actions:push_vlan<span class="token punctuation">(</span>vid<span class="token operator">=</span><span class="token number">1000</span>,pcp<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>,1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，因为这几条流表的存在，交换机和VM之间的流量几乎都可以被匹配上，直接在硬件中进行转发。</p><p>由于ARP是作为独立的一个<a href="https://en.wikipedia.org/wiki/EtherType">EtherType 0x0806</a>进行传输的，仔细观察流表就不难发现ARP的流量有两条单独的流表规则，默认情况下，ARP的流表也会被写入到硬件中，从而实现硬件的offload加速，而我们需要进行ARP的双发，那第一步肯定是不希望ARP的流表被写入到硬件中，这样一来，ARP的流量会被硬件上送到OVS，由OVS来处理，刚好一个关键点是在流表的卸载方式选择上，我们使用了<code>OVS-Kernel</code>的方式，OVS处理的流量最终会通过内核进行转发，这样一来，ARP相关的报文自然而然的进入到了内核Bonding模块处理，而双发的逻辑也就起了作用。</p><p>那理论上分析可行，剩下的就是需要修改一下OVS的代码了，实现起来倒是也不困难，OVS针对硬件流表的下发，都放在<code>lib/netdev-offload-tc.c</code>这个文件中。所有的流表下发逻辑在<code>netdev_tc_flow_put</code>函数中，因此只需要在这个函数中添加一个判断，如果是ARP的流表，直接返回<code>EOPNOTSUPP</code>即可。</p><h1 id="Underlay网络的ND双发"><a href="#Underlay网络的ND双发" class="headerlink" title="Underlay网络的ND双发"></a>Underlay网络的ND双发</h1><p>相比IPv4的ARP来说，IPv6的ND双发就有些麻烦了，一方面，用于IPv6邻居发现的Neighbor Discovery（ND）协议是通过ICMPv6来实现的，另一方面，ICMPv6的报文并没有单独的EtherType，而是和IPv6数据包一起共用了<code>0x86DD</code>这个EtherType，从上面的流表也可以看出来，对于IPv6的流量，默认情况下只会有一组流表规则，根本区分不出业务的TCP&#x2F;UDP流量和ICMPv6的数据报文，更区分不出ICMPv6中更细的ND相关的报文。</p><p>但是理论上，只要类似ARP那样，让硬件匹配不到，或者让硬件匹配到，然后上送给OVS处理，就可以类似ARP那样实现ND的双发了。</p><p>通过NVIDIA提供的文档<a href="https://docs.nvidia.com/networking/display/mlnxofedv24102180lts/ovs+offload+using+asap%C2%B2+direct#src-3658395192_safe-id-T1ZTT2ZmbG9hZFVzaW5nQVNBUMKyRGlyZWN0LWNsYXNzaWZpY2F0aW9uZmllbGRz">Classification Fields (Matches)</a>，可以看到网卡是支持匹配IPv4&#x2F;IPv6的TCP&#x2F;UDP&#x2F;ICMP&#x2F;ICMPv6这几个Protocol的，既然可以匹配ICMPv6，那就尝试手动添加一条流表，看看是否可以匹配上。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 添加一条ICMPv6的流表规则，匹配ICMPv6</span><span class="token comment"># ovs-ofctl add-flow ovs-sriov "table=0,priority=200,icmp6 actions=normal"</span><span class="token comment"># 再尝试dump当前学习到的流表</span><span class="token comment"># ovs-appctl dpctl/dump-flows|grep 0x86dd</span>recirc_id<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>,in_port<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>,eth<span class="token punctuation">(</span>src<span class="token operator">=</span><span class="token number">52</span>:11:22:33:44:55,dst<span class="token operator">=</span>00:11:22:33:44:01<span class="token punctuation">)</span>,eth_type<span class="token punctuation">(</span>0x86dd<span class="token punctuation">)</span>,ipv6<span class="token punctuation">(</span>proto<span class="token operator">=</span><span class="token number">58</span><span class="token punctuation">)</span>, packets:1, bytes:1, used:0s, actions:push_vlan<span class="token punctuation">(</span>vid<span class="token operator">=</span><span class="token number">1000</span>,pcp<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>,1recirc_id<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>,in_port<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>,eth<span class="token punctuation">(</span>src<span class="token operator">=</span>00:11:22:33:44:01,dst<span class="token operator">=</span><span class="token number">52</span>:11:22:33:44:55<span class="token punctuation">)</span>,eth_type<span class="token punctuation">(</span>0x8100<span class="token punctuation">)</span>,vlan<span class="token punctuation">(</span>vid<span class="token operator">=</span><span class="token number">1000</span>,pcp<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>,encap<span class="token punctuation">(</span>eth_type<span class="token punctuation">(</span>0x86dd<span class="token punctuation">)</span>,ipv6<span class="token punctuation">(</span>proto<span class="token operator">=</span><span class="token number">58</span><span class="token punctuation">))</span>, packets:1, bytes:1, used:0s, actions:pop_vlan,2recirc_id<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>,in_port<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>,eth<span class="token punctuation">(</span>src<span class="token operator">=</span><span class="token number">52</span>:11:22:33:44:55,dst<span class="token operator">=</span>00:11:22:33:44:01<span class="token punctuation">)</span>,eth_type<span class="token punctuation">(</span>0x86dd<span class="token punctuation">)</span>,ipv6<span class="token punctuation">(</span>proto<span class="token operator">=</span><span class="token number">17</span><span class="token punctuation">)</span>, packets:3, bytes:210, used:1.560s, actions:push_vlan<span class="token punctuation">(</span>vid<span class="token operator">=</span><span class="token number">1000</span>,pcp<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>,1recirc_id<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>,in_port<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>,eth<span class="token punctuation">(</span>src<span class="token operator">=</span>00:11:22:33:44:01,dst<span class="token operator">=</span><span class="token number">52</span>:11:22:33:44:55<span class="token punctuation">)</span>,eth_type<span class="token punctuation">(</span>0x8100<span class="token punctuation">)</span>,vlan<span class="token punctuation">(</span>vid<span class="token operator">=</span><span class="token number">1000</span>,pcp<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>,encap<span class="token punctuation">(</span>eth_type<span class="token punctuation">(</span>0x86dd<span class="token punctuation">)</span>,ipv6<span class="token punctuation">(</span>proto<span class="token operator">=</span><span class="token number">17</span><span class="token punctuation">))</span>, packets:0, bytes:0, used:1.560s, actions:pop_vlan,2recirc_id<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>,in_port<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>,eth<span class="token punctuation">(</span>src<span class="token operator">=</span><span class="token number">52</span>:11:22:33:44:55,dst<span class="token operator">=</span>00:11:22:33:44:01<span class="token punctuation">)</span>,eth_type<span class="token punctuation">(</span>0x86dd<span class="token punctuation">)</span>,ipv6<span class="token punctuation">(</span>proto<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">)</span>, packets:49, bytes:3923, used:2.850s, actions:push_vlan<span class="token punctuation">(</span>vid<span class="token operator">=</span><span class="token number">1000</span>,pcp<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>,1recirc_id<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>,in_port<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>,eth<span class="token punctuation">(</span>src<span class="token operator">=</span>00:11:22:33:44:01,dst<span class="token operator">=</span><span class="token number">52</span>:11:22:33:44:55<span class="token punctuation">)</span>,eth_type<span class="token punctuation">(</span>0x8100<span class="token punctuation">)</span>,vlan<span class="token punctuation">(</span>vid<span class="token operator">=</span><span class="token number">1000</span>,pcp<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>,encap<span class="token punctuation">(</span>eth_type<span class="token punctuation">(</span>0x86dd<span class="token punctuation">)</span>,ipv6<span class="token punctuation">(</span>proto<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">))</span>, packets:411, bytes:605503, used:2.850s, actions:pop_vlan,2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，IPv6的TCP(proto&#x3D;6)、UDP(proto&#x3D;17)和ICMPv6(proto&#x3D;58)都被单独匹配出来了，现在的流表规则，已经类似ARP的流表规则了，那接下来理论上参考ARP的修改，继续让ICMPv6的流表不卸载到硬件，就可以实现双发了。</p><p>但相比于ARP来说，ICMPv6本身包含的功能还是比较多的，这样修改的话，除了ND相关的报文，IPv6 Ping相关的报文也会被上送OVS处理了，总体来说还是会影响一些效率，是否可以继续拆分呢？比如只把ND相关的报文拆成单独流表不下发，剩下的Ping报文依然走硬件转发。OVS是支持这样的配置的，可以尝试一下，稍微修改一下下发的流表：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 添加一条ICMPv6的流表规则，匹配ICMPv6的ND报文，icmp_type=135是ND协议中的NS包，也是我们需要双发的包</span><span class="token comment"># ovs-ofctl add-flow ovs-sriov "table=0,priority=200,icmp6,icmp_type=135 actions=normal"</span><span class="token comment"># ovs-appctl dpctl/dump-flows|grep 0x86dd</span>recirc_id<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>,in_port<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>,eth<span class="token punctuation">(</span>src<span class="token operator">=</span><span class="token number">52</span>:11:22:33:44:55,dst<span class="token operator">=</span>00:11:22:33:44:01<span class="token punctuation">)</span>,eth_type<span class="token punctuation">(</span>0x86dd<span class="token punctuation">)</span>,ipv6<span class="token punctuation">(</span>proto<span class="token operator">=</span><span class="token number">58</span><span class="token punctuation">)</span>,icmpv6<span class="token punctuation">(</span>type<span class="token operator">=</span><span class="token number">135</span><span class="token punctuation">)</span>, packets:0, bytes:0, used:0s, actions:push_vlan<span class="token punctuation">(</span>vid<span class="token operator">=</span><span class="token number">1000</span>,pcp<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>,1recirc_id<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>,in_port<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>,eth<span class="token punctuation">(</span>src<span class="token operator">=</span>00:11:22:33:44:01,dst<span class="token operator">=</span><span class="token number">52</span>:11:22:33:44:55<span class="token punctuation">)</span>,eth_type<span class="token punctuation">(</span>0x8100<span class="token punctuation">)</span>,vlan<span class="token punctuation">(</span>vid<span class="token operator">=</span><span class="token number">1000</span>,pcp<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">)</span>,encap<span class="token punctuation">(</span>eth_type<span class="token punctuation">(</span>0x86dd<span class="token punctuation">)</span>,ipv6<span class="token punctuation">(</span>proto<span class="token operator">=</span><span class="token number">58</span><span class="token punctuation">)</span>,icmpv6<span class="token punctuation">(</span>type<span class="token operator">=</span><span class="token number">136</span>/0xfc<span class="token punctuation">))</span>, packets:0, bytes:0, used:0s, actions:pop_vlan,2recirc_id<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>,in_port<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>,eth<span class="token punctuation">(</span>src<span class="token operator">=</span><span class="token number">52</span>:11:22:33:44:55,dst<span class="token operator">=</span>00:11:22:33:44:01<span class="token punctuation">)</span>,eth_type<span class="token punctuation">(</span>0x86dd<span class="token punctuation">)</span>,ipv6<span class="token punctuation">(</span>proto<span class="token operator">=</span><span class="token number">58</span><span class="token punctuation">)</span>,icmpv6<span class="token punctuation">(</span>type<span class="token operator">=</span>type<span class="token operator">=</span><span class="token number">128</span>/0xfc<span class="token punctuation">)</span>, packets:0, bytes:0, used:0s, actions:push_vlan<span class="token punctuation">(</span>vid<span class="token operator">=</span><span class="token number">1000</span>,pcp<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>,1recirc_id<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>,in_port<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>,eth<span class="token punctuation">(</span>src<span class="token operator">=</span>00:11:22:33:44:01,dst<span class="token operator">=</span><span class="token number">52</span>:11:22:33:44:55<span class="token punctuation">)</span>,eth_type<span class="token punctuation">(</span>0x8100<span class="token punctuation">)</span>,vlan<span class="token punctuation">(</span>vid<span class="token operator">=</span><span class="token number">1000</span>,pcp<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">)</span>,encap<span class="token punctuation">(</span>eth_type<span class="token punctuation">(</span>0x86dd<span class="token punctuation">)</span>,ipv6<span class="token punctuation">(</span>proto<span class="token operator">=</span><span class="token number">58</span><span class="token punctuation">)</span>,icmpv6<span class="token punctuation">(</span>type<span class="token operator">=</span>type<span class="token operator">=</span><span class="token number">129</span>/0xfc<span class="token punctuation">))</span>, packets:0, bytes:0, used:0s, actions:pop_vlan,2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，NS(type&#x3D;135)和NA(type&#x3D;136)的流表规则已经被拆分出来了，同样的Ping的Echo Request(type&#x3D;128)和Echo Reply(type&#x3D;129)的流表规则也被拆分出来了，理论上也可以如法炮制，只让NS报文相关的流表不下发到硬件，这样一来，ICMPv6的双发就可以实现了。但这里有一个问题，就是网卡其实不支持匹配更细致的报文了，直接看一下下发到硬件中的流表和对应的状态：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 由于OVS-Kernel使用TC下发流表规则到网卡驱动，所以可以通过tc命令查询流表和对应的状态</span><span class="token comment"># tc filter show dev vf0 ingress</span>filter protocol ipv6 pref <span class="token number">3</span> flower chain <span class="token number">0</span>filter protocol ipv6 pref <span class="token number">3</span> flower chain <span class="token number">0</span> handle 0x1  dst_mac 00:11:22:33:44:01  src_mac <span class="token number">52</span>:11:22:33:44:55  eth_type ipv6  ip_proto icmpv6  icmp_type <span class="token number">135</span>  not_in_hw        action order <span class="token number">1</span>: vlan  push <span class="token function">id</span> <span class="token number">1000</span> protocol <span class="token number">802</span>.1Q priority <span class="token number">0</span> pipe         index <span class="token number">8</span> ref <span class="token number">1</span> <span class="token builtin class-name">bind</span> <span class="token number">1</span>        no_percpu        action order <span class="token number">2</span>: mirred <span class="token punctuation">(</span>Egress Redirect to device bond0<span class="token punctuation">)</span> stolen        index <span class="token number">11</span> ref <span class="token number">1</span> <span class="token builtin class-name">bind</span> <span class="token number">1</span>        cookie b332255e9d440e02192dbb9b04d20332        no_percpu<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以发现，虽然OVS生成了NS报文的流表，并且也成功的转成TC规则并下发，但dump出来的规则里<code>not_in_hw</code>表示这条规则并没有下发到硬件中，网卡在这种场景下不支持匹配ICMPv6的type字段，所以即使像之前一样修改OVS不下发该流表，最终网卡的行为都是一致的。</p><p>虽然没办法精确的将NS报文从硬件中拾取出来，但将ICMPv6报文全部上送软件处理，也算是可以接受的方案了，即使有些不完美，考虑到大部分业务的流量还是走的TCP&#x2F;UDP，对业务的影响应该微乎其微。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>虽然最终没有达到最完美的状态，但最终还是实现了在硬件Bonding卸载的场景下，ARP和ND的双发。经过这几年的实践，这个网络方案在我们的私有云上运行的非常稳定，一方面，因为场景和公有云的差异，选择了一个比较简单的Underlay+OVS-Kernel卸载的方案，而不是基于DPDK的方案，另一方面，正是基于这样的选择，带来了额外的VM双发需求，只能说环环相扣，处处充满妥协了😀。</p><p>那么未来呢，未来的虚拟化网络是属于DPU（或者说IPU）的，借助DPU的帮助，终于可以在固件层面做一些想做的事了，类似的问题也就不是问题了，未来值得期待。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;大约在2019年的时候，公司的服务器接入网络架构开始向双上联去堆叠方向迁移，相比于之前老的接入网络而言，新的网络架构在各方面的提升都非常明显，尤其是在带宽利用率和冗余性方面，关于网络架构的部分，这里暂时就不多做介绍了，具体的可以参考京东以及H3C的相关分享和文档：&lt;a href=&quot;https://zhuanlan.zhihu.com/p/62024674&quot;&gt;异构去堆叠 | 一种完美提升网络高可用SLA的方案
&lt;/a&gt;，&lt;a href=&quot;https://www.h3c.com/cn/Service/Document_Software/Document_Center/Home/Switches/00-Public/Configure/Practice/H3C_S_MLAG-BP_Long/&quot;&gt;H3C数据中心交换机S-MLAG最佳实践&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;在新的网络架构中，我们的方案是通过ARP转主机路由方式来实现网络层面的负载均衡和高可用的，这个方案有个依赖，需要主机实现ARP&amp;#x2F;ND相关协议包的双发。&lt;/p&gt;</summary>
    
    
    
    <category term="虚拟化" scheme="https://www.ichenfu.com/categories/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
    
    <category term="去堆叠网络" scheme="https://www.ichenfu.com/tags/%E5%8E%BB%E5%A0%86%E5%8F%A0%E7%BD%91%E7%BB%9C/"/>
    
    <category term="OVS" scheme="https://www.ichenfu.com/tags/OVS/"/>
    
    <category term="ASAP²" scheme="https://www.ichenfu.com/tags/ASAP%C2%B2/"/>
    
    <category term="ARP双发" scheme="https://www.ichenfu.com/tags/ARP%E5%8F%8C%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>“无限”套娃，在WSL的Docker中使用YOLOv11做目标检测</title>
    <link href="https://www.ichenfu.com/2025/06/08/yolo11-on-wslg-docker/"/>
    <id>https://www.ichenfu.com/2025/06/08/yolo11-on-wslg-docker/</id>
    <published>2025-06-08T11:34:23.000Z</published>
    <updated>2025-06-25T06:00:01.251Z</updated>
    
    <content type="html"><![CDATA[<p>前几天偶然发现，Windows 11的WSL2可以通过WSLg来无缝使用GUI应用。类似推理&#x2F;训练等任务，都不在话下，这瞬间勾起了我的好奇心，决定试试微软提供的这个神奇功能。其实微软在2021年就发布了WSLg，现在已经是2025年了，刚刚开始折腾也算是后知后觉了。</p><p>WSL支持GUI应用只能算是WSLg的一个最简单的功能了，当涉及模型训练或者GPU加速时，GPU驱动还有CUDA等等相关的配置就会变得复杂起来。我并不希望因为“折腾”这么一下，就把我的WSL环境搞得一团糟，这时候，Docker的价值就体现出来了。利用Docker，可以在不修改现有WSL环境的情况下，快速搭建一个隔离的环境来做些简单的测试。我决定使用YOLO作为测试对象，看看在WSL+WSLg+Docker的场景下，YOLO还能不能很好的工作，正确使用我的GPU进行加速。</p><span id="more"></span><h2 id="确认WSLg的正确安装"><a href="#确认WSLg的正确安装" class="headerlink" title="确认WSLg的正确安装"></a>确认WSLg的正确安装</h2><p>理论上，WSLg是WSL默认启用的功能，当你安装完成WSL2，并且安装了Ubuntu等Linux发行版后，就可以直接使用GUI应用了。具体的安装方法，这里就不多说了，毕竟微软的文档<a href="https://learn.microsoft.com/zh-cn/windows/wsl/tutorials/gui-apps">在适用于 Linux 的 Windows 子系统上运行 Linux GUI 应用</a>写的非常的详细：</p><p>安装完成后，如果WSLg被正确启用的话，应该就可以看到：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># mount|grep wslg</span>none on /mnt/wslg <span class="token builtin class-name">type</span> tmpfs <span class="token punctuation">(</span>rw,relatime<span class="token punctuation">)</span>/dev/sdc on /mnt/wslg/distro <span class="token builtin class-name">type</span> ext4 <span class="token punctuation">(</span>ro,relatime,discard,errors<span class="token operator">=</span>remount-ro,data<span class="token operator">=</span>ordered<span class="token punctuation">)</span>none on /mnt/wslg/versions.txt <span class="token builtin class-name">type</span> overlay <span class="token punctuation">(</span>rw,relatime,lowerdir<span class="token operator">=</span>/systemvhd,upperdir<span class="token operator">=</span>/system/rw/upper,workdir<span class="token operator">=</span>/system/rw/work<span class="token punctuation">)</span>none on /mnt/wslg/doc <span class="token builtin class-name">type</span> overlay <span class="token punctuation">(</span>rw,relatime,lowerdir<span class="token operator">=</span>/systemvhd,upperdir<span class="token operator">=</span>/system/rw/upper,workdir<span class="token operator">=</span>/system/rw/work<span class="token punctuation">)</span>tmpfs on /mnt/wslg/run/user/1000 <span class="token builtin class-name">type</span> tmpfs <span class="token punctuation">(</span>rw,nosuid,nodev,relatime,size<span class="token operator">=</span>809692k,nr_inodes<span class="token operator">=</span><span class="token number">202423</span>,mode<span class="token operator">=</span><span class="token number">700</span>,uid<span class="token operator">=</span><span class="token number">1000</span>,gid<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>与此同时，在不用安装任何Linux版本GPU驱动的情况下，应该也可以正确识别到GPU设备：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># which nvidia-smi</span>/usr/lib/wsl/lib/nvidia-smi<span class="token comment"># nvidia-smi</span>Sun Jun  <span class="token number">8</span> <span class="token number">19</span>:59:36 <span class="token number">2025</span>+-----------------------------------------------------------------------------------------+<span class="token operator">|</span> NVIDIA-SMI <span class="token number">560.35</span>.02              Driver Version: <span class="token number">560.94</span>         CUDA Version: <span class="token number">12.6</span>     <span class="token operator">|</span><span class="token operator">|</span>-----------------------------------------+------------------------+----------------------+<span class="token operator">|</span> GPU  Name                 Persistence-M <span class="token operator">|</span> Bus-Id          Disp.A <span class="token operator">|</span> Volatile Uncorr. ECC <span class="token operator">|</span><span class="token operator">|</span> Fan  Temp   Perf          Pwr:Usage/Cap <span class="token operator">|</span>           Memory-Usage <span class="token operator">|</span> GPU-Util  Compute M. <span class="token operator">|</span><span class="token operator">|</span>                                         <span class="token operator">|</span>                        <span class="token operator">|</span>               MIG M. <span class="token operator">|</span><span class="token operator">|</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span><span class="token operator">+=</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span><span class="token operator">+=</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span><span class="token operator">|</span><span class="token operator">|</span>   <span class="token number">0</span>  NVIDIA GeForce RTX <span class="token number">4070</span> <span class="token punctuation">..</span>.    On  <span class="token operator">|</span>   00000000:2B:00.0  On <span class="token operator">|</span>                  N/A <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">0</span>%   45C    P8              7W /  285W <span class="token operator">|</span>     895MiB /  16376MiB <span class="token operator">|</span>      <span class="token number">4</span>%      Default <span class="token operator">|</span><span class="token operator">|</span>                                         <span class="token operator">|</span>                        <span class="token operator">|</span>                  N/A <span class="token operator">|</span>+-----------------------------------------+------------------------+----------------------++-----------------------------------------------------------------------------------------+<span class="token operator">|</span> Processes:                                                                              <span class="token operator">|</span><span class="token operator">|</span>  GPU   GI   CI        PID   Type   Process name                              GPU Memory <span class="token operator">|</span><span class="token operator">|</span>        ID   ID                                                               Usage      <span class="token operator">|</span><span class="token operator">|</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span><span class="token operator">|</span><span class="token operator">|</span>    <span class="token number">0</span>   N/A  N/A        <span class="token number">25</span>      G   /Xwayland                                   N/A      <span class="token operator">|</span>+-----------------------------------------------------------------------------------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以我的这台主机为例，可以看到<code>nvidia-smi</code>可以正常识别到GPU（甚至nvidia-smi也不是我安装的，微软直接帮我挂载了）</p><p>再试试运行一个GUI应用：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># sudo apt install -y x11-apps</span><span class="token comment"># /usr/bin/xcalc</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/images/yolo11-on-wslg-docker/xcalc.png" alt="xcalc"></p><h2 id="安装NVIDIA的容器运行环境"><a href="#安装NVIDIA的容器运行环境" class="headerlink" title="安装NVIDIA的容器运行环境"></a>安装NVIDIA的容器运行环境</h2><p>由于要使用Docker并且还需要在Docker里使用GPU，Docker的安装比较简单，在Ubuntu里，直接<code>sudo apt install -y docker.io</code>即可，而对于我的NVIDIA显卡来说，还需要安装NVIDIA的容器运行环境，这里可以参考NVIDIA的文档<a href="https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/latest/install-guide.html">Installing the NVIDIA Container Toolkit</a>进行安装，安装完成之后，可以跑一个简单的测试，确认一下安装是否成功，以及容器里是否可以正确识别并调用到GPU：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># sudo docker run --gpus all --runtime=nvidia nvcr.io/nvidia/k8s/cuda-sample:nbody nbody -gpu -benchmark</span>Run <span class="token string">"nbody -benchmark [-numbodies=&lt;numBodies>]"</span> to measure performance.        <span class="token parameter variable">-fullscreen</span>       <span class="token punctuation">(</span>run n-body simulation <span class="token keyword">in</span> fullscreen mode<span class="token punctuation">)</span>        <span class="token parameter variable">-fp64</span>             <span class="token punctuation">(</span>use double precision floating point values <span class="token keyword">for</span> simulation<span class="token punctuation">)</span>        <span class="token parameter variable">-hostmem</span>          <span class="token punctuation">(</span>stores simulation data <span class="token keyword">in</span> <span class="token function">host</span> memory<span class="token punctuation">)</span>        <span class="token parameter variable">-benchmark</span>        <span class="token punctuation">(</span>run benchmark to measure performance<span class="token punctuation">)</span>        <span class="token parameter variable">-numbodies</span><span class="token operator">=</span><span class="token operator">&lt;</span>N<span class="token operator">></span>    <span class="token punctuation">(</span>number of bodies <span class="token punctuation">(</span><span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">)</span> to run <span class="token keyword">in</span> simulation<span class="token punctuation">)</span>        <span class="token parameter variable">-device</span><span class="token operator">=</span><span class="token operator">&lt;</span>d<span class="token operator">></span>       <span class="token punctuation">(</span>where <span class="token assign-left variable">d</span><span class="token operator">=</span><span class="token number">0,1</span>,2<span class="token punctuation">..</span><span class="token punctuation">..</span> <span class="token keyword">for</span> the CUDA device to use<span class="token punctuation">)</span>        <span class="token parameter variable">-numdevices</span><span class="token operator">=</span><span class="token operator">&lt;</span>i<span class="token operator">></span>   <span class="token punctuation">(</span>where <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token punctuation">(</span>number of CUDA devices <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> to use <span class="token keyword">for</span> simulation<span class="token punctuation">)</span>        <span class="token parameter variable">-compare</span>          <span class="token punctuation">(</span>compares simulation results running once on the default GPU and once on the CPU<span class="token punctuation">)</span>        <span class="token parameter variable">-cpu</span>              <span class="token punctuation">(</span>run n-body simulation on the CPU<span class="token punctuation">)</span>        <span class="token parameter variable">-tipsy</span><span class="token operator">=</span><span class="token operator">&lt;</span>file.bin<span class="token operator">></span> <span class="token punctuation">(</span>load a tipsy model <span class="token function">file</span> <span class="token keyword">for</span> simulation<span class="token punctuation">)</span>NOTE: The CUDA Samples are not meant <span class="token keyword">for</span> performance measurements. Results may vary when GPU Boost is enabled.<span class="token operator">></span> Windowed mode<span class="token operator">></span> Simulation data stored <span class="token keyword">in</span> video memory<span class="token operator">></span> Single precision floating point simulation<span class="token operator">></span> <span class="token number">1</span> Devices used <span class="token keyword">for</span> simulationMapSMtoCores <span class="token keyword">for</span> SM <span class="token number">8.9</span> is undefined.  Default to use <span class="token number">128</span> Cores/SMMapSMtoArchName <span class="token keyword">for</span> SM <span class="token number">8.9</span> is undefined.  Default to use AmpereGPU Device <span class="token number">0</span>: <span class="token string">"Ampere"</span> with compute capability <span class="token number">8.9</span><span class="token operator">></span> Compute <span class="token number">8.9</span> CUDA device: <span class="token punctuation">[</span>NVIDIA GeForce RTX <span class="token number">4070</span> Ti SUPER<span class="token punctuation">]</span><span class="token number">67584</span> bodies, total <span class="token function">time</span> <span class="token keyword">for</span> <span class="token number">10</span> iterations: <span class="token number">41.515</span> ms<span class="token operator">=</span> <span class="token number">1100.228</span> billion interactions per second<span class="token operator">=</span> <span class="token number">22004.559</span> single-precision GFLOP/s at <span class="token number">20</span> flops per interaction<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到在容器里看到并且使用了我的GPU。</p><h2 id="在Docker里使用YOLOv11"><a href="#在Docker里使用YOLOv11" class="headerlink" title="在Docker里使用YOLOv11"></a>在Docker里使用YOLOv11</h2><p>接下来就可以在Docker里使用YOLOv11了。由于官方已经给我们打好了<a href="https://hub.docker.com/r/ultralytics/ultralytics">Docker镜像</a>，所以只需要拉取镜像并运行即可，因为我还想能将推理结果实时的显示出来，所以还需要处理一些显示相关的环境变量，需要注意的是，虽然YOLO的文档里也有在Docker中使用GUI的说明，但这里需要参考WSLg的文档<a href="https://github.com/microsoft/wslg/blob/main/samples/container/Containers.md">Containerizing GUI applications with WSLg</a>来启动容器：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># sudo docker run -it -v /tmp/.X11-unix:/tmp/.X11-unix -v /mnt/wslg:/mnt/wslg -e DISPLAY=$DISPLAY -e WAYLAND_DISPLAY=$WAYLAND_DISPLAY -e XDG_RUNTIME_DIR=$XDG_RUNTIME_DIR -e PULSE_SERVER=$PULSE_SERVER --net=host --ipc=host --gpus all ultralytics/ultralytics:latest</span>root@DESKTOP:/ultralytics<span class="token comment"># yolo predict model=yolo11n.pt show=True</span>WARNING ⚠️ <span class="token string">'source'</span> argument is missing. Using default <span class="token string">'source=/ultralytics/ultralytics/assets'</span><span class="token builtin class-name">.</span>WARNING ⚠️ Environment does not support cv2.imshow<span class="token punctuation">(</span><span class="token punctuation">)</span> or PIL Image.show<span class="token punctuation">(</span><span class="token punctuation">)</span>OpenCV<span class="token punctuation">(</span><span class="token number">4.11</span>.0<span class="token punctuation">)</span> /io/opencv/modules/highgui/src/window.cpp:1301: error: <span class="token punctuation">(</span>-2:Unspecified error<span class="token punctuation">)</span> The <span class="token keyword">function</span> is not implemented. Rebuild the library with Windows, GTK+ <span class="token number">2</span>.x or Cocoa support. If you are on Ubuntu or Debian, <span class="token function">install</span> libgtk2.0-dev and pkg-config, <span class="token keyword">then</span> re-run cmake or configure script <span class="token keyword">in</span> <span class="token keyword">function</span> <span class="token string">'cvShowImage'</span>Ultralytics <span class="token number">8.3</span>.151 🚀 Python-3.11.12 torch-2.7.0+cu126 CUDA:0 <span class="token punctuation">(</span>NVIDIA GeForce RTX <span class="token number">4070</span> Ti SUPER, 16376MiB<span class="token punctuation">)</span>YOLO11n summary <span class="token punctuation">(</span>fused<span class="token punctuation">)</span>: <span class="token number">100</span> layers, <span class="token number">2,616</span>,248 parameters, <span class="token number">0</span> gradients, <span class="token number">6.5</span> GFLOPsimage <span class="token number">1</span>/2 /ultralytics/ultralytics/assets/bus.jpg: 640x480 <span class="token number">4</span> persons, <span class="token number">1</span> bus, <span class="token number">47</span>.2msimage <span class="token number">2</span>/2 /ultralytics/ultralytics/assets/zidane.jpg: 384x640 <span class="token number">2</span> persons, <span class="token number">1</span> tie, <span class="token number">41</span>.1msSpeed: <span class="token number">5</span>.1ms preprocess, <span class="token number">44</span>.2ms inference, <span class="token number">93</span>.1ms postprocess per image at shape <span class="token punctuation">(</span><span class="token number">1</span>, <span class="token number">3</span>, <span class="token number">384</span>, <span class="token number">640</span><span class="token punctuation">)</span>Results saved to /ultralytics/runs/detect/predict💡 Learn <span class="token function">more</span> at https://docs.ultralytics.com/modes/predict<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发现出了点小问题，虽然可以正确调用到GPU，但是没办法实时显示推理结果，从日志上看，有一条报错：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">OpenCV<span class="token punctuation">(</span><span class="token number">4.11</span>.0<span class="token punctuation">)</span> /io/opencv/modules/highgui/src/window.cpp:1301: error: <span class="token punctuation">(</span>-2:Unspecified error<span class="token punctuation">)</span> The <span class="token keyword">function</span> is not implemented. Rebuild the library with Windows, GTK+ <span class="token number">2</span>.x or Cocoa support. If you are on Ubuntu or Debian, <span class="token function">install</span> libgtk2.0-dev and pkg-config, <span class="token keyword">then</span> re-run cmake or configure script <span class="token keyword">in</span> <span class="token keyword">function</span> <span class="token string">'cvShowImage'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>看起来是opencv出现了一些兼容性的问题，经过一番搜索，发现了一个<a href="https://github.com/opencv/opencv-python/issues/18">issue</a>，也是同样的问题，因为默认<code>ultralytics/ultralytics:latest</code>镜像里安装了<code>opencv-python-headless</code>，并没有对GUI的支持，因此需要重新安装一下<code>opencv-python</code>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@DESKTOP:/ultralytics<span class="token comment"># pip uninstall opencv-python-headless opencv-python -y</span>Found existing installation: opencv-python-headless <span class="token number">4.11</span>.0.86Uninstalling opencv-python-headless-4.11.0.86:  Successfully uninstalled opencv-python-headless-4.11.0.86Found existing installation: opencv-python <span class="token number">4.11</span>.0.86Uninstalling opencv-python-4.11.0.86:  Successfully uninstalled opencv-python-4.11.0.86root@DESKTOP:/ultralytics<span class="token comment"># pip install opencv-python==4.11.0.86</span>Collecting opencv-python<span class="token operator">==</span><span class="token number">4.11</span>.0.86  Downloading opencv_python-4.11.0.86-cp37-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata <span class="token punctuation">(</span><span class="token number">20</span> kB<span class="token punctuation">)</span>Requirement already satisfied: numpy<span class="token operator">>=</span><span class="token number">1.21</span>.2 <span class="token keyword">in</span> /opt/conda/lib/python3.11/site-packages <span class="token punctuation">(</span>from opencv-python<span class="token operator">==</span><span class="token number">4.11</span>.0.86<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">2.1</span>.3<span class="token punctuation">)</span>Downloading opencv_python-4.11.0.86-cp37-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl <span class="token punctuation">(</span><span class="token number">63.0</span> MB<span class="token punctuation">)</span>   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ <span class="token number">63.0</span>/63.0 MB <span class="token number">753.5</span> kB/s eta <span class="token number">0</span>:00:00Installing collected packages: opencv-pythonSuccessfully installed opencv-python-4.11.0.86<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重新安装完成后，再次运行YOLO的推理命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@DESKTOP:/ultralytics<span class="token comment"># yolo predict model=yolo11n.pt show=True</span>WARNING ⚠️ <span class="token string">'source'</span> argument is missing. Using default <span class="token string">'source=/ultralytics/ultralytics/assets'</span><span class="token builtin class-name">.</span>Ultralytics <span class="token number">8.3</span>.151 🚀 Python-3.11.12 torch-2.7.0+cu126 CUDA:0 <span class="token punctuation">(</span>NVIDIA GeForce RTX <span class="token number">4070</span> Ti SUPER, 16376MiB<span class="token punctuation">)</span>YOLO11n summary <span class="token punctuation">(</span>fused<span class="token punctuation">)</span>: <span class="token number">100</span> layers, <span class="token number">2,616</span>,248 parameters, <span class="token number">0</span> gradients, <span class="token number">6.5</span> GFLOPsimage <span class="token number">1</span>/2 /ultralytics/ultralytics/assets/bus.jpg: 640x480 <span class="token number">4</span> persons, <span class="token number">1</span> bus, <span class="token number">51</span>.1msimage <span class="token number">2</span>/2 /ultralytics/ultralytics/assets/zidane.jpg: 384x640 <span class="token number">2</span> persons, <span class="token number">1</span> tie, <span class="token number">41</span>.6msSpeed: <span class="token number">4</span>.1ms preprocess, <span class="token number">46</span>.3ms inference, <span class="token number">72</span>.4ms postprocess per image at shape <span class="token punctuation">(</span><span class="token number">1</span>, <span class="token number">3</span>, <span class="token number">384</span>, <span class="token number">640</span><span class="token punctuation">)</span>Results saved to /ultralytics/runs/detect/predict2💡 Learn <span class="token function">more</span> at https://docs.ultralytics.com/modes/predict<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这次没有报错了，并且可以看到一闪而过的推理结果窗口：</p><p><img src="/images/yolo11-on-wslg-docker/yolo-zidane.png" alt="yolo11-predict-zidane"><br>嘿嘿，效果不错。</p><h2 id="实时视频检测"><a href="#实时视频检测" class="headerlink" title="实时视频检测"></a>实时视频检测</h2><p>从网上找一段视频，再看看实时推理的效果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@DESKTOP:/ultralytics<span class="token comment"># yolo predict model=yolo11n.pt show=True source=car.mp4</span>Ultralytics <span class="token number">8.3</span>.151 🚀 Python-3.11.12 torch-2.7.0+cu126 CUDA:0 <span class="token punctuation">(</span>NVIDIA GeForce RTX <span class="token number">4070</span> Ti SUPER, 16376MiB<span class="token punctuation">)</span>YOLO11n summary <span class="token punctuation">(</span>fused<span class="token punctuation">)</span>: <span class="token number">100</span> layers, <span class="token number">2,616</span>,248 parameters, <span class="token number">0</span> gradients, <span class="token number">6.5</span> GFLOPsvideo <span class="token number">1</span>/1 <span class="token punctuation">(</span>frame <span class="token number">1</span>/617<span class="token punctuation">)</span> /ultralytics/car.mp4: 384x640 <span class="token number">2</span> persons, <span class="token number">14</span> cars, <span class="token number">2</span> buss, <span class="token number">1</span> truck, <span class="token number">44</span>.8msvideo <span class="token number">1</span>/1 <span class="token punctuation">(</span>frame <span class="token number">2</span>/617<span class="token punctuation">)</span> /ultralytics/car.mp4: 384x640 <span class="token number">2</span> persons, <span class="token number">14</span> cars, <span class="token number">2</span> buss, <span class="token number">1</span> truck, <span class="token number">14</span>.5msvideo <span class="token number">1</span>/1 <span class="token punctuation">(</span>frame <span class="token number">3</span>/617<span class="token punctuation">)</span> /ultralytics/car.mp4: 384x640 <span class="token number">2</span> persons, <span class="token number">14</span> cars, <span class="token number">2</span> buss, <span class="token number">1</span> truck, <span class="token number">32</span>.5msvideo <span class="token number">1</span>/1 <span class="token punctuation">(</span>frame <span class="token number">4</span>/617<span class="token punctuation">)</span> /ultralytics/car.mp4: 384x640 <span class="token number">2</span> persons, <span class="token number">14</span> cars, <span class="token number">2</span> buss, <span class="token number">1</span> truck, <span class="token number">19</span>.3msvideo <span class="token number">1</span>/1 <span class="token punctuation">(</span>frame <span class="token number">5</span>/617<span class="token punctuation">)</span> /ultralytics/car.mp4: 384x640 <span class="token number">2</span> persons, <span class="token number">14</span> cars, <span class="token number">2</span> buss, <span class="token number">1</span> truck, <span class="token number">14</span>.5msvideo <span class="token number">1</span>/1 <span class="token punctuation">(</span>frame <span class="token number">6</span>/617<span class="token punctuation">)</span> /ultralytics/car.mp4: 384x640 <span class="token number">2</span> persons, <span class="token number">14</span> cars, <span class="token number">2</span> buss, <span class="token number">1</span> truck, <span class="token number">13</span>.2msvideo <span class="token number">1</span>/1 <span class="token punctuation">(</span>frame <span class="token number">7</span>/617<span class="token punctuation">)</span> /ultralytics/car.mp4: 384x640 <span class="token number">3</span> persons, <span class="token number">13</span> cars, <span class="token number">2</span> buss, <span class="token number">2</span> trucks, <span class="token number">12</span>.0msvideo <span class="token number">1</span>/1 <span class="token punctuation">(</span>frame <span class="token number">8</span>/617<span class="token punctuation">)</span> /ultralytics/car.mp4: 384x640 <span class="token number">3</span> persons, <span class="token number">13</span> cars, <span class="token number">2</span> buss, <span class="token number">2</span> trucks, <span class="token number">12</span>.3msvideo <span class="token number">1</span>/1 <span class="token punctuation">(</span>frame <span class="token number">9</span>/617<span class="token punctuation">)</span> /ultralytics/car.mp4: 384x640 <span class="token number">3</span> persons, <span class="token number">14</span> cars, <span class="token number">1</span> bus, <span class="token number">2</span> trucks, <span class="token number">14</span>.2ms<span class="token punctuation">..</span>.video <span class="token number">1</span>/1 <span class="token punctuation">(</span>frame <span class="token number">613</span>/617<span class="token punctuation">)</span> /ultralytics/car.mp4: 384x640 <span class="token number">12</span> cars, <span class="token number">2</span> buss, <span class="token number">4</span> trucks, <span class="token number">24</span>.0msvideo <span class="token number">1</span>/1 <span class="token punctuation">(</span>frame <span class="token number">614</span>/617<span class="token punctuation">)</span> /ultralytics/car.mp4: 384x640 <span class="token number">14</span> cars, <span class="token number">2</span> buss, <span class="token number">3</span> trucks, <span class="token number">24</span>.2msvideo <span class="token number">1</span>/1 <span class="token punctuation">(</span>frame <span class="token number">615</span>/617<span class="token punctuation">)</span> /ultralytics/car.mp4: 384x640 <span class="token number">14</span> cars, <span class="token number">2</span> buss, <span class="token number">4</span> trucks, <span class="token number">28</span>.3msvideo <span class="token number">1</span>/1 <span class="token punctuation">(</span>frame <span class="token number">616</span>/617<span class="token punctuation">)</span> /ultralytics/car.mp4: 384x640 <span class="token number">13</span> cars, <span class="token number">2</span> buss, <span class="token number">3</span> trucks, <span class="token number">25</span>.6msvideo <span class="token number">1</span>/1 <span class="token punctuation">(</span>frame <span class="token number">617</span>/617<span class="token punctuation">)</span> /ultralytics/car.mp4: 384x640 <span class="token number">12</span> cars, <span class="token number">2</span> buss, <span class="token number">3</span> trucks, <span class="token number">1</span> traffic light, <span class="token number">22</span>.4msSpeed: <span class="token number">2</span>.7ms preprocess, <span class="token number">16</span>.9ms inference, <span class="token number">2</span>.7ms postprocess per image at shape <span class="token punctuation">(</span><span class="token number">1</span>, <span class="token number">3</span>, <span class="token number">384</span>, <span class="token number">640</span><span class="token punctuation">)</span>Results saved to /ultralytics/runs/detect/predict4💡 Learn <span class="token function">more</span> at https://docs.ultralytics.com/modes/predict<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>性能还不错，毕竟也算是比较强力的显卡了，与此同时，还可以可以看到在任务管理器里的GPU使用率：</p><div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="/images/yolo11-on-wslg-docker/yolo-car.png" alt="yolo11-predict-car"></div><div class="group-picture-column"><img src="/images/yolo11-on-wslg-docker/gpu-usage.png" alt="yolo11-predict-gpuusage"></div></div></div><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>确实有够折腾的，Windows + WSL + WSLg + Docker + YOLOv11的”无限”套娃组合，无痛的跑起来了YOLO的推理，理论上来说，包括当前LLM等等各种AI应用，都可以在这套体系下很好的工作，Windows不愧是“最好的”Linux发型版。微软还是牛逼啊。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;前几天偶然发现，Windows 11的WSL2可以通过WSLg来无缝使用GUI应用。类似推理&amp;#x2F;训练等任务，都不在话下，这瞬间勾起了我的好奇心，决定试试微软提供的这个神奇功能。其实微软在2021年就发布了WSLg，现在已经是2025年了，刚刚开始折腾也算是后知后觉了。&lt;/p&gt;
&lt;p&gt;WSL支持GUI应用只能算是WSLg的一个最简单的功能了，当涉及模型训练或者GPU加速时，GPU驱动还有CUDA等等相关的配置就会变得复杂起来。我并不希望因为“折腾”这么一下，就把我的WSL环境搞得一团糟，这时候，Docker的价值就体现出来了。利用Docker，可以在不修改现有WSL环境的情况下，快速搭建一个隔离的环境来做些简单的测试。我决定使用YOLO作为测试对象，看看在WSL+WSLg+Docker的场景下，YOLO还能不能很好的工作，正确使用我的GPU进行加速。&lt;/p&gt;</summary>
    
    
    
    <category term="日常折腾" scheme="https://www.ichenfu.com/categories/%E6%97%A5%E5%B8%B8%E6%8A%98%E8%85%BE/"/>
    
    
    <category term="Docker" scheme="https://www.ichenfu.com/tags/Docker/"/>
    
    <category term="WSL" scheme="https://www.ichenfu.com/tags/WSL/"/>
    
    <category term="YOLOv11" scheme="https://www.ichenfu.com/tags/YOLOv11/"/>
    
    <category term="WSLg" scheme="https://www.ichenfu.com/tags/WSLg/"/>
    
  </entry>
  
  <entry>
    <title>在三条指令内实现闰年判断</title>
    <link href="https://www.ichenfu.com/2025/05/29/a-leap-year-check-in-three-instructions/"/>
    <id>https://www.ichenfu.com/2025/05/29/a-leap-year-check-in-three-instructions/</id>
    <published>2025-05-29T12:29:37.000Z</published>
    <updated>2025-06-25T06:00:01.251Z</updated>
    
    <content type="html"><![CDATA[<p>本文是<a href="https://hueffner.de/falk/blog/a-leap-year-check-in-three-instructions.html">A leap year check in three instructions</a>的翻译，前两天在<a href="https://news.ycombinator.com/item?id=43999748">HackerNews</a>上看到这篇文章，闰年的判断方法，从一开始学编程就是一个经典的练习题，但是深挖下去，作者只用了三条指令就能实现闰年的判断，感觉还挺有意思的，所以就翻译分享一下。</p><p>省流不看版（基于DeepSeek总结）：<br>文章介绍了一种使用大约3个CPU指令实现快速闰年检查的方法。这种方法不同于标准算法（涉及模运算和分支），而是利用位操作和魔法数字，将闰年规则（能被4整除，但不能被100整除，除非能被400整除）巧妙地映射到对年份乘以一个常数后的结果进行位范围检查。这种位操作方法对于随机年份输入表现出显著的速度提升，并且针对特定范围已证明是最优解。这项优化技术涉及复杂的位运算细节。</p><p>以下是原文的翻译：</p><span id="more"></span><p>通过以下代码，我们可以在大约 3 个 CPU 指令内检查 0 ≤ y ≤ 102499 的年份是否是闰年：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">bool <span class="token function">is_leap_year_fast</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>y <span class="token operator">*</span> <span class="token number">1073750999</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">3221352463</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">126976</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这是如何工作的呢？答案出奇地复杂。本文解释了其中的原理，主要是为了享受位操作的乐趣；最后，我将简要讨论其实际用途。 我们一般使用的基础版闰年检查代码是这样的：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">bool <span class="token function">is_leap_year</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>y <span class="token operator">%</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>y <span class="token operator">%</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>y <span class="token operator">%</span> <span class="token number">400</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们使用的是<a href="https://en.wikipedia.org/wiki/Proleptic_Gregorian_calendar">前推格里高利历</a>，它将格里高利历从1582年引入的时间向前延伸，并包含0年。因此，我们无需对1582年之前的年份做特殊处理。为简化起见，我们忽略负数年份，使用无符号年份。</p><h2 id="标准方法的优化"><a href="#标准方法的优化" class="headerlink" title="标准方法的优化"></a>标准方法的优化</h2><p>我们先做一些简单的优化，以便获得一个良好的基准线。我不确定应该把功劳归给谁，这些技巧可能已经被独立实现很多次了。<br>我们可以将<code>(y % 100) != 0</code>替换为<code>(y % 25) != 0</code>：我们已经知道<code>y</code>是<code>2²</code>的倍数，所以如果它也是<code>5²</code>的倍数，它就是<code>2² * 5² = 100</code>的倍数。类似地，我们可以将<code>(y % 400) == 0</code>替换为<code>(y % 16) == 0</code>：我们已经知道<code>y</code>是<code>5²</code>的倍数，所以如果它也是<code>2⁴</code>的倍数，它就是<code>5² * 2⁴ = 400</code>的倍数：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">bool <span class="token function">is_leap_year1</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>y <span class="token operator">%</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>y <span class="token operator">%</span> <span class="token number">25</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>y <span class="token operator">%</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这很有用，因为我们现在可以用位掩码替换对 4 和 16 的取余运算。还有一个编译器实现者熟知的技巧，可以将对 25 的取余运算降低成本。用 gcc 编译<code>(x % 25) != 0</code>并翻译回 C，我们得到<code>x * 3264175145 &gt; 171798691</code>。乘法在典型的延迟约为 3 个周期，而取余运算至少需要 20 个周期，这是一个巨大的改进。我只会简要说明其工作原理的直觉；更多细节可以在以下资源中找到：</p><ul><li><a href="https://doi.org/10.1002/spe.2689">Faster remainder by direct computation: Applications to compilers and software libraries</a> by Daniel Lemire, Owen Kaser, and Nathan Kurz for lowering modulo by a constant in general;</li><li><a href="https://doi.org/10.1002/spe.3172">Euclidean affine functions and their application to calendar algorithms</a> by Cassio Neri and Lorenz Schneider more specifically for calendar calculations; and</li><li><a href="https://davecturner.github.io/2020/08/07/leapyear-optimization.html">Identifying leap years</a> by David Turner for the leap year check (including formal proofs!).</li></ul><p>关于<code>3264175145</code>和<code>171798691</code>这两个”magic numbers”是从哪里来的呢？我们有</p><p>2<sup>32</sup> * 19&#x2F;25 &#x3D; 3264175144.96 (这个是精确值)<br>因此，通过乘以<code>3264175145</code>，我们可以近似得到乘以 (19&#x2F;25) 的小数部分，如果是乘以<code>3264175144.96</code>这个精确值的话，对于25的倍数，我们将得到一个整数。但实际乘的数是比精确值大了0.04，因此会有最大<code>0.04 * (2³² - 1) = 171798691.8</code>的误差，这也是<code>171798691</code>的来源。</p><p>这个技巧对于<code>x % 100</code>效果不太好，需要多一条修正指令，所以从<code>y % 100</code>减少到<code>y % 25</code>还是有必要的。</p><p>到这里，我们的代码变成了这样：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">bool <span class="token function">is_leap_year2</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>y <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>y <span class="token operator">*</span> <span class="token number">3264175145u</span> <span class="token operator">></span> <span class="token number">171798691u</span><span class="token punctuation">)</span> <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>y <span class="token operator">&amp;</span> <span class="token number">15</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>需要注意的是，像 gcc 或 clang 这样的现代编译器会从 is_leap_year1 生成类似 is_leap_year2 的<a href="https://godbolt.org/z/GeK6Trfx6">代码</a>，因此在 C 源代码中这样做意义不大，但在其他编程语言中可能还是有用的。<br>这段代码通常会被编译成带分支跳转的汇编代码。然而实际上这个函数的输入通常是可预测的，所以这不一定是坏事。如果我们想在牺牲最好场景下的性能来避免大部分场景下分支预测失败的开销的话，我们可以稍微调整一下顺序，得到<a href="https://godbolt.org/z/PWs8saMYd">无分支跳转的代码</a>：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">bool <span class="token function">is_leap_year3</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token operator">!</span><span class="token punctuation">(</span>y <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>y <span class="token operator">%</span> <span class="token number">25</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">3</span> <span class="token operator">:</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>当然如果您想了解更多日历计算相关的加速方法，可以查阅 Jacob Pratt 的<a href="https://jhpratt.dev/blog/optimizing-with-novel-calendrical-algorithms/">Optimizing with Novel Calendrical Algorithms</a>。</p><h2 id="寻找基于位操作的方法"><a href="#寻找基于位操作的方法" class="headerlink" title="寻找基于位操作的方法"></a>寻找基于位操作的方法</h2><p>我们能否通过放弃对所有输入的正确性来改进闰年计算？毕竟，我们通常不关心年份3584536493是否是闰年；实际上，Python、C# 和 Go 只支持 0 年（或 1 年）到 9999 年（此时相对于季节的漂移已经超过 4 天）。我的想法是，如果存在更短的形式，它基本上会像使用魔术常数进行某种奇怪的哈希操作，所以我尝试了一些方法，并通过暴力搜索猜测常数。<code>(y * f) &lt;= t</code>的形式似乎有用，但不够强大。我的一个备选方案是添加一个掩码：<code>((y * f) &amp; m) &lt;= t</code>。现在我们需要猜测 96个bit位，这无法单独通过暴力搜索完成。让我们使用<a href="https://github.com/Z3Prover/z3">z3</a>，一个支持位向量约束的求解器，它非常适合这项工作。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> z3BITS <span class="token operator">=</span> <span class="token number">32</span>f<span class="token punctuation">,</span> m<span class="token punctuation">,</span> t<span class="token punctuation">,</span> y <span class="token operator">=</span> z3<span class="token punctuation">.</span>BitVecs<span class="token punctuation">(</span><span class="token string">'f m t y'</span><span class="token punctuation">,</span> BITS<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">target</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> z3<span class="token punctuation">.</span>And<span class="token punctuation">(</span><span class="token punctuation">(</span>y <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">,</span> z3<span class="token punctuation">.</span>Or<span class="token punctuation">(</span>z3<span class="token punctuation">.</span>URem<span class="token punctuation">(</span>y<span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>y <span class="token operator">&amp;</span> <span class="token number">15</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">candidate</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> z3<span class="token punctuation">.</span>ULE<span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">*</span> f<span class="token punctuation">)</span> <span class="token operator">&amp;</span> m<span class="token punctuation">,</span> t<span class="token punctuation">)</span>solver <span class="token operator">=</span> z3<span class="token punctuation">.</span>Solver<span class="token punctuation">(</span><span class="token punctuation">)</span>solver<span class="token punctuation">.</span>add<span class="token punctuation">(</span>z3<span class="token punctuation">.</span>ForAll<span class="token punctuation">(</span>y<span class="token punctuation">,</span> z3<span class="token punctuation">.</span>Implies<span class="token punctuation">(</span>z3<span class="token punctuation">.</span>ULE<span class="token punctuation">(</span>y<span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                   candidate<span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token operator">==</span> target<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> solver<span class="token punctuation">.</span>check<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> z3<span class="token punctuation">.</span>sat<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'found solution: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>solver<span class="token punctuation">.</span>model<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'no solution found'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在几秒钟内，这找到了一些常数，它们在一定年份范围内给出了正确的结果。扩展范围后，大约花费了半小时的计算时间，我最终找到了在0年到102499年范围内给出正确结果的常数，并证明了这是32位的最优解：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">bool <span class="token function">is_leap_year_fast</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token class-name">uint32_t</span> f <span class="token operator">=</span> <span class="token number">1073750999u</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token class-name">uint32_t</span> m <span class="token operator">=</span> <span class="token number">3221352463u</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token class-name">uint32_t</span> t <span class="token operator">=</span> <span class="token number">126976u</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>y <span class="token operator">*</span> f<span class="token punctuation">)</span> <span class="token operator">&amp;</span> m<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> t<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h2><p>它是如何工作的呢？我们能将所有这些计算压缩到三条指令中，这似乎令人惊讶，感觉就像是魔法一样，不过，上面的内容已经给我们足够多的工具来理解它了。</p><p>下面是这三个常量的二进制表示，并且用ABCD标识出来了相关的bit范围：</p><p><img src="/images/bit_ranges.png"></p><p>让我们首先考虑乘积 <code>p := y * f</code>，与 m 进行位与操作后再和t进行比较的作用。在区块 A 中，t 的位为 0，因此只要 p 中 A 中的任何位被设置，结果就为 false。否则，区块 B 就变得相关。在这里，t 中的所有位都为 1，所以只要 p 中 B 中的任何位未设置，结果就为 true。否则，对于区块 C，我们要求 p 中所有位都未设置。通过这种方式，多个位范围的比较都被统一到一个单一的 &lt;&#x3D; 操作中。 因此，我们可以将 is_leap_year_fast 重写如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">bool <span class="token function">is_leap_year_fast2</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">uint32_t</span> p <span class="token operator">=</span> y <span class="token operator">*</span> <span class="token number">1073750999u</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token class-name">uint32_t</span> A <span class="token operator">=</span> <span class="token number">0</span>b11000000000000000000000000000000<span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token class-name">uint32_t</span> B <span class="token operator">=</span> <span class="token number">0</span>b00000000000000011111000000000000<span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token class-name">uint32_t</span> C <span class="token operator">=</span> <span class="token number">0</span>b00000000000000000000000000001111<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">&amp;</span> A<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">&amp;</span> B<span class="token punctuation">)</span> <span class="token operator">!=</span> B<span class="token punctuation">)</span> <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">&amp;</span> C<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这看起来非常像<code>is_leap_year2</code>！实际上，这三个条件的目的是完全相同的。我们可以证明：</p><ol><li>当<code>(p &amp; A) != 0</code>时，<code>(y % 4) != 0</code> 也成立；</li><li>当<code>(p &amp; B) != B</code>时，<code>(y % 100) != 0</code>也成立；</li><li>当<code>(p &amp; C) == 0</code>时，<code>(y % 16) == 0</code>（而且 <code>(y % 400) == 0</code>，因为我们已经知道 y 是25的倍数）。</li></ol><h4 id="针对（1）和（3）这两种简单场景："><a href="#针对（1）和（3）这两种简单场景：" class="headerlink" title="针对（1）和（3）这两种简单场景："></a>针对（1）和（3）这两种简单场景：</h4><p>(1)：f 中 A 的1位将 y 的低两位重现在 p 的 A 位置。这不会被与 D 中的位相乘的结果所破坏：我们能得到的最大值是 102499 * (f &amp; D) &#x3D; 940428325，它只有30位。因此，检查 p 中 A 是否为零等同于检查 y 是否模4为0。<br>(3)：检查 p 的最低4位是否都未设置，就是检查 p 是否模16为0。然而，我们实际想检查的是 y。这不是问题：只需查看 f 的最低4位即可，而 f 在那里是1111<sub>2</sub> &#x3D; 7。乘以7不会引入额外的因数2，因此依然是可以被16整除的。</p><h4 id="针对（2）这种有趣的场景："><a href="#针对（2）这种有趣的场景：" class="headerlink" title="针对（2）这种有趣的场景："></a>针对（2）这种有趣的场景：</h4><p>接下来，让我们尝试找出哪些数满足 p &amp; B ≠ B。为此，f &amp; A 中的1位不起作用，所以考虑 f &amp; D 中的位。它们是 10001111010111<sub>2</sub> &#x3D; 9175。让我们看看哪些数通过了测试：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> B <span class="token operator">=</span> <span class="token number">0b00000000000000011111000000000000</span><span class="token operator">>></span><span class="token operator">></span> s <span class="token operator">=</span> <span class="token punctuation">[</span>y <span class="token keyword">for</span> y <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>y <span class="token operator">*</span> <span class="token number">9175</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> B<span class="token punctuation">)</span> <span class="token operator">==</span> B<span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>n<span class="token punctuation">:</span><span class="token format-spec">4d</span><span class="token punctuation">&#125;</span></span><span class="token string">'</span></span> <span class="token keyword">for</span> n <span class="token keyword">in</span> s<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i<span class="token operator">+</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token number">14</span>   <span class="token number">57</span>   <span class="token number">71</span>  <span class="token number">100</span>  <span class="token number">114</span>  <span class="token number">157</span>  <span class="token number">171</span>  <span class="token number">200</span>  <span class="token number">214</span>  <span class="token number">257</span>  <span class="token number">271</span>  <span class="token number">300</span>  <span class="token number">314</span>  <span class="token number">357</span>  <span class="token number">371</span>  <span class="token number">400</span> <span class="token number">414</span>  <span class="token number">457</span>  <span class="token number">471</span>  <span class="token number">500</span>  <span class="token number">514</span>  <span class="token number">557</span>  <span class="token number">571</span>  <span class="token number">600</span>  <span class="token number">614</span>  <span class="token number">657</span>  <span class="token number">671</span>  <span class="token number">700</span>  <span class="token number">714</span>  <span class="token number">757</span>  <span class="token number">771</span>  <span class="token number">800</span> <span class="token number">814</span>  <span class="token number">857</span>  <span class="token number">871</span>  <span class="token number">900</span>  <span class="token number">914</span>  <span class="token number">957</span>  <span class="token number">971</span> <span class="token number">1000</span> <span class="token number">1014</span> <span class="token number">1057</span> <span class="token number">1071</span> <span class="token number">1100</span> <span class="token number">1114</span> <span class="token number">1157</span> <span class="token number">1171</span> <span class="token number">1200</span><span class="token number">1214</span> <span class="token number">1257</span> <span class="token number">1271</span> <span class="token number">1300</span> <span class="token number">1314</span> <span class="token number">1357</span> <span class="token number">1371</span> <span class="token number">1400</span> <span class="token number">1414</span> <span class="token number">1457</span> <span class="token number">1471</span> <span class="token number">1500</span> <span class="token number">1514</span> <span class="token number">1557</span> <span class="token number">1571</span> <span class="token number">1600</span><span class="token number">1614</span> <span class="token number">1657</span> <span class="token number">1671</span> <span class="token number">1700</span> <span class="token number">1714</span> <span class="token number">1757</span> <span class="token number">1771</span> <span class="token number">1800</span> <span class="token number">1814</span> <span class="token number">1857</span> <span class="token number">1871</span> <span class="token number">1900</span> <span class="token number">1914</span> <span class="token number">1957</span> <span class="token number">1971</span> <span class="token number">2000</span><span class="token number">2014</span> <span class="token number">2057</span> <span class="token number">2071</span> <span class="token number">2100</span> <span class="token number">2114</span> <span class="token number">2157</span> <span class="token number">2171</span> <span class="token number">2200</span> <span class="token number">2214</span> <span class="token number">2257</span> <span class="token number">2271</span> <span class="token number">2300</span> <span class="token number">2314</span> <span class="token number">2357</span> <span class="token number">2371</span> <span class="token number">2400</span><span class="token number">2414</span> <span class="token number">2457</span> <span class="token number">2471</span> <span class="token number">2500</span> <span class="token number">2514</span> <span class="token number">2557</span> <span class="token number">2571</span> <span class="token number">2600</span> <span class="token number">2614</span> <span class="token number">2657</span> <span class="token number">2671</span> <span class="token number">2700</span> <span class="token number">2714</span> <span class="token number">2757</span> <span class="token number">2771</span> <span class="token number">2800</span><span class="token number">2814</span> <span class="token number">2857</span> <span class="token number">2871</span> <span class="token number">2900</span> <span class="token number">2914</span> <span class="token number">2957</span> <span class="token number">2971</span> <span class="token number">3000</span> <span class="token number">3014</span> <span class="token number">3057</span> <span class="token number">3071</span> <span class="token number">3100</span> <span class="token number">3114</span> <span class="token number">3157</span> <span class="token number">3171</span> <span class="token number">3200</span><span class="token number">3214</span> <span class="token number">3257</span> <span class="token number">3271</span> <span class="token number">3300</span> <span class="token number">3314</span> <span class="token number">3357</span> <span class="token number">3371</span> <span class="token number">3400</span> <span class="token number">3414</span> <span class="token number">3457</span> <span class="token number">3471</span> <span class="token number">3500</span> <span class="token number">3514</span> <span class="token number">3557</span> <span class="token number">3571</span> <span class="token number">3600</span><span class="token number">3614</span> <span class="token number">3657</span> <span class="token number">3671</span> <span class="token number">3700</span> <span class="token number">3714</span> <span class="token number">3757</span> <span class="token number">3771</span> <span class="token number">3800</span> <span class="token number">3814</span> <span class="token number">3857</span> <span class="token number">3871</span> <span class="token number">3900</span> <span class="token number">3914</span> <span class="token number">3957</span> <span class="token number">3971</span> <span class="token number">4000</span><span class="token number">4014</span> <span class="token number">4057</span> <span class="token number">4071</span> <span class="token number">4100</span> <span class="token number">4114</span> <span class="token number">4157</span> <span class="token number">4200</span> <span class="token number">4214</span> <span class="token number">4257</span> <span class="token number">4300</span> <span class="token number">4314</span> <span class="token number">4357</span> <span class="token number">4400</span> <span class="token number">4414</span> <span class="token number">4457</span> <span class="token number">4500</span><span class="token number">4514</span> <span class="token number">4557</span> <span class="token number">4600</span> <span class="token number">4614</span> <span class="token number">4657</span> <span class="token number">4700</span> <span class="token number">4714</span> <span class="token number">4757</span> <span class="token number">4800</span> <span class="token number">4814</span> <span class="token number">4857</span> <span class="token number">4900</span> <span class="token number">4914</span> <span class="token number">4957</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>正如所愿，100的倍数在这里出现了，但也出现了一堆其他的数字。但只要它们都不是4的倍数都没关系，因为这些数字会在前一步里先被被过滤掉。另外，0不见了，但这也不是问题，因为0也是400的倍数。</p><p>让我们试着理解这个规律。乍一看，它看起来非常简单：我们有 *14, *57, *71 和 *00。然而，从4171开始，*71 就消失了（你注意到了吗？）。后面也有新的规律出现。让我们再借助Python来分析一下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>    B <span class="token operator">=</span> <span class="token number">126976</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>y <span class="token operator">*</span> <span class="token number">9175</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> B<span class="token punctuation">)</span> <span class="token operator">==</span> Bactive <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> y <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">120000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> y <span class="token operator">%</span> <span class="token number">100</span>    <span class="token keyword">if</span> test<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> r <span class="token keyword">not</span> <span class="token keyword">in</span> active<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>y<span class="token punctuation">:</span><span class="token format-spec">6</span><span class="token punctuation">&#125;</span></span><span class="token string">: started *</span><span class="token interpolation"><span class="token punctuation">&#123;</span>r<span class="token punctuation">:</span><span class="token format-spec">02</span><span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>            active<span class="token punctuation">.</span>add<span class="token punctuation">(</span>r<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> r <span class="token keyword">in</span> active<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>y<span class="token punctuation">:</span><span class="token format-spec">6</span><span class="token punctuation">&#125;</span></span><span class="token string">: stopped *</span><span class="token interpolation"><span class="token punctuation">&#123;</span>r<span class="token punctuation">:</span><span class="token format-spec">02</span><span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>            active<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以得到：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">    <span class="token number">14</span>: started *14    <span class="token number">57</span>: started *57    <span class="token number">71</span>: started *71   <span class="token number">100</span>: started *00  <span class="token number">4171</span>: stopped *71 <span class="token number">32843</span>: started *43 <span class="token number">36914</span>: stopped *14 <span class="token number">65586</span>: started *86 <span class="token number">69657</span>: stopped *57 <span class="token number">98329</span>: started *29<span class="token number">102500</span>: stopped *00<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以，从102500开始，我们不再捕获100的倍数，这解释了为什么102499是<code>is_leap_year_fast</code>能获得正确结果的最后一个数字。我们还看到，在此之下，除了100的倍数外，没有其他数字是4的倍数（方便的是，我们只需知道最后两位十进制数字就可以检查这一点）。如果信任这种暴力枚举的结果，这就完成了条件(2)的证明；但我们继续更深入地理解为什么我们恰好得到了这些数字。</p><p>让我们深入研究一下为什么我们首先得到了100的倍数。因子9175在17位定点表示中接近于1&#x2F;100的倍数：</p><p>2<sup>17</sup> * 7&#x2F;100 &#x3D; 9175.04 (这个是精确值)。</p><p>将100的倍数乘以9175.04，会得到一个整数（7的倍数），位于第17位及以上，以及低于第17位的17个零位，例如：<br>9175.04 * 500 &#x3D; 10001100000000000000000<sub>2</sub>, 其中100011<sub>2</sub> &#x3D; 35 &#x3D; 5 * 7。</p><p>将100的倍数乘以9175会得到略小的结果：<br>9175 * 500 &#x3D; 10001100000000000000000<sub>2</sub> − 500 * 0.04 &#x3D; 10001011111111111101100<sub>2</sub></p><p>一般来说，从一个以很多零结尾的数字中减去一点点，除了末尾的0之外，会得到一个以很多一结尾的数字。在这里，我们检查 B 中的5位。对于 y 是100的倍数，这些位保证都是1，随着误差慢慢累计累积达到 B 的低位，这只有在 y &#x3D; 2<sup>17</sup> &#x2F; 0.04 &#x3D; 102400之后才会发生，所以这是符合预期的。</p><p> 那么像14、57、71这样的其他数字是从哪里来的呢？让我们换个角度来看：<br> 我们有 9175 &#x3D; 2<sup>17</sup> * 0.06999969482421875 (精确值)，而 B &#x3D; 2<sup>17</sup> * 0.96875，所以：<br> p &amp; B &#x3D; B ⇔ {y * 0.06999969482421875} ≥ 0.96875 其中 {x} 是 x 的小数部分 ⇔ 6.999969482421875y mod 100 ≥ 96.875</p><p> 这也同样解释了为什么100的倍数是可以的：对于100的倍数，7y mod 100 是 0，所以 6.999969482421875y mod 100 会稍微小于 100，并且只有在 y &#x3D; (100 − 96.875) &#x2F; (7 − 6.999969482421875) &#x3D; 102400 之后才会降到 96.875 以下。</p><p> 为了理解在我们序列中出现的其他数字，让我们首先考虑如果我们在不等式中是整数 7，解会是什么：<br>7y mod 100 ≥ 96.875 ⇔ 7y mod 100 ∈ {97, 98, 99}。</p><p>为了找到这个解，我们首先需要 7 mod 100 的模逆元，也就是说，一个数字 x 使得 7x mod 100 &#x3D; 1。我们可以使用扩展欧几里德算法计算它，或者直接使用<a href="https://www.wolframalpha.com/input?i=modular+inverse+of+7+modulo+100">在线计算器</a>，它会告诉我们结果是 43。那么解就是 43 * 97 (mod 100)，43 * 98 (mod 100)，以及 43 * 99 (mod 100)，结果分别为 71、14 和 57 (mod 100)。这解释了为什么我们最初会看到 *14、*57 和 *71 形式的数字。这也解释了为什么我们在 4071 之后不再看到 *71 等数字：虽然 7 * 4171 &#x3D; 29197，但我们有 6.999969482421875 * 4171 &#x3D; 29196.872711181640625，它（模 100）小于 96.875。类似地，32843 出现是因为累积误差 (7 − 6.999969482421875) * 32843 &#x3D; 1.002288818359375 超过了1。再花一些精力，我们就可以手动重现上面的 Python 程序的输出，并检查这些数字中没有任何一个是4的倍数。</p><h2 id="扩展到其他比特位"><a href="#扩展到其他比特位" class="headerlink" title="扩展到其他比特位"></a>扩展到其他比特位</h2><p>现在我们理解了这个技巧的工作原理，我们可以尝试为其他比特位寻找参数，可变部分是区块B，以及 f &amp; D 中100的小数部分：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token class-name">uint64_t</span> <span class="token function">score</span><span class="token punctuation">(</span><span class="token class-name">uint64_t</span> f<span class="token punctuation">,</span> <span class="token class-name">uint64_t</span> m<span class="token punctuation">,</span> <span class="token class-name">uint64_t</span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">uint64_t</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> y<span class="token operator">++</span><span class="token punctuation">)</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>y <span class="token operator">*</span> f<span class="token punctuation">)</span> <span class="token operator">&amp;</span> m<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> t<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token function">is_leap_year</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span>              <span class="token keyword">return</span> y<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">uint64_t</span> best_score <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> BITS<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k2 <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> k2<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token class-name">uint64_t</span> t <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1ULL</span> <span class="token operator">&lt;&lt;</span> k<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">1ULL</span> <span class="token operator">&lt;&lt;</span> k2<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token class-name">uint64_t</span> m <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0</span>b11ULL <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>BITS <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">|</span> t <span class="token operator">|</span> <span class="token number">0</span>b1111<span class="token punctuation">;</span>              <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> n <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> n<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                  <span class="token class-name">uint64_t</span> f <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0</span>b01ULL <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>BITS <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1ULL</span> <span class="token operator">&lt;&lt;</span> k<span class="token punctuation">)</span> <span class="token operator">*</span> n<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token class-name">uint64_t</span> new_score <span class="token operator">=</span> <span class="token function">score</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> m<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token keyword">if</span> <span class="token punctuation">(</span>new_score <span class="token operator">></span> best_score<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%llu %llu %llu: %llu (%d %d %d)\n"</span><span class="token punctuation">,</span>                             f<span class="token punctuation">,</span> m<span class="token punctuation">,</span> t<span class="token punctuation">,</span> new_score<span class="token punctuation">,</span> k<span class="token punctuation">,</span> k <span class="token operator">-</span> k2<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>                      best_score <span class="token operator">=</span> new_score<span class="token punctuation">;</span>                  <span class="token punctuation">&#125;</span>              <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于BITS &#x3D; 64的情况，花了大约7分钟，我们找到了 f &#x3D; 4611686019114582671，m &#x3D; 13835058121854156815，t &#x3D; 66571993088，这个组合对于 y &#x3D; 5965232499 及以下的年份是都正确的。这很棒，因为 5965232499 &gt; 2<sup>17</sup>，所以任何32位整数年份都可以基于这个组合来计算。</p><p>对于64位来说，这是我们能达到的最好结果吗？也许还有其他常数效果更好？我无法立即找到证明方法，所以我采用了久经考验的方法——让别人为我做这件事，将其发布到<a href="https://codegolf.stackexchange.com/q/275505/116815">Code Golf StackExchange</a>上。果然，仅1小时后，用户ovs就发布了一个非常好的结果，两天后用户Exalted Toast发布了<a href="https://codegolf.stackexchange.com/a/275541">证明</a>，表明5965232499确实是64位的最佳可能范围，同样的，他也使用了z3来进行求解。</p><h2 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h2><p>想要做一个有意义的基准测试不太容易，因为函数执行时间都非常短，而且对于普通带分支跳转的版本，执行时间和输入强相关。我们尝试了两个极端情况：只输入2025年，以及使用完全随机的年份。以下是在 i7-8700K (Coffee Lake, 4.7 GHz) 上使用<code>g++ -O3 -fno-tree-vectorize</code>编译的<a href="https://hueffner.de/falk/blog/benchmark.cc">基准测试</a>结果：</p><table><thead><tr><th>函数名称</th><th>2025 (ns)</th><th>random (ns)</th></tr></thead><tbody><tr><td>is_leap_year</td><td>0.65</td><td>2.61</td></tr><tr><td>is_leap_year2</td><td>0.65</td><td>2.75</td></tr><tr><td>is_leap_year3</td><td>0.67</td><td>0.88</td></tr><tr><td>is_leap_year_fast</td><td>0.69</td><td>0.69</td></tr></tbody></table><p>这个结果还是有些奇怪的地方的：</p><ul><li><code>is_leap_year2</code>在随机年份情况下比<code>is_leap_year</code>还要稍微慢一点。这有点奇怪，因为<code>y % 100</code>比<code>is_leap_year2</code>中的实现还要多一条指令。（根据Cassio Neri的<a href="https://github.com/falk-hueffner/blog-falk/discussions/1#discussioncomment-13178116">评论</a>，一个可能的解释是分支预测错误的概率差距导致，is_leap_year平均每100次预测错误一次，而is_leap_year2平均每25次预测就会错误一次。）</li><li><code>is_leap_year3</code>在随机数据上比固定值慢一点。这也很奇怪，因为它没有任何分支跳转，理论上时间应该固定的。 除了“基准测试很难”之外，我无法解释这一点。</li></ul><p>从结果看，对于随机数据，新函数<code>is_leap_year_fast</code>比标准实现快 3.8 倍，对于完美可预测的输入，大约慢 6%。总的来说，这看起来相当不错。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总结一下，这么做一个小优化是否真的值得？我们是否应该用这个新的函数替换现有的实现，比如将<a href="https://github.com/python/cpython/blob/5cdd49b3f4cbdcf0472a65fd0c723912c3d48211/Modules/_datetimemodule.c#L416">CPython datetime</a>替换掉？嗯，这还是得根据实际情况决定。实践中查询的大多数年份会是当前年份，或者至少是相当可预知的年份，在这种情况下，我们并没有很大的优势。为了充分证明改变是合理的，理想情况下我们需要一个使用闰年检查作为子程序的实际数据基准测试，而不仅仅是微基准测试。我很乐意听到任何此类结果！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文是&lt;a href=&quot;https://hueffner.de/falk/blog/a-leap-year-check-in-three-instructions.html&quot;&gt;A leap year check in three instructions&lt;/a&gt;的翻译，前两天在&lt;a href=&quot;https://news.ycombinator.com/item?id=43999748&quot;&gt;HackerNews&lt;/a&gt;上看到这篇文章，闰年的判断方法，从一开始学编程就是一个经典的练习题，但是深挖下去，作者只用了三条指令就能实现闰年的判断，感觉还挺有意思的，所以就翻译分享一下。&lt;/p&gt;
&lt;p&gt;省流不看版（基于DeepSeek总结）：&lt;br&gt;文章介绍了一种使用大约3个CPU指令实现快速闰年检查的方法。这种方法不同于标准算法（涉及模运算和分支），而是利用位操作和魔法数字，将闰年规则（能被4整除，但不能被100整除，除非能被400整除）巧妙地映射到对年份乘以一个常数后的结果进行位范围检查。这种位操作方法对于随机年份输入表现出显著的速度提升，并且针对特定范围已证明是最优解。这项优化技术涉及复杂的位运算细节。&lt;/p&gt;
&lt;p&gt;以下是原文的翻译：&lt;/p&gt;</summary>
    
    
    
    <category term="源码分析" scheme="https://www.ichenfu.com/categories/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    
    <category term="闰年" scheme="https://www.ichenfu.com/tags/%E9%97%B0%E5%B9%B4/"/>
    
    <category term="位操作" scheme="https://www.ichenfu.com/tags/%E4%BD%8D%E6%93%8D%E4%BD%9C/"/>
    
    <category term="算法" scheme="https://www.ichenfu.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>一个中断关闭时间太长导致的网络延迟问题</title>
    <link href="https://www.ichenfu.com/2025/05/10/a-network-latency-problem/"/>
    <id>https://www.ichenfu.com/2025/05/10/a-network-latency-problem/</id>
    <published>2025-05-10T03:15:50.000Z</published>
    <updated>2025-05-26T01:52:52.183Z</updated>
    
    <content type="html"><![CDATA[<p>近期线上出现了一个问题，现象是有一台机器，网络出现了不定时的延迟：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># ping -i 0.05 192.168.0.5</span><span class="token comment">#...</span><span class="token number">64</span> bytes from <span class="token number">192.168</span>.0.5: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">673</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">63</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.203</span> ms<span class="token number">64</span> bytes from <span class="token number">192.168</span>.0.5: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">674</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">63</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.210</span> ms<span class="token number">64</span> bytes from <span class="token number">192.168</span>.0.5: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">675</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">63</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.218</span> ms<span class="token number">64</span> bytes from <span class="token number">192.168</span>.0.5: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">676</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">63</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.233</span> ms<span class="token number">64</span> bytes from <span class="token number">192.168</span>.0.5: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">677</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">63</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">406</span> ms<span class="token number">64</span> bytes from <span class="token number">192.168</span>.0.5: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">678</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">63</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">354</span> ms<span class="token number">64</span> bytes from <span class="token number">192.168</span>.0.5: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">679</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">63</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">302</span> ms<span class="token number">64</span> bytes from <span class="token number">192.168</span>.0.5: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">680</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">63</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">251</span> ms<span class="token number">64</span> bytes from <span class="token number">192.168</span>.0.5: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">681</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">63</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">199</span> ms<span class="token number">64</span> bytes from <span class="token number">192.168</span>.0.5: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">682</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">63</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">147</span> ms<span class="token number">64</span> bytes from <span class="token number">192.168</span>.0.5: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">683</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">63</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">94.8</span> ms<span class="token number">64</span> bytes from <span class="token number">192.168</span>.0.5: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">684</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">63</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">43.0</span> ms<span class="token number">64</span> bytes from <span class="token number">192.168</span>.0.5: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">685</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">63</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.216</span> ms<span class="token number">64</span> bytes from <span class="token number">192.168</span>.0.5: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">686</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">63</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.248</span> ms<span class="token comment">#...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以50ms为间隔ping，发现概率性的会出现超过400ms的延迟，但是并没有丢包的现象发生。</p><span id="more"></span><p>首先想到了使用<a href="https://github.com/OpenCloudOS/nettrace">nettrace</a>工具来分析一下这个问题，<code>nettrace</code>是一个腾讯开源的基于<code>bpftrace</code>的网络流量追踪工具，可以追踪到内核网络栈的每一个函数调用。期望能通过这个工具来看一下这个延迟是不是消耗在了内核的网络协议栈上。根据ping结果中响应时间最长的seq&#x3D;677的包，过滤出来从协议栈接收包到发送回复包的所有函数调用：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># nettrace -p icmp</span><span class="token comment">#...</span>***************** d8061b00 ***************<span class="token punctuation">[</span><span class="token number">24583464.629102</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>napi_gro_receive_entry<span class="token punctuation">]</span> ICMP: <span class="token number">192.168</span>.0.4 -<span class="token operator">></span> <span class="token number">192.168</span>.0.5 <span class="token function">ping</span> request, seq: <span class="token number">677</span>, id: <span class="token number">392</span><span class="token punctuation">[</span><span class="token number">24583464.629114</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>dev_gro_receive     <span class="token punctuation">]</span> ICMP: <span class="token number">192.168</span>.0.4 -<span class="token operator">></span> <span class="token number">192.168</span>.0.5 <span class="token function">ping</span> request, seq: <span class="token number">677</span>, id: <span class="token number">392</span><span class="token punctuation">[</span><span class="token number">24583464.629248</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>__netif_receive_skb_core<span class="token punctuation">]</span> ICMP: <span class="token number">192.168</span>.0.4 -<span class="token operator">></span> <span class="token number">192.168</span>.0.5 <span class="token function">ping</span> request, seq: <span class="token number">677</span>, id: <span class="token number">392</span><span class="token punctuation">[</span><span class="token number">24583464.629253</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>packet_rcv          <span class="token punctuation">]</span> ICMP: <span class="token number">192.168</span>.0.4 -<span class="token operator">></span> <span class="token number">192.168</span>.0.5 <span class="token function">ping</span> request, seq: <span class="token number">677</span>, id: <span class="token number">392</span><span class="token punctuation">[</span><span class="token number">24583464.629256</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>tcf_classify        <span class="token punctuation">]</span> ICMP: <span class="token number">192.168</span>.0.4 -<span class="token operator">></span> <span class="token number">192.168</span>.0.5 <span class="token function">ping</span> request, seq: <span class="token number">677</span>, id: <span class="token number">392</span><span class="token punctuation">[</span><span class="token number">24583464.629262</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>__netif_receive_skb_core<span class="token punctuation">]</span> ICMP: <span class="token number">192.168</span>.0.4 -<span class="token operator">></span> <span class="token number">192.168</span>.0.5 <span class="token function">ping</span> request, seq: <span class="token number">677</span>, id: <span class="token number">392</span><span class="token punctuation">[</span><span class="token number">24583464.629268</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>ip_rcv              <span class="token punctuation">]</span> ICMP: <span class="token number">192.168</span>.0.4 -<span class="token operator">></span> <span class="token number">192.168</span>.0.5 <span class="token function">ping</span> request, seq: <span class="token number">677</span>, id: <span class="token number">392</span><span class="token punctuation">[</span><span class="token number">24583464.629271</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>ip_rcv_core         <span class="token punctuation">]</span> ICMP: <span class="token number">192.168</span>.0.4 -<span class="token operator">></span> <span class="token number">192.168</span>.0.5 <span class="token function">ping</span> request, seq: <span class="token number">677</span>, id: <span class="token number">392</span><span class="token punctuation">[</span><span class="token number">24583464.629276</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>nf_hook_slow        <span class="token punctuation">]</span> ICMP: <span class="token number">192.168</span>.0.4 -<span class="token operator">></span> <span class="token number">192.168</span>.0.5 <span class="token function">ping</span> request, seq: <span class="token number">677</span>, id: <span class="token number">392</span> *ipv4 <span class="token keyword">in</span> chain: PRE_ROUTING*<span class="token punctuation">[</span><span class="token number">24583464.629284</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>ip_route_input_slow <span class="token punctuation">]</span> ICMP: <span class="token number">192.168</span>.0.4 -<span class="token operator">></span> <span class="token number">192.168</span>.0.5 <span class="token function">ping</span> request, seq: <span class="token number">677</span>, id: <span class="token number">392</span><span class="token punctuation">[</span><span class="token number">24583464.629293</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>fib_validate_source <span class="token punctuation">]</span> ICMP: <span class="token number">192.168</span>.0.4 -<span class="token operator">></span> <span class="token number">192.168</span>.0.5 <span class="token function">ping</span> request, seq: <span class="token number">677</span>, id: <span class="token number">392</span><span class="token punctuation">[</span><span class="token number">24583464.629299</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>ip_local_deliver    <span class="token punctuation">]</span> ICMP: <span class="token number">192.168</span>.0.4 -<span class="token operator">></span> <span class="token number">192.168</span>.0.5 <span class="token function">ping</span> request, seq: <span class="token number">677</span>, id: <span class="token number">392</span><span class="token punctuation">[</span><span class="token number">24583464.629301</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>nf_hook_slow        <span class="token punctuation">]</span> ICMP: <span class="token number">192.168</span>.0.4 -<span class="token operator">></span> <span class="token number">192.168</span>.0.5 <span class="token function">ping</span> request, seq: <span class="token number">677</span>, id: <span class="token number">392</span> *ipv4 <span class="token keyword">in</span> chain: INPUT*<span class="token punctuation">[</span><span class="token number">24583464.629304</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>nft_do_chain        <span class="token punctuation">]</span> ICMP: <span class="token number">192.168</span>.0.4 -<span class="token operator">></span> <span class="token number">192.168</span>.0.5 <span class="token function">ping</span> request, seq: <span class="token number">677</span>, id: <span class="token number">392</span> *iptables table:filter, chain:INPUT*<span class="token punctuation">[</span><span class="token number">24583464.629311</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>ip_local_deliver_finish<span class="token punctuation">]</span> ICMP: <span class="token number">192.168</span>.0.4 -<span class="token operator">></span> <span class="token number">192.168</span>.0.5 <span class="token function">ping</span> request, seq: <span class="token number">677</span>, id: <span class="token number">392</span><span class="token punctuation">[</span><span class="token number">24583464.629316</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>icmp_rcv            <span class="token punctuation">]</span> ICMP: <span class="token number">192.168</span>.0.4 -<span class="token operator">></span> <span class="token number">192.168</span>.0.5 <span class="token function">ping</span> request, seq: <span class="token number">677</span>, id: <span class="token number">392</span><span class="token punctuation">[</span><span class="token number">24583464.629321</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>icmp_echo           <span class="token punctuation">]</span> ICMP: <span class="token number">192.168</span>.0.4 -<span class="token operator">></span> <span class="token number">192.168</span>.0.5 <span class="token function">ping</span> request, seq: <span class="token number">677</span>, id: <span class="token number">392</span><span class="token punctuation">[</span><span class="token number">24583464.629325</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>icmp_reply          <span class="token punctuation">]</span> ICMP: <span class="token number">192.168</span>.0.4 -<span class="token operator">></span> <span class="token number">192.168</span>.0.5 <span class="token function">ping</span> request, seq: <span class="token number">677</span>, id: <span class="token number">392</span><span class="token punctuation">[</span><span class="token number">24583464.629413</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>consume_skb         <span class="token punctuation">]</span> ICMP: <span class="token number">192.168</span>.0.4 -<span class="token operator">></span> <span class="token number">192.168</span>.0.5 <span class="token function">ping</span> request, seq: <span class="token number">677</span>, id: <span class="token number">392</span> *packet is freed <span class="token punctuation">(</span>normally<span class="token punctuation">)</span>*<span class="token comment">#...</span>***************** a3faf500,a3faec00,a3faf800 ***************<span class="token punctuation">[</span><span class="token number">24583464.629343</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>__ip_local_out      <span class="token punctuation">]</span> ICMP: <span class="token number">192.168</span>.0.5 -<span class="token operator">></span> <span class="token number">192.168</span>.0.4 <span class="token function">ping</span> reply, seq: <span class="token number">677</span>, id: <span class="token number">392</span><span class="token punctuation">[</span><span class="token number">24583464.629347</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>nf_hook_slow        <span class="token punctuation">]</span> ICMP: <span class="token number">192.168</span>.0.5 -<span class="token operator">></span> <span class="token number">192.168</span>.0.4 <span class="token function">ping</span> reply, seq: <span class="token number">677</span>, id: <span class="token number">392</span> *ipv4 <span class="token keyword">in</span> chain: OUTPUT*<span class="token punctuation">[</span><span class="token number">24583464.629350</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>nft_do_chain        <span class="token punctuation">]</span> ICMP: <span class="token number">192.168</span>.0.5 -<span class="token operator">></span> <span class="token number">192.168</span>.0.4 <span class="token function">ping</span> reply, seq: <span class="token number">677</span>, id: <span class="token number">392</span> *iptables table:filter, chain:OUTPUT*<span class="token punctuation">[</span><span class="token number">24583464.629354</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>ip_output           <span class="token punctuation">]</span> ICMP: <span class="token number">192.168</span>.0.5 -<span class="token operator">></span> <span class="token number">192.168</span>.0.4 <span class="token function">ping</span> reply, seq: <span class="token number">677</span>, id: <span class="token number">392</span><span class="token punctuation">[</span><span class="token number">24583464.629358</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>nf_hook_slow        <span class="token punctuation">]</span> ICMP: <span class="token number">192.168</span>.0.5 -<span class="token operator">></span> <span class="token number">192.168</span>.0.4 <span class="token function">ping</span> reply, seq: <span class="token number">677</span>, id: <span class="token number">392</span> *ipv4 <span class="token keyword">in</span> chain: POST_ROUTING*<span class="token punctuation">[</span><span class="token number">24583464.629361</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>ip_finish_output    <span class="token punctuation">]</span> ICMP: <span class="token number">192.168</span>.0.5 -<span class="token operator">></span> <span class="token number">192.168</span>.0.4 <span class="token function">ping</span> reply, seq: <span class="token number">677</span>, id: <span class="token number">392</span><span class="token punctuation">[</span><span class="token number">24583464.629365</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>ip_finish_output2   <span class="token punctuation">]</span> ICMP: <span class="token number">192.168</span>.0.5 -<span class="token operator">></span> <span class="token number">192.168</span>.0.4 <span class="token function">ping</span> reply, seq: <span class="token number">677</span>, id: <span class="token number">392</span><span class="token punctuation">[</span><span class="token number">24583464.629368</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>__dev_queue_xmit    <span class="token punctuation">]</span> ICMP: <span class="token number">192.168</span>.0.5 -<span class="token operator">></span> <span class="token number">192.168</span>.0.4 <span class="token function">ping</span> reply, seq: <span class="token number">677</span>, id: <span class="token number">392</span><span class="token punctuation">[</span><span class="token number">24583464.629372</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>tcf_classify        <span class="token punctuation">]</span> ICMP: <span class="token number">192.168</span>.0.5 -<span class="token operator">></span> <span class="token number">192.168</span>.0.4 <span class="token function">ping</span> reply, seq: <span class="token number">677</span>, id: <span class="token number">392</span><span class="token punctuation">[</span><span class="token number">24583464.629376</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>skb_clone           <span class="token punctuation">]</span> ICMP: <span class="token number">192.168</span>.0.5 -<span class="token operator">></span> <span class="token number">192.168</span>.0.4 <span class="token function">ping</span> reply, seq: <span class="token number">677</span>, id: <span class="token number">392</span><span class="token punctuation">[</span><span class="token number">24583464.629381</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>__dev_queue_xmit    <span class="token punctuation">]</span> ICMP: <span class="token number">192.168</span>.0.5 -<span class="token operator">></span> <span class="token number">192.168</span>.0.4 <span class="token function">ping</span> reply, seq: <span class="token number">677</span>, id: <span class="token number">392</span><span class="token punctuation">[</span><span class="token number">24583464.629385</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>dev_hard_start_xmit <span class="token punctuation">]</span> ICMP: <span class="token number">192.168</span>.0.5 -<span class="token operator">></span> <span class="token number">192.168</span>.0.4 <span class="token function">ping</span> reply, seq: <span class="token number">677</span>, id: <span class="token number">392</span> *skb is successfully sent to the NIC driver*<span class="token punctuation">[</span><span class="token number">24583464.629389</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>bond_dev_queue_xmit <span class="token punctuation">]</span> ICMP: <span class="token number">192.168</span>.0.5 -<span class="token operator">></span> <span class="token number">192.168</span>.0.4 <span class="token function">ping</span> reply, seq: <span class="token number">677</span>, id: <span class="token number">392</span><span class="token punctuation">[</span><span class="token number">24583464.629393</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>__dev_queue_xmit    <span class="token punctuation">]</span> ICMP: <span class="token number">192.168</span>.0.5 -<span class="token operator">></span> <span class="token number">192.168</span>.0.4 <span class="token function">ping</span> reply, seq: <span class="token number">677</span>, id: <span class="token number">392</span><span class="token punctuation">[</span><span class="token number">24583464.629396</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>dev_hard_start_xmit <span class="token punctuation">]</span> ICMP: <span class="token number">192.168</span>.0.5 -<span class="token operator">></span> <span class="token number">192.168</span>.0.4 <span class="token function">ping</span> reply, seq: <span class="token number">677</span>, id: <span class="token number">392</span> *skb is successfully sent to the NIC driver*<span class="token punctuation">[</span><span class="token number">24583464.629398</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>skb_clone           <span class="token punctuation">]</span> ICMP: <span class="token number">192.168</span>.0.5 -<span class="token operator">></span> <span class="token number">192.168</span>.0.4 <span class="token function">ping</span> reply, seq: <span class="token number">677</span>, id: <span class="token number">392</span><span class="token punctuation">[</span><span class="token number">24583464.629401</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>packet_rcv          <span class="token punctuation">]</span> ICMP: <span class="token number">192.168</span>.0.5 -<span class="token operator">></span> <span class="token number">192.168</span>.0.4 <span class="token function">ping</span> reply, seq: <span class="token number">677</span>, id: <span class="token number">392</span><span class="token punctuation">[</span><span class="token number">24583464.629404</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>consume_skb         <span class="token punctuation">]</span> ICMP: <span class="token number">192.168</span>.0.5 -<span class="token operator">></span> <span class="token number">192.168</span>.0.4 <span class="token function">ping</span> reply, seq: <span class="token number">677</span>, id: <span class="token number">392</span> *packet is freed <span class="token punctuation">(</span>normally<span class="token punctuation">)</span>*<span class="token punctuation">[</span><span class="token number">24583464.629409</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>consume_skb         <span class="token punctuation">]</span> ICMP: <span class="token number">192.168</span>.0.5 -<span class="token operator">></span> <span class="token number">192.168</span>.0.4 <span class="token function">ping</span> reply, seq: <span class="token number">677</span>, id: <span class="token number">392</span> *packet is freed <span class="token punctuation">(</span>normally<span class="token punctuation">)</span>*<span class="token punctuation">[</span><span class="token number">24583464.630375</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>consume_skb         <span class="token punctuation">]</span> ICMP: <span class="token number">192.168</span>.0.5 -<span class="token operator">></span> <span class="token number">192.168</span>.0.4 <span class="token function">ping</span> reply, seq: <span class="token number">677</span>, id: <span class="token number">392</span> *packet is freed <span class="token punctuation">(</span>normally<span class="token punctuation">)</span>*<span class="token comment">#...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从过滤出来的结果看，最左侧的时间一栏，发现从接受icmp请求到将回复请求扔给网卡，整个协议栈只消耗了不到1ms的时间，几乎可以排除是内核网络协议栈的问题。那是怎么回事呢？</p><p>尝试继续分析一下<code>nettrace</code>工具的输出：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># grep -E 'napi_gro_receive_entry|__ip_local_out' trace.log</span><span class="token comment">#...</span><span class="token punctuation">[</span><span class="token number">24583464.120360</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>napi_gro_receive_entry<span class="token punctuation">]</span> ICMP: <span class="token number">192.168</span>.0.4 -<span class="token operator">></span> <span class="token number">192.168</span>.0.5 <span class="token function">ping</span> request, seq: <span class="token number">675</span>, id: <span class="token number">392</span><span class="token punctuation">[</span><span class="token number">24583464.120449</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>__ip_local_out      <span class="token punctuation">]</span> ICMP: <span class="token number">192.168</span>.0.5 -<span class="token operator">></span> <span class="token number">192.168</span>.0.4 <span class="token function">ping</span> reply, seq: <span class="token number">675</span>, id: <span class="token number">392</span><span class="token punctuation">[</span><span class="token number">24583464.172360</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>napi_gro_receive_entry<span class="token punctuation">]</span> ICMP: <span class="token number">192.168</span>.0.4 -<span class="token operator">></span> <span class="token number">192.168</span>.0.5 <span class="token function">ping</span> request, seq: <span class="token number">676</span>, id: <span class="token number">392</span><span class="token punctuation">[</span><span class="token number">24583464.172456</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>__ip_local_out      <span class="token punctuation">]</span> ICMP: <span class="token number">192.168</span>.0.5 -<span class="token operator">></span> <span class="token number">192.168</span>.0.4 <span class="token function">ping</span> reply, seq: <span class="token number">676</span>, id: <span class="token number">392</span><span class="token comment"># 上次回复之后，大约等待了450ms，才继续收到下一个ping包，并且在同1ms内连续收到了8个包</span><span class="token punctuation">[</span><span class="token number">24583464.629102</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>napi_gro_receive_entry<span class="token punctuation">]</span> ICMP: <span class="token number">192.168</span>.0.4 -<span class="token operator">></span> <span class="token number">192.168</span>.0.5 <span class="token function">ping</span> request, seq: <span class="token number">677</span>, id: <span class="token number">392</span><span class="token punctuation">[</span><span class="token number">24583464.629118</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>napi_gro_receive_entry<span class="token punctuation">]</span> ICMP: <span class="token number">192.168</span>.0.4 -<span class="token operator">></span> <span class="token number">192.168</span>.0.5 <span class="token function">ping</span> request, seq: <span class="token number">678</span>, id: <span class="token number">392</span><span class="token punctuation">[</span><span class="token number">24583464.629503</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>napi_gro_receive_entry<span class="token punctuation">]</span> ICMP: <span class="token number">192.168</span>.0.4 -<span class="token operator">></span> <span class="token number">192.168</span>.0.5 <span class="token function">ping</span> request, seq: <span class="token number">679</span>, id: <span class="token number">392</span><span class="token punctuation">[</span><span class="token number">24583464.629515</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>napi_gro_receive_entry<span class="token punctuation">]</span> ICMP: <span class="token number">192.168</span>.0.4 -<span class="token operator">></span> <span class="token number">192.168</span>.0.5 <span class="token function">ping</span> request, seq: <span class="token number">680</span>, id: <span class="token number">392</span><span class="token punctuation">[</span><span class="token number">24583464.629521</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>napi_gro_receive_entry<span class="token punctuation">]</span> ICMP: <span class="token number">192.168</span>.0.4 -<span class="token operator">></span> <span class="token number">192.168</span>.0.5 <span class="token function">ping</span> request, seq: <span class="token number">681</span>, id: <span class="token number">392</span><span class="token punctuation">[</span><span class="token number">24583464.629526</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>napi_gro_receive_entry<span class="token punctuation">]</span> ICMP: <span class="token number">192.168</span>.0.4 -<span class="token operator">></span> <span class="token number">192.168</span>.0.5 <span class="token function">ping</span> request, seq: <span class="token number">682</span>, id: <span class="token number">392</span><span class="token punctuation">[</span><span class="token number">24583464.629531</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>napi_gro_receive_entry<span class="token punctuation">]</span> ICMP: <span class="token number">192.168</span>.0.4 -<span class="token operator">></span> <span class="token number">192.168</span>.0.5 <span class="token function">ping</span> request, seq: <span class="token number">683</span>, id: <span class="token number">392</span><span class="token punctuation">[</span><span class="token number">24583464.630165</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>napi_gro_receive_entry<span class="token punctuation">]</span> ICMP: <span class="token number">192.168</span>.0.4 -<span class="token operator">></span> <span class="token number">192.168</span>.0.5 <span class="token function">ping</span> request, seq: <span class="token number">684</span>, id: <span class="token number">392</span><span class="token punctuation">[</span><span class="token number">24583464.629343</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>__ip_local_out      <span class="token punctuation">]</span> ICMP: <span class="token number">192.168</span>.0.5 -<span class="token operator">></span> <span class="token number">192.168</span>.0.4 <span class="token function">ping</span> reply, seq: <span class="token number">677</span>, id: <span class="token number">392</span><span class="token punctuation">[</span><span class="token number">24583464.629452</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>__ip_local_out      <span class="token punctuation">]</span> ICMP: <span class="token number">192.168</span>.0.5 -<span class="token operator">></span> <span class="token number">192.168</span>.0.4 <span class="token function">ping</span> reply, seq: <span class="token number">678</span>, id: <span class="token number">392</span><span class="token punctuation">[</span><span class="token number">24583464.629578</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>__ip_local_out      <span class="token punctuation">]</span> ICMP: <span class="token number">192.168</span>.0.5 -<span class="token operator">></span> <span class="token number">192.168</span>.0.4 <span class="token function">ping</span> reply, seq: <span class="token number">679</span>, id: <span class="token number">392</span><span class="token punctuation">[</span><span class="token number">24583464.629781</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>__ip_local_out      <span class="token punctuation">]</span> ICMP: <span class="token number">192.168</span>.0.5 -<span class="token operator">></span> <span class="token number">192.168</span>.0.4 <span class="token function">ping</span> reply, seq: <span class="token number">680</span>, id: <span class="token number">392</span><span class="token punctuation">[</span><span class="token number">24583464.629886</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>__ip_local_out      <span class="token punctuation">]</span> ICMP: <span class="token number">192.168</span>.0.5 -<span class="token operator">></span> <span class="token number">192.168</span>.0.4 <span class="token function">ping</span> reply, seq: <span class="token number">681</span>, id: <span class="token number">392</span><span class="token punctuation">[</span><span class="token number">24583464.629989</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>__ip_local_out      <span class="token punctuation">]</span> ICMP: <span class="token number">192.168</span>.0.5 -<span class="token operator">></span> <span class="token number">192.168</span>.0.4 <span class="token function">ping</span> reply, seq: <span class="token number">682</span>, id: <span class="token number">392</span><span class="token punctuation">[</span><span class="token number">24583464.630081</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>__ip_local_out      <span class="token punctuation">]</span> ICMP: <span class="token number">192.168</span>.0.5 -<span class="token operator">></span> <span class="token number">192.168</span>.0.4 <span class="token function">ping</span> reply, seq: <span class="token number">683</span>, id: <span class="token number">392</span><span class="token punctuation">[</span><span class="token number">24583464.630282</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>__ip_local_out      <span class="token punctuation">]</span> ICMP: <span class="token number">192.168</span>.0.5 -<span class="token operator">></span> <span class="token number">192.168</span>.0.4 <span class="token function">ping</span> reply, seq: <span class="token number">684</span>, id: <span class="token number">392</span><span class="token punctuation">[</span><span class="token number">24583464.637354</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>napi_gro_receive_entry<span class="token punctuation">]</span> ICMP: <span class="token number">192.168</span>.0.4 -<span class="token operator">></span> <span class="token number">192.168</span>.0.5 <span class="token function">ping</span> request, seq: <span class="token number">685</span>, id: <span class="token number">392</span><span class="token punctuation">[</span><span class="token number">24583464.637439</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>__ip_local_out      <span class="token punctuation">]</span> ICMP: <span class="token number">192.168</span>.0.5 -<span class="token operator">></span> <span class="token number">192.168</span>.0.4 <span class="token function">ping</span> reply, seq: <span class="token number">685</span>, id: <span class="token number">392</span><span class="token punctuation">[</span><span class="token number">24583464.689368</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>napi_gro_receive_entry<span class="token punctuation">]</span> ICMP: <span class="token number">192.168</span>.0.4 -<span class="token operator">></span> <span class="token number">192.168</span>.0.5 <span class="token function">ping</span> request, seq: <span class="token number">686</span>, id: <span class="token number">392</span><span class="token punctuation">[</span><span class="token number">24583464.689469</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>__ip_local_out      <span class="token punctuation">]</span> ICMP: <span class="token number">192.168</span>.0.5 -<span class="token operator">></span> <span class="token number">192.168</span>.0.4 <span class="token function">ping</span> reply, seq: <span class="token number">686</span>, id: <span class="token number">392</span><span class="token punctuation">[</span><span class="token number">24583464.741353</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>napi_gro_receive_entry<span class="token punctuation">]</span> ICMP: <span class="token number">192.168</span>.0.4 -<span class="token operator">></span> <span class="token number">192.168</span>.0.5 <span class="token function">ping</span> request, seq: <span class="token number">687</span>, id: <span class="token number">392</span><span class="token punctuation">[</span><span class="token number">24583464.741462</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>__ip_local_out      <span class="token punctuation">]</span> ICMP: <span class="token number">192.168</span>.0.5 -<span class="token operator">></span> <span class="token number">192.168</span>.0.4 <span class="token function">ping</span> reply, seq: <span class="token number">687</span>, id: <span class="token number">392</span><span class="token punctuation">[</span><span class="token number">24583464.793361</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>napi_gro_receive_entry<span class="token punctuation">]</span> ICMP: <span class="token number">192.168</span>.0.4 -<span class="token operator">></span> <span class="token number">192.168</span>.0.5 <span class="token function">ping</span> request, seq: <span class="token number">688</span>, id: <span class="token number">392</span><span class="token punctuation">[</span><span class="token number">24583464.793477</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>__ip_local_out      <span class="token punctuation">]</span> ICMP: <span class="token number">192.168</span>.0.5 -<span class="token operator">></span> <span class="token number">192.168</span>.0.4 <span class="token function">ping</span> reply, seq: <span class="token number">688</span>, id: <span class="token number">392</span><span class="token comment">#...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从日志可以看到，在回复完seq&#x3D;676的包后，经过了450ms才继续接收到了seq&#x3D;678的包，并且在同1ms内连续收到了8个包，之后的处理也非常快，几乎没有延迟。这个日志也可以和ping的结果对应上，从ping的源端来看，由于ping的间隔是50ms，seq&#x3D;676的包发送出去，等待50ms发送seq&#x3D;677的包，而这个包被延迟了400ms被目的端收到并返回，依次类推，在这400ms期间，共有8个被发出，在处理seq&#x3D;677的包同时，其他包也被收到并处理，所以从源端看，678-684的包相应时间的以大约50ms的间隔缩短。</p><p>感觉像是中断处理慢了，毕竟也没有发生丢包的情况，只是延迟了。借助bcc-tools里的<code>hardirqs</code>和<code>softirqs</code>工具，来看看中断的处理情况：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># /usr/share/bcc/tools/hardirqs 1 100</span>Tracing hard irq event time<span class="token punctuation">..</span>. Hit Ctrl-C to end.HARDIRQ                    TOTAL_usecsnvme0q52                             <span class="token number">5</span>nvme0q49                            <span class="token number">31</span>nvme0q73                            <span class="token number">44</span>mlx5_async17@pci:0000:1a:00.0          <span class="token number">68</span>acpi                                <span class="token number">73</span>mlx5_async17@pci:0000:1a:00.1          <span class="token number">73</span>nvme0q51                            <span class="token number">90</span>nvme0q76                           <span class="token number">120</span>nvme0q75                           <span class="token number">135</span>ens33f0-0                          <span class="token number">782</span>ens33f1-0                          <span class="token number">913</span>HARDIRQ                    TOTAL_usecsmlx5_async17@pci:0000:1a:00.0           <span class="token number">4</span>mlx5_async17@pci:0000:1a:00.1           <span class="token number">7</span>megasas0-msix51                     <span class="token number">48</span>megasas0-msix75                     <span class="token number">58</span>nvme0q52                            <span class="token number">60</span>nvme0q76                            <span class="token number">61</span>acpi                                <span class="token number">70</span>nvme0q75                            <span class="token number">83</span>nvme0q49                           <span class="token number">104</span>nvme0q51                           <span class="token number">123</span>nvme0q73                           <span class="token number">133</span>ens33f0-0                          <span class="token number">340</span>ens33f1-0                          <span class="token number">598</span>HARDIRQ                    TOTAL_usecsacpi                                <span class="token number">37</span>mlx5_async17@pci:0000:1a:00.1          <span class="token number">38</span>mlx5_async17@pci:0000:1a:00.0          <span class="token number">72</span>nvme0q73                           <span class="token number">113</span>nvme0q75                           <span class="token number">144</span>nvme0q51                           <span class="token number">148</span>nvme0q52                           <span class="token number">196</span>ens33f0-0                          <span class="token number">374</span>ens33f1-0                          <span class="token number">581</span><span class="token comment">#...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># /usr/share/bcc/tools/softirqs 1 100</span>Tracing soft irq event time<span class="token punctuation">..</span>. Hit Ctrl-C to end.SOFTIRQ          TOTAL_usecsnet_tx                     <span class="token number">6</span>tasklet                  <span class="token number">483</span>sched                   <span class="token number">3923</span>rcu                     <span class="token number">6545</span>net_rx                  <span class="token number">9657</span>timer                  <span class="token number">24720</span>SOFTIRQ          TOTAL_usecstasklet                  <span class="token number">221</span>sched                   <span class="token number">3256</span>net_rx                  <span class="token number">4408</span>rcu                     <span class="token number">5641</span>timer                  <span class="token number">25195</span>SOFTIRQ          TOTAL_usecstasklet                  <span class="token number">287</span>sched                   <span class="token number">4734</span>net_rx                  <span class="token number">6355</span>rcu                     <span class="token number">8406</span>timer                  <span class="token number">25333</span><span class="token comment">#...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>并没有发现中断处理慢了的情况，那有没有可能是中断被屏蔽了呢？如果中断被屏蔽了400ms，在这400ms期间，收到的包都会存放在网卡的缓冲区里，但是网卡没办法通过中断的方式通知内核来处理这些包，等到中断被打开后，内核才会收到中断，并开始处理网卡缓冲区里的数据，这样就会出现上面提到的现象。这个假设似乎说得通，但是怎么验证呢？</p><p>想起字节跳动几年前开源了一个叫做<a href="https://github.com/bytedance/trace-irqoff"><code>trace-irqoff</code></a>的工具，可以用来追踪和定位中断或者软中断关闭的时间。</p><p>尝试使用一下这个工具：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># cat /proc/trace_irqoff/distribute</span>hardirq-off:         msecs           <span class="token builtin class-name">:</span> count     distribution        <span class="token number">10</span> -<span class="token operator">></span> <span class="token number">19</span>         <span class="token builtin class-name">:</span> <span class="token number">1</span>        <span class="token operator">|</span>**********                              <span class="token operator">|</span>        <span class="token number">20</span> -<span class="token operator">></span> <span class="token number">39</span>         <span class="token builtin class-name">:</span> <span class="token number">0</span>        <span class="token operator">|</span>                                        <span class="token operator">|</span>        <span class="token number">40</span> -<span class="token operator">></span> <span class="token number">79</span>         <span class="token builtin class-name">:</span> <span class="token number">0</span>        <span class="token operator">|</span>                                        <span class="token operator">|</span>        <span class="token number">80</span> -<span class="token operator">></span> <span class="token number">159</span>        <span class="token builtin class-name">:</span> <span class="token number">1</span>        <span class="token operator">|</span>**********                              <span class="token operator">|</span>       <span class="token number">160</span> -<span class="token operator">></span> <span class="token number">319</span>        <span class="token builtin class-name">:</span> <span class="token number">2</span>        <span class="token operator">|</span>********************                    <span class="token operator">|</span>       <span class="token number">320</span> -<span class="token operator">></span> <span class="token number">639</span>        <span class="token builtin class-name">:</span> <span class="token number">4</span>        <span class="token operator">|</span>****************************************<span class="token operator">|</span><span class="token comment"># cat /proc/trace_irqoff/trace_latency</span>trace_irqoff_latency: 50ms hardirq: cpu: <span class="token number">0</span>     COMMAND: kubelet PID: <span class="token number">1162942</span> LATENCY: 425ms     save_trace.isra.0+0x18c/0x1b0 <span class="token punctuation">[</span>trace_irqoff<span class="token punctuation">]</span>     trace_irqoff_record+0xa0/0xd0 <span class="token punctuation">[</span>trace_irqoff<span class="token punctuation">]</span>     trace_irqoff_hrtimer_handler+0x47/0xd6 <span class="token punctuation">[</span>trace_irqoff<span class="token punctuation">]</span>     __hrtimer_run_queues+0x12a/0x2c0     hrtimer_interrupt+0xfc/0x210     __sysvec_apic_timer_interrupt+0x5f/0x110     sysvec_apic_timer_interrupt+0x6d/0x90     asm_sysvec_apic_timer_interrupt+0x16/0x20     _raw_spin_unlock_irq+0x14/0x25     blkcg_print_blkgs+0x72/0xe0     tg_print_rwstat_recursive+0x40/0x50     seq_read_iter+0x124/0x4b0     new_sync_read+0x118/0x1a0     vfs_read+0xf5/0x190     ksys_read+0x5f/0xe0     do_syscall_64+0x5c/0x90     entry_SYSCALL_64_after_hwframe+0x63/0xcd     COMMAND: kubelet PID: <span class="token number">1162942</span> LATENCY: 462ms     save_trace.isra.0+0x18c/0x1b0 <span class="token punctuation">[</span>trace_irqoff<span class="token punctuation">]</span>     trace_irqoff_record+0xa0/0xd0 <span class="token punctuation">[</span>trace_irqoff<span class="token punctuation">]</span>     trace_irqoff_hrtimer_handler+0x47/0xd6 <span class="token punctuation">[</span>trace_irqoff<span class="token punctuation">]</span>     __hrtimer_run_queues+0x12a/0x2c0     hrtimer_interrupt+0xfc/0x210     __sysvec_apic_timer_interrupt+0x5f/0x110     sysvec_apic_timer_interrupt+0x6d/0x90     asm_sysvec_apic_timer_interrupt+0x16/0x20     _raw_spin_unlock_irq+0x14/0x25     blkcg_print_blkgs+0x72/0xe0     tg_print_rwstat_recursive+0x40/0x50     seq_read_iter+0x124/0x4b0     new_sync_read+0x118/0x1a0     vfs_read+0xf5/0x190     ksys_read+0x5f/0xe0     do_syscall_64+0x5c/0x90     entry_SYSCALL_64_after_hwframe+0x63/0xcd<span class="token comment">#...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还真是发现了中断被长时间屏蔽的情况，从这个调用栈看，<code>kubelet</code>进程会读取cgroups中的内容，在这个过程中，内核在处理<code>blkcg_print_blkgs</code>时，屏蔽了中断425ms和462ms。这个时间和ping延迟的400ms十分接近了，那几乎就是因为这个原因导致的问题了。</p><p>具体到为什么会出现这么长的中断屏蔽时间，这里就不继续把分析的详细过程贴出来了，最终是找到了cgroups一个内存泄漏的bug，导致<code>blkcg_print_blkgs</code>时需要遍历超多的items，导致了中断屏蔽时间过长。</p><p>确实需要感谢一下腾讯和字节跳动开源的这两个工具，极大的加速了问题的定位😁。说起来阿里开源的运维工具<a href="https://gitee.com/anolis/sysak">SysAK</a>里也有一个<code>irqoff</code>工具，是基于eBPF实现的，相比字节的可能还要灵活一些，不过就得等下次再试用了😊。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;近期线上出现了一个问题，现象是有一台机器，网络出现了不定时的延迟：&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# ping -i 0.05 192.168.0.5&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;#...&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;64&lt;/span&gt; bytes from &lt;span class=&quot;token number&quot;&gt;192.168&lt;/span&gt;.0.5: &lt;span class=&quot;token assign-left variable&quot;&gt;icmp_seq&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;673&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;ttl&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;63&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0.203&lt;/span&gt; ms
&lt;span class=&quot;token number&quot;&gt;64&lt;/span&gt; bytes from &lt;span class=&quot;token number&quot;&gt;192.168&lt;/span&gt;.0.5: &lt;span class=&quot;token assign-left variable&quot;&gt;icmp_seq&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;674&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;ttl&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;63&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0.210&lt;/span&gt; ms
&lt;span class=&quot;token number&quot;&gt;64&lt;/span&gt; bytes from &lt;span class=&quot;token number&quot;&gt;192.168&lt;/span&gt;.0.5: &lt;span class=&quot;token assign-left variable&quot;&gt;icmp_seq&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;675&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;ttl&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;63&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0.218&lt;/span&gt; ms
&lt;span class=&quot;token number&quot;&gt;64&lt;/span&gt; bytes from &lt;span class=&quot;token number&quot;&gt;192.168&lt;/span&gt;.0.5: &lt;span class=&quot;token assign-left variable&quot;&gt;icmp_seq&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;676&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;ttl&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;63&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0.233&lt;/span&gt; ms
&lt;span class=&quot;token number&quot;&gt;64&lt;/span&gt; bytes from &lt;span class=&quot;token number&quot;&gt;192.168&lt;/span&gt;.0.5: &lt;span class=&quot;token assign-left variable&quot;&gt;icmp_seq&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;677&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;ttl&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;63&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;406&lt;/span&gt; ms
&lt;span class=&quot;token number&quot;&gt;64&lt;/span&gt; bytes from &lt;span class=&quot;token number&quot;&gt;192.168&lt;/span&gt;.0.5: &lt;span class=&quot;token assign-left variable&quot;&gt;icmp_seq&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;678&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;ttl&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;63&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;354&lt;/span&gt; ms
&lt;span class=&quot;token number&quot;&gt;64&lt;/span&gt; bytes from &lt;span class=&quot;token number&quot;&gt;192.168&lt;/span&gt;.0.5: &lt;span class=&quot;token assign-left variable&quot;&gt;icmp_seq&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;679&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;ttl&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;63&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;302&lt;/span&gt; ms
&lt;span class=&quot;token number&quot;&gt;64&lt;/span&gt; bytes from &lt;span class=&quot;token number&quot;&gt;192.168&lt;/span&gt;.0.5: &lt;span class=&quot;token assign-left variable&quot;&gt;icmp_seq&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;680&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;ttl&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;63&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;251&lt;/span&gt; ms
&lt;span class=&quot;token number&quot;&gt;64&lt;/span&gt; bytes from &lt;span class=&quot;token number&quot;&gt;192.168&lt;/span&gt;.0.5: &lt;span class=&quot;token assign-left variable&quot;&gt;icmp_seq&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;681&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;ttl&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;63&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;199&lt;/span&gt; ms
&lt;span class=&quot;token number&quot;&gt;64&lt;/span&gt; bytes from &lt;span class=&quot;token number&quot;&gt;192.168&lt;/span&gt;.0.5: &lt;span class=&quot;token assign-left variable&quot;&gt;icmp_seq&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;682&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;ttl&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;63&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;147&lt;/span&gt; ms
&lt;span class=&quot;token number&quot;&gt;64&lt;/span&gt; bytes from &lt;span class=&quot;token number&quot;&gt;192.168&lt;/span&gt;.0.5: &lt;span class=&quot;token assign-left variable&quot;&gt;icmp_seq&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;683&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;ttl&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;63&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;94.8&lt;/span&gt; ms
&lt;span class=&quot;token number&quot;&gt;64&lt;/span&gt; bytes from &lt;span class=&quot;token number&quot;&gt;192.168&lt;/span&gt;.0.5: &lt;span class=&quot;token assign-left variable&quot;&gt;icmp_seq&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;684&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;ttl&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;63&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;43.0&lt;/span&gt; ms
&lt;span class=&quot;token number&quot;&gt;64&lt;/span&gt; bytes from &lt;span class=&quot;token number&quot;&gt;192.168&lt;/span&gt;.0.5: &lt;span class=&quot;token assign-left variable&quot;&gt;icmp_seq&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;685&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;ttl&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;63&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0.216&lt;/span&gt; ms
&lt;span class=&quot;token number&quot;&gt;64&lt;/span&gt; bytes from &lt;span class=&quot;token number&quot;&gt;192.168&lt;/span&gt;.0.5: &lt;span class=&quot;token assign-left variable&quot;&gt;icmp_seq&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;686&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;ttl&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;63&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0.248&lt;/span&gt; ms
&lt;span class=&quot;token comment&quot;&gt;#...&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;以50ms为间隔ping，发现概率性的会出现超过400ms的延迟，但是并没有丢包的现象发生。&lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://www.ichenfu.com/categories/Linux/"/>
    
    
    <category term="nettrace" scheme="https://www.ichenfu.com/tags/nettrace/"/>
    
    <category term="irqoff" scheme="https://www.ichenfu.com/tags/irqoff/"/>
    
  </entry>
  
  <entry>
    <title>一个Linux新老内核对于硬件中断的统计差异</title>
    <link href="https://www.ichenfu.com/2025/04/23/new-kernel-showing-interrupt-cpu-usage/"/>
    <id>https://www.ichenfu.com/2025/04/23/new-kernel-showing-interrupt-cpu-usage/</id>
    <published>2025-04-23T12:18:10.000Z</published>
    <updated>2025-04-23T06:26:38.660Z</updated>
    
    <content type="html"><![CDATA[<p>最近接到一个客户反馈，说他们的机器，遇到了top命令中，hardirq的值特别高的问题。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">top</span> - <span class="token number">15</span>:27:37 up <span class="token number">43</span> days,  <span class="token number">3</span>:42,  <span class="token number">1</span> user,  load average: <span class="token number">44.75</span>, <span class="token number">53.47</span>, <span class="token number">51.66</span>Tasks: <span class="token number">244</span> total,   <span class="token number">1</span> running, <span class="token number">243</span> sleeping,   <span class="token number">0</span> stopped,   <span class="token number">0</span> zombie%Cpu0  <span class="token builtin class-name">:</span> <span class="token number">10.3</span> us, <span class="token number">19.8</span> sy,  <span class="token number">0.0</span> ni, <span class="token number">39.7</span> id,  <span class="token number">0.4</span> wa, <span class="token number">28.2</span> hi,  <span class="token number">1.6</span> si,  <span class="token number">0.0</span> st%Cpu1  <span class="token builtin class-name">:</span> <span class="token number">10.7</span> us, <span class="token number">21.3</span> sy,  <span class="token number">0.0</span> ni, <span class="token number">40.7</span> id,  <span class="token number">0.4</span> wa, <span class="token number">26.1</span> hi,  <span class="token number">0.8</span> si,  <span class="token number">0.0</span> st%Cpu2  <span class="token builtin class-name">:</span> <span class="token number">10.0</span> us, <span class="token number">19.1</span> sy,  <span class="token number">0.0</span> ni, <span class="token number">41.4</span> id,  <span class="token number">0.4</span> wa, <span class="token number">27.9</span> hi,  <span class="token number">1.2</span> si,  <span class="token number">0.0</span> st%Cpu3  <span class="token builtin class-name">:</span> <span class="token number">10.4</span> us, <span class="token number">20.7</span> sy,  <span class="token number">0.0</span> ni, <span class="token number">40.2</span> id,  <span class="token number">0.4</span> wa, <span class="token number">26.7</span> hi,  <span class="token number">1.6</span> si,  <span class="token number">0.0</span> st%Cpu4  <span class="token builtin class-name">:</span> <span class="token number">10.4</span> us, <span class="token number">15.5</span> sy,  <span class="token number">0.0</span> ni, <span class="token number">45.4</span> id,  <span class="token number">0.4</span> wa, <span class="token number">28.3</span> hi,  <span class="token number">0.0</span> si,  <span class="token number">0.0</span> st%Cpu5  <span class="token builtin class-name">:</span> <span class="token number">10.8</span> us, <span class="token number">21.9</span> sy,  <span class="token number">0.0</span> ni, <span class="token number">39.4</span> id,  <span class="token number">0.4</span> wa, <span class="token number">27.1</span> hi,  <span class="token number">0.4</span> si,  <span class="token number">0.0</span> st%Cpu6  <span class="token builtin class-name">:</span> <span class="token number">10.1</span> us, <span class="token number">18.6</span> sy,  <span class="token number">0.0</span> ni, <span class="token number">41.7</span> id,  <span class="token number">0.4</span> wa, <span class="token number">28.7</span> hi,  <span class="token number">0.4</span> si,  <span class="token number">0.0</span> st%Cpu7  <span class="token builtin class-name">:</span> <span class="token number">10.6</span> us, <span class="token number">25.2</span> sy,  <span class="token number">0.0</span> ni, <span class="token number">36.6</span> id,  <span class="token number">0.0</span> wa, <span class="token number">26.4</span> hi,  <span class="token number">1.2</span> si,  <span class="token number">0.0</span> st<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从<code>top</code>命令输出可以看到，<code>hardirq</code>的值特别高，超过了25%。这导致了idle的下降，触发了监控的频繁报警。</p><span id="more"></span><p>而同样业务以及相似的业务量情况下，另外一台机器表现就正常许多：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">top</span> - <span class="token number">15</span>:31:19 up <span class="token number">118</span> days, <span class="token number">20</span>:15,  <span class="token number">1</span> user,  load average: <span class="token number">93.25</span>, <span class="token number">74.45</span>, <span class="token number">63.84</span>Tasks: <span class="token number">209</span> total,   <span class="token number">1</span> running, <span class="token number">208</span> sleeping,   <span class="token number">0</span> stopped,   <span class="token number">0</span> zombie%Cpu0  <span class="token builtin class-name">:</span>  <span class="token number">5.5</span> us, <span class="token number">18.2</span> sy,  <span class="token number">0.0</span> ni, <span class="token number">76.4</span> id,  <span class="token number">0.0</span> wa,  <span class="token number">0.0</span> hi,  <span class="token number">0.0</span> si,  <span class="token number">0.0</span> st%Cpu1  <span class="token builtin class-name">:</span>  <span class="token number">2.8</span> us,  <span class="token number">6.0</span> sy,  <span class="token number">0.0</span> ni, <span class="token number">90.8</span> id,  <span class="token number">0.0</span> wa,  <span class="token number">0.0</span> hi,  <span class="token number">0.4</span> si,  <span class="token number">0.0</span> st%Cpu2  <span class="token builtin class-name">:</span>  <span class="token number">6.6</span> us, <span class="token number">19.8</span> sy,  <span class="token number">0.0</span> ni, <span class="token number">72.7</span> id,  <span class="token number">0.4</span> wa,  <span class="token number">0.0</span> hi,  <span class="token number">0.4</span> si,  <span class="token number">0.0</span> st%Cpu3  <span class="token builtin class-name">:</span>  <span class="token number">2.4</span> us,  <span class="token number">6.3</span> sy,  <span class="token number">0.0</span> ni, <span class="token number">91.4</span> id,  <span class="token number">0.0</span> wa,  <span class="token number">0.0</span> hi,  <span class="token number">0.0</span> si,  <span class="token number">0.0</span> st%Cpu4  <span class="token builtin class-name">:</span>  <span class="token number">5.9</span> us, <span class="token number">17.4</span> sy,  <span class="token number">0.0</span> ni, <span class="token number">76.7</span> id,  <span class="token number">0.0</span> wa,  <span class="token number">0.0</span> hi,  <span class="token number">0.0</span> si,  <span class="token number">0.0</span> st%Cpu5  <span class="token builtin class-name">:</span>  <span class="token number">2.4</span> us,  <span class="token number">7.1</span> sy,  <span class="token number">0.0</span> ni, <span class="token number">90.6</span> id,  <span class="token number">0.0</span> wa,  <span class="token number">0.0</span> hi,  <span class="token number">0.0</span> si,  <span class="token number">0.0</span> st%Cpu6  <span class="token builtin class-name">:</span>  <span class="token number">5.0</span> us, <span class="token number">18.7</span> sy,  <span class="token number">0.0</span> ni, <span class="token number">76.3</span> id,  <span class="token number">0.0</span> wa,  <span class="token number">0.0</span> hi,  <span class="token number">0.0</span> si,  <span class="token number">0.0</span> st%Cpu7  <span class="token builtin class-name">:</span>  <span class="token number">2.4</span> us,  <span class="token number">6.7</span> sy,  <span class="token number">0.0</span> ni, <span class="token number">90.6</span> id,  <span class="token number">0.4</span> wa,  <span class="token number">0.0</span> hi,  <span class="token number">0.0</span> si,  <span class="token number">0.0</span> st%Cpu8  <span class="token builtin class-name">:</span>  <span class="token number">5.1</span> us, <span class="token number">16.8</span> sy,  <span class="token number">0.0</span> ni, <span class="token number">77.6</span> id,  <span class="token number">0.0</span> wa,  <span class="token number">0.0</span> hi,  <span class="token number">0.5</span> si,  <span class="token number">0.0</span> st<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这俩机器在业务性能表现上是类似的，最大的区别就是<code>hardirq</code>高的机器使用了更新的RockyLinux 9操作系统，内核版本会新一点。而另一台机器还在使用老的CentOS 7操作系统，内核版本会老一点。</p><h2 id="初步调查"><a href="#初步调查" class="headerlink" title="初步调查"></a>初步调查</h2><p>除了Rocky 9机器<code>hardirq</code>高之外，两台机器的其他各方面指标都非常的相似，比较明显的，两台机器的中断数量以及context switch数量都比较高：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">~<span class="token punctuation">]</span>$ dstat <span class="token parameter variable">-y</span>---system-- int   csw 364k 1247k 358k 1242k 384k 1271k 547k 1480k 562k 1505k<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上下文切换超过了100万次&#x2F;s。两者的火焰图也十分相似，不过从火焰图上观察，进程会大量调用<code>nanosleep</code>这个系统调用，调用比例和<code>hardirq</code>的比例是类似的：</p><p><img src="/images/nanosleep-flamegraph.png" alt="进程火焰图"></p><p>如果是大量<code>nanosleep</code>调用的话，那应该很容易用<code>stress-ng</code>工具复现了。事实证明，使用<code>stress-ng</code>工具可以获得和生产环境非常相似的现象，尝试了Rocky 9.5、CentOS 7.9，物理机、虚拟机的各种组合，结果发现确实和操作系统的内核版本关系很大。</p><h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>在后续分析中，找到了这样一篇资料<a href="https://tanelpoder.com/posts/linux-hiding-interrupt-cpu-usage/">Is Your Linux Version Hiding Interrupt CPU Usage From You?</a>。<br>在这篇文章中，作者发现<code>Ubuntu 20.10</code>及其默认Linux内核<code>5.8.0</code>版本的系统中，即使使用<code>fio</code>压测实现了11M IOPS的性能时，<code>dstat</code>和其他监控工具报告的<code>hardirq</code>时间依然为零，而在相同的机器上启动了使用<code>Oracle Enterprise Linux 8.3</code>及<code>5.4.17</code>版本内核时，发现<code>hardirq</code>时间会占用差不多27%的CPU。</p><p>这和我们遇到的问题非常相似，他给出了一个关键性的内核配置项<code>CONFIG_IRQ_TIME_ACCOUNTING</code>。<br>在作者的Ubuntu系统中，<code>CONFIG_IRQ_TIME_ACCOUNTING</code>配置没有被启用，同样的，这个配置在我们的CentOS 7环境里也没有启用（甚至并没有这个配置项）:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">uname</span> <span class="token parameter variable">-r</span><span class="token number">3.10</span>.0-1160.el7.x86_64$ <span class="token function">grep</span> CONFIG_IRQ_TIME_ACCOUNTING /boot/config-<span class="token variable"><span class="token variable">`</span><span class="token function">uname</span> <span class="token parameter variable">-r</span><span class="token variable">`</span></span>$ <span class="token function">awk</span> <span class="token string">'/^cpu /&#123; print "HW interrupt svc time " $7 * 10 " ms" &#125;'</span> /proc/statHW interrupt svc <span class="token function">time</span> <span class="token number">0</span> ms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而在更新的Rocky 9中，该配置被启用了：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">uname</span> <span class="token parameter variable">-r</span><span class="token number">5.14</span>.0-503.23.1.el9_5.x86_64$ <span class="token function">grep</span> CONFIG_IRQ_TIME_ACCOUNTING /boot/config-<span class="token variable"><span class="token variable">`</span><span class="token function">uname</span> <span class="token parameter variable">-r</span><span class="token variable">`</span></span><span class="token assign-left variable">CONFIG_IRQ_TIME_ACCOUNTING</span><span class="token operator">=</span>y$ <span class="token function">awk</span> <span class="token string">'/^cpu /&#123; print "HW interrupt svc time " $7 * 10 " ms" &#125;'</span> /proc/statHW interrupt svc <span class="token function">time</span> <span class="token number">432097660</span> ms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，启用了这个配置后，硬件中断处理程序中花费的时间才会被统计，这也是为什么线上用户会报告硬件中断处理程序中花费的时间不匹配的原因。</p><h2 id="一些解释"><a href="#一些解释" class="headerlink" title="一些解释"></a>一些解释</h2><p>关于中断时间的统计，文章作者也给了一些解释，这里也翻译一下，供大家参考。</p><p>中断处理会影响任何线程的CPU时间，因为中断不关心CPU上正在运行的是什么，它们只是突然接管。这正是它们被称为中断的原因！ 更长的解释如下：</p><p>首先假设 IRQ 时间统计被禁用：</p><ul><li>中断可以“随机”地发生在任何时间，这取决于硬件设备何时向 CPU 发出中断信号。</li><li>当 CPU 恰好在运行某个运行在用户模式的应用程序线程时收到中断信号，中断处理的 CPU 周期将被计入该应用程序进程（正如您在 top 中看到的那样），并显示为 %usr 类型的利用率。</li><li>当 CPU 恰好仍在运行一个由于发出系统调用而处于内核模式的应用程序线程时收到中断信号，那么中断 CPU 时间将被添加到该应用程序线程，但会显示为 %sys 类型。</li><li>当 CPU 正在执行内核线程时（并且内核代码路径没有为某些关键部分临时禁用中断），收到中断信号，中断处理的 CPU 时间将被添加到该内核线程的 %sys 模式中。这感觉很直观，因为人们通常认为硬件设备、驱动程序和中断都是内核工作的一部分。</li><li>这引发了一个有趣的问题：当 CPU 在收到中断信号时恰好处于空闲状态时会发生什么？ 像往常一样，这取决于硬件功能，例如电源感知中断路由是否可用，但完全有可能空闲的 CPU 被唤醒并必须使用 CPU 来处理 IRQ。由于 CPU 在空闲时没有运行任何用户&#x2F;内核线程（没有可用的 task_struct 线程上下文结构），CPU 时间被计入 Linux 内核伪任务 0，该任务在诸如 perf 之类的工具中显示为 swapper。因此，像 top 这样的工具不会在进程列表中显示任何来自“空闲” CPU 的高 IRQ CPU 使用率的进程，但基于 &#x2F;proc&#x2F;stat 的系统级工具（如 dstat、mpstat 甚至 top 标头中的系统级摘要）会显示某些东西正在使用 %sys 模式的 CPU。</li></ul><p>现在，启用 IRQ 时间统计后：</p><ul><li>启用 IRQ 时间统计后，硬件中断处理程序将使用 CPU 内置的时间戳计数器读取指令 (rdtsc) 在中断处理操作的入口和出口获取高精度“时间戳”。</li><li>这些时间增量归因于 %irq 指标，而不是 %usr 或 %sys 线程 CPU 使用率（&#x2F;proc&#x2F;stat 每 CPU 都有一行包含 CPU 使用率指标）。</li><li>像 mpstat 甚至 top 系统摘要部分这样的系统级工具现在将正确地细分 %irq% CPU 使用率。</li><li>然而，进程&#x2F;线程级别的指标（如 top 进程列表部分）仍然会将任何 IRQ 时间与 %usr 和 %sys 指标混在一起，因为 Linux 不跟踪进程&#x2F;线程级别的“意外”IRQ 服务时间。<br>这只是关于裸机 Linux 服务器上硬件中断处理的简短总结，我不会在此深入探讨。此外，为了保持本文简洁，我特意没有涵盖软件中断或上半部&#x2F;下半部中断处理延迟架构。 请注意，我运行的是一个合成基准测试，它在用户空间线程中并没有做太多的工作，大部分时间都花在了系统调用和内核块层上。因此，当我们的进程已经处于内核模式时，更可能发生 CPU 处理的“突然”硬件中断。对于一个中断密集型应用程序（例如网络！），它的大部分时间都花在用户空间中，我们会看到更多的 %usr CPU 时间切换到 %hiq。</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近接到一个客户反馈，说他们的机器，遇到了top命令中，hardirq的值特别高的问题。&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;top&lt;/span&gt; - &lt;span class=&quot;token number&quot;&gt;15&lt;/span&gt;:27:37 up &lt;span class=&quot;token number&quot;&gt;43&lt;/span&gt; days,  &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;:42,  &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; user,  load average: &lt;span class=&quot;token number&quot;&gt;44.75&lt;/span&gt;, &lt;span class=&quot;token number&quot;&gt;53.47&lt;/span&gt;, &lt;span class=&quot;token number&quot;&gt;51.66&lt;/span&gt;
Tasks: &lt;span class=&quot;token number&quot;&gt;244&lt;/span&gt; total,   &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; running, &lt;span class=&quot;token number&quot;&gt;243&lt;/span&gt; sleeping,   &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; stopped,   &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; zombie
%Cpu0  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10.3&lt;/span&gt; us, &lt;span class=&quot;token number&quot;&gt;19.8&lt;/span&gt; sy,  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; ni, &lt;span class=&quot;token number&quot;&gt;39.7&lt;/span&gt; id,  &lt;span class=&quot;token number&quot;&gt;0.4&lt;/span&gt; wa, &lt;span class=&quot;token number&quot;&gt;28.2&lt;/span&gt; hi,  &lt;span class=&quot;token number&quot;&gt;1.6&lt;/span&gt; si,  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; st
%Cpu1  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10.7&lt;/span&gt; us, &lt;span class=&quot;token number&quot;&gt;21.3&lt;/span&gt; sy,  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; ni, &lt;span class=&quot;token number&quot;&gt;40.7&lt;/span&gt; id,  &lt;span class=&quot;token number&quot;&gt;0.4&lt;/span&gt; wa, &lt;span class=&quot;token number&quot;&gt;26.1&lt;/span&gt; hi,  &lt;span class=&quot;token number&quot;&gt;0.8&lt;/span&gt; si,  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; st
%Cpu2  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10.0&lt;/span&gt; us, &lt;span class=&quot;token number&quot;&gt;19.1&lt;/span&gt; sy,  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; ni, &lt;span class=&quot;token number&quot;&gt;41.4&lt;/span&gt; id,  &lt;span class=&quot;token number&quot;&gt;0.4&lt;/span&gt; wa, &lt;span class=&quot;token number&quot;&gt;27.9&lt;/span&gt; hi,  &lt;span class=&quot;token number&quot;&gt;1.2&lt;/span&gt; si,  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; st
%Cpu3  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10.4&lt;/span&gt; us, &lt;span class=&quot;token number&quot;&gt;20.7&lt;/span&gt; sy,  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; ni, &lt;span class=&quot;token number&quot;&gt;40.2&lt;/span&gt; id,  &lt;span class=&quot;token number&quot;&gt;0.4&lt;/span&gt; wa, &lt;span class=&quot;token number&quot;&gt;26.7&lt;/span&gt; hi,  &lt;span class=&quot;token number&quot;&gt;1.6&lt;/span&gt; si,  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; st
%Cpu4  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10.4&lt;/span&gt; us, &lt;span class=&quot;token number&quot;&gt;15.5&lt;/span&gt; sy,  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; ni, &lt;span class=&quot;token number&quot;&gt;45.4&lt;/span&gt; id,  &lt;span class=&quot;token number&quot;&gt;0.4&lt;/span&gt; wa, &lt;span class=&quot;token number&quot;&gt;28.3&lt;/span&gt; hi,  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; si,  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; st
%Cpu5  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10.8&lt;/span&gt; us, &lt;span class=&quot;token number&quot;&gt;21.9&lt;/span&gt; sy,  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; ni, &lt;span class=&quot;token number&quot;&gt;39.4&lt;/span&gt; id,  &lt;span class=&quot;token number&quot;&gt;0.4&lt;/span&gt; wa, &lt;span class=&quot;token number&quot;&gt;27.1&lt;/span&gt; hi,  &lt;span class=&quot;token number&quot;&gt;0.4&lt;/span&gt; si,  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; st
%Cpu6  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10.1&lt;/span&gt; us, &lt;span class=&quot;token number&quot;&gt;18.6&lt;/span&gt; sy,  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; ni, &lt;span class=&quot;token number&quot;&gt;41.7&lt;/span&gt; id,  &lt;span class=&quot;token number&quot;&gt;0.4&lt;/span&gt; wa, &lt;span class=&quot;token number&quot;&gt;28.7&lt;/span&gt; hi,  &lt;span class=&quot;token number&quot;&gt;0.4&lt;/span&gt; si,  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; st
%Cpu7  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10.6&lt;/span&gt; us, &lt;span class=&quot;token number&quot;&gt;25.2&lt;/span&gt; sy,  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; ni, &lt;span class=&quot;token number&quot;&gt;36.6&lt;/span&gt; id,  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; wa, &lt;span class=&quot;token number&quot;&gt;26.4&lt;/span&gt; hi,  &lt;span class=&quot;token number&quot;&gt;1.2&lt;/span&gt; si,  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; st&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;从&lt;code&gt;top&lt;/code&gt;命令输出可以看到，&lt;code&gt;hardirq&lt;/code&gt;的值特别高，超过了25%。这导致了idle的下降，触发了监控的频繁报警。&lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://www.ichenfu.com/categories/Linux/"/>
    
    
    <category term="CentOS" scheme="https://www.ichenfu.com/tags/CentOS/"/>
    
    <category term="Kernel" scheme="https://www.ichenfu.com/tags/Kernel/"/>
    
    <category term="Interrupt" scheme="https://www.ichenfu.com/tags/Interrupt/"/>
    
    <category term="hardirq" scheme="https://www.ichenfu.com/tags/hardirq/"/>
    
  </entry>
  
  <entry>
    <title>IPIP隧道导致的DPDK收包RSS队列不均匀问题</title>
    <link href="https://www.ichenfu.com/2024/12/25/rss-not-balanced-caused-by-ipip-tunnel/"/>
    <id>https://www.ichenfu.com/2024/12/25/rss-not-balanced-caused-by-ipip-tunnel/</id>
    <published>2024-12-25T12:56:47.000Z</published>
    <updated>2024-12-25T10:38:38.432Z</updated>
    
    <content type="html"><![CDATA[<p>最近线上出现一些VM网卡收包队列不均匀的问题，即使是将网卡队列中断均匀的绑定到各个CPU上，依然会出现某个核特别高的情况：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">%Cpu0  <span class="token builtin class-name">:</span>  <span class="token number">0.0</span> us,  <span class="token number">0.0</span> sy,  <span class="token number">0.0</span> ni, <span class="token number">98.3</span> id,  <span class="token number">0.0</span> wa,  <span class="token number">0.9</span> hi,  <span class="token number">0.9</span> si,  <span class="token number">0.0</span> st%Cpu1  <span class="token builtin class-name">:</span>  <span class="token number">0.0</span> us,  <span class="token number">0.0</span> sy,  <span class="token number">0.0</span> ni, <span class="token number">97.5</span> id,  <span class="token number">0.0</span> wa,  <span class="token number">0.8</span> hi,  <span class="token number">1.7</span> si,  <span class="token number">0.0</span> st%Cpu2  <span class="token builtin class-name">:</span>  <span class="token number">0.0</span> us,  <span class="token number">0.0</span> sy,  <span class="token number">0.0</span> ni, <span class="token number">99.1</span> id,  <span class="token number">0.0</span> wa,  <span class="token number">0.0</span> hi,  <span class="token number">0.9</span> si,  <span class="token number">0.0</span> st%Cpu3  <span class="token builtin class-name">:</span>  <span class="token number">0.9</span> us,  <span class="token number">0.0</span> sy,  <span class="token number">0.0</span> ni, <span class="token number">98.3</span> id,  <span class="token number">0.0</span> wa,  <span class="token number">0.0</span> hi,  <span class="token number">0.9</span> si,  <span class="token number">0.0</span> st%Cpu4  <span class="token builtin class-name">:</span>  <span class="token number">0.0</span> us,  <span class="token number">0.0</span> sy,  <span class="token number">0.0</span> ni, <span class="token number">98.3</span> id,  <span class="token number">0.0</span> wa,  <span class="token number">0.0</span> hi,  <span class="token number">1.7</span> si,  <span class="token number">0.0</span> st%Cpu5  <span class="token builtin class-name">:</span>  <span class="token number">0.0</span> us,  <span class="token number">0.0</span> sy,  <span class="token number">0.0</span> ni, <span class="token number">97.4</span> id,  <span class="token number">0.0</span> wa,  <span class="token number">0.9</span> hi,  <span class="token number">1.7</span> si,  <span class="token number">0.0</span> st%Cpu6  <span class="token builtin class-name">:</span>  <span class="token number">0.0</span> us,  <span class="token number">0.0</span> sy,  <span class="token number">0.0</span> ni, <span class="token number">97.4</span> id,  <span class="token number">0.0</span> wa,  <span class="token number">0.9</span> hi,  <span class="token number">1.7</span> si,  <span class="token number">0.0</span> st%Cpu7  <span class="token builtin class-name">:</span>  <span class="token number">0.0</span> us,  <span class="token number">0.0</span> sy,  <span class="token number">0.0</span> ni, <span class="token number">98.3</span> id,  <span class="token number">0.0</span> wa,  <span class="token number">0.0</span> hi,  <span class="token number">1.7</span> si,  <span class="token number">0.0</span> st%Cpu8  <span class="token builtin class-name">:</span>  <span class="token number">0.0</span> us,  <span class="token number">0.0</span> sy,  <span class="token number">0.0</span> ni, <span class="token number">46.3</span> id,  <span class="token number">0.0</span> wa,  <span class="token number">3.4</span> hi, <span class="token number">50.3</span> si,  <span class="token number">0.0</span> st%Cpu9  <span class="token builtin class-name">:</span>  <span class="token number">0.0</span> us,  <span class="token number">0.0</span> sy,  <span class="token number">0.0</span> ni, <span class="token number">97.4</span> id,  <span class="token number">0.0</span> wa,  <span class="token number">0.9</span> hi,  <span class="token number">1.7</span> si,  <span class="token number">0.0</span> st%Cpu10 <span class="token builtin class-name">:</span>  <span class="token number">0.0</span> us,  <span class="token number">0.0</span> sy,  <span class="token number">0.0</span> ni, <span class="token number">98.3</span> id,  <span class="token number">0.0</span> wa,  <span class="token number">0.0</span> hi,  <span class="token number">1.7</span> si,  <span class="token number">0.0</span> st%Cpu11 <span class="token builtin class-name">:</span>  <span class="token number">0.0</span> us,  <span class="token number">0.0</span> sy,  <span class="token number">0.0</span> ni, <span class="token number">99.1</span> id,  <span class="token number">0.0</span> wa,  <span class="token number">0.0</span> hi,  <span class="token number">0.9</span> si,  <span class="token number">0.0</span> st%Cpu12 <span class="token builtin class-name">:</span>  <span class="token number">0.0</span> us,  <span class="token number">0.0</span> sy,  <span class="token number">0.0</span> ni, <span class="token number">98.3</span> id,  <span class="token number">0.0</span> wa,  <span class="token number">0.0</span> hi,  <span class="token number">1.7</span> si,  <span class="token number">0.0</span> st%Cpu13 <span class="token builtin class-name">:</span>  <span class="token number">0.0</span> us,  <span class="token number">0.0</span> sy,  <span class="token number">0.0</span> ni, <span class="token number">99.1</span> id,  <span class="token number">0.0</span> wa,  <span class="token number">0.0</span> hi,  <span class="token number">0.9</span> si,  <span class="token number">0.0</span> st%Cpu14 <span class="token builtin class-name">:</span>  <span class="token number">0.0</span> us,  <span class="token number">0.0</span> sy,  <span class="token number">0.0</span> ni, <span class="token number">98.3</span> id,  <span class="token number">0.0</span> wa,  <span class="token number">0.0</span> hi,  <span class="token number">1.7</span> si,  <span class="token number">0.0</span> st%Cpu15 <span class="token builtin class-name">:</span>  <span class="token number">0.0</span> us,  <span class="token number">0.0</span> sy,  <span class="token number">0.0</span> ni, <span class="token number">98.3</span> id,  <span class="token number">0.0</span> wa,  <span class="token number">0.0</span> hi,  <span class="token number">1.7</span> si,  <span class="token number">0.0</span> st<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>能看到其他核大部分还是比较均匀的，就是cpu8确实比其他核高很多。经过了一些排查，发现和VM使用了<code>IPIP Tunnel</code>有关。</p><span id="more"></span><p>用户的场景是，在网络入口处有一台机器充当负载均衡的角色，然后这台负载均衡再通过<code>IPIP Tunnel</code>将用户的请求转发到这台VM，由于<code>IPIP</code>的原理是在原有的IP包基础上再“套”一层IP包头，导致RSS计算的Hash的之后只能看到外层的IP，所以即使内层IP包的五元组分布非常均匀，也会出现所以隧道的流量都跑到一个核上的情况。</p><p>为了网络的灵活性，VM的网络流量，是经过了一个DPDK程序进行转发的，这个DPDK程序逻辑非常简单，就是从网卡对应的rx队列N接收数据包，然后发送到VM对应的rx队列N，因此如果VM的接收队列不平衡，也就意味着从网卡收包的时候就是不均匀的。</p><p>那怎么解决这个问题呢，很显然的一个思路是，当DPDK收包之后，重新计算一下数据包的Hash，在计算过程中，如果发现数据包是一个IPIP数据包，就按内层IP头去计算Hash，然后再根据这个Hash计算VM的接受队列，并把包转发到对应队列。在这种情况下，不管从网卡收包是否是均衡的，到VM的流量基本就会是均衡的。这样确实会非常灵活（这也是当时多加一层DPDK而不是直接网卡直通的原因），但很显然DPDK程序的计算量增加了，对性能会有不小的影响。</p><p>那网卡能不能支持针对IPIP数据包提供个“更高级的”RSS算法呢？毕竟现在的网卡功能特性都比较多，功能也比较强大，很有可能可以直接在网卡层面直接实现支持基于隧道内层IP头进行RSS的能力，如果能通过网卡层面实现，那是最优解了。</p><p>跟网卡厂商交流之后，确认了网卡是支持这个特性的，而且，在使用Linux驱动收包的情况下，默认就是开启的，也就是说，如果使用的是网卡直通的模式，那直接就不会遇到这个问题。但我们使用了DPDK进行中转，默认是没有这个行为的，如果要开启基于IPIP Tunnel内层IP头进行RSS，需要给网卡下发这样一条流表：<code>flow create 0 group 0 ingress pattern eth / ipv4 proto is 4 / ipv4 / tcp / end actions rss queues 0 1 2 3 4 end level 2 / end</code>。简单翻译一下，就是通过流表去匹配<code>ipv4.proto == 4</code>(也就是IPIP Tunnel协议)的数据包，并让网卡以内层IP进行rss，并分配到<code>0 1 2 3 4</code>这几个队列中。</p><p>知道了这个规则，我们就可以用<code>testpmd</code>测试下了：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">testpmd<span class="token operator">></span> <span class="token builtin class-name">set</span> fwd rxonlySet rxonly packet forwarding modetestpmd<span class="token operator">></span>testpmd<span class="token operator">></span> startrxonly packet forwarding - <span class="token assign-left variable">ports</span><span class="token operator">=</span><span class="token number">1</span> - <span class="token assign-left variable">cores</span><span class="token operator">=</span><span class="token number">1</span> - <span class="token assign-left variable">streams</span><span class="token operator">=</span><span class="token number">16</span> - NUMA support enabled, MP allocation mode: nativeLogical Core <span class="token number">1</span> <span class="token punctuation">(</span>socket <span class="token number">0</span><span class="token punctuation">)</span> forwards packets on <span class="token number">16</span> streams:  RX <span class="token assign-left variable">P</span><span class="token operator">=</span><span class="token number">0</span>/Q<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">(</span>socket <span class="token number">0</span><span class="token punctuation">)</span> -<span class="token operator">></span> TX <span class="token assign-left variable">P</span><span class="token operator">=</span><span class="token number">0</span>/Q<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">(</span>socket <span class="token number">0</span><span class="token punctuation">)</span> <span class="token assign-left variable">peer</span><span class="token operator">=</span>02:00:00:00:00:00  RX <span class="token assign-left variable">P</span><span class="token operator">=</span><span class="token number">0</span>/Q<span class="token operator">=</span><span class="token number">1</span> <span class="token punctuation">(</span>socket <span class="token number">0</span><span class="token punctuation">)</span> -<span class="token operator">></span> TX <span class="token assign-left variable">P</span><span class="token operator">=</span><span class="token number">0</span>/Q<span class="token operator">=</span><span class="token number">1</span> <span class="token punctuation">(</span>socket <span class="token number">0</span><span class="token punctuation">)</span> <span class="token assign-left variable">peer</span><span class="token operator">=</span>02:00:00:00:00:00  RX <span class="token assign-left variable">P</span><span class="token operator">=</span><span class="token number">0</span>/Q<span class="token operator">=</span><span class="token number">2</span> <span class="token punctuation">(</span>socket <span class="token number">0</span><span class="token punctuation">)</span> -<span class="token operator">></span> TX <span class="token assign-left variable">P</span><span class="token operator">=</span><span class="token number">0</span>/Q<span class="token operator">=</span><span class="token number">2</span> <span class="token punctuation">(</span>socket <span class="token number">0</span><span class="token punctuation">)</span> <span class="token assign-left variable">peer</span><span class="token operator">=</span>02:00:00:00:00:00  RX <span class="token assign-left variable">P</span><span class="token operator">=</span><span class="token number">0</span>/Q<span class="token operator">=</span><span class="token number">3</span> <span class="token punctuation">(</span>socket <span class="token number">0</span><span class="token punctuation">)</span> -<span class="token operator">></span> TX <span class="token assign-left variable">P</span><span class="token operator">=</span><span class="token number">0</span>/Q<span class="token operator">=</span><span class="token number">3</span> <span class="token punctuation">(</span>socket <span class="token number">0</span><span class="token punctuation">)</span> <span class="token assign-left variable">peer</span><span class="token operator">=</span>02:00:00:00:00:00  RX <span class="token assign-left variable">P</span><span class="token operator">=</span><span class="token number">0</span>/Q<span class="token operator">=</span><span class="token number">4</span> <span class="token punctuation">(</span>socket <span class="token number">0</span><span class="token punctuation">)</span> -<span class="token operator">></span> TX <span class="token assign-left variable">P</span><span class="token operator">=</span><span class="token number">0</span>/Q<span class="token operator">=</span><span class="token number">4</span> <span class="token punctuation">(</span>socket <span class="token number">0</span><span class="token punctuation">)</span> <span class="token assign-left variable">peer</span><span class="token operator">=</span>02:00:00:00:00:00  RX <span class="token assign-left variable">P</span><span class="token operator">=</span><span class="token number">0</span>/Q<span class="token operator">=</span><span class="token number">5</span> <span class="token punctuation">(</span>socket <span class="token number">0</span><span class="token punctuation">)</span> -<span class="token operator">></span> TX <span class="token assign-left variable">P</span><span class="token operator">=</span><span class="token number">0</span>/Q<span class="token operator">=</span><span class="token number">5</span> <span class="token punctuation">(</span>socket <span class="token number">0</span><span class="token punctuation">)</span> <span class="token assign-left variable">peer</span><span class="token operator">=</span>02:00:00:00:00:00  RX <span class="token assign-left variable">P</span><span class="token operator">=</span><span class="token number">0</span>/Q<span class="token operator">=</span><span class="token number">6</span> <span class="token punctuation">(</span>socket <span class="token number">0</span><span class="token punctuation">)</span> -<span class="token operator">></span> TX <span class="token assign-left variable">P</span><span class="token operator">=</span><span class="token number">0</span>/Q<span class="token operator">=</span><span class="token number">6</span> <span class="token punctuation">(</span>socket <span class="token number">0</span><span class="token punctuation">)</span> <span class="token assign-left variable">peer</span><span class="token operator">=</span>02:00:00:00:00:00  RX <span class="token assign-left variable">P</span><span class="token operator">=</span><span class="token number">0</span>/Q<span class="token operator">=</span><span class="token number">7</span> <span class="token punctuation">(</span>socket <span class="token number">0</span><span class="token punctuation">)</span> -<span class="token operator">></span> TX <span class="token assign-left variable">P</span><span class="token operator">=</span><span class="token number">0</span>/Q<span class="token operator">=</span><span class="token number">7</span> <span class="token punctuation">(</span>socket <span class="token number">0</span><span class="token punctuation">)</span> <span class="token assign-left variable">peer</span><span class="token operator">=</span>02:00:00:00:00:00  RX <span class="token assign-left variable">P</span><span class="token operator">=</span><span class="token number">0</span>/Q<span class="token operator">=</span><span class="token number">8</span> <span class="token punctuation">(</span>socket <span class="token number">0</span><span class="token punctuation">)</span> -<span class="token operator">></span> TX <span class="token assign-left variable">P</span><span class="token operator">=</span><span class="token number">0</span>/Q<span class="token operator">=</span><span class="token number">8</span> <span class="token punctuation">(</span>socket <span class="token number">0</span><span class="token punctuation">)</span> <span class="token assign-left variable">peer</span><span class="token operator">=</span>02:00:00:00:00:00  RX <span class="token assign-left variable">P</span><span class="token operator">=</span><span class="token number">0</span>/Q<span class="token operator">=</span><span class="token number">9</span> <span class="token punctuation">(</span>socket <span class="token number">0</span><span class="token punctuation">)</span> -<span class="token operator">></span> TX <span class="token assign-left variable">P</span><span class="token operator">=</span><span class="token number">0</span>/Q<span class="token operator">=</span><span class="token number">9</span> <span class="token punctuation">(</span>socket <span class="token number">0</span><span class="token punctuation">)</span> <span class="token assign-left variable">peer</span><span class="token operator">=</span>02:00:00:00:00:00  RX <span class="token assign-left variable">P</span><span class="token operator">=</span><span class="token number">0</span>/Q<span class="token operator">=</span><span class="token number">10</span> <span class="token punctuation">(</span>socket <span class="token number">0</span><span class="token punctuation">)</span> -<span class="token operator">></span> TX <span class="token assign-left variable">P</span><span class="token operator">=</span><span class="token number">0</span>/Q<span class="token operator">=</span><span class="token number">10</span> <span class="token punctuation">(</span>socket <span class="token number">0</span><span class="token punctuation">)</span> <span class="token assign-left variable">peer</span><span class="token operator">=</span>02:00:00:00:00:00  RX <span class="token assign-left variable">P</span><span class="token operator">=</span><span class="token number">0</span>/Q<span class="token operator">=</span><span class="token number">11</span> <span class="token punctuation">(</span>socket <span class="token number">0</span><span class="token punctuation">)</span> -<span class="token operator">></span> TX <span class="token assign-left variable">P</span><span class="token operator">=</span><span class="token number">0</span>/Q<span class="token operator">=</span><span class="token number">11</span> <span class="token punctuation">(</span>socket <span class="token number">0</span><span class="token punctuation">)</span> <span class="token assign-left variable">peer</span><span class="token operator">=</span>02:00:00:00:00:00  RX <span class="token assign-left variable">P</span><span class="token operator">=</span><span class="token number">0</span>/Q<span class="token operator">=</span><span class="token number">12</span> <span class="token punctuation">(</span>socket <span class="token number">0</span><span class="token punctuation">)</span> -<span class="token operator">></span> TX <span class="token assign-left variable">P</span><span class="token operator">=</span><span class="token number">0</span>/Q<span class="token operator">=</span><span class="token number">12</span> <span class="token punctuation">(</span>socket <span class="token number">0</span><span class="token punctuation">)</span> <span class="token assign-left variable">peer</span><span class="token operator">=</span>02:00:00:00:00:00  RX <span class="token assign-left variable">P</span><span class="token operator">=</span><span class="token number">0</span>/Q<span class="token operator">=</span><span class="token number">13</span> <span class="token punctuation">(</span>socket <span class="token number">0</span><span class="token punctuation">)</span> -<span class="token operator">></span> TX <span class="token assign-left variable">P</span><span class="token operator">=</span><span class="token number">0</span>/Q<span class="token operator">=</span><span class="token number">13</span> <span class="token punctuation">(</span>socket <span class="token number">0</span><span class="token punctuation">)</span> <span class="token assign-left variable">peer</span><span class="token operator">=</span>02:00:00:00:00:00  RX <span class="token assign-left variable">P</span><span class="token operator">=</span><span class="token number">0</span>/Q<span class="token operator">=</span><span class="token number">14</span> <span class="token punctuation">(</span>socket <span class="token number">0</span><span class="token punctuation">)</span> -<span class="token operator">></span> TX <span class="token assign-left variable">P</span><span class="token operator">=</span><span class="token number">0</span>/Q<span class="token operator">=</span><span class="token number">14</span> <span class="token punctuation">(</span>socket <span class="token number">0</span><span class="token punctuation">)</span> <span class="token assign-left variable">peer</span><span class="token operator">=</span>02:00:00:00:00:00  RX <span class="token assign-left variable">P</span><span class="token operator">=</span><span class="token number">0</span>/Q<span class="token operator">=</span><span class="token number">15</span> <span class="token punctuation">(</span>socket <span class="token number">0</span><span class="token punctuation">)</span> -<span class="token operator">></span> TX <span class="token assign-left variable">P</span><span class="token operator">=</span><span class="token number">0</span>/Q<span class="token operator">=</span><span class="token number">15</span> <span class="token punctuation">(</span>socket <span class="token number">0</span><span class="token punctuation">)</span> <span class="token assign-left variable">peer</span><span class="token operator">=</span>02:00:00:00:00:00  rxonly packet forwarding packets/burst<span class="token operator">=</span><span class="token number">32</span>  nb forwarding <span class="token assign-left variable">cores</span><span class="token operator">=</span><span class="token number">1</span> - nb forwarding <span class="token assign-left variable">ports</span><span class="token operator">=</span><span class="token number">1</span>  port <span class="token number">0</span>: RX queue number: <span class="token number">16</span> Tx queue number: <span class="token number">16</span>    Rx <span class="token assign-left variable">offloads</span><span class="token operator">=</span>0x0 Tx <span class="token assign-left variable">offloads</span><span class="token operator">=</span>0x10000    RX queue: <span class="token number">0</span>      RX <span class="token assign-left variable">desc</span><span class="token operator">=</span><span class="token number">4096</span> - RX <span class="token function">free</span> <span class="token assign-left variable">threshold</span><span class="token operator">=</span><span class="token number">64</span>      RX threshold registers: <span class="token assign-left variable">pthresh</span><span class="token operator">=</span><span class="token number">0</span> <span class="token assign-left variable">hthresh</span><span class="token operator">=</span><span class="token number">0</span>  <span class="token assign-left variable">wthresh</span><span class="token operator">=</span><span class="token number">0</span>      RX <span class="token assign-left variable">Offloads</span><span class="token operator">=</span>0x0    TX queue: <span class="token number">0</span>      TX <span class="token assign-left variable">desc</span><span class="token operator">=</span><span class="token number">4096</span> - TX <span class="token function">free</span> <span class="token assign-left variable">threshold</span><span class="token operator">=</span><span class="token number">0</span>      TX threshold registers: <span class="token assign-left variable">pthresh</span><span class="token operator">=</span><span class="token number">0</span> <span class="token assign-left variable">hthresh</span><span class="token operator">=</span><span class="token number">0</span>  <span class="token assign-left variable">wthresh</span><span class="token operator">=</span><span class="token number">0</span>      TX <span class="token assign-left variable">offloads</span><span class="token operator">=</span>0x10000 - TX RS bit <span class="token assign-left variable">threshold</span><span class="token operator">=</span><span class="token number">0</span>testpmd<span class="token operator">></span> stopTelling cores to stop<span class="token punctuation">..</span>.Waiting <span class="token keyword">for</span> lcores to finish<span class="token punctuation">..</span>.  ------- Forward Stats <span class="token keyword">for</span> RX <span class="token assign-left variable">Port</span><span class="token operator">=</span> <span class="token number">0</span>/Queue<span class="token operator">=</span><span class="token number">12</span> -<span class="token operator">></span> TX <span class="token assign-left variable">Port</span><span class="token operator">=</span> <span class="token number">0</span>/Queue<span class="token operator">=</span><span class="token number">12</span> -------  RX-packets: <span class="token number">139389</span>         TX-packets: <span class="token number">0</span>              TX-dropped: <span class="token number">0</span>  ---------------------- Forward statistics <span class="token keyword">for</span> port <span class="token number">0</span>  ----------------------  RX-packets: <span class="token number">139389</span>         RX-dropped: <span class="token number">0</span>             RX-total: <span class="token number">139389</span>  TX-packets: <span class="token number">0</span>              TX-dropped: <span class="token number">0</span>             TX-total: <span class="token number">0</span>  ----------------------------------------------------------------------------  +++++++++++++++ Accumulated forward statistics <span class="token keyword">for</span> all ports+++++++++++++++  RX-packets: <span class="token number">139389</span>         RX-dropped: <span class="token number">0</span>             RX-total: <span class="token number">139389</span>  TX-packets: <span class="token number">0</span>              TX-dropped: <span class="token number">0</span>             TX-total: <span class="token number">0</span>  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++Done.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到默认情况下，所有的包全跑到<code>Queue=12</code>这个队列了。很显然默认情况下RSS是有些问题的，那就继续试试下发流表之后的情况：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">testpmd<span class="token operator">></span> flow create <span class="token number">0</span> group <span class="token number">0</span> ingress pattern eth / ipv4 proto is <span class="token number">4</span> / ipv4 / tcp / end actions rss queues <span class="token number">0</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span> <span class="token number">7</span> <span class="token number">8</span> <span class="token number">9</span> <span class="token number">10</span> <span class="token number">11</span> <span class="token number">12</span> <span class="token number">13</span> <span class="token number">14</span> <span class="token number">15</span> end level <span class="token number">2</span> / endFlow rule <span class="token comment">#0 created</span>testpmd<span class="token operator">></span> startrxonly packet forwarding - <span class="token assign-left variable">ports</span><span class="token operator">=</span><span class="token number">1</span> - <span class="token assign-left variable">cores</span><span class="token operator">=</span><span class="token number">1</span> - <span class="token assign-left variable">streams</span><span class="token operator">=</span><span class="token number">16</span> - NUMA support enabled, MP allocation mode: nativeLogical Core <span class="token number">1</span> <span class="token punctuation">(</span>socket <span class="token number">0</span><span class="token punctuation">)</span> forwards packets on <span class="token number">16</span> streams:  RX <span class="token assign-left variable">P</span><span class="token operator">=</span><span class="token number">0</span>/Q<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">(</span>socket <span class="token number">0</span><span class="token punctuation">)</span> -<span class="token operator">></span> TX <span class="token assign-left variable">P</span><span class="token operator">=</span><span class="token number">0</span>/Q<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">(</span>socket <span class="token number">0</span><span class="token punctuation">)</span> <span class="token assign-left variable">peer</span><span class="token operator">=</span>02:00:00:00:00:00  RX <span class="token assign-left variable">P</span><span class="token operator">=</span><span class="token number">0</span>/Q<span class="token operator">=</span><span class="token number">1</span> <span class="token punctuation">(</span>socket <span class="token number">0</span><span class="token punctuation">)</span> -<span class="token operator">></span> TX <span class="token assign-left variable">P</span><span class="token operator">=</span><span class="token number">0</span>/Q<span class="token operator">=</span><span class="token number">1</span> <span class="token punctuation">(</span>socket <span class="token number">0</span><span class="token punctuation">)</span> <span class="token assign-left variable">peer</span><span class="token operator">=</span>02:00:00:00:00:00  RX <span class="token assign-left variable">P</span><span class="token operator">=</span><span class="token number">0</span>/Q<span class="token operator">=</span><span class="token number">2</span> <span class="token punctuation">(</span>socket <span class="token number">0</span><span class="token punctuation">)</span> -<span class="token operator">></span> TX <span class="token assign-left variable">P</span><span class="token operator">=</span><span class="token number">0</span>/Q<span class="token operator">=</span><span class="token number">2</span> <span class="token punctuation">(</span>socket <span class="token number">0</span><span class="token punctuation">)</span> <span class="token assign-left variable">peer</span><span class="token operator">=</span>02:00:00:00:00:00  RX <span class="token assign-left variable">P</span><span class="token operator">=</span><span class="token number">0</span>/Q<span class="token operator">=</span><span class="token number">3</span> <span class="token punctuation">(</span>socket <span class="token number">0</span><span class="token punctuation">)</span> -<span class="token operator">></span> TX <span class="token assign-left variable">P</span><span class="token operator">=</span><span class="token number">0</span>/Q<span class="token operator">=</span><span class="token number">3</span> <span class="token punctuation">(</span>socket <span class="token number">0</span><span class="token punctuation">)</span> <span class="token assign-left variable">peer</span><span class="token operator">=</span>02:00:00:00:00:00  RX <span class="token assign-left variable">P</span><span class="token operator">=</span><span class="token number">0</span>/Q<span class="token operator">=</span><span class="token number">4</span> <span class="token punctuation">(</span>socket <span class="token number">0</span><span class="token punctuation">)</span> -<span class="token operator">></span> TX <span class="token assign-left variable">P</span><span class="token operator">=</span><span class="token number">0</span>/Q<span class="token operator">=</span><span class="token number">4</span> <span class="token punctuation">(</span>socket <span class="token number">0</span><span class="token punctuation">)</span> <span class="token assign-left variable">peer</span><span class="token operator">=</span>02:00:00:00:00:00  RX <span class="token assign-left variable">P</span><span class="token operator">=</span><span class="token number">0</span>/Q<span class="token operator">=</span><span class="token number">5</span> <span class="token punctuation">(</span>socket <span class="token number">0</span><span class="token punctuation">)</span> -<span class="token operator">></span> TX <span class="token assign-left variable">P</span><span class="token operator">=</span><span class="token number">0</span>/Q<span class="token operator">=</span><span class="token number">5</span> <span class="token punctuation">(</span>socket <span class="token number">0</span><span class="token punctuation">)</span> <span class="token assign-left variable">peer</span><span class="token operator">=</span>02:00:00:00:00:00  RX <span class="token assign-left variable">P</span><span class="token operator">=</span><span class="token number">0</span>/Q<span class="token operator">=</span><span class="token number">6</span> <span class="token punctuation">(</span>socket <span class="token number">0</span><span class="token punctuation">)</span> -<span class="token operator">></span> TX <span class="token assign-left variable">P</span><span class="token operator">=</span><span class="token number">0</span>/Q<span class="token operator">=</span><span class="token number">6</span> <span class="token punctuation">(</span>socket <span class="token number">0</span><span class="token punctuation">)</span> <span class="token assign-left variable">peer</span><span class="token operator">=</span>02:00:00:00:00:00  RX <span class="token assign-left variable">P</span><span class="token operator">=</span><span class="token number">0</span>/Q<span class="token operator">=</span><span class="token number">7</span> <span class="token punctuation">(</span>socket <span class="token number">0</span><span class="token punctuation">)</span> -<span class="token operator">></span> TX <span class="token assign-left variable">P</span><span class="token operator">=</span><span class="token number">0</span>/Q<span class="token operator">=</span><span class="token number">7</span> <span class="token punctuation">(</span>socket <span class="token number">0</span><span class="token punctuation">)</span> <span class="token assign-left variable">peer</span><span class="token operator">=</span>02:00:00:00:00:00  RX <span class="token assign-left variable">P</span><span class="token operator">=</span><span class="token number">0</span>/Q<span class="token operator">=</span><span class="token number">8</span> <span class="token punctuation">(</span>socket <span class="token number">0</span><span class="token punctuation">)</span> -<span class="token operator">></span> TX <span class="token assign-left variable">P</span><span class="token operator">=</span><span class="token number">0</span>/Q<span class="token operator">=</span><span class="token number">8</span> <span class="token punctuation">(</span>socket <span class="token number">0</span><span class="token punctuation">)</span> <span class="token assign-left variable">peer</span><span class="token operator">=</span>02:00:00:00:00:00  RX <span class="token assign-left variable">P</span><span class="token operator">=</span><span class="token number">0</span>/Q<span class="token operator">=</span><span class="token number">9</span> <span class="token punctuation">(</span>socket <span class="token number">0</span><span class="token punctuation">)</span> -<span class="token operator">></span> TX <span class="token assign-left variable">P</span><span class="token operator">=</span><span class="token number">0</span>/Q<span class="token operator">=</span><span class="token number">9</span> <span class="token punctuation">(</span>socket <span class="token number">0</span><span class="token punctuation">)</span> <span class="token assign-left variable">peer</span><span class="token operator">=</span>02:00:00:00:00:00  RX <span class="token assign-left variable">P</span><span class="token operator">=</span><span class="token number">0</span>/Q<span class="token operator">=</span><span class="token number">10</span> <span class="token punctuation">(</span>socket <span class="token number">0</span><span class="token punctuation">)</span> -<span class="token operator">></span> TX <span class="token assign-left variable">P</span><span class="token operator">=</span><span class="token number">0</span>/Q<span class="token operator">=</span><span class="token number">10</span> <span class="token punctuation">(</span>socket <span class="token number">0</span><span class="token punctuation">)</span> <span class="token assign-left variable">peer</span><span class="token operator">=</span>02:00:00:00:00:00  RX <span class="token assign-left variable">P</span><span class="token operator">=</span><span class="token number">0</span>/Q<span class="token operator">=</span><span class="token number">11</span> <span class="token punctuation">(</span>socket <span class="token number">0</span><span class="token punctuation">)</span> -<span class="token operator">></span> TX <span class="token assign-left variable">P</span><span class="token operator">=</span><span class="token number">0</span>/Q<span class="token operator">=</span><span class="token number">11</span> <span class="token punctuation">(</span>socket <span class="token number">0</span><span class="token punctuation">)</span> <span class="token assign-left variable">peer</span><span class="token operator">=</span>02:00:00:00:00:00  RX <span class="token assign-left variable">P</span><span class="token operator">=</span><span class="token number">0</span>/Q<span class="token operator">=</span><span class="token number">12</span> <span class="token punctuation">(</span>socket <span class="token number">0</span><span class="token punctuation">)</span> -<span class="token operator">></span> TX <span class="token assign-left variable">P</span><span class="token operator">=</span><span class="token number">0</span>/Q<span class="token operator">=</span><span class="token number">12</span> <span class="token punctuation">(</span>socket <span class="token number">0</span><span class="token punctuation">)</span> <span class="token assign-left variable">peer</span><span class="token operator">=</span>02:00:00:00:00:00  RX <span class="token assign-left variable">P</span><span class="token operator">=</span><span class="token number">0</span>/Q<span class="token operator">=</span><span class="token number">13</span> <span class="token punctuation">(</span>socket <span class="token number">0</span><span class="token punctuation">)</span> -<span class="token operator">></span> TX <span class="token assign-left variable">P</span><span class="token operator">=</span><span class="token number">0</span>/Q<span class="token operator">=</span><span class="token number">13</span> <span class="token punctuation">(</span>socket <span class="token number">0</span><span class="token punctuation">)</span> <span class="token assign-left variable">peer</span><span class="token operator">=</span>02:00:00:00:00:00  RX <span class="token assign-left variable">P</span><span class="token operator">=</span><span class="token number">0</span>/Q<span class="token operator">=</span><span class="token number">14</span> <span class="token punctuation">(</span>socket <span class="token number">0</span><span class="token punctuation">)</span> -<span class="token operator">></span> TX <span class="token assign-left variable">P</span><span class="token operator">=</span><span class="token number">0</span>/Q<span class="token operator">=</span><span class="token number">14</span> <span class="token punctuation">(</span>socket <span class="token number">0</span><span class="token punctuation">)</span> <span class="token assign-left variable">peer</span><span class="token operator">=</span>02:00:00:00:00:00  RX <span class="token assign-left variable">P</span><span class="token operator">=</span><span class="token number">0</span>/Q<span class="token operator">=</span><span class="token number">15</span> <span class="token punctuation">(</span>socket <span class="token number">0</span><span class="token punctuation">)</span> -<span class="token operator">></span> TX <span class="token assign-left variable">P</span><span class="token operator">=</span><span class="token number">0</span>/Q<span class="token operator">=</span><span class="token number">15</span> <span class="token punctuation">(</span>socket <span class="token number">0</span><span class="token punctuation">)</span> <span class="token assign-left variable">peer</span><span class="token operator">=</span>02:00:00:00:00:00  rxonly packet forwarding packets/burst<span class="token operator">=</span><span class="token number">32</span>  nb forwarding <span class="token assign-left variable">cores</span><span class="token operator">=</span><span class="token number">1</span> - nb forwarding <span class="token assign-left variable">ports</span><span class="token operator">=</span><span class="token number">1</span>  port <span class="token number">0</span>: RX queue number: <span class="token number">16</span> Tx queue number: <span class="token number">16</span>    Rx <span class="token assign-left variable">offloads</span><span class="token operator">=</span>0x0 Tx <span class="token assign-left variable">offloads</span><span class="token operator">=</span>0x10000    RX queue: <span class="token number">0</span>      RX <span class="token assign-left variable">desc</span><span class="token operator">=</span><span class="token number">4096</span> - RX <span class="token function">free</span> <span class="token assign-left variable">threshold</span><span class="token operator">=</span><span class="token number">64</span>      RX threshold registers: <span class="token assign-left variable">pthresh</span><span class="token operator">=</span><span class="token number">0</span> <span class="token assign-left variable">hthresh</span><span class="token operator">=</span><span class="token number">0</span>  <span class="token assign-left variable">wthresh</span><span class="token operator">=</span><span class="token number">0</span>      RX <span class="token assign-left variable">Offloads</span><span class="token operator">=</span>0x0    TX queue: <span class="token number">0</span>      TX <span class="token assign-left variable">desc</span><span class="token operator">=</span><span class="token number">4096</span> - TX <span class="token function">free</span> <span class="token assign-left variable">threshold</span><span class="token operator">=</span><span class="token number">0</span>      TX threshold registers: <span class="token assign-left variable">pthresh</span><span class="token operator">=</span><span class="token number">0</span> <span class="token assign-left variable">hthresh</span><span class="token operator">=</span><span class="token number">0</span>  <span class="token assign-left variable">wthresh</span><span class="token operator">=</span><span class="token number">0</span>      TX <span class="token assign-left variable">offloads</span><span class="token operator">=</span>0x10000 - TX RS bit <span class="token assign-left variable">threshold</span><span class="token operator">=</span><span class="token number">0</span>testpmd<span class="token operator">></span> stopTelling cores to stop<span class="token punctuation">..</span>.Waiting <span class="token keyword">for</span> lcores to finish<span class="token punctuation">..</span>.  ------- Forward Stats <span class="token keyword">for</span> RX <span class="token assign-left variable">Port</span><span class="token operator">=</span> <span class="token number">0</span>/Queue<span class="token operator">=</span> <span class="token number">0</span> -<span class="token operator">></span> TX <span class="token assign-left variable">Port</span><span class="token operator">=</span> <span class="token number">0</span>/Queue<span class="token operator">=</span> <span class="token number">0</span> -------  RX-packets: <span class="token number">6001</span>           TX-packets: <span class="token number">0</span>              TX-dropped: <span class="token number">0</span>  ------- Forward Stats <span class="token keyword">for</span> RX <span class="token assign-left variable">Port</span><span class="token operator">=</span> <span class="token number">0</span>/Queue<span class="token operator">=</span> <span class="token number">1</span> -<span class="token operator">></span> TX <span class="token assign-left variable">Port</span><span class="token operator">=</span> <span class="token number">0</span>/Queue<span class="token operator">=</span> <span class="token number">1</span> -------  RX-packets: <span class="token number">5894</span>           TX-packets: <span class="token number">0</span>              TX-dropped: <span class="token number">0</span>  ------- Forward Stats <span class="token keyword">for</span> RX <span class="token assign-left variable">Port</span><span class="token operator">=</span> <span class="token number">0</span>/Queue<span class="token operator">=</span> <span class="token number">2</span> -<span class="token operator">></span> TX <span class="token assign-left variable">Port</span><span class="token operator">=</span> <span class="token number">0</span>/Queue<span class="token operator">=</span> <span class="token number">2</span> -------  RX-packets: <span class="token number">5931</span>           TX-packets: <span class="token number">0</span>              TX-dropped: <span class="token number">0</span>  ------- Forward Stats <span class="token keyword">for</span> RX <span class="token assign-left variable">Port</span><span class="token operator">=</span> <span class="token number">0</span>/Queue<span class="token operator">=</span> <span class="token number">3</span> -<span class="token operator">></span> TX <span class="token assign-left variable">Port</span><span class="token operator">=</span> <span class="token number">0</span>/Queue<span class="token operator">=</span> <span class="token number">3</span> -------  RX-packets: <span class="token number">5759</span>           TX-packets: <span class="token number">0</span>              TX-dropped: <span class="token number">0</span>  ------- Forward Stats <span class="token keyword">for</span> RX <span class="token assign-left variable">Port</span><span class="token operator">=</span> <span class="token number">0</span>/Queue<span class="token operator">=</span> <span class="token number">4</span> -<span class="token operator">></span> TX <span class="token assign-left variable">Port</span><span class="token operator">=</span> <span class="token number">0</span>/Queue<span class="token operator">=</span> <span class="token number">4</span> -------  RX-packets: <span class="token number">5821</span>           TX-packets: <span class="token number">0</span>              TX-dropped: <span class="token number">0</span>  ------- Forward Stats <span class="token keyword">for</span> RX <span class="token assign-left variable">Port</span><span class="token operator">=</span> <span class="token number">0</span>/Queue<span class="token operator">=</span> <span class="token number">5</span> -<span class="token operator">></span> TX <span class="token assign-left variable">Port</span><span class="token operator">=</span> <span class="token number">0</span>/Queue<span class="token operator">=</span> <span class="token number">5</span> -------  RX-packets: <span class="token number">5787</span>           TX-packets: <span class="token number">0</span>              TX-dropped: <span class="token number">0</span>  ------- Forward Stats <span class="token keyword">for</span> RX <span class="token assign-left variable">Port</span><span class="token operator">=</span> <span class="token number">0</span>/Queue<span class="token operator">=</span> <span class="token number">6</span> -<span class="token operator">></span> TX <span class="token assign-left variable">Port</span><span class="token operator">=</span> <span class="token number">0</span>/Queue<span class="token operator">=</span> <span class="token number">6</span> -------  RX-packets: <span class="token number">5893</span>           TX-packets: <span class="token number">0</span>              TX-dropped: <span class="token number">0</span>  ------- Forward Stats <span class="token keyword">for</span> RX <span class="token assign-left variable">Port</span><span class="token operator">=</span> <span class="token number">0</span>/Queue<span class="token operator">=</span> <span class="token number">7</span> -<span class="token operator">></span> TX <span class="token assign-left variable">Port</span><span class="token operator">=</span> <span class="token number">0</span>/Queue<span class="token operator">=</span> <span class="token number">7</span> -------  RX-packets: <span class="token number">5909</span>           TX-packets: <span class="token number">0</span>              TX-dropped: <span class="token number">0</span>  ------- Forward Stats <span class="token keyword">for</span> RX <span class="token assign-left variable">Port</span><span class="token operator">=</span> <span class="token number">0</span>/Queue<span class="token operator">=</span> <span class="token number">8</span> -<span class="token operator">></span> TX <span class="token assign-left variable">Port</span><span class="token operator">=</span> <span class="token number">0</span>/Queue<span class="token operator">=</span> <span class="token number">8</span> -------  RX-packets: <span class="token number">6013</span>           TX-packets: <span class="token number">0</span>              TX-dropped: <span class="token number">0</span>  ------- Forward Stats <span class="token keyword">for</span> RX <span class="token assign-left variable">Port</span><span class="token operator">=</span> <span class="token number">0</span>/Queue<span class="token operator">=</span> <span class="token number">9</span> -<span class="token operator">></span> TX <span class="token assign-left variable">Port</span><span class="token operator">=</span> <span class="token number">0</span>/Queue<span class="token operator">=</span> <span class="token number">9</span> -------  RX-packets: <span class="token number">5956</span>           TX-packets: <span class="token number">0</span>              TX-dropped: <span class="token number">0</span>  ------- Forward Stats <span class="token keyword">for</span> RX <span class="token assign-left variable">Port</span><span class="token operator">=</span> <span class="token number">0</span>/Queue<span class="token operator">=</span><span class="token number">10</span> -<span class="token operator">></span> TX <span class="token assign-left variable">Port</span><span class="token operator">=</span> <span class="token number">0</span>/Queue<span class="token operator">=</span><span class="token number">10</span> -------  RX-packets: <span class="token number">5735</span>           TX-packets: <span class="token number">0</span>              TX-dropped: <span class="token number">0</span>  ------- Forward Stats <span class="token keyword">for</span> RX <span class="token assign-left variable">Port</span><span class="token operator">=</span> <span class="token number">0</span>/Queue<span class="token operator">=</span><span class="token number">11</span> -<span class="token operator">></span> TX <span class="token assign-left variable">Port</span><span class="token operator">=</span> <span class="token number">0</span>/Queue<span class="token operator">=</span><span class="token number">11</span> -------  RX-packets: <span class="token number">5885</span>           TX-packets: <span class="token number">0</span>              TX-dropped: <span class="token number">0</span>  ------- Forward Stats <span class="token keyword">for</span> RX <span class="token assign-left variable">Port</span><span class="token operator">=</span> <span class="token number">0</span>/Queue<span class="token operator">=</span><span class="token number">12</span> -<span class="token operator">></span> TX <span class="token assign-left variable">Port</span><span class="token operator">=</span> <span class="token number">0</span>/Queue<span class="token operator">=</span><span class="token number">12</span> -------  RX-packets: <span class="token number">5771</span>           TX-packets: <span class="token number">0</span>              TX-dropped: <span class="token number">0</span>  ------- Forward Stats <span class="token keyword">for</span> RX <span class="token assign-left variable">Port</span><span class="token operator">=</span> <span class="token number">0</span>/Queue<span class="token operator">=</span><span class="token number">13</span> -<span class="token operator">></span> TX <span class="token assign-left variable">Port</span><span class="token operator">=</span> <span class="token number">0</span>/Queue<span class="token operator">=</span><span class="token number">13</span> -------  RX-packets: <span class="token number">5878</span>           TX-packets: <span class="token number">0</span>              TX-dropped: <span class="token number">0</span>  ------- Forward Stats <span class="token keyword">for</span> RX <span class="token assign-left variable">Port</span><span class="token operator">=</span> <span class="token number">0</span>/Queue<span class="token operator">=</span><span class="token number">14</span> -<span class="token operator">></span> TX <span class="token assign-left variable">Port</span><span class="token operator">=</span> <span class="token number">0</span>/Queue<span class="token operator">=</span><span class="token number">14</span> -------  RX-packets: <span class="token number">5844</span>           TX-packets: <span class="token number">0</span>              TX-dropped: <span class="token number">0</span>  ------- Forward Stats <span class="token keyword">for</span> RX <span class="token assign-left variable">Port</span><span class="token operator">=</span> <span class="token number">0</span>/Queue<span class="token operator">=</span><span class="token number">15</span> -<span class="token operator">></span> TX <span class="token assign-left variable">Port</span><span class="token operator">=</span> <span class="token number">0</span>/Queue<span class="token operator">=</span><span class="token number">15</span> -------  RX-packets: <span class="token number">5930</span>           TX-packets: <span class="token number">0</span>              TX-dropped: <span class="token number">0</span>  ---------------------- Forward statistics <span class="token keyword">for</span> port <span class="token number">0</span>  ----------------------  RX-packets: <span class="token number">94007</span>          RX-dropped: <span class="token number">0</span>             RX-total: <span class="token number">94007</span>  TX-packets: <span class="token number">0</span>              TX-dropped: <span class="token number">0</span>             TX-total: <span class="token number">0</span>  ----------------------------------------------------------------------------  +++++++++++++++ Accumulated forward statistics <span class="token keyword">for</span> all ports+++++++++++++++  RX-packets: <span class="token number">94007</span>          RX-dropped: <span class="token number">0</span>             RX-total: <span class="token number">94007</span>  TX-packets: <span class="token number">0</span>              TX-dropped: <span class="token number">0</span>             TX-total: <span class="token number">0</span>  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++Done.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到下发流表后，流量相对均匀的分布到了<code>0-15</code>这16个队列上。说明网卡的功能没有问题。</p><p>剩下来就是如何将这个规则下发以代码的形式集成到转发逻辑中了。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">create_ipip_rss_flow</span><span class="token punctuation">(</span><span class="token class-name">dpdk_port_t</span> port_id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// flow create 0 group 0 ingress pattern eth / ipv4 proto is 4 / ipv4 / end actions rss queues 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 end level 2 / end</span>    <span class="token keyword">struct</span> <span class="token class-name">rte_flow_error</span> error<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">rte_flow</span> <span class="token operator">*</span>flow<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">rte_flow_attr</span> flow_attr <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">.</span>ingress <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">uint16_t</span> queue_list<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">16</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        queue_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">struct</span> <span class="token class-name">rte_flow_item</span> patterns<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token punctuation">.</span>type <span class="token operator">=</span> RTE_FLOW_ITEM_TYPE_ETH<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token punctuation">.</span>type <span class="token operator">=</span> RTE_FLOW_ITEM_TYPE_IPV4<span class="token punctuation">,</span><span class="token punctuation">.</span>spec <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">rte_flow_item_ipv4</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token punctuation">.</span>hdr<span class="token punctuation">.</span>next_proto_id <span class="token operator">=</span> IPPROTO_IPIP<span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">.</span>mask <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">rte_flow_item_ipv4</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token punctuation">.</span>hdr<span class="token punctuation">.</span>next_proto_id <span class="token operator">=</span> <span class="token number">0xFF</span><span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token punctuation">.</span>type <span class="token operator">=</span> RTE_FLOW_ITEM_TYPE_IPV4<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token punctuation">.</span>type <span class="token operator">=</span> RTE_FLOW_ITEM_TYPE_END<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">rte_flow_action</span> actions<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token punctuation">.</span>type <span class="token operator">=</span> RTE_FLOW_ACTION_TYPE_RSS<span class="token punctuation">,</span><span class="token punctuation">.</span>conf <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">rte_flow_action_rss</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">.</span>queue_num <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">,</span><span class="token punctuation">.</span>queue <span class="token operator">=</span> queue_list<span class="token punctuation">,</span><span class="token punctuation">.</span>level <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token punctuation">.</span>type <span class="token operator">=</span> RTE_FLOW_ACTION_TYPE_END<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    flow <span class="token operator">=</span> <span class="token function">rte_flow_create</span><span class="token punctuation">(</span>port_id<span class="token punctuation">,</span> <span class="token operator">&amp;</span>flow_attr<span class="token punctuation">,</span> patterns<span class="token punctuation">,</span> actions<span class="token punctuation">,</span> <span class="token operator">&amp;</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>flow<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">log_error</span><span class="token punctuation">(</span><span class="token string">"Failed to create ipip_rss_flow: %s"</span><span class="token punctuation">,</span> error<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实际开发过程中，稍微调整了一下流表的规则，不再匹配<code>tcp/udp</code>协议，而是只匹配到ipv4层，这样就可以同时支持<code>TCP/UDP</code>了。</p><p>最后感谢一下<code>Github Copilot</code>和<code>Cursor</code>在代码研发中提供的巨大帮助！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近线上出现一些VM网卡收包队列不均匀的问题，即使是将网卡队列中断均匀的绑定到各个CPU上，依然会出现某个核特别高的情况：&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;%Cpu0  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; us,  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; sy,  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; ni, &lt;span class=&quot;token number&quot;&gt;98.3&lt;/span&gt; id,  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; wa,  &lt;span class=&quot;token number&quot;&gt;0.9&lt;/span&gt; hi,  &lt;span class=&quot;token number&quot;&gt;0.9&lt;/span&gt; si,  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; st
%Cpu1  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; us,  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; sy,  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; ni, &lt;span class=&quot;token number&quot;&gt;97.5&lt;/span&gt; id,  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; wa,  &lt;span class=&quot;token number&quot;&gt;0.8&lt;/span&gt; hi,  &lt;span class=&quot;token number&quot;&gt;1.7&lt;/span&gt; si,  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; st
%Cpu2  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; us,  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; sy,  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; ni, &lt;span class=&quot;token number&quot;&gt;99.1&lt;/span&gt; id,  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; wa,  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; hi,  &lt;span class=&quot;token number&quot;&gt;0.9&lt;/span&gt; si,  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; st
%Cpu3  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;0.9&lt;/span&gt; us,  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; sy,  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; ni, &lt;span class=&quot;token number&quot;&gt;98.3&lt;/span&gt; id,  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; wa,  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; hi,  &lt;span class=&quot;token number&quot;&gt;0.9&lt;/span&gt; si,  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; st
%Cpu4  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; us,  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; sy,  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; ni, &lt;span class=&quot;token number&quot;&gt;98.3&lt;/span&gt; id,  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; wa,  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; hi,  &lt;span class=&quot;token number&quot;&gt;1.7&lt;/span&gt; si,  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; st
%Cpu5  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; us,  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; sy,  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; ni, &lt;span class=&quot;token number&quot;&gt;97.4&lt;/span&gt; id,  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; wa,  &lt;span class=&quot;token number&quot;&gt;0.9&lt;/span&gt; hi,  &lt;span class=&quot;token number&quot;&gt;1.7&lt;/span&gt; si,  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; st
%Cpu6  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; us,  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; sy,  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; ni, &lt;span class=&quot;token number&quot;&gt;97.4&lt;/span&gt; id,  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; wa,  &lt;span class=&quot;token number&quot;&gt;0.9&lt;/span&gt; hi,  &lt;span class=&quot;token number&quot;&gt;1.7&lt;/span&gt; si,  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; st
%Cpu7  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; us,  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; sy,  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; ni, &lt;span class=&quot;token number&quot;&gt;98.3&lt;/span&gt; id,  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; wa,  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; hi,  &lt;span class=&quot;token number&quot;&gt;1.7&lt;/span&gt; si,  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; st
%Cpu8  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; us,  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; sy,  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; ni, &lt;span class=&quot;token number&quot;&gt;46.3&lt;/span&gt; id,  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; wa,  &lt;span class=&quot;token number&quot;&gt;3.4&lt;/span&gt; hi, &lt;span class=&quot;token number&quot;&gt;50.3&lt;/span&gt; si,  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; st
%Cpu9  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; us,  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; sy,  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; ni, &lt;span class=&quot;token number&quot;&gt;97.4&lt;/span&gt; id,  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; wa,  &lt;span class=&quot;token number&quot;&gt;0.9&lt;/span&gt; hi,  &lt;span class=&quot;token number&quot;&gt;1.7&lt;/span&gt; si,  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; st
%Cpu10 &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; us,  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; sy,  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; ni, &lt;span class=&quot;token number&quot;&gt;98.3&lt;/span&gt; id,  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; wa,  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; hi,  &lt;span class=&quot;token number&quot;&gt;1.7&lt;/span&gt; si,  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; st
%Cpu11 &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; us,  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; sy,  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; ni, &lt;span class=&quot;token number&quot;&gt;99.1&lt;/span&gt; id,  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; wa,  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; hi,  &lt;span class=&quot;token number&quot;&gt;0.9&lt;/span&gt; si,  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; st
%Cpu12 &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; us,  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; sy,  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; ni, &lt;span class=&quot;token number&quot;&gt;98.3&lt;/span&gt; id,  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; wa,  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; hi,  &lt;span class=&quot;token number&quot;&gt;1.7&lt;/span&gt; si,  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; st
%Cpu13 &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; us,  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; sy,  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; ni, &lt;span class=&quot;token number&quot;&gt;99.1&lt;/span&gt; id,  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; wa,  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; hi,  &lt;span class=&quot;token number&quot;&gt;0.9&lt;/span&gt; si,  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; st
%Cpu14 &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; us,  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; sy,  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; ni, &lt;span class=&quot;token number&quot;&gt;98.3&lt;/span&gt; id,  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; wa,  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; hi,  &lt;span class=&quot;token number&quot;&gt;1.7&lt;/span&gt; si,  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; st
%Cpu15 &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; us,  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; sy,  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; ni, &lt;span class=&quot;token number&quot;&gt;98.3&lt;/span&gt; id,  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; wa,  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; hi,  &lt;span class=&quot;token number&quot;&gt;1.7&lt;/span&gt; si,  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; st&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;能看到其他核大部分还是比较均匀的，就是cpu8确实比其他核高很多。经过了一些排查，发现和VM使用了&lt;code&gt;IPIP Tunnel&lt;/code&gt;有关。&lt;/p&gt;</summary>
    
    
    
    <category term="虚拟化" scheme="https://www.ichenfu.com/categories/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
    
    <category term="DPDK" scheme="https://www.ichenfu.com/tags/DPDK/"/>
    
    <category term="RSS" scheme="https://www.ichenfu.com/tags/RSS/"/>
    
    <category term="IPIP" scheme="https://www.ichenfu.com/tags/IPIP/"/>
    
    <category term="rte_flow" scheme="https://www.ichenfu.com/tags/rte-flow/"/>
    
  </entry>
  
  <entry>
    <title>在KVM虚拟机中开启TSC作为时钟源</title>
    <link href="https://www.ichenfu.com/2024/12/17/enable-tsc-virtualization-on-kvm/"/>
    <id>https://www.ichenfu.com/2024/12/17/enable-tsc-virtualization-on-kvm/</id>
    <published>2024-12-17T12:49:51.000Z</published>
    <updated>2024-12-17T10:59:34.701Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇<a href="/2024/11/11/facts-about-x86-tsc/">x86平台的TSC（TIME-STAMP COUNTER）</a>中大概分析了一下TSC的一些相关的特性，以及TSC作为系统时钟源的一些基础条件。那么，在虚拟化的场景下，如何让Guest也用上TSC呢？这篇文章就来讨论一下TSC在KVM虚拟化中的使用。</p><h2 id="基础分析"><a href="#基础分析" class="headerlink" title="基础分析"></a>基础分析</h2><p>默认情况下，KVM虚拟机首选的时钟源是<code>kvm-clock</code>，即使将VM的CPU Model设置为<code>host-passthrough</code>，也不会使用TSC作为时钟源。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># lscpu|grep Flags</span>Flags:                                fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts mmx fxsr sse sse2 ss ht syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology cpuid tsc_known_freq pni pclmulqdq dtes64 vmx ssse3 fma cx16 pdcm pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand hypervisor lahf_lm abm 3dnowprefetch cpuid_fault ssbd ibrs ibpb stibp ibrs_enhanced tpr_shadow flexpriority ept vpid ept_ad fsgsbase tsc_adjust bmi1 avx2 smep bmi2 erms invpcid avx512f avx512dq rdseed adx smap avx512ifma clflushopt clwb avx512cd sha_ni avx512bw avx512vl xsaveopt xsavec xgetbv1 xsaves wbnoinvd arat vnmi avx512vbmi umip pku ospke avx512_vbmi2 gfni vaes vpclmulqdq avx512_vnni avx512_bitalg avx512_vpopcntdq la57 rdpid fsrm md_clear flush_l1d arch_capabilities<span class="token comment"># cat /sys/devices/system/clocksource/clocksource0/available_clocksource</span>kvm-clock acpi_pm<span class="token comment"># cat /sys/devices/system/clocksource/clocksource0/current_clocksource</span>kvm-clock<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><span id="more"></span><p>可以看到，即使CPU有大部分TSC相关的Flags，但是<code>available_clocksource</code>里并没有TSC，current_clocksource也是kvm-clock，原因可以从dmesg里看到：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># dmesg |grep -i tsc</span><span class="token punctuation">[</span>    <span class="token number">0.000000</span><span class="token punctuation">]</span> tsc: Detected <span class="token number">2199.998</span> MHz processor<span class="token punctuation">[</span>    <span class="token number">0.001000</span><span class="token punctuation">]</span> clocksource: tsc-early: mask: 0xffffffffffffffff max_cycles: 0x1fb63109b96, max_idle_ns: <span class="token number">440795265316</span> ns<span class="token punctuation">[</span>    <span class="token number">0.001000</span><span class="token punctuation">]</span> TSC deadline timer enabled<span class="token punctuation">[</span>    <span class="token number">0.577230</span><span class="token punctuation">]</span> clocksource: tsc: mask: 0xffffffffffffffff max_cycles: 0x1fb63109b96, max_idle_ns: <span class="token number">440795265316</span> ns<span class="token punctuation">[</span>    <span class="token number">0.692265</span><span class="token punctuation">]</span> tsc: Marking TSC unstable due to TSC halts <span class="token keyword">in</span> idle states deeper than C2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，在启动的时候，但是由于TSC在C2状态下会停止，所以被标记为不稳定。<br>当然，还有另外一种情况：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># cat /sys/devices/system/clocksource/clocksource0/available_clocksource</span>kvm-clock tsc acpi_pm<span class="token comment"># cat /sys/devices/system/clocksource/clocksource0/current_clocksource</span>kvm-clock<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这种情况下，虽然TSC是可用的，但是还是没有被优先使用。虽然有两种可能性，但其实根因都是一个，那就是在Guest里，CPU缺少一个关键特性，那就是上篇文章提到的<code>Invariant TSC</code>。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># cpuid -1 -l 0x80000007</span>CPU:   RAS Capability <span class="token punctuation">(</span>0x80000007/ebx<span class="token punctuation">)</span>:      MCA overflow recovery support <span class="token operator">=</span> <span class="token boolean">false</span>      SUCCOR support                <span class="token operator">=</span> <span class="token boolean">false</span>      HWA: hardware assert support  <span class="token operator">=</span> <span class="token boolean">false</span>      scalable MCA support          <span class="token operator">=</span> <span class="token boolean">false</span>   Advanced Power Management Features <span class="token punctuation">(</span>0x80000007/ecx<span class="token punctuation">)</span>:      CmpUnitPwrSampleTimeRatio <span class="token operator">=</span> 0x0 <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>   Advanced Power Management Features <span class="token punctuation">(</span>0x80000007/edx<span class="token punctuation">)</span>:      TS: temperature sensing diode           <span class="token operator">=</span> <span class="token boolean">false</span>      FID: frequency ID control               <span class="token operator">=</span> <span class="token boolean">false</span>      VID: voltage ID control                 <span class="token operator">=</span> <span class="token boolean">false</span>      TTP: thermal trip                       <span class="token operator">=</span> <span class="token boolean">false</span>      TM: thermal monitor                     <span class="token operator">=</span> <span class="token boolean">false</span>      STC: software thermal control           <span class="token operator">=</span> <span class="token boolean">false</span>      <span class="token number">100</span> MHz multiplier control              <span class="token operator">=</span> <span class="token boolean">false</span>      hardware P-State control                <span class="token operator">=</span> <span class="token boolean">false</span>      TscInvariant                            <span class="token operator">=</span> <span class="token boolean">false</span>      CPB: core performance boost             <span class="token operator">=</span> <span class="token boolean">false</span>      read-only effective frequency interface <span class="token operator">=</span> <span class="token boolean">false</span>      processor feedback interface            <span class="token operator">=</span> <span class="token boolean">false</span>      APM power reporting                     <span class="token operator">=</span> <span class="token boolean">false</span>      connected standby                       <span class="token operator">=</span> <span class="token boolean">false</span>      RAPL: running average power limit       <span class="token operator">=</span> <span class="token boolean">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，关键的<code>TscInvariant</code>是false，在第一种情况下，<code>intel_idle</code>驱动正常加载，在<a href="https://github.com/torvalds/linux/blob/v6.12/drivers/idle/intel_idle.c#L2008">驱动代码中</a>：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> bool __init <span class="token function">intel_idle_verify_cstate</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> mwait_hint<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> mwait_cstate <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">MWAIT_HINT2CSTATE</span><span class="token punctuation">(</span>mwait_hint<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>MWAIT_CSTATE_MASK<span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> num_substates <span class="token operator">=</span> <span class="token punctuation">(</span>mwait_substates <span class="token operator">>></span> mwait_cstate <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>MWAIT_SUBSTATE_MASK<span class="token punctuation">;</span><span class="token comment">/* Ignore the C-state if there are NO sub-states in CPUID for it. */</span><span class="token keyword">if</span> <span class="token punctuation">(</span>num_substates <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>mwait_cstate <span class="token operator">></span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">boot_cpu_has</span><span class="token punctuation">(</span>X86_FEATURE_NONSTOP_TSC<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">mark_tsc_unstable</span><span class="token punctuation">(</span><span class="token string">"TSC halts in idle states deeper than C2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>会检测CPU是否有<code>X86_FEATURE_NONSTOP_TSC</code>也就是<code>TscInvariant</code>，如果没有，就会标记TSC为不稳定。那么在这种情况下，因为TSC被标记为不稳定了，所以tsc是不会出现在available_clocksource中的。</p><p>那第二种情况呢，TSC没有被标记为不稳定，也出现在了<code>available_clocksource</code>中，但是为什么还是没有被优先使用呢？这是因为默认情况下，kvm-clock的优先级比TSC要高，可以看到在内核中的<a href="https://github.com/torvalds/linux/blob/v6.12/arch/x86/kernel/kvmclock.c">代码</a>：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">clocksource</span> kvm_clock <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">.</span>name<span class="token operator">=</span> <span class="token string">"kvm-clock"</span><span class="token punctuation">,</span><span class="token punctuation">.</span>read<span class="token operator">=</span> kvm_clock_get_cycles<span class="token punctuation">,</span>    <span class="token comment">// 默认情况下，kvm-clock的rating是400，这比TSC的rating 300要高，所以当两者同时存在时，系统会优先使用kvm-clock作为时钟源</span><span class="token punctuation">.</span>rating<span class="token operator">=</span> <span class="token number">400</span><span class="token punctuation">,</span><span class="token punctuation">.</span>mask<span class="token operator">=</span> <span class="token function">CLOCKSOURCE_MASK</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span>flags<span class="token operator">=</span> CLOCK_SOURCE_IS_CONTINUOUS<span class="token punctuation">,</span><span class="token punctuation">.</span>id     <span class="token operator">=</span> CSID_X86_KVM_CLK<span class="token punctuation">,</span><span class="token punctuation">.</span>enable<span class="token operator">=</span> kvm_cs_enable<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是在<code>kvm-clock</code>初始化的过程中，如果发现TSC满足条件的话，会主动降低自己的rating：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> __init <span class="token function">kvmclock_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// ...</span><span class="token comment">/* * X86_FEATURE_NONSTOP_TSC is TSC runs at constant rate * with P/T states and does not stop in deep C-states. * * Invariant TSC exposed by host means kvmclock is not necessary: * can use TSC as clocksource. * */</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">boot_cpu_has</span><span class="token punctuation">(</span>X86_FEATURE_CONSTANT_TSC<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>    <span class="token function">boot_cpu_has</span><span class="token punctuation">(</span>X86_FEATURE_NONSTOP_TSC<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>    <span class="token operator">!</span><span class="token function">check_tsc_unstable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>kvm_clock<span class="token punctuation">.</span>rating <span class="token operator">=</span> <span class="token number">299</span><span class="token punctuation">;</span><span class="token function">clocksource_register_hz</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>kvm_clock<span class="token punctuation">,</span> NSEC_PER_SEC<span class="token punctuation">)</span><span class="token punctuation">;</span>pv_info<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"KVM"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，只要CPU支持<code>TscInvariant</code>，那么kvm-clock的rating会主动降低自己的rating到299，那么在这种情况下，TSC将会成为rating更高的时钟源，从而被优先使用。但是由于Guest里CPU不支持<code>TscInvariant</code>，所以TSC并没有被优先使用。</p><p>到这里可以看出，要想让Guest支持并默认使用TSC作为时钟源，<code>TscInvariant</code>这个特性是十分关键的。</p><h2 id="开启TscInvariant特性"><a href="#开启TscInvariant特性" class="headerlink" title="开启TscInvariant特性"></a>开启TscInvariant特性</h2><p>Qemu最早在2.1版本中已经支持了<code>TscInvariant</code>，可以看到在这个版本的<a href="https://wiki.qemu.org/ChangeLog/2.1">Changelog</a>中：</p><blockquote><p>New “invtsc” (Invariant TSC) CPU feature. When enabled, this will block migration and savevm, so it is not enabled by default on any CPU model. To enable invtsc, the migratable&#x3D;no flag (supported only by -cpu host, by now) is required. So, invtsc is available only if using: -cpu host,migratable&#x3D;no,+invtsc.</p></blockquote><p>开启方法很简单，只需要在启动时加上参数<code>-cpu host,migratable=no,+invtsc</code>即可，或者等价的，在Libvirt的XML中：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cpu</span> <span class="token attr-name">mode</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>host-passthrough<span class="token punctuation">'</span></span> <span class="token attr-name">migratable</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>off<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>feature</span> <span class="token attr-name">policy</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>require<span class="token punctuation">'</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>invtsc<span class="token punctuation">'</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cpu</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>按文档启动一个虚拟机，然后查看对应的效果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># lscpu |grep Fla</span>Flags:                              fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ss ht syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon rep_good nopl xtopology nonstop_tsc cpuid tsc_known_freq pni pclmulqdq vmx ssse3 fma cx16 pdcm pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand hypervisor lahf_lm abm 3dnowprefetch cpuid_fault ssbd ibrs ibpb stibp ibrs_enhanced tpr_shadow flexpriority ept vpid ept_ad fsgsbase tsc_adjust bmi1 avx2 smep bmi2 erms invpcid avx512f avx512dq rdseed adx smap avx512ifma clflushopt clwb avx512cd sha_ni avx512bw avx512vl xsaveopt xsavec xgetbv1 xsaves wbnoinvd arat vnmi avx512vbmi umip pku ospke avx512_vbmi2 gfni vaes vpclmulqdq avx512_vnni avx512_bitalg avx512_vpopcntdq la57 rdpid fsrm md_clear arch_capabilities<span class="token comment"># dmesg |grep tsc</span><span class="token punctuation">[</span>    <span class="token number">0.000005</span><span class="token punctuation">]</span> tsc: Detected <span class="token number">2199.998</span> MHz processor<span class="token punctuation">[</span>    <span class="token number">0.112544</span><span class="token punctuation">]</span> clocksource: tsc-early: mask: 0xffffffffffffffff max_cycles: 0x1fb63109b96, max_idle_ns: <span class="token number">440795265316</span> ns<span class="token punctuation">[</span>    <span class="token number">0.310799</span><span class="token punctuation">]</span> clocksource: tsc: mask: 0xffffffffffffffff max_cycles: 0x1fb63109b96, max_idle_ns: <span class="token number">440795265316</span> ns<span class="token punctuation">[</span>    <span class="token number">0.310905</span><span class="token punctuation">]</span> clocksource: Switched to clocksource tsc<span class="token comment"># cpuid -1 -l 0x80000007|grep TscInvariant</span>      TscInvariant                            <span class="token operator">=</span> <span class="token boolean">true</span><span class="token comment"># cat /sys/devices/system/clocksource/clocksource0/available_clocksource</span>tsc kvm-clock acpi_pm<span class="token comment"># cat /sys/devices/system/clocksource/clocksource0/current_clocksource</span>tsc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，TSC已经成为可用并且是默认的时钟源了。</p><h2 id="VM热迁移"><a href="#VM热迁移" class="headerlink" title="VM热迁移"></a>VM热迁移</h2><p>现在我们已经实现了Guest默认使用TSC作为时钟源，但是还有一个问题，从上面的changelog里其实也能看出来，那就是现在的配置，VM是没有迁移能力的，当前的配置下，如果尝试迁移VM，会出现如下错误：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Requested operation is not valid: cannot migrate domain: State blocked by non-migratable CPU device <span class="token punctuation">(</span>invtsc flag<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>为什么有了<code>TscInvariant</code>之后就无法迁移了呢？我们可以简单想象一下，一开始VM运行在Host1上，并且使用了TSC作为时钟源，那么VM里TSC的频率和Host1是一致的，这时如果VM被迁移到Host2上，并且Host2的TSC频率和Host1不一致的话，那此时VM读取到的TSC频率就会发生变化，这很显然并不是我们想要的结果。<br>但是，KVM是支持用户自定义VM的TSC频率的，如果我们手动设置一个TSC频率，让迁移前后，Guest看到的TSC频率保持一致，自然也就不会导致问题了，因此在Qemu 2.9版本中，也是支持了这种情况，当用户指定了TSC的频率，即使在有invtsc的情况下，依然可以支持热迁移，具体的修改可以参考<a href="https://github.com/qemu/qemu/commit/d99569d">这个commit</a>。而我们需要做的，就是在启动参数里加上<code>-cpu host,migratable=on,+invtsc,tsc-freq=XXX</code>，或者等价的，使用libvirt xml：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cpu</span> <span class="token attr-name">mode</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>host-passthrough<span class="token punctuation">'</span></span> <span class="token attr-name">migratable</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>on<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>feature</span> <span class="token attr-name">policy</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>require<span class="token punctuation">'</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>invtsc<span class="token punctuation">'</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cpu</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>clock</span> <span class="token attr-name">offset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>utc<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>timer</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>tsc<span class="token punctuation">'</span></span> <span class="token attr-name">frequency</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>2200000000<span class="token punctuation">'</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>clock</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="TSC虚拟化的硬件加速"><a href="#TSC虚拟化的硬件加速" class="headerlink" title="TSC虚拟化的硬件加速"></a>TSC虚拟化的硬件加速</h2><p>还剩下最后的一个问题，KVM是如何高效的实现固定Guest TSC频率的？当Guest TSC频率和Host TSC频率不一致时，这中间又是如何转换的？以及如何在迁移过程中确保TSC不会发生跳变？<br>在这种场景下，CPU支持的<code>TSC scaling</code>以及<code>TSC offseting</code>这两个特性就十分重要了，怎么理解呢，如果启用了<code>TSC offseting</code>，那么Guest在读取TSC的时候，硬件会在原始TSC值的基础上，加上一个设置的offset，这样在迁移过程中，源和目的宿主机的TSC base值不一样的情况下，只需要改一下这个offset值就好了，由于这个offset也只会在Guest读取时加上，因此也不会影响宿主机使用TSC。<br><code>TSC scaling</code>也是类似的机制，通过设置一个频率倍率，让Guest读取TSC时将CPU当前的TSC值乘以这个倍率之后返回给Geust，从而解决用户设置的TSC频率和CPU本身TSC频率不一致的问题。<br>具体的信息，可以参考一下Intel的<a href="https://cdrdv2.intel.com/v1/dl/getContent/671506">开发手册</a>：</p><blockquote><h4 id="26-6-5-Time-Stamp-Counter-Offset-and-Multiplier"><a href="#26-6-5-Time-Stamp-Counter-Offset-and-Multiplier" class="headerlink" title="26.6.5 Time-Stamp Counter Offset and Multiplier"></a>26.6.5 Time-Stamp Counter Offset and Multiplier</h4><p> The VM-execution control fields include a 64-bit TSC-offset field. If the “RDTSC exiting” control is 0 and the “use TSC offsetting” control is 1, this field controls executions of the RDTSC and RDTSCP instructions. It also controls executions of the RDMSR instruction that read from the IA32_TIME_STAMP_COUNTER MSR. For all of these, the value of the TSC offset is added to the value of the time-stamp counter, and the sum is returned to guest software in EDX:EAX.</p><p> Processors that support the 1-setting of the “use TSC scaling” control also support a 64-bit TSC-multiplier field. If this control is 1 (and the “RDTSC exiting” control is 0 and the “use TSC offsetting” control is 1), this field also affects the executions of the RDTSC, RDTSCP, and RDMSR instructions identified above. Specifically, the contents of the time-stamp counter is first multiplied by the TSC multiplier before adding the TSC offset.</p><p> See Chapter 26 for a detailed treatment of the behavior of RDTSC, RDTSCP, and RDMSR in VMX non-root operation.</p><h3 id="27-3-CHANGES-TO-INSTRUCTION-BEHAVIOR-IN-VMX-NON-ROOT-OPERATION"><a href="#27-3-CHANGES-TO-INSTRUCTION-BEHAVIOR-IN-VMX-NON-ROOT-OPERATION" class="headerlink" title="27.3 CHANGES TO INSTRUCTION BEHAVIOR IN VMX NON-ROOT OPERATION"></a>27.3 CHANGES TO INSTRUCTION BEHAVIOR IN VMX NON-ROOT OPERATION</h3><ul><li><p><strong>RDTSC</strong>. Behavior of the RDTSC instruction is determined by the settings of the “RDTSC exiting” and “use TSC offsetting” VM-execution controls:<br>  - If both controls are 0, RDTSC operates normally.</p><p>  - If the “RDTSC exiting” VM-execution control is 0 and the “use TSC offsetting” VM-execution control is 1, the value returned is determined by the setting of the “use TSC scaling” VM-execution control:</p><ul><li>If the control is 0, RDTSC loads EAX:EDX with the sum of the value of the IA32_TIME_STAMP_COUNTER MSR and the value of the TSC offset.</li><li>If the control is 1, RDTSC first computes the product of the value of the IA32_TIME_STAMP_COUNTER MSR and the value of the TSC multiplier. It then shifts the value of the product right 48 bits and loads EAX:EDX with the sum of that shifted value and the value of the TSC offset.</li></ul><p>  - If the “RDTSC exiting” VM-execution control is 1, RDTSC causes a VM exit.</p></li></ul></blockquote><p>可以看到在Intel平台，<code>TSC-offset</code>以及<code>TSC multiplier</code>是VMCS中的两个字段，通过修改这两个以及<code>RDTSC exiting</code>字段，可以很好的控制Guest中TSC的行为。</p><p>当然，AMD的实现和Intel还有一些区别，具体的也可以参考<a href="https://www.amd.com/content/dam/amd/en/documents/processor-tech-docs/programmer-references/40332.pdf">AMD的文档</a></p><blockquote><h3 id="15-30-5-TSC-Ratio-MSR-C000-0104h"><a href="#15-30-5-TSC-Ratio-MSR-C000-0104h" class="headerlink" title="15.30.5 TSC Ratio MSR (C000_0104h)"></a>15.30.5 TSC Ratio MSR (C000_0104h)</h3><p>Writing to the TSC Ratio MSR allows the hypervisor to control the guest’s view of the Time Stamp Counter. The contents of TSC Ratio MSR sets the value of the TSCRatio. This constant scales the timestamp value returned when the TSC is read by a guest via the RDTSC or RDTSCP instructions or when the TSC, MPERF, or MPerfReadOnly MSRs are read via the RDMSR instruction by a guest running under virtualization.</p><p>This facility allows the hypervisor to provide a consistent TSC, MPERF, and MPerfReadOnly rate for a guest process when moving that process between cores that have a differing P0 rate. The TSCRatio does not affect the value read from the TSC, MPERF, and MPerfReadOnly MSRs when in host mode or when virtualization is disabled. System Management Mode (SMM) code sees unscaled TSC, MPERF and MPerfReadOnly values unless the SMM code is executed within a guest container. The TSCRatio value does not affect the rate of the underlying TSC, MPERF, and MPerfReadOnly counters, nor the value that gets written to the TSC, MPERF, and MPerfReadOnly MSRs counters on a write by either the host or the guest.</p><p>The TSC Ratio MSR specifies the TSCRatio value as a fixed-point binary number in 8.32 format, which is composed of 8 bits of integer and 32 bits of fraction. This number is the ratio of the desired P0 frequency to be presented to the guest relative to the P0 frequency of the core (See Section 17.1, “PState Control,” on page 657). The reset value of the TSCRatio is 1.0, which sets the guest P0 frequency to match the core P0 frequency.</p><p>Note that:<br><code>TSCFreq = Core P0 frequency * TSCRatio, so TSCRatio = (Desired TSCFreq) / Core P0 frequency.</code></p><p>The TSC value read by the guest is computed using the TSC Ratio MSR along with the TSC_OFFSET field from the VMCB so that the actual value returned is:<br><code>TSC Value (in guest) = (P0 frequency * TSCRatio * t) + VMCB.TSC_OFFSET + (Last Value Written to TSC) * TSCRatio</code><br>Where t is time since the TSC was last written via the TSC MSR (or since reset if not written)</p></blockquote><p>和Intel相比，AMD的TSC offset值是设置在VMCB中的，而TSC Scaling的倍率是基于MSR来实现的。实现的逻辑有区别并不重要，毕竟KVM会隔离掉不同平台的实现细节。重要的是，软硬件的协同配合，使得在虚拟化场景下，TSC可以作为一个高效的时钟源被VM使用。</p><h2 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h2><p>最后来看看相比于<code>kvm-clock</code>时钟源，使用<code>tsc</code>作为时钟源能够带来多大的性能提升吧。从红帽找到了一个测试时钟性能的<a href="https://docs.redhat.com/en/documentation/red_hat_enterprise_linux_for_real_time/7/html/reference_guide/sect-posix_clocks">例子</a>：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;time.h></span></span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> rc<span class="token punctuation">;</span><span class="token keyword">long</span> i<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">timespec</span> ts<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">500000000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>rc <span class="token operator">=</span> <span class="token function">clock_gettime</span><span class="token punctuation">(</span>CLOCK_MONOTONIC<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ts<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译运行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># cat /sys/devices/system/clocksource/clocksource0/current_clocksource</span>tsc<span class="token comment"># time taskset -c 6 ./clock_timing</span>real    0m10.858suser    0m10.821ssys     0m0.000s<span class="token comment"># echo kvm-clock |sudo tee /sys/devices/system/clocksource/clocksource0/current_clocksource</span>kvm-clock<span class="token comment"># cat /sys/devices/system/clocksource/clocksource0/current_clocksource</span>kvm-clock<span class="token comment"># time taskset -c 6 ./clock_timing</span>real    0m13.530suser    0m13.482ssys     0m0.002s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同样是获取<code>500000000</code>次时间，<code>tsc</code>需要<code>10.821s</code>，而<code>kvm-clock</code>需要<code>13.482s</code>，差不多提升了20%，算是相当大的提升幅度了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;上一篇&lt;a href=&quot;/2024/11/11/facts-about-x86-tsc/&quot;&gt;x86平台的TSC（TIME-STAMP COUNTER）&lt;/a&gt;中大概分析了一下TSC的一些相关的特性，以及TSC作为系统时钟源的一些基础条件。那么，在虚拟化的场景下，如何让Guest也用上TSC呢？这篇文章就来讨论一下TSC在KVM虚拟化中的使用。&lt;/p&gt;
&lt;h2 id=&quot;基础分析&quot;&gt;&lt;a href=&quot;#基础分析&quot; class=&quot;headerlink&quot; title=&quot;基础分析&quot;&gt;&lt;/a&gt;基础分析&lt;/h2&gt;&lt;p&gt;默认情况下，KVM虚拟机首选的时钟源是&lt;code&gt;kvm-clock&lt;/code&gt;，即使将VM的CPU Model设置为&lt;code&gt;host-passthrough&lt;/code&gt;，也不会使用TSC作为时钟源。&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# lscpu|grep Flags&lt;/span&gt;
Flags:                                fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts mmx fxsr sse sse2 ss ht syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology cpuid tsc_known_freq pni pclmulqdq dtes64 vmx ssse3 fma cx16 pdcm pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand hypervisor lahf_lm abm 3dnowprefetch cpuid_fault ssbd ibrs ibpb stibp ibrs_enhanced tpr_shadow flexpriority ept vpid ept_ad fsgsbase tsc_adjust bmi1 avx2 smep bmi2 erms invpcid avx512f avx512dq rdseed adx smap avx512ifma clflushopt clwb avx512cd sha_ni avx512bw avx512vl xsaveopt xsavec xgetbv1 xsaves wbnoinvd arat vnmi avx512vbmi umip pku ospke avx512_vbmi2 gfni vaes vpclmulqdq avx512_vnni avx512_bitalg avx512_vpopcntdq la57 rdpid fsrm md_clear flush_l1d arch_capabilities
&lt;span class=&quot;token comment&quot;&gt;# cat /sys/devices/system/clocksource/clocksource0/available_clocksource&lt;/span&gt;
kvm-clock acpi_pm
&lt;span class=&quot;token comment&quot;&gt;# cat /sys/devices/system/clocksource/clocksource0/current_clocksource&lt;/span&gt;
kvm-clock&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="虚拟化" scheme="https://www.ichenfu.com/categories/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
    
    <category term="TSC Virtualization" scheme="https://www.ichenfu.com/tags/TSC-Virtualization/"/>
    
    <category term="TSC直通" scheme="https://www.ichenfu.com/tags/TSC%E7%9B%B4%E9%80%9A/"/>
    
  </entry>
  
  <entry>
    <title>x86平台的TSC（TIME-STAMP COUNTER）</title>
    <link href="https://www.ichenfu.com/2024/11/11/facts-about-x86-tsc/"/>
    <id>https://www.ichenfu.com/2024/11/11/facts-about-x86-tsc/</id>
    <published>2024-11-11T12:30:42.000Z</published>
    <updated>2024-11-22T01:59:30.314Z</updated>
    
    <content type="html"><![CDATA[<p>今天跟着Intel的开发手册，看看如何随着Intel对TSC不断的修改和增加新特性，让TSC从一个简单的性能计数器发展成当前Linux上x86平台最重要的时钟源之一。本文基本上可以看作是<a href="https://www.intel.com/content/dam/www/public/us/en/documents/manuals/64-ia-32-architectures-software-developer-vol-3b-part-2-manual.pdf">Intel® 64 and IA-32 Architectures Software Developer’s Manual Volume 3B: System Programming Guide, Part 2</a>中<code>17.15 TIME-STAMP COUNTER</code>这章的翻译和总结。</p><p>在x86平台上，Linux系统里最常用的一个时钟源就是<code>tsc</code>，具体的，可以通过命令查看当前的时钟源和系统里可用的时钟源：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># cat /sys/devices/system/clocksource/clocksource0/available_clocksource</span>tsc hpet acpi_pm<span class="token comment"># cat /sys/devices/system/clocksource/clocksource0/current_clocksource</span>tsc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>那么TSC是个什么东西呢？我们可以跟着手册看一看。</p><span id="more"></span><h2 id="TIME-STAMP-COUNTER"><a href="#TIME-STAMP-COUNTER" class="headerlink" title="TIME-STAMP COUNTER"></a>TIME-STAMP COUNTER</h2><p>从 Pentium 处理器开始，Intel 64 和 IA-32 架构定义了一种时间戳计数器机制（TSC），可以用于监控和识别处理器事件的相对时间。TSC包括以下组件：</p><pre><code>- TSC flag：用于标识TSC是否可用，当`CPUID.1:EDX.TSC[bit 4] = 1`时，TSC可用- IA32_TIME_STAMP_COUNTER MSR：对应TSC值的寄存器- RDTSC指令：读取TSC寄存器值的指令- TSD flag： 用于开关TSC功能，`CR4.TSD[bit 2] = 1`时开启TSC</code></pre><p>TSC从第一次在CPU中实现到如今很多年了，所以不同CPU上的一些表现还是有些区别的，但主要的特点是通用的，首先TSC是一个64bit大小的计数器，当CPU重置时，这个计数器也会被重置成0，重置后，即使CPU因为执行了HLT指令进入idle状态，这个寄存器也会持续的增加。</p><p>但是TSC会按什么样的频率增加呢？这里不同的CPU差异就比较大了。在一些比较老的CPU上（大概是07-08年之前），TSC是跟着CPU的运行频率增加的，比如当前CPU跑在2.4GHz，那TSC就每秒增加24000000，但是针对这些老的CPU，超频、以及CPU自身的睿频都会对TSC的计数产生影响。这其实对用户是不太友好的，毕竟睿频是硬件层面的，这个计数器就不那么“稳定”了。</p><p>所以后续的新CPU，Intel将这个行为修改成了以固定频率增加，只是这个频率具体是多少得看具体的配置，具体的TSC频率如何检测，手册里有专门的一章进行解释，这里我们不过多涉及。</p><p>在新CPU里，TSC以固定频率增长，所以这其实是一个TSC的特性，叫做<code>Constant TSC</code>，有了这个特性之后，TSC频率相对就稳定了，不会随着CPU睿频而随意改变频率，所以他也就可以成为一个稳定的时钟源了。因此这个特性会一直在后续的CPU中提供。</p><p>用户可以使用<code>RDTSC</code>这个CPU指令获取TSC的值，正常情况下（计数器没有溢出），Intel的CPU可以保证每次通过<code>RDTSC</code>读取的值都是单调递增的，同时可以保证在10年内计数器不会溢出。但是需要注意的是，这个指令它不是有序的（也就说他是有可能被CPU乱序执行的，所以可能需要加上memory barrier）。另外由于TSC是一个MSR，所以其实这个寄存器是可以通过<code>RDMSR</code>和<code>WRMSR</code>指令进行读写的，只是一些老CPU上只能写低32位（高32位此时会清0）。</p><h3 id="Invariant-TSC"><a href="#Invariant-TSC" class="headerlink" title="Invariant TSC"></a>Invariant TSC</h3><p>前面提到TSC即使CPU处在halt状态，依然会持续的累加，但即使是这样，TSC依然不是100%可依赖最为一个时钟源的，为什么呢？因为halt状态只是CPU的C1状态，现代的CPU为了省电，引入了更多更深的C states，具体可以参考之前关于电源管理的内容<a href="/2020/07/17/cpu-idle-time-managment/">再谈CPU的电源管理（如何做到稳定全核睿频？）</a>，当CPU进入到比较深的C states，比如C6，此时整个CPU的Core基本都被关闭了，那TSC自然也有可能不工作了。</p><p>为了解决这个问题呢，Intel又引入了一个新的特性增强，叫<code>Invariant TSC</code>，这个特性可以当<code>CPUID.80000007H:EDX[8] == 1</code>时，代表CPU支持这个特性。有这个特性的CPU，在任何的C states下，TSC都会持续运行，在Linux里，这个特性也会被称为<code>NONSTOP_TSC</code>（感觉这个更传神一些，不停止的TSC）。</p><p>可以看到引入<code>Constant TSC</code>和<code>Invariant TSC</code>之后，CPU先后解决了P-States(CPU频率变化)和C-States(CPU电源状态)对TSC频率的影响，逐渐将TSC设计成符合时钟源要求的样子，这也算是软硬件协同发展，螺旋上升的正面例子吧。</p><h3 id="IA32-TSC-AUX-Register-and-RDTSCP-Support"><a href="#IA32-TSC-AUX-Register-and-RDTSCP-Support" class="headerlink" title="IA32_TSC_AUX Register and RDTSCP Support"></a>IA32_TSC_AUX Register and RDTSCP Support</h3><p>看起来到这里已经万事大吉了？其实并没有，前面提到，<code>RDTSC</code>指令并不是有序的，意味着CPU硬件有可能对这个执行乱序执行，这可能并不是软件所预期的结果，举个例子，假如想通过基于类似<code>RDTSC;other insturctions;RDTSC</code>这样的指令顺序来计算<code>other insturctions</code>消耗的时间，在真正执行的时候，有可能就按<code>RDTSC;RDTSCother insturctions</code>的顺序了，这显然不是所期望的结果。</p><p>所以Intel针对这个问题，又增加了一个新的指令<code>RDTSCP</code>，使得可以原子地读取TSC。当执行<code>RDTSCP</code>指令时，会同时读取TSC和IA32_TSC_AUX两个寄存器的值。并且这个操作是原子的，不会出现上下文切换的问题。不过需要注意的是，只有当<code>CPUID.80000001H:EDX[27] == 1</code>时，CPU才支持<code>RDTSCP</code>指令。</p><p>针对这个乱序的问题，其实Linux内核里也是做了相应的处理的，我们可以从内核读取TSC的源码看出来，源码里的注释也是非常的详细：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> __always_inline <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">rdtsc_ordered</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">DECLARE_ARGS</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> low<span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* * The RDTSC instruction is not ordered relative to memory * access.  The Intel SDM and the AMD APM are both vague on this * point, but empirically an RDTSC instruction can be * speculatively executed before prior loads.  An RDTSC * immediately after an appropriate barrier appears to be * ordered as a normal load, that is, it provides the same * ordering guarantees as reading from a global memory location * that some other imaginary CPU is updating continuously with a * time stamp. * * Thus, use the preferred barrier on the respective CPU, aiming for * RDTSCP as the default. */</span>     <span class="token comment">//优先使用rdtscp，如果不支持，先执行lfence再执行rdtsc</span><span class="token keyword">asm</span> <span class="token keyword">volatile</span><span class="token punctuation">(</span><span class="token function">ALTERNATIVE_2</span><span class="token punctuation">(</span><span class="token string">"rdtsc"</span><span class="token punctuation">,</span>   <span class="token string">"lfence; rdtsc"</span><span class="token punctuation">,</span> X86_FEATURE_LFENCE_RDTSC<span class="token punctuation">,</span>   <span class="token string">"rdtscp"</span><span class="token punctuation">,</span> X86_FEATURE_RDTSCP<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">EAX_EDX_RET</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> low<span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token comment">/* RDTSCP clobbers ECX with MSR_TSC_AUX. */</span><span class="token operator">::</span> <span class="token string">"ecx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token function">EAX_EDX_VAL</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> low<span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Time-Stamp-Counter-Adjustment"><a href="#Time-Stamp-Counter-Adjustment" class="headerlink" title="Time-Stamp Counter Adjustment"></a>Time-Stamp Counter Adjustment</h3><p>最后的最后，还有一个问题需要解决，上面其实也提到了，TSC本质上是个MSR（IA32_TIME_STAMP_COUNTER MSR 地址10H），而这个MSR是可写的！这会存在一个问题，对于现代的多核系统，每个核都有自己的TSC MSR，如果某个核的MSR被修改了，这个修改怎么同步到其他核上去呢？很显然，不管是想计算出来被修改的核心的TSC的变化值，以及将这个值同步到其他的核上，都是不现实的。因为没办法在同一时刻在所有核上执行相同的指令。</p><p>但是多核之间同步TSC需求又是客观存在的，怎么办呢？Intel提供了一个新的MSR：<code>IA32_TSC_ADJUST(地址3BH)</code>来解决这个问题。首先和TSC一样每个核都有自己独立的<code>IA32_TSC_ADJUST</code>，当处理器重置时，<code>IA32_TSC_ADJUST</code>也会被置为0，当对<code>IA32_TIME_STAMP_COUNTER</code>进行写入时，比如加上（或者）一个X的值，那么对应核的<code>IA32_TSC_ADJUST</code>也会有对应的X值被加上（或者减去）。因此有了这个MSR之后，想计算某个核TSC的变化值，直接读取<code>IA32_TSC_ADJUST</code>里的值就行了，如果要把这个值同步到其他的核，就只需要把这个值写入到其他核的<code>IA32_TSC_ADJUST</code>里就行了。这就直接解决了多核之间TSC同步的问题，不过这个特性也不是所有CPU都支持，只有当<code>CPUID.(EAX=07H, ECX=0H):EBX.TSC_ADJUST == 1</code>时才支持。</p><p>到这里，TSC就变得真正可依赖了，首先有了<code>Constant TSC</code>，确保TSC按固定频率运行，然后有了<code>Invariant TSC</code>确保TSC一直运行，还有<code>IA32_TSC_ADJUST</code>确保当TSC被修改后依然能被同步回来。有了这些特性，TSC就可以成为系统中可信赖的时钟源。我们也可以通过Linux内核里的代码，看看内核是如何针对这种场景进行适配的：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">void</span> __init <span class="token function">check_system_tsc_reliable</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// ...</span><span class="token comment">/* * Disable the clocksource watchdog when the system has: *  - TSC running at constant frequency *  - TSC which does not stop in C-States *  - the TSC_ADJUST register which allows to detect even minimal *    modifications *  - not more than two sockets. As the number of sockets cannot be *    evaluated at the early boot stage where this has to be *    invoked, check the number of online memory nodes as a *    fallback solution which is an reasonable estimate. */</span>    <span class="token comment">// 默认情况下Kernel假设TSC不稳定，所以会有个watchdog进行检测，当满足下面几个条件时，TSC足够稳定，watchdog也不需要运行了。</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">boot_cpu_has</span><span class="token punctuation">(</span>X86_FEATURE_CONSTANT_TSC<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>    <span class="token function">boot_cpu_has</span><span class="token punctuation">(</span>X86_FEATURE_NONSTOP_TSC<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>    <span class="token function">boot_cpu_has</span><span class="token punctuation">(</span>X86_FEATURE_TSC_ADJUST<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>    nr_online_nodes <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token function">tsc_disable_clocksource_watchdog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>好了，跟着文档的节奏，其实也可以看到TSC的发展历程，硬件不断的做出一些变化从而满足软件层面的需求，确定经历了相当长的时间。其实除此之外，TSC还有一些其他相关的特性，主要是和虚拟化相关，也是硬件为了更好的实现虚拟化做出的适配，这里就暂时不说了，期望下次可以继续聊聊虚拟化场景下TSC的一些特性。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;今天跟着Intel的开发手册，看看如何随着Intel对TSC不断的修改和增加新特性，让TSC从一个简单的性能计数器发展成当前Linux上x86平台最重要的时钟源之一。本文基本上可以看作是&lt;a href=&quot;https://www.intel.com/content/dam/www/public/us/en/documents/manuals/64-ia-32-architectures-software-developer-vol-3b-part-2-manual.pdf&quot;&gt;Intel® 64 and IA-32 Architectures Software Developer’s Manual Volume 3B: System Programming Guide, Part 2&lt;/a&gt;中&lt;code&gt;17.15 TIME-STAMP COUNTER&lt;/code&gt;这章的翻译和总结。&lt;/p&gt;
&lt;p&gt;在x86平台上，Linux系统里最常用的一个时钟源就是&lt;code&gt;tsc&lt;/code&gt;，具体的，可以通过命令查看当前的时钟源和系统里可用的时钟源：&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# cat /sys/devices/system/clocksource/clocksource0/available_clocksource&lt;/span&gt;
tsc hpet acpi_pm
&lt;span class=&quot;token comment&quot;&gt;# cat /sys/devices/system/clocksource/clocksource0/current_clocksource&lt;/span&gt;
tsc&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;那么TSC是个什么东西呢？我们可以跟着手册看一看。&lt;/p&gt;</summary>
    
    
    
    <category term="Linux Kernel" scheme="https://www.ichenfu.com/categories/Linux-Kernel/"/>
    
    
    <category term="x86_64" scheme="https://www.ichenfu.com/tags/x86-64/"/>
    
    <category term="TSC" scheme="https://www.ichenfu.com/tags/TSC/"/>
    
    <category term="时钟源" scheme="https://www.ichenfu.com/tags/%E6%97%B6%E9%92%9F%E6%BA%90/"/>
    
  </entry>
  
  <entry>
    <title>一个UFO引发的惨案</title>
    <link href="https://www.ichenfu.com/2024/04/01/ufo-feature-caused-network-failure/"/>
    <id>https://www.ichenfu.com/2024/04/01/ufo-feature-caused-network-failure/</id>
    <published>2024-04-01T12:30:57.000Z</published>
    <updated>2024-04-01T10:45:31.560Z</updated>
    
    <content type="html"><![CDATA[<p>首先需要解释一下标题，原谅我当了一回标题党，此UFO不是<code>Unidentified flying object</code>，而是在网络中的一个Oflload卸载技术<code>UDP fragmentation offload</code>。事情的起因是这样的，我们最近尝试将线上的虚拟机，从基于网卡SR-IOV+直通的方案，切换到基于DPDK+vhost-user的方案，以换取热迁移的效率提升。</p><p>从之前的模拟压测和线上灰度效果来看，新的DPDK方案的性能和稳定性都处于很好的水平，在我们的场景下可以很好地满足需求。<br>直到灰度到某个业务的时候，发生了一些问题，导致了虚拟机的网络中断。<span id="more"></span></p><p>我们通过热拔插方式进行网络切换，首先，会把当前直通的网卡从虚拟机中热拔出来，然后，再把一个vhost-user网卡热插到虚拟机中，从而实现网卡的切换。在切换过程中，大致会有3-5s左右的网络中断，但根据和业务的沟通，在单线程的操作情况下，这样的中断是没有问题的，不会影响业务。</p><p>为了保证业务的稳定，我们在网卡切换后，会持续ping 10s对应的虚拟机，确保网络正常后才会进行下一台的操作。</p><p>然后问题就发生了，在某些虚拟机切换网卡之后，大约5分钟内，网络是正常的，但是超过5分钟之后，突然网络就不通了，这个问题也是随机的，而对于网络不通的机器，通过重启DPDK进程的方式，网络又可以恢复几分钟，然后继续不通。这些现象确实在之前的测试中没有遇到过。从日志看，有少量的DPDK进程打印了这两条日志：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">VHOST_DATA: <span class="token punctuation">(</span>/tmp/ens8f0-2.sock<span class="token punctuation">)</span> failed to allocate memory <span class="token keyword">for</span> mbuf.VHOST_DATA: <span class="token punctuation">(</span>/tmp/ens8f0-2.sock<span class="token punctuation">)</span> failed to copy desc to mbuf.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>从日志看，应该是给DPDK分配的内存不够了，导致DPDK从内存池里分配mbuf时无内存可用，但是DPDK使用的内存，是经过精确计算的呀？看看内存分配数量相关的代码：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DEFAULT_IP_MTU</span>  <span class="token expression"><span class="token punctuation">(</span><span class="token number">1500</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">L2_OVERHEAD</span>  <span class="token expression"><span class="token punctuation">(</span><span class="token number">14</span> <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">VF_RX_OFFSET</span>  <span class="token expression"><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DEFAULT_MBUF_SIZE</span> <span class="token expression"><span class="token punctuation">(</span>DEFAULT_IP_MTU <span class="token operator">+</span> L2_OVERHEAD <span class="token operator">+</span> RTE_PKTMBUF_HEADROOM <span class="token operator">+</span> VF_RX_OFFSET<span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAX_VHOST_QUEUE_PAIRS</span> <span class="token expression"><span class="token number">16</span></span></span><span class="token comment">/* rxq/txq descriptors numbers */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RXQ_TXQ_DESC_1K</span> <span class="token expression"><span class="token number">1024</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RXQ_TXQ_DESC_8K</span> <span class="token expression"><span class="token number">8192</span></span></span><span class="token comment">/* relay mempool config */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DEFAULT_NR_RX_QUEUE</span> <span class="token expression">MAX_VHOST_QUEUE_PAIRS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DEFAULT_NR_TX_QUEUE</span> <span class="token expression">MAX_VHOST_QUEUE_PAIRS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DEFAULT_NR_RX_DESC</span><span class="token expression">RXQ_TXQ_DESC_8K</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DEFAULT_NR_TX_DESC</span><span class="token expression">RXQ_TXQ_DESC_1K</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NUM_PKTMBUF_POOL</span><span class="token expression"><span class="token punctuation">(</span>DEFAULT_NR_RX_DESC <span class="token operator">*</span> DEFAULT_NR_RX_QUEUE <span class="token operator">+</span> DEFAULT_NR_TX_DESC <span class="token operator">*</span> DEFAULT_NR_TX_QUEUE <span class="token operator">+</span> <span class="token number">4096</span><span class="token punctuation">)</span></span></span><span class="token comment">// ...</span>mpool <span class="token operator">=</span> <span class="token function">rte_pktmbuf_pool_create</span><span class="token punctuation">(</span>mp_name<span class="token punctuation">,</span> n_mbufs<span class="token punctuation">,</span> RTE_MEMPOOL_CACHE_MAX_SIZE<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> DEFAULT_MBUF_SIZE<span class="token punctuation">,</span> request_socket_id<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们给每个VM分配了最多16个队列，MTU为1500，网卡侧同样支持16个发送队列+16个接收队列，其中每个接收队列设置ring buffer大小为8192，发送队列ring buffer大小1024，经过一系列的计算<code>NUM_PKTMBUF_POOL</code>这个值应该在所有场景都能满足需求，那为什么会出现内存不够的情况呢？我们再深入看一下DPDK相关的代码：</p><p>首先这个日志，在DPDK中有两个地方会打印，一个是在<code>virtio_dev_tx_split</code>函数中，另一个函数是<code>vhost_dequeue_single_packed</code>，这俩函数的功能是一致的，只是一个是用来处理老的<code>virtio split ring</code>的场景，另一个是处理<code>packed ring</code>的场景，而我们目前用的还是老的<code>split ring</code>，于是着重看下相关的代码：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">__rte_always_inline<span class="token keyword">static</span> <span class="token class-name">uint16_t</span><span class="token function">virtio_dev_tx_split</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">virtio_net</span> <span class="token operator">*</span>dev<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">vhost_virtqueue</span> <span class="token operator">*</span>vq<span class="token punctuation">,</span><span class="token keyword">struct</span> <span class="token class-name">rte_mempool</span> <span class="token operator">*</span>mbuf_pool<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">rte_mbuf</span> <span class="token operator">*</span><span class="token operator">*</span>pkts<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> count<span class="token punctuation">,</span>bool legacy_ol_flags<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// ...省略</span>    <span class="token comment">// 一次循环，最多取32个数据</span>count <span class="token operator">=</span> <span class="token function">RTE_MIN</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span> MAX_PKT_BURST<span class="token punctuation">)</span><span class="token punctuation">;</span>count <span class="token operator">=</span> <span class="token function">RTE_MIN</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span> avail_entries<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">VHOST_LOG_DATA</span><span class="token punctuation">(</span>dev<span class="token operator">-></span>ifname<span class="token punctuation">,</span> DEBUG<span class="token punctuation">,</span> <span class="token string">"about to dequeue %u buffers\n"</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">rte_pktmbuf_alloc_bulk</span><span class="token punctuation">(</span>mbuf_pool<span class="token punctuation">,</span> pkts<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// ...省略</span>        <span class="token comment">// 拷贝Guest中的网络包到pkts(rte_mbuf)中</span>err <span class="token operator">=</span> <span class="token function">desc_to_mbuf</span><span class="token punctuation">(</span>dev<span class="token punctuation">,</span> vq<span class="token punctuation">,</span> buf_vec<span class="token punctuation">,</span> nr_vec<span class="token punctuation">,</span> pkts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>   mbuf_pool<span class="token punctuation">,</span> legacy_ol_flags<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> false<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">unlikely</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>allocerr_warned<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 拷贝失败了，打印了第二条日志，第一条日志在desc_to_mbuf打印了</span><span class="token function">VHOST_LOG_DATA</span><span class="token punctuation">(</span>dev<span class="token operator">-></span>ifname<span class="token punctuation">,</span> ERR<span class="token punctuation">,</span> <span class="token string">"failed to copy desc to mbuf.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>allocerr_warned <span class="token operator">=</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>dropped <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>    <span class="token comment">// ...省略</span><span class="token keyword">return</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> dropped<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> __rte_always_inline <span class="token keyword">int</span><span class="token function">desc_to_mbuf</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">virtio_net</span> <span class="token operator">*</span>dev<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">vhost_virtqueue</span> <span class="token operator">*</span>vq<span class="token punctuation">,</span>  <span class="token keyword">struct</span> <span class="token class-name">buf_vector</span> <span class="token operator">*</span>buf_vec<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> nr_vec<span class="token punctuation">,</span>  <span class="token keyword">struct</span> <span class="token class-name">rte_mbuf</span> <span class="token operator">*</span>m<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">rte_mempool</span> <span class="token operator">*</span>mbuf_pool<span class="token punctuation">,</span>  bool legacy_ol_flags<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> slot_idx<span class="token punctuation">,</span> bool is_async<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// ...省略</span>buf_addr <span class="token operator">=</span> buf_vec<span class="token punctuation">[</span>vec_idx<span class="token punctuation">]</span><span class="token punctuation">.</span>buf_addr<span class="token punctuation">;</span>buf_iova <span class="token operator">=</span> buf_vec<span class="token punctuation">[</span>vec_idx<span class="token punctuation">]</span><span class="token punctuation">.</span>buf_iova<span class="token punctuation">;</span>buf_len <span class="token operator">=</span> buf_vec<span class="token punctuation">[</span>vec_idx<span class="token punctuation">]</span><span class="token punctuation">.</span>buf_len<span class="token punctuation">;</span>buf_offset <span class="token operator">=</span> hdr_remain<span class="token punctuation">;</span>buf_avail <span class="token operator">=</span> buf_vec<span class="token punctuation">[</span>vec_idx<span class="token punctuation">]</span><span class="token punctuation">.</span>buf_len <span class="token operator">-</span> hdr_remain<span class="token punctuation">;</span><span class="token function">PRINT_PACKET</span><span class="token punctuation">(</span>dev<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token class-name">uintptr_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span>buf_addr <span class="token operator">+</span> buf_offset<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span>buf_avail<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mbuf_offset <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>mbuf_avail  <span class="token operator">=</span> m<span class="token operator">-></span>buf_len <span class="token operator">-</span> RTE_PKTMBUF_HEADROOM<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>is_async<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>pkts_info <span class="token operator">=</span> async<span class="token operator">-></span>pkts_info<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">async_iter_initialize</span><span class="token punctuation">(</span>dev<span class="token punctuation">,</span> async<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// buf_avail是Guest中网络包的剩余长度，mbuf_avail是当前mbuf中剩余的容量</span>        <span class="token comment">// 本次拷贝数据量是这两者的小值</span>cpy_len <span class="token operator">=</span> <span class="token function">RTE_MIN</span><span class="token punctuation">(</span>buf_avail<span class="token punctuation">,</span> mbuf_avail<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 拷贝数据</span><span class="token keyword">if</span> <span class="token punctuation">(</span>is_async<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">async_fill_seg</span><span class="token punctuation">(</span>dev<span class="token punctuation">,</span> vq<span class="token punctuation">,</span> cur<span class="token punctuation">,</span> mbuf_offset<span class="token punctuation">,</span>   buf_iova <span class="token operator">+</span> buf_offset<span class="token punctuation">,</span> cpy_len<span class="token punctuation">,</span> false<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">goto</span> error<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">likely</span><span class="token punctuation">(</span>hdr <span class="token operator">&amp;&amp;</span> cur <span class="token operator">==</span> m<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">rte_memcpy</span><span class="token punctuation">(</span><span class="token function">rte_pktmbuf_mtod_offset</span><span class="token punctuation">(</span>cur<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">,</span> mbuf_offset<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uintptr_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span>buf_addr <span class="token operator">+</span> buf_offset<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>cpy_len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token function">sync_fill_seg</span><span class="token punctuation">(</span>dev<span class="token punctuation">,</span> vq<span class="token punctuation">,</span> cur<span class="token punctuation">,</span> mbuf_offset<span class="token punctuation">,</span>      buf_addr <span class="token operator">+</span> buf_offset<span class="token punctuation">,</span>      buf_iova <span class="token operator">+</span> buf_offset<span class="token punctuation">,</span> cpy_len<span class="token punctuation">,</span> false<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>        <span class="token comment">// 计算拷贝后的结果</span>mbuf_avail  <span class="token operator">-=</span> cpy_len<span class="token punctuation">;</span>mbuf_offset <span class="token operator">+=</span> cpy_len<span class="token punctuation">;</span>buf_avail <span class="token operator">-=</span> cpy_len<span class="token punctuation">;</span>buf_offset <span class="token operator">+=</span> cpy_len<span class="token punctuation">;</span><span class="token comment">/* This buf reaches to its end, get the next one */</span><span class="token keyword">if</span> <span class="token punctuation">(</span>buf_avail <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 如果Guest里的数据都拷贝完了，直接break循环</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>vec_idx <span class="token operator">>=</span> nr_vec<span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span>buf_addr <span class="token operator">=</span> buf_vec<span class="token punctuation">[</span>vec_idx<span class="token punctuation">]</span><span class="token punctuation">.</span>buf_addr<span class="token punctuation">;</span>buf_iova <span class="token operator">=</span> buf_vec<span class="token punctuation">[</span>vec_idx<span class="token punctuation">]</span><span class="token punctuation">.</span>buf_iova<span class="token punctuation">;</span>buf_len <span class="token operator">=</span> buf_vec<span class="token punctuation">[</span>vec_idx<span class="token punctuation">]</span><span class="token punctuation">.</span>buf_len<span class="token punctuation">;</span>buf_offset <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>buf_avail  <span class="token operator">=</span> buf_len<span class="token punctuation">;</span><span class="token function">PRINT_PACKET</span><span class="token punctuation">(</span>dev<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">uintptr_t</span><span class="token punctuation">)</span>buf_addr<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span>buf_avail<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* * This mbuf reaches to its end, get a new one * to hold more data. */</span>        <span class="token comment">// 拷贝未结束，但是mbuf空间用完了，需要重新申请一个新的mbuf</span><span class="token keyword">if</span> <span class="token punctuation">(</span>mbuf_avail <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cur <span class="token operator">=</span> <span class="token function">rte_pktmbuf_alloc</span><span class="token punctuation">(</span>mbuf_pool<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 申请新的mbuf失败了，打印第一条日志，跳到error退出</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">unlikely</span><span class="token punctuation">(</span>cur <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">VHOST_LOG_DATA</span><span class="token punctuation">(</span>dev<span class="token operator">-></span>ifname<span class="token punctuation">,</span> ERR<span class="token punctuation">,</span><span class="token string">"failed to allocate memory for mbuf.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">goto</span> error<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>prev<span class="token operator">-></span>next <span class="token operator">=</span> cur<span class="token punctuation">;</span>prev<span class="token operator">-></span>data_len <span class="token operator">=</span> mbuf_offset<span class="token punctuation">;</span>m<span class="token operator">-></span>nb_segs <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>m<span class="token operator">-></span>pkt_len <span class="token operator">+=</span> mbuf_offset<span class="token punctuation">;</span>prev <span class="token operator">=</span> cur<span class="token punctuation">;</span>mbuf_offset <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>mbuf_avail  <span class="token operator">=</span> cur<span class="token operator">-></span>buf_len <span class="token operator">-</span> RTE_PKTMBUF_HEADROOM<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>    <span class="token comment">// ...省略</span>error<span class="token operator">:</span><span class="token keyword">if</span> <span class="token punctuation">(</span>is_async<span class="token punctuation">)</span><span class="token function">async_iter_cancel</span><span class="token punctuation">(</span>async<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从代码里可以看到确实是内存池不够用了，但是只有在Guest里数据包很大，超过我们预设的MTU的时候才会出现，什么时候Guest会发送超过MTU大小的包到网卡呢？很容易想到的一个点就是各种的Offload，特别是和网卡相关的分包Offload。于是就找了一台业务机器的现场看了一下网卡的特性开启情况：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># ethtool -k eth0</span>Features <span class="token keyword">for</span> eth0:rx-checksumming: on <span class="token punctuation">[</span>fixed<span class="token punctuation">]</span>tx-checksumming: on        tx-checksum-ipv4: off <span class="token punctuation">[</span>fixed<span class="token punctuation">]</span>        tx-checksum-ip-generic: on        tx-checksum-ipv6: off <span class="token punctuation">[</span>fixed<span class="token punctuation">]</span>        tx-checksum-fcoe-crc: off <span class="token punctuation">[</span>fixed<span class="token punctuation">]</span>        tx-checksum-sctp: off <span class="token punctuation">[</span>fixed<span class="token punctuation">]</span>scatter-gather: on        tx-scatter-gather: on        tx-scatter-gather-fraglist: off <span class="token punctuation">[</span>fixed<span class="token punctuation">]</span>tcp-segmentation-offload: off        tx-tcp-segmentation: off <span class="token punctuation">[</span>fixed<span class="token punctuation">]</span>        tx-tcp-ecn-segmentation: off <span class="token punctuation">[</span>fixed<span class="token punctuation">]</span>        tx-tcp6-segmentation: off <span class="token punctuation">[</span>fixed<span class="token punctuation">]</span>udp-fragmentation-offload: ongeneric-segmentation-offload: ongeneric-receive-offload: on<span class="token comment"># ...省略</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再找一台没有问题的机器：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># ethtool -k eth0</span>Features <span class="token keyword">for</span> eth0:rx-checksumming: on <span class="token punctuation">[</span>fixed<span class="token punctuation">]</span>tx-checksumming: on        tx-checksum-ipv4: off <span class="token punctuation">[</span>fixed<span class="token punctuation">]</span>        tx-checksum-ip-generic: on        tx-checksum-ipv6: off <span class="token punctuation">[</span>fixed<span class="token punctuation">]</span>        tx-checksum-fcoe-crc: off <span class="token punctuation">[</span>fixed<span class="token punctuation">]</span>        tx-checksum-sctp: off <span class="token punctuation">[</span>fixed<span class="token punctuation">]</span>scatter-gather: on        tx-scatter-gather: on        tx-scatter-gather-fraglist: off <span class="token punctuation">[</span>fixed<span class="token punctuation">]</span>tcp-segmentation-offload: off        tx-tcp-segmentation: off <span class="token punctuation">[</span>fixed<span class="token punctuation">]</span>        tx-tcp-ecn-segmentation: off <span class="token punctuation">[</span>requested on<span class="token punctuation">]</span>        tx-tcp-mangleid-segmentation: off <span class="token punctuation">[</span>fixed<span class="token punctuation">]</span>        tx-tcp6-segmentation: off <span class="token punctuation">[</span>fixed<span class="token punctuation">]</span>generic-segmentation-offload: on<span class="token comment"># ...省略</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发现像TSO这种常用的Offload特性都关了，但是出问题的机器，比没出问题的机器，多了一个特性<code>udp-fragmentation-offload: on</code>，这个特性就是<code>UFO</code>，和TSO类似，TSO是TCP的offload，而UFO是UDP的offload，既然这里有不同，那是不是出问题里有应用会发送大的UDP包呢？再尝试抓包看下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># tcpdump -i eth0 udp</span>tcpdump: verbose output suppressed, use <span class="token parameter variable">-v</span> or <span class="token parameter variable">-vv</span> <span class="token keyword">for</span> full protocol decodelistening on eth0, link-type EN10MB <span class="token punctuation">(</span>Ethernet<span class="token punctuation">)</span>, capture size <span class="token number">65535</span> bytes<span class="token number">17</span>:55:43.880517 IP localhost.29784 <span class="token operator">></span> <span class="token number">192.168</span>.100.111.8333: UDP, length <span class="token number">9082</span><span class="token number">17</span>:55:43.880526 IP localhost <span class="token operator">></span> <span class="token number">192.168</span>.100.111: udp<span class="token number">17</span>:55:43.880528 IP localhost <span class="token operator">></span> <span class="token number">192.168</span>.100.111: udp<span class="token number">17</span>:55:43.880539 IP localhost <span class="token operator">></span> <span class="token number">192.168</span>.100.111: udp<span class="token number">17</span>:55:43.880541 IP localhost <span class="token operator">></span> <span class="token number">192.168</span>.100.111: udp<span class="token number">17</span>:55:43.880542 IP localhost <span class="token operator">></span> <span class="token number">192.168</span>.100.111: udp<span class="token number">17</span>:55:43.880543 IP localhost <span class="token operator">></span> <span class="token number">192.168</span>.100.111: udp<span class="token number">17</span>:55:43.881681 IP localhost.29784 <span class="token operator">></span> <span class="token number">192.168</span>.100.111.8333: UDP, length <span class="token number">9076</span><span class="token number">17</span>:55:43.881684 IP localhost <span class="token operator">></span> <span class="token number">192.168</span>.100.111: udp<span class="token number">17</span>:55:43.881686 IP localhost <span class="token operator">></span> <span class="token number">192.168</span>.100.111: udp<span class="token number">17</span>:55:43.881687 IP localhost <span class="token operator">></span> <span class="token number">192.168</span>.100.111: udp<span class="token number">17</span>:55:43.881689 IP localhost <span class="token operator">></span> <span class="token number">192.168</span>.100.111: udp<span class="token number">17</span>:55:43.881690 IP localhost <span class="token operator">></span> <span class="token number">192.168</span>.100.111: udp<span class="token number">17</span>:55:43.881692 IP localhost <span class="token operator">></span> <span class="token number">192.168</span>.100.111: udp<span class="token number">17</span>:55:43.882214 IP localhost.17670 <span class="token operator">></span> <span class="token number">192.168</span>.100.1.domain: <span class="token number">4442</span>+ PTR? <span class="token number">192.168</span>.100.1.in-addr.arpa. <span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token number">17</span>:55:43.882341 IP <span class="token number">192.168</span>.100.1.domain <span class="token operator">></span> localhost.17670: <span class="token number">4442</span> NXDomain <span class="token number">0</span>/1/0 <span class="token punctuation">(</span><span class="token number">119</span><span class="token punctuation">)</span><span class="token number">17</span>:55:43.882828 IP localhost.29784 <span class="token operator">></span> <span class="token number">192.168</span>.100.111.8333: UDP, length <span class="token number">9046</span><span class="token number">17</span>:55:43.882835 IP localhost <span class="token operator">></span> <span class="token number">192.168</span>.100.111: udp<span class="token number">17</span>:55:43.882837 IP localhost <span class="token operator">></span> <span class="token number">192.168</span>.100.111: udp<span class="token number">17</span>:55:43.882850 IP localhost <span class="token operator">></span> <span class="token number">192.168</span>.100.111: udp<span class="token number">17</span>:55:43.882852 IP localhost <span class="token operator">></span> <span class="token number">192.168</span>.100.111: udp<span class="token number">17</span>:55:43.882853 IP localhost <span class="token operator">></span> <span class="token number">192.168</span>.100.111: udp<span class="token number">17</span>:55:43.882854 IP localhost <span class="token operator">></span> <span class="token number">192.168</span>.100.111: udp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>没错，除了DNS的请求之外，业务还会发送一些超过9000长度的UDP包，这些UDP包会占用预期外的mbuf资源，知道了这个问题，那就尝试把ufo特性关闭一下看看效果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># ethtoo -K eth0 ufo off</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>关闭UFO之后，观察一段时间，虚拟机的网络恢复正常了。随后我们在测试环境也通过iperf复现了问题，便于后续的验证。</p><p>关闭UFO临时解决问题之余，又抛出来一个新的问题，为啥之前之前灰度的机器为什么没有出现同样的问题？为什么没有问题的机器里<code>udp-fragmentation-offload: on</code>这个特性直接消失了？</p><p>通过一些搜索，找到了答案，来着内核的官方<a href="https://www.kernel.org/doc/html/latest/networking/segmentation-offloads.html">文档: Segmentation Offloads</a>：</p><blockquote><p>UDP Fragmentation Offload<br>UDP fragmentation offload allows a device to fragment an oversized UDP datagram into multiple IPv4 fragments. Many of the requirements for UDP fragmentation offload are the same as TSO. However the IPv4 ID for fragments should not increment as a single IPv4 datagram is fragmented.</p><p>UFO is deprecated: modern kernels will no longer generate UFO skbs, but can still receive them from tuntap and similar devices. Offload of UDP-based tunnel protocols is still supported.</p></blockquote><p>原来UFO已经被废弃了，现代内核不会再发送大的UFO skbs，但是仍然允许从tuntap等类似设备上接收这些包。再看一下这俩机器的内核版本：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#uname -r</span><span class="token number">3.10</span>.0-514.el7.x86_64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#uname -r</span><span class="token number">5.14</span>.0-284.25.1.el9_2.x86_64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>确实差了不少。</p><p>最后呢，解决办法是将虚拟机的网卡配置调整了一下，修改成了：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>interface</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>vhostuser<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mac</span> <span class="token attr-name">address</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>&#123;&#123;.MACAddress&#125;&#125;<span class="token punctuation">'</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>unix<span class="token punctuation">'</span></span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>&#123;&#123;.VhostPath&#125;&#125;<span class="token punctuation">'</span></span> <span class="token attr-name">mode</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>server<span class="token punctuation">'</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>model</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>virtio<span class="token punctuation">'</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>driver</span> <span class="token attr-name">queues</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>16<span class="token punctuation">'</span></span> <span class="token attr-name">rx_queue_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>1024<span class="token punctuation">'</span></span> <span class="token attr-name">tx_queue_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>1024<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>host</span> <span class="token attr-name">tso4</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>off<span class="token punctuation">'</span></span> <span class="token attr-name">tso6</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>off<span class="token punctuation">'</span></span> <span class="token attr-name">ufo</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>off<span class="token punctuation">'</span></span> <span class="token attr-name">ecn</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>off<span class="token punctuation">'</span></span> <span class="token attr-name">mrg_rxbuf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>off<span class="token punctuation">'</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>guest</span> <span class="token attr-name">tso4</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>off<span class="token punctuation">'</span></span> <span class="token attr-name">tso6</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>off<span class="token punctuation">'</span></span> <span class="token attr-name">ufo</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>off<span class="token punctuation">'</span></span> <span class="token attr-name">ecn</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>off<span class="token punctuation">'</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>driver</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>interface</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其实TSO这个特性是在DPDK里关闭的，但是因为已经上线了不少业务，UFO在DPDK里关闭的话，会影响老虚拟机的热迁移，因此还是在qemu这侧关闭吧。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;首先需要解释一下标题，原谅我当了一回标题党，此UFO不是&lt;code&gt;Unidentified flying object&lt;/code&gt;，而是在网络中的一个Oflload卸载技术&lt;code&gt;UDP fragmentation offload&lt;/code&gt;。事情的起因是这样的，我们最近尝试将线上的虚拟机，从基于网卡SR-IOV+直通的方案，切换到基于DPDK+vhost-user的方案，以换取热迁移的效率提升。&lt;/p&gt;
&lt;p&gt;从之前的模拟压测和线上灰度效果来看，新的DPDK方案的性能和稳定性都处于很好的水平，在我们的场景下可以很好地满足需求。&lt;br&gt;直到灰度到某个业务的时候，发生了一些问题，导致了虚拟机的网络中断。</summary>
    
    
    
    <category term="Linux Kernel" scheme="https://www.ichenfu.com/categories/Linux-Kernel/"/>
    
    
    <category term="DPDK" scheme="https://www.ichenfu.com/tags/DPDK/"/>
    
    <category term="virtio" scheme="https://www.ichenfu.com/tags/virtio/"/>
    
    <category term="UFO" scheme="https://www.ichenfu.com/tags/UFO/"/>
    
  </entry>
  
  <entry>
    <title>在RHEL系统中快速抓取火焰图</title>
    <link href="https://www.ichenfu.com/2023/10/18/rhel-perf-flamegraphs/"/>
    <id>https://www.ichenfu.com/2023/10/18/rhel-perf-flamegraphs/</id>
    <published>2023-10-18T12:02:09.000Z</published>
    <updated>2023-10-18T03:18:04.078Z</updated>
    
    <content type="html"><![CDATA[<p>在之前的好几篇Blog里，都使用了火焰图来对业务进行性能优化，之前为了抓取火焰图，需要用到好几个工具进行组合，流程还是比较麻烦的。随着RHEL的版本更新，Redhat提供了一个更简单快速的方法实现了一键抓取火焰图的功能。</p><span id="more"></span><p>这个功能在<code>RHEL 8.2</code>及以上版本可以使用，当然RHEL对应的衍生版比如<code>OracleLinux</code>、<code>AlmaLinux</code>、<code>RockyLinux</code>等也是可以直接使用的。</p><p>首先需要安装<code>perf</code>和<code>js-d3-flame-graph</code>这两个软件包：</p><pre class="line-numbers language-none"><code class="language-none"># yum install js-d3-flame-graph perf -y<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后就可以通过<code>perf script flamegraph -a -F 99 sleep 60</code>命令抓取整个系统的火焰图了，其中<code>-a</code>参数表示需要记录整个系统的性能数据，<code>-F</code>参数指定每秒的收集频率，<code>sleep 60</code>表示收集60S的数据。</p><p>60秒后，命令自动退出并会在当前目录生成一个<code>flamegraph.html</code>文件，用任意浏览器打开这个文件，即可看到火焰图。</p><p>当然，如果要收集某个进程的火焰图，可以使用<code>perf script flamegraph -a -F 99 -p PID1,PID2 sleep 60</code>命令。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在之前的好几篇Blog里，都使用了火焰图来对业务进行性能优化，之前为了抓取火焰图，需要用到好几个工具进行组合，流程还是比较麻烦的。随着RHEL的版本更新，Redhat提供了一个更简单快速的方法实现了一键抓取火焰图的功能。&lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://www.ichenfu.com/categories/Linux/"/>
    
    
    <category term="火焰图" scheme="https://www.ichenfu.com/tags/%E7%81%AB%E7%84%B0%E5%9B%BE/"/>
    
    <category term="perf" scheme="https://www.ichenfu.com/tags/perf/"/>
    
  </entry>
  
  <entry>
    <title>反序列化AWS/阿里云样式的基于Query的API请求</title>
    <link href="https://www.ichenfu.com/2023/07/13/parse-aws-aliyun-like-api-request/"/>
    <id>https://www.ichenfu.com/2023/07/13/parse-aws-aliyun-like-api-request/</id>
    <published>2023-07-13T11:46:12.000Z</published>
    <updated>2023-07-24T08:40:29.193Z</updated>
    
    <content type="html"><![CDATA[<p>对于比较了解云计算的人来说，一定接触过AWS、阿里云的API接口，这两者的API调用方式很相似，当然具体谁参考谁这里就不深究了。以给EC2&#x2F;ECS添加Tag这个接口为例：</p><p>AWS:</p><pre class="line-numbers language-none"><code class="language-none">https:&#x2F;&#x2F;ec2.amazonaws.com&#x2F;?Action&#x3D;CreateTags&amp;ResourceId.1&#x3D;ami-1a2b3c4d&amp;ResourceId.2&#x3D;i-1234567890abcdef0&amp;Tag.1.Key&#x3D;webserver&amp;Tag.1.Value&#x3D;&amp;Tag.2.Key&#x3D;stack&amp;Tag.2.Value&#x3D;Production&amp;AUTHPARAMS<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>阿里云：</p><pre class="line-numbers language-none"><code class="language-none">https:&#x2F;&#x2F;ecs.aliyuncs.com&#x2F;?Action&#x3D;TagResources&amp;RegionId&#x3D;cn-hangzhou&amp;ResourceId.1&#x3D;i-bp1j6qtvdm8w0z1o0****&amp;ResourceId.2&#x3D;i-bp1j6qtvdm8w0z1oP****&amp;ResourceType&#x3D;instance&amp;Tag.1.Key&#x3D;TestKey&amp;Tag.1.Value&#x3D;TestKey&amp;&lt;公共请求参数&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><span id="more"></span><p>这种样式的接口设计，其实没有什么复杂的，相对比较特殊的地方在于，如果需要传入一个数组，则需要使用类似下标一样的<code>Tag.N.Key</code>这种格式进行传递，这个传递方式，和已有的一些诸如<a href="https://github.com/google/go-querystring">google&#x2F;go-querystring</a>的传递方式都不太相同，总之是个很特殊的设计。</p><p>如果需要写一个类似的服务，使用和这两家相同的API格式的话，针对这种数组格式的请求反序列化是个挺麻烦的事，而且找了一圈也没有类似的开源项目做这个。</p><p>今天借助ChatGPT写了一个反序列化函数，专门用来实现服务端对类似形态API的反序列化，通过这个函数可以很方便的将Query反序列化成一个对应的Struct：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"encoding/json"</span><span class="token string">"fmt"</span><span class="token string">"net/url"</span><span class="token string">"reflect"</span><span class="token string">"strconv"</span><span class="token string">"strings"</span><span class="token punctuation">)</span><span class="token keyword">type</span> TagRequest <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>Action       <span class="token builtin">string</span>   <span class="token string">`query:"Action"`</span>RegionID     <span class="token builtin">string</span>   <span class="token string">`query:"RegionId"`</span>ResourceIds  <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token string">`query:"ResourceId"`</span>ResourceType <span class="token builtin">string</span>   <span class="token string">`query:"ResourceType"`</span>Tags         <span class="token punctuation">[</span><span class="token punctuation">]</span>Tag    <span class="token string">`query:"Tag"`</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> Tag <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>Key   <span class="token builtin">string</span> <span class="token string">`query:"Key"`</span>Value <span class="token builtin">string</span> <span class="token string">`query:"Value"`</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">Unmarshal</span><span class="token punctuation">(</span>queryStr <span class="token builtin">string</span><span class="token punctuation">,</span> output <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>values<span class="token punctuation">,</span> err <span class="token operator">:=</span> url<span class="token punctuation">.</span><span class="token function">ParseQuery</span><span class="token punctuation">(</span>queryStr<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> err<span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token function">unmarshalData</span><span class="token punctuation">(</span>values<span class="token punctuation">,</span> output<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">unmarshalData</span><span class="token punctuation">(</span>values url<span class="token punctuation">.</span>Values<span class="token punctuation">,</span> output <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>outputVal <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token keyword">if</span> outputVal<span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> reflect<span class="token punctuation">.</span>Ptr <span class="token punctuation">&#123;</span><span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"output must be a pointer"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>outputElem <span class="token operator">:=</span> outputVal<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span>outputType <span class="token operator">:=</span> outputElem<span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> outputType<span class="token punctuation">.</span><span class="token function">NumField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>field <span class="token operator">:=</span> outputType<span class="token punctuation">.</span><span class="token function">Field</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>tag <span class="token operator">:=</span> field<span class="token punctuation">.</span>Tag<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"query"</span><span class="token punctuation">)</span><span class="token keyword">if</span> tag <span class="token operator">==</span> <span class="token string">""</span> <span class="token punctuation">&#123;</span><span class="token keyword">continue</span><span class="token punctuation">&#125;</span>value <span class="token operator">:=</span> values<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span>fieldVal <span class="token operator">:=</span> outputElem<span class="token punctuation">.</span><span class="token function">FieldByName</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token keyword">if</span> field<span class="token punctuation">.</span>Type<span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> reflect<span class="token punctuation">.</span>Slice <span class="token punctuation">&#123;</span>elemType <span class="token operator">:=</span> field<span class="token punctuation">.</span>Type<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> elemType<span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> reflect<span class="token punctuation">.</span>Struct <span class="token punctuation">&#123;</span>prefix <span class="token operator">:=</span> tag <span class="token operator">+</span> <span class="token string">"."</span>arrIndex <span class="token operator">:=</span> <span class="token number">1</span><span class="token keyword">for</span> <span class="token punctuation">&#123;</span>currKey <span class="token operator">:=</span> prefix <span class="token operator">+</span> fmt<span class="token punctuation">.</span><span class="token function">Sprint</span><span class="token punctuation">(</span>arrIndex<span class="token punctuation">)</span>currValue <span class="token operator">:=</span> values<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>currKey<span class="token punctuation">)</span><span class="token keyword">if</span> currValue <span class="token operator">==</span> <span class="token string">""</span> <span class="token punctuation">&#123;</span><span class="token keyword">break</span><span class="token punctuation">&#125;</span>currSliceVal <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>currValue<span class="token punctuation">)</span>fieldVal<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>fieldVal<span class="token punctuation">,</span> currSliceVal<span class="token punctuation">)</span><span class="token punctuation">)</span>arrIndex<span class="token operator">++</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>prefix <span class="token operator">:=</span> tag <span class="token operator">+</span> <span class="token string">"."</span>objIndex <span class="token operator">:=</span> <span class="token number">1</span>outer <span class="token operator">:=</span> <span class="token boolean">true</span><span class="token keyword">for</span> outer <span class="token punctuation">&#123;</span>innerValues <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span>Values<span class="token punctuation">)</span><span class="token keyword">for</span> innerKey<span class="token punctuation">,</span> innerValue <span class="token operator">:=</span> <span class="token keyword">range</span> values <span class="token punctuation">&#123;</span><span class="token keyword">if</span> strings<span class="token punctuation">.</span><span class="token function">HasPrefix</span><span class="token punctuation">(</span>innerKey<span class="token punctuation">,</span> prefix<span class="token operator">+</span>strconv<span class="token punctuation">.</span><span class="token function">Itoa</span><span class="token punctuation">(</span>objIndex<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"."</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>innerValues<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>strings<span class="token punctuation">.</span><span class="token function">TrimPrefix</span><span class="token punctuation">(</span>innerKey<span class="token punctuation">,</span> prefix<span class="token operator">+</span>strconv<span class="token punctuation">.</span><span class="token function">Itoa</span><span class="token punctuation">(</span>objIndex<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">,</span> innerValue<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>innerValues<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span><span class="token keyword">break</span><span class="token punctuation">&#125;</span>newStructPtr <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>elemType<span class="token punctuation">)</span>err <span class="token operator">:=</span> <span class="token function">unmarshalData</span><span class="token punctuation">(</span>innerValues<span class="token punctuation">,</span> newStructPtr<span class="token punctuation">.</span><span class="token function">Interface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> err<span class="token punctuation">&#125;</span>fieldVal<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>fieldVal<span class="token punctuation">,</span> newStructPtr<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>objIndex<span class="token operator">++</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>fieldVal<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>queryStr <span class="token operator">:=</span> <span class="token string">"?Action=TagResources&amp;RegionId=cn-hangzhou&amp;ResourceId.1=i-bp1j6qtvdm8w0z1o0&amp;ResourceId.2=i-bp1j6qtvdm8w0z1oP&amp;ResourceType=instance&amp;Tag.1.Key=TestKey&amp;Tag.1.Value=TestValue&amp;Tag.2.Key=TestKey&amp;Tag.2.Value=TestValue"</span>req <span class="token operator">:=</span> TagRequest<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>err <span class="token operator">:=</span> <span class="token function">Unmarshal</span><span class="token punctuation">(</span>strings<span class="token punctuation">.</span><span class="token function">TrimLeft</span><span class="token punctuation">(</span>queryStr<span class="token punctuation">,</span> <span class="token string">"?"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>req<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Error:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">&#125;</span>jsonOutput<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">MarshalIndent</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"  "</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Unmarshaled output:"</span><span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span>jsonOutput<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试一下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">% go run main.goUnmarshaled output: <span class="token punctuation">&#123;</span>  <span class="token string">"Action"</span><span class="token builtin class-name">:</span> <span class="token string">"TagResources"</span>,  <span class="token string">"RegionID"</span><span class="token builtin class-name">:</span> <span class="token string">"cn-hangzhou"</span>,  <span class="token string">"ResourceIds"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>    <span class="token string">"i-bp1j6qtvdm8w0z1o0"</span>,    <span class="token string">"i-bp1j6qtvdm8w0z1oP"</span>  <span class="token punctuation">]</span>,  <span class="token string">"ResourceType"</span><span class="token builtin class-name">:</span> <span class="token string">"instance"</span>,  <span class="token string">"Tags"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>      <span class="token string">"Key"</span><span class="token builtin class-name">:</span> <span class="token string">"TestKey"</span>,      <span class="token string">"Value"</span><span class="token builtin class-name">:</span> <span class="token string">"TestValue"</span>    <span class="token punctuation">&#125;</span>,    <span class="token punctuation">&#123;</span>      <span class="token string">"Key"</span><span class="token builtin class-name">:</span> <span class="token string">"TestKey"</span>,      <span class="token string">"Value"</span><span class="token builtin class-name">:</span> <span class="token string">"TestValue"</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>嗯，ChatGPT牛逼！为了方便大家使用，我创建了一个项目<a href="https://github.com/C0reFast/aws-querystring">c0refast&#x2F;aws-querystring</a>，可以方便地作为库使用：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"encoding/json"</span><span class="token string">"fmt"</span><span class="token string">"net/url"</span><span class="token string">"github.com/c0refast/aws-querystring/query"</span><span class="token punctuation">)</span><span class="token keyword">type</span> TagRequest <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>Action       <span class="token builtin">string</span>   <span class="token string">`query:"Action"`</span>RegionID     <span class="token builtin">string</span>   <span class="token string">`query:"RegionId"`</span>ResourceIds  <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token string">`query:"ResourceId"`</span>ResourceType <span class="token builtin">string</span>   <span class="token string">`query:"ResourceType"`</span>Tags         <span class="token punctuation">[</span><span class="token punctuation">]</span>Tag    <span class="token string">`query:"Tag"`</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> Tag <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>Key   <span class="token builtin">string</span> <span class="token string">`query:"Key"`</span>Value <span class="token builtin">string</span> <span class="token string">`query:"Value"`</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>queryStr <span class="token operator">:=</span> <span class="token string">"Action=TagResources&amp;RegionId=cn-hangzhou&amp;ResourceId.1=i-bp1j6qtvdm8w0z1o0&amp;ResourceId.2=i-bp1j6qtvdm8w0z1oP&amp;ResourceType=instance&amp;Tag.1.Key=TestKey&amp;Tag.1.Value=TestValue&amp;Tag.2.Key=TestKey&amp;Tag.2.Value=TestValue"</span>urlValues<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> url<span class="token punctuation">.</span><span class="token function">ParseQuery</span><span class="token punctuation">(</span>queryStr<span class="token punctuation">)</span>req <span class="token operator">:=</span> TagRequest<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>err <span class="token operator">:=</span> query<span class="token punctuation">.</span><span class="token function">BindQuery</span><span class="token punctuation">(</span>urlValues<span class="token punctuation">,</span> <span class="token operator">&amp;</span>req<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Error:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">&#125;</span>jsonOutput<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">MarshalIndent</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"  "</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Unmarshaled output:"</span><span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span>jsonOutput<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;对于比较了解云计算的人来说，一定接触过AWS、阿里云的API接口，这两者的API调用方式很相似，当然具体谁参考谁这里就不深究了。以给EC2&amp;#x2F;ECS添加Tag这个接口为例：&lt;/p&gt;
&lt;p&gt;AWS:&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-none&quot;&gt;&lt;code class=&quot;language-none&quot;&gt;https:&amp;#x2F;&amp;#x2F;ec2.amazonaws.com&amp;#x2F;?Action&amp;#x3D;CreateTags
&amp;amp;ResourceId.1&amp;#x3D;ami-1a2b3c4d
&amp;amp;ResourceId.2&amp;#x3D;i-1234567890abcdef0
&amp;amp;Tag.1.Key&amp;#x3D;webserver
&amp;amp;Tag.1.Value&amp;#x3D;
&amp;amp;Tag.2.Key&amp;#x3D;stack
&amp;amp;Tag.2.Value&amp;#x3D;Production
&amp;amp;AUTHPARAMS&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;阿里云：&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-none&quot;&gt;&lt;code class=&quot;language-none&quot;&gt;https:&amp;#x2F;&amp;#x2F;ecs.aliyuncs.com&amp;#x2F;?Action&amp;#x3D;TagResources
&amp;amp;RegionId&amp;#x3D;cn-hangzhou
&amp;amp;ResourceId.1&amp;#x3D;i-bp1j6qtvdm8w0z1o0****
&amp;amp;ResourceId.2&amp;#x3D;i-bp1j6qtvdm8w0z1oP****
&amp;amp;ResourceType&amp;#x3D;instance
&amp;amp;Tag.1.Key&amp;#x3D;TestKey
&amp;amp;Tag.1.Value&amp;#x3D;TestKey
&amp;amp;&amp;lt;公共请求参数&amp;gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="日常折腾" scheme="https://www.ichenfu.com/categories/%E6%97%A5%E5%B8%B8%E6%8A%98%E8%85%BE/"/>
    
    
    <category term="Golang" scheme="https://www.ichenfu.com/tags/Golang/"/>
    
    <category term="AWS" scheme="https://www.ichenfu.com/tags/AWS/"/>
    
    <category term="Aliyun" scheme="https://www.ichenfu.com/tags/Aliyun/"/>
    
    <category term="ChatGPT" scheme="https://www.ichenfu.com/tags/ChatGPT/"/>
    
  </entry>
  
  <entry>
    <title>DIY一个8盘位全闪NAS</title>
    <link href="https://www.ichenfu.com/2023/01/26/diy-a-8bay-ssd-nas/"/>
    <id>https://www.ichenfu.com/2023/01/26/diy-a-8bay-ssd-nas/</id>
    <published>2023-01-26T07:43:28.000Z</published>
    <updated>2023-02-10T02:45:27.842Z</updated>
    
    <content type="html"><![CDATA[<p>接上篇<a href="/2022/11/05/lsi-raid-controller-and-hba-complete-listing-plus-oem-models/">LSI RAID卡芯片和各个OEM对应卡型号列表</a>里说的后续DIY NAS的想法，经过快3个月的时间，终于来更新整个DIY过程了，总结起来在整个过程中，收获的主要还是折腾的乐趣，要说折腾的尽头是白群晖，随着时间的推移，个人还是比较认同的，不过不得不说白群晖确实太贵了，都说群晖是买软件送硬件，但是这软件也太贵了点。</p><span id="more"></span><h1 id="需求描述和分析"><a href="#需求描述和分析" class="headerlink" title="需求描述和分析"></a>需求描述和分析</h1><p>说起来，为啥会有个DIY NAS的需求呢？一个重要的原因是家里的小宝贝出生了，不知不觉也拍了好多的照片和视频，还是希望能更长久的把这些记忆保留下来。另外呢，之前更新自己的电脑，淘汰下来一套i5 6500 CPU加16G内存以及主板的准系统，买个机箱还有电源就直接可以用了，本着废物利用的原则，做个NAS也不亏，而且还多了很多可玩性。</p><p>其实单纯从保存数据来说，将数据存放到任何一个公有云的对象存储上，是个最终极的方案，因为目前各个厂商提供的对象存储数据持久性SLA都达到了11或者12个9（99.999999999%-99.9999999999%），这基本意味着几乎不存在数据丢失的可能性了。但是确实这个方案也是最贵的，毕竟每TB存储每月都需要消耗对应的存储费用，随着时间增长，即使是最便宜的冷归档类型，也依然是个不小的消耗。</p><p>那到底需要多少的存储容量呢？针对我个人而言，目前可预见的容量，应该不会超过10T，当前1-2年内所需求的容量更小，大概只需要1到2T的样子。</p><p>针对这个容量，其实已经可以考虑全SSD的存储方案了，其实相比于使用HDD的方案，纯SSD的NAS有以下几个好处：首先是噪音角度，相比HDD运行时的“炒豆子”声来说，SSD 0噪音，这可以直接解决夜间安静环境下HDD低频噪音对睡眠质量的影响；其次是稳定性和数据安全角度，根据我们公司数据中心有比较大规模的SSD和HDD的使用经验，同时参考<a href="https://www.backblaze.com/blog/ssd-drive-stats-mid-2022-review/">backblaze提供的统计数据</a>，可以看出SSD的稳定性远超过HDD，这带来了两个优势，一个是相比HDD，SSD损坏的概率低，这可以减少存储池修复的可能性，另外因为读写速度上SSD快很多，在坏盘的情况下，SSD也可以做到更坏的修复速度，从而可以提供更好的数据持久性。</p><p>当然SSD依然还是有缺点的，很明显当前SSD比HDD依然贵很多，以当前的价格来说，SSD成本大约0.4元&#x2F;GB（大多数1T SATA SSD），HDD大概只有0.12元&#x2F;GB（西数HC550 16T）。但是对于我目前的容量需求来说，使用SSD的成本相比HDD没有差距太大，多花的那部分成本，对于0噪音来说是相当值得的。</p><p>除了磁盘的选型，还有一些其他的需求，诸如盘位数量大于等于4，硬盘需要支持热拔插，存储池可以动态扩容，移动端、桌面端数据自动同步等等，不过这些也都算是比较基础的需求了。</p><h1 id="硬盘笼选择"><a href="#硬盘笼选择" class="headerlink" title="硬盘笼选择"></a>硬盘笼选择</h1><p>针对硬盘热拔插的需求，肯定还是要搞个硬盘笼的，不管怎么说，相比于直接把硬盘塞机箱里，有个热拔插硬盘笼一下子逼格就上来了。</p><p>所以一直花了不少精力去找合适的硬盘笼，主要还是集中于服务器的拆机件，这里给几个当时考虑的一些方案。</p><h2 id="浪潮12盘位3-5寸硬盘笼"><a href="#浪潮12盘位3-5寸硬盘笼" class="headerlink" title="浪潮12盘位3.5寸硬盘笼"></a>浪潮12盘位3.5寸硬盘笼</h2><div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="/images/inspur-12bay-front.jpg"></div><div class="group-picture-column"><img src="/images/inspur-12bay-back.jpg"></div></div></div><p>首先第一个选择是买浪潮的12盘位3.5寸硬盘笼，目前的价格大概150块钱的样子，还挺便宜，感觉应该都是当初Chia矿老板淘汰下来的，这些硬盘笼基本都有大4P的电源接口以及MiniSAS（SFF8087）接口，使用起来还是比较方便的，当然缺点是确实占地比较大，毕竟是适配的2U机箱，因为本来也一直坚持全闪的方案，所以3.5寸的硬盘位就没有必要了，即使很便宜，依然放弃了这个方案。</p><h2 id="Intel-8盘位热插拔笼子-8-AnyBay"><a href="#Intel-8盘位热插拔笼子-8-AnyBay" class="headerlink" title="Intel 8盘位热插拔笼子(8 AnyBay)"></a>Intel 8盘位热插拔笼子(8 AnyBay)</h2><div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="/images/intel-8-anybay-front.jpg"></div><div class="group-picture-column"><img src="/images/intel-8-anybay-back.jpg"></div></div></div><p>这是Intel一个颜值和功能都超级能打的硬盘笼，具体的参数可以参考<a href="https://www.intel.com/content/www/us/en/products/sku/99083/2u-hotswap-8x2-5inch-sasnvme-combo-drive-bay-kit-a2u8x25s3phs/specifications.html">Intel的Spec文档</a>（不得不说Intel的文档写的是真的好），甚至当前这个时间点，依然在量产状态，这个笼子一般来说都是在2U机箱上做竖插24盘位的组件的，这几乎是我心目中最理想的硬盘笼选择，8盘位AnyBay，支持SATA、SAS、U.2 NVMe接口的硬盘，特别是在现在咸鱼有大量的U.2接口的大容量企业级SSD，价格十分友好。最关键的是这个硬盘笼的尺寸非常完美，可以无缝的塞进两个5.25英寸光驱位中，网上也有这个硬盘笼搭配银欣（SilverStone）SG02-F机箱组NAS的方案：<a href="https://www.bilibili.com/read/cv16906380">全网首发【8盘位热插拔NVMe SSD NAS】DIY指南简章</a>，不得不说这个方案真的让人流口水，但确实不得不说成本太高了。</p><p>这个硬盘笼呢，什么都好，就是成本太高，不仅仅笼子本身（大约1100+）更重要的是其配套的组件，首先这个硬盘笼是MiniSAS HD（SFF‑8643）接口的，支持这个接口的HBA或者RAID卡也比较贵，其次如果说要支持8个NVMe硬盘的话，需要准备8个OcuLink接口，那PCIe转OcuLink接口的转接卡又是不小的支出。更重要的是，8个NVMe需要32个PCIe lane，这直接超出了当前大部分平台的能力，基本只有服务器平台的CPU+主板才能支持这么多的PCIe lane，成本很可观。最后还有一个不得不考虑的问题，U.2 NVMe硬盘一般来说功耗都比较高，很多盘能到10几20W往上，如果是8块硬盘，那整体功耗可能会超过100W，所以散热的问题就不得不考虑了，这个笼子如果插NVMe硬盘的话，需要额外的散热。</p><p>所以呢，东西虽好，但确实不符合我当前的需求和预算（流下贫穷的泪水）。据说H3C也有类似的笼子，价格要便宜1半，如果大家有类似的需求可以考虑。好像类似的8盘位AnyBay硬盘笼，各家OEM都有，但是好像好买且价格合适的不多。</p><h2 id="Intel-8盘位热插拔笼子-4-AnyBay-4-SATA-SAS"><a href="#Intel-8盘位热插拔笼子-4-AnyBay-4-SATA-SAS" class="headerlink" title="Intel 8盘位热插拔笼子(4 AnyBay + 4 SATA&#x2F;SAS)"></a>Intel 8盘位热插拔笼子(4 AnyBay + 4 SATA&#x2F;SAS)</h2><p>这是另外一个Intel的硬盘笼子，大概可以算是上面笼子的低配版，<a href="https://www.intel.com/content/www/us/en/products/sku/82790/hotswap-backplane-pcie-combination-drive-cage-kit-for-p4000-server-chassis-fup8x25s3nvdk-2-5in-nvme-ssd/specifications.html">文档看这里</a>，这个笼子支持4个NVMe + 4个SATA&#x2F;SAS硬盘，价格在淘宝也相对便宜，看到加上PCIe转接卡大概1000不到可以拿下，其实是个不错的选择，但是依然超出我的预算不少（继续流下贫穷的泪水）。</p><h2 id="Intel-8盘位热插拔笼子-8-SATA-SAS"><a href="#Intel-8盘位热插拔笼子-8-SATA-SAS" class="headerlink" title="Intel 8盘位热插拔笼子(8 SATA&#x2F;SAS)"></a>Intel 8盘位热插拔笼子(8 SATA&#x2F;SAS)</h2><p><img src="/images/intel-8-sas.jpg"></p><p>Intel还有一种硬盘笼（Intel出的好东西真不少啊），<a href="https://www.intel.com/content/www/us/en/products/sku/60221/spare-8x2-5-hotswap-drive-cage-kit-fup8x25hsdks/specifications.html">文档看这里</a>，这个笼子支持8个SATA&#x2F;SAS硬盘，使用两个MiniSAS（SFF8087）接口，是一开始我选中的方案，整体还是很平衡的，淘宝大概400不到，在我找到下面的硬盘笼之前，一度准备剁手入了。</p><h2 id="HP热插拔380-G6-G7硬盘笼"><a href="#HP热插拔380-G6-G7硬盘笼" class="headerlink" title="HP热插拔380 G6&#x2F;G7硬盘笼"></a>HP热插拔380 G6&#x2F;G7硬盘笼</h2><p><img src="/images/hp-8-sas.jpg"></p><p>这个是我最后选择的笼子，这个硬盘笼原本是给HP DL380G6&#x2F;G7升级16盘位的套件，在HP那边的编号是：<code>507690-001</code>和<code>516914-B21</code>（这俩编号是一个东西），这个套件包含的几个组件和对应的物料编号如下：</p><blockquote><p>硬盘笼子：463173-001 496074-001<br>硬盘背板：507690-001 451283-002<br>硬盘供电线：514217-001<br>硬盘SAS数据线：498425-001 493228-005</p></blockquote><p>为什么我选择这个硬盘笼子呢，因为它真的便宜，笼子加上背板、送供电线和两根SAS线，只需要50块钱，当然是不带硬盘托架的，不过算上硬盘托架的价钱也只需要80。80块钱真买不了上当和吃亏。说实话它也有一些小问题，比如坑爹的HP不知道为啥要设计成横向的两个4盘位，尺寸比竖向8盘位相比宽了一点点，直接导致没办法塞进2个5.25英寸光驱位。另外电源接口的设计也比较恶心，是向外的，如果想塞进机箱，那突出来的电源线会成为一个大问题，另外HP的电源接口定义也是每代一改，虽然复用了10pin的接口，但是定义并不标准，导致我花了非常长的时间去寻找各个pin的定义，生怕弄错接口定义把背板烧了，最终还是在一个德语的论坛找到<a href="https://www.hardwareluxx.de/community/threads/adapter-auf-hp-10-pin-stromanschlu%C3%9F-gesucht-f%C3%BCr-hp-sas-backplane.865625/page-2#post-19825023">一个评论</a>说了这个硬盘笼子的定义，需要说明的是这个背板不接3.3V的供电也没有影响，所以也是淘宝了两根大4P的电源线和10pin线，自己DIY了一个电源线，最终把这个硬盘盒的供电问题解决。总的来说，主要这个笼子实在是太便宜了，便宜到它的这几个缺点都可以忍受（还是流下贫穷的泪水）。</p><h1 id="RAID-HBA卡选择"><a href="#RAID-HBA卡选择" class="headerlink" title="RAID&#x2F;HBA卡选择"></a>RAID&#x2F;HBA卡选择</h1><p>针对上面几个硬盘笼，特别是最终我选的硬盘笼，都使用了MiniSAS（SFF8087）接口，所以要想使用硬盘笼的话，需要有支持MiniSAS接口的SATA控制器或者RAID&#x2F;HBA卡，根据之前的调查，大致有几种方案：</p><pre><code>1. 可以使用MiniSAS转4SATA线实现，不过需要注意的是，这种线是区分正反的，正向线是MiniSAS口转4SATA，需要买反接线，将4SATA转换成MiniSAS口，从而实现将主板上的4个SATA口转成一个MiniSAS口。2. 市面上还有一些基于类似ASM1166（或者类似芯片）的PCI-E转SFF-8087转接卡，但ASM1166原生只支持6SATA Port，是否两个SFF-8087端口的8个端口都能使用，这个存疑。   另外还有也有一些M.2转8口SATA扩展卡也是用的两个SFF-8087转接卡，理论上也可以使用。3. 使用拆机的服务器HBA卡，比如基于LSI SAS 2008/2308的一众原厂或者OEM HBA卡。</code></pre><p>最终我还是选择了相对成熟的HBA卡方案，一顿精挑细选，最终选了SuperMicro家的<code>AOC-S2308L-L8I 9217-8i</code>，基于SAS 2308芯片，PCIe 3.0 x8的接口，支持两个SFF-8087接口，这是一张OEM卡，对应的原厂卡型号是<code>LSI SAS9217-8i</code>，市面上除了SuperMicro之外，还有很多OEM也会出相同芯片的卡，比如浪潮、IBM等等，选择还是比较多的。我选的是2308的方案，这个芯片算是2008芯片的升级，其实区别不大，最主要的升级就是从PCIe 2.0 x8变成了PCIe 3.0 x8，整体带宽会高点。另外需要注意的一点是，这两个芯片有两种固件：IT（Initiator Target）模式和IR（Integrated RAID）模式，IT模式是类似HBA卡的直通模式，没办法组建RAID；IR模式是类似RAID卡的模式，可以组建简单的RAID0和RAID1。另外这两种固件是可以互刷的，区别只是在产品名字上是9207还是9217（9217是IR模式，9207是IT模式，所以我买的卡也是原厂IR模式刷的IT固件）。最后其实这个卡有个比较大的散热方面的问题，根据原厂的<a href="https://docs.broadcom.com/doc/12353331">User Guide文档</a>。这张卡默认情况下有接近10W（默认9.8W，最大16W）的功耗，且最低要求<code>200 linear feet per minute</code>的风量，在服务器环境下散热都不是问题，但是放到家用的机箱里，如果没有主动散热的情况下，这张卡会非常的烫手！所以最终我又找了一个12cm的风扇专门对着卡的散热片吹，从而解决散热问题。</p><h1 id="硬盘选择"><a href="#硬盘选择" class="headerlink" title="硬盘选择"></a>硬盘选择</h1><p>上面的这些组件搞定，最终就是买硬盘了，之前提到现在全新的SATA SSD大概0.4元&#x2F;GB，一块1TB的SSD大概400左右，说实话还是不便宜的，所以我又勇敢的选择了大船货！其实现在二手拆机SSD，量最大，最划算的还是U.2的硬盘，不到1000块钱可以买到4T左右的企业级SSD，而且这些企业级SSD寿命极高，稳定性也相当好，而且相比于SATA接口，U.2因为是PCIe链路，可以做到传输层的数据保护，可惜的是咱们的硬盘笼不支持。于是就只能选择SATA接口的SSD，一下子可选范围就少了不少，最终还是选了当前比较火的Sandisk&#x2F;闪迪云盘ECO，但是相比于更火的1.92T容量的版本，我最终买了960G容量的版本，相比于1.92T这个容量点，我猜960G容量用来做系统盘的概率更大点，说不准能抽奖抽到写入量超低的盘😁。相比于全新盘，这个拆机盘的价格就很实惠了。目前的价格是960G容量版本230块，不到0.24元&#x2F;GB，属实是相当划算了。</p><h1 id="NAS系统选择"><a href="#NAS系统选择" class="headerlink" title="NAS系统选择"></a>NAS系统选择</h1><p>所有硬件的问题搞定，最后就只剩下软件层面的选择了，到底该用什么系统呢？一开始想使用TrueNAS，主要是看中ZFS的能力，但是试用了一小段时间TrueNAS之后，感觉这系统是真的很难用，门槛太高了，虽然运维这玩意对我来说并不是太大的瓶颈，但是确实各个方面都不太好用，特别是相关的软件生态上差很多。<br>于是乎就又试了试黑群晖，一开始我其实是抵制黑群晖的，因为有点担心数据安全问题，不确定会不会哪天就崩了，但是试用了一下之后，觉得确实群晖的生态做的太好了，体验拉满。于是就去简单研究了一下黑群晖的实现原理，发现其实黑群晖的相关项目都是开源的，都放在了<a href="https://github.com/RedPill-TTG">RedPill-TTG</a>这个组织下，其中最关键的对群晖内核的hack都在<a href="https://github.com/RedPill-TTG/redpill-lkm">RedPill-TTG&#x2F;redpill-lkm</a>这个项目里，大致翻了翻代码，基本上就是通过加载模块的方式，欺骗群晖的内核，让其认为自己是跑在群晖专有的硬件上。了解了之后，黑群晖在我心目中好感倍增，话说感觉群晖这绝对是套路满满，都说黑群晖的尽头是白群。估计群晖官方默许黑群晖行为的原因大概和Windows一样，反正最终都会买我。</p><p>不过相比于直接把群晖跑在裸机上，我采取了一个另外的方法，把群晖跑在了虚拟机里，这样做的目的主要也是为了方便以后迁移，对我来说当前的硬件平台只是个相对临时的解决方案，为了后续能更好的跨平台迁移，所以我选择将黑群晖跑在虚拟机里，而对于HBA卡来说，采取的是硬件直通的方式直通给虚拟机，从而确保SMART等功能的正常使用。这里分享一下我现在用的虚拟机的XML，有需要的可以参考一下：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>domain</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>kvm<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>Synology<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>uuid</span><span class="token punctuation">></span></span>5ce24e3b-627b-468a-bcd5-53ff58d9731d<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>uuid</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>memory</span><span class="token punctuation">></span></span>8388608<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>memory</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>currentMemory</span><span class="token punctuation">></span></span>8388608<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>currentMemory</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>memoryBacking</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hugepages</span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>memoryBacking</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>vcpu</span><span class="token punctuation">></span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>vcpu</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>os</span> <span class="token attr-name">firmware</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>efi<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>firmware</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>feature</span> <span class="token attr-name">enabled</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>no<span class="token punctuation">'</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>secure-boot<span class="token punctuation">'</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>firmware</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span> <span class="token attr-name">arch</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>x86_64<span class="token punctuation">"</span></span> <span class="token attr-name">machine</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>q35<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>hvm<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>boot</span> <span class="token attr-name">dev</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hd<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>os</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>features</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>acpi</span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>apic</span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>features</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cpu</span> <span class="token attr-name">mode</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>host-passthrough<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>clock</span> <span class="token attr-name">offset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utc<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>timer</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>rtc<span class="token punctuation">"</span></span> <span class="token attr-name">tickpolicy</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>catchup<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>timer</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pit<span class="token punctuation">"</span></span> <span class="token attr-name">tickpolicy</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>delay<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>timer</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hpet<span class="token punctuation">"</span></span> <span class="token attr-name">present</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>no<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>clock</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pm</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>suspend-to-mem</span> <span class="token attr-name">enabled</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>no<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>suspend-to-disk</span> <span class="token attr-name">enabled</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>no<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pm</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>devices</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>emulator</span><span class="token punctuation">></span></span>/usr/libexec/qemu-kvm<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>emulator</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>disk</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">device</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>disk<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>driver</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>qemu<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>raw<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">file</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/data0/Synology/boot.img<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span> <span class="token attr-name">dev</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sda<span class="token punctuation">"</span></span> <span class="token attr-name">bus</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>usb<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>disk</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>interface</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bridge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">bridge</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>br0<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mac</span> <span class="token attr-name">address</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>11:22:33:44:55:66<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>model</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>virtio<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>interface</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>console</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pty<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hostdev</span> <span class="token attr-name">mode</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>subsystem<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pci<span class="token punctuation">"</span></span> <span class="token attr-name">managed</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>yes<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>address</span> <span class="token attr-name">domain</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">bus</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">function</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>source</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>hostdev</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>memballoon</span> <span class="token attr-name">model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>none<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>graphics</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>vnc<span class="token punctuation">'</span></span> <span class="token attr-name">port</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>-1<span class="token punctuation">'</span></span> <span class="token attr-name">autoport</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>yes<span class="token punctuation">'</span></span> <span class="token attr-name">listen</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>0.0.0.0<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listen</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>address<span class="token punctuation">'</span></span> <span class="token attr-name">address</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>0.0.0.0<span class="token punctuation">'</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>graphics</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>model</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>vga<span class="token punctuation">'</span></span> <span class="token attr-name">vram</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>16384<span class="token punctuation">'</span></span> <span class="token attr-name">heads</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>1<span class="token punctuation">'</span></span> <span class="token attr-name">primary</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>yes<span class="token punctuation">'</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>video</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>devices</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>domain</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="总结和后续"><a href="#总结和后续" class="headerlink" title="总结和后续"></a>总结和后续</h1><p>目前的这套NAS方案已经运行了2个多月，看起来还算稳定，这段时间内没出现过大的问题。如果折腾半天就只为了存点照片也有点浪费，所以除了存储功能之外，我又跑了个PCDN业务，目前收益也还不错，我是100M的上传带宽，目前每天大概能有个5块钱的收益，至少电费能覆盖了，跑着玩玩吧~</p><p>想想当前这套还有什么不足，个人觉得一个比较大的缺点是占地，目前我是用了乔斯伯的V4做的机箱，但是硬盘笼是不太好直接放进机箱了，所以只是简单的放在了外壳上，整体相比于家用的NAS产品还是大了一圈，另外确实硬盘笼比双5.25寸光驱位大了点，即使后续换了机箱，可能也不太好直接放进去。</p><p>另外就是CPU这些硬件配置了，一方面当前这颗CPU TDP还是比较大的，65W，必须有主动散热，另外HBA卡也需要主动散热，所以离真正的0噪音还有点距离，理论上换用嵌入式的低功耗CPU+SATA转MiniSAS的方案，可以做到整机完全没有任何机械活动的部件，做到真正意义上的0噪音。</p><p>最后就是另一个方向，换到稍微低端点的数据中心CPU+主板，功耗会高一些，但是可扩展性会极大的增强，包括ECC内存以及U.2硬盘、IPMI这些都可以支持。具体往后该如何演进，还是等待当前套系统继续运行一段时间吧。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;接上篇&lt;a href=&quot;/2022/11/05/lsi-raid-controller-and-hba-complete-listing-plus-oem-models/&quot;&gt;LSI RAID卡芯片和各个OEM对应卡型号列表&lt;/a&gt;里说的后续DIY NAS的想法，经过快3个月的时间，终于来更新整个DIY过程了，总结起来在整个过程中，收获的主要还是折腾的乐趣，要说折腾的尽头是白群晖，随着时间的推移，个人还是比较认同的，不过不得不说白群晖确实太贵了，都说群晖是买软件送硬件，但是这软件也太贵了点。&lt;/p&gt;</summary>
    
    
    
    <category term="日常折腾" scheme="https://www.ichenfu.com/categories/%E6%97%A5%E5%B8%B8%E6%8A%98%E8%85%BE/"/>
    
    
    <category term="NAS" scheme="https://www.ichenfu.com/tags/NAS/"/>
    
    <category term="黑群晖" scheme="https://www.ichenfu.com/tags/%E9%BB%91%E7%BE%A4%E6%99%96/"/>
    
    <category term="SSD" scheme="https://www.ichenfu.com/tags/SSD/"/>
    
  </entry>
  
  <entry>
    <title>分享一个记录LSI RAID卡芯片和各个OEM对应卡型号列表的神贴</title>
    <link href="https://www.ichenfu.com/2022/11/05/lsi-raid-controller-and-hba-complete-listing-plus-oem-models/"/>
    <id>https://www.ichenfu.com/2022/11/05/lsi-raid-controller-and-hba-complete-listing-plus-oem-models/</id>
    <published>2022-11-05T13:17:50.000Z</published>
    <updated>2023-01-29T01:28:30.170Z</updated>
    
    <content type="html"><![CDATA[<p>最近想买一张拆机的HBA卡组一个NAS玩玩，目前用SAS 2308的拆机OEM HBA卡（IT Mode，也可以刷固件刷成IR Mode从而直接变成RAID卡，但是只支持RAID 0, 1, 1E和10）只需要不到100块钱，非常划算，除了功耗高点（差不多10W）比较热之外，感觉没啥缺点。</p><p>于是就被各种原厂的或者OEM厂的各种型号搞晕了，因为基于这个芯片的各种OEM马甲卡实在太多了。于是乎就找到了一篇神贴，帖子里覆盖了几乎所有的LSI的RAID卡芯片以及大部分国外厂商对应的OEM卡型号，而且一直在更新，最新的一些SAS芯片也有记录，比较可惜的是国内的一些OEM厂商，特别是在淘宝保有量相当大的浪潮的OEM卡型号没有记录。</p><p>帖子的地址在：<a href="https://forums.servethehome.com/index.php?threads/lsi-raid-controller-and-hba-complete-listing-plus-oem-models.599/">LSI RAID Controller and HBA Complete Listing Plus OEM Models</a>。有需要的可以参考一下。</p><p>后续组NAS的经历我也会持续分享，敬请关注~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近想买一张拆机的HBA卡组一个NAS玩玩，目前用SAS 2308的拆机OEM HBA卡（IT Mode，也可以刷固件刷成IR Mode从而直接变成RAID卡，但是只支持RAID 0, 1, 1E和10）只需要不到100块钱，非常划算，除了功耗高点（差不多10W）比较热之外</summary>
      
    
    
    
    <category term="日常折腾" scheme="https://www.ichenfu.com/categories/%E6%97%A5%E5%B8%B8%E6%8A%98%E8%85%BE/"/>
    
    
    <category term="LSI" scheme="https://www.ichenfu.com/tags/LSI/"/>
    
    <category term="RAID" scheme="https://www.ichenfu.com/tags/RAID/"/>
    
  </entry>
  
  <entry>
    <title>在移动硬盘盒上启用SSD的Trim功能</title>
    <link href="https://www.ichenfu.com/2022/10/05/enable-trim-on-usb-attached-scsi-ssds/"/>
    <id>https://www.ichenfu.com/2022/10/05/enable-trim-on-usb-attached-scsi-ssds/</id>
    <published>2022-10-05T11:57:02.000Z</published>
    <updated>2023-01-29T01:28:30.170Z</updated>
    
    <content type="html"><![CDATA[<p>最近折腾了一小段时间的PCDN，家里刚好有一个闲置的JetsonNano和一块闲置的SSD，刚好可以跑跑PCDN，每天挣个宽带钱。具体跑的哪家，就不说了，说说在这过程中遇到的一个小问题：一般来说，PCDN或者类似的业务，对磁盘的写入压力还是比较大的，虽然可能平均的写入带宽并不高，但是也架不住每天读写的时间相当长，虽然我这块SSD是闲置的，但好歹是个传家宝，不管怎么说，还是有那么点点心疼的，肯定是不太希望哪天这SSD被写坏了。</p><p>在这种场景下，尽可能延长SSD的写入寿命就很重要了，而方法之一呢，就是想办法把SSD的<code>Trim</code>命令给用上。</p><p>用上<code>Trim</code>命令之前，可以先简单了解一下背后的逻辑，具体的可以参考<a href="https://zh.wikipedia.org/wiki/Trim%E5%91%BD%E4%BB%A4">Wiki</a>，简单来说呢，因为SSD依赖垃圾回收机制来平衡NAND的磨损，但是呢具体到一整个LBA空间，只有文件系统知道哪些数据块是有效数据，所以就需要通过<code>Trim</code>命令，建立文件系统空闲空间和SSD底层数据块的关联，从而让SSD的主控更好的进行垃圾回收操作，一般来说，合理的使用Trim，可以有效的提高SSD的性能和寿命。当然了，<code>Trim</code>命令是ATA指令集里的，也就是SATA接口SSD才会有，对于SCSI以及SAS接口SSD，还有NVMe SSD来说，也有相应的<code>UNMAP</code>和<code>Deallocate</code>指令，作用都是一样的。</p><p>一般来说，在Linux下，一个设备是否支持<code>Trim</code>操作，可以通过<code>lsblk --discard</code>进行查看，当输出中的<code>DISC-GRAN</code>和<code>DISC-MAX</code>列不为0时，说明这个设备是支持<code>Trim</code>操作的：</p><span id="more"></span><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">jetson-nano:chenfu:<span class="token comment"># lsblk --discard</span>NAME        DISC-ALN DISC-GRAN DISC-MAX DISC-ZEROsda                <span class="token number">0</span>        0B       0B         <span class="token number">0</span>mmcblk1            <span class="token number">0</span>        4M      76M         <span class="token number">0</span>└─mmcblk1p1        <span class="token number">0</span>        4M      76M         <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>比如在我这个JetsonNano上，可以看到我外接的这块SSD硬盘，对应<code>sda</code>设备是不支持Trim的，但是<code>mmcblk1</code>这个设备，也就是装系统用的一个小的MicroSD卡是支持的。</p><p>那么问题来了，针对上面的输出，sda这块盘是不支持Trim的，那怎么样才能让他支持呢？</p><p>首先需要明确的是，因为这块盘是我通过一块USB移动硬盘盒转接到板子上的，也就意味着这块硬盘并没有用原生的SATA接口（当然这块开发版本身也不支持SATA接口）。而对于移动硬盘盒而言，将SATA口转换成USB口，会需要一个桥接芯片进行协议的转换，那么桥接芯片是否支持Trim命令的转换，就显得非常重要了。对于一些老的移动硬盘盒，大多使用的是Mass Storage Class Bulk-Only Transport (BOT)这个协议，但是对于一些比较新的桥接芯片，基本都会支持一个新的叫做USB Attached SCSI Protocol (UASP) 的新协议。所以我也查了一些资料，同样也是结合产品页的一些宣传，买了一个支持UAS协议的移动硬盘盒，根据评论看，这个硬盘盒是支持Trim的，但是大部分用户似乎都是在Windows下进行测试的，在Linux下是否真的支持，是否需要新版本内核或者驱动的支持还不知道。</p><p>等硬盘盒到手，插上之后系统lsusb看了一下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">jetson-nano:~:% lsusbBus 002 Device 002: ID 174c:225c ASMedia Technology Inc. Ugreen Storage Device<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>VendorId是0x174c，也就是ASMedia公司的桥接芯片，但是225c这个ProductId并没有在USB ID数据库里查到，不过从数据库里看0x1153这个ProductId对应ASM1153这款芯片来说，那225c应该是对应着ASM225CM这个芯片？从目前的资料看，这个芯片理论上是支持Trim的，至少可以通过刷新固件来解决支持的问题。</p><p>然而系统识别出sda之后，<code>lsblk --discard</code>依然提示不支持Trim。</p><p>于是又搜索了一些资料，终于在<a href="https://wiki.archlinux.org/title/Solid_state_drive#External_SSD_with_TRIM_support">Arch的SSD Wiki</a>里找到了一些信息：</p><blockquote><p>其实现在一些USB转SATA芯片（如VL715、VL716等）以及在外接NVMe硬盘盒（如IB-1817M-C31）中使用的USB转PCIe芯片（如 智微（JMicron） JMS583 ）支持类似TRIM的命令。这些命令可通过 USB Attached SCSI 驱动程序（在Linux下称为”uas”）发送。然而内核可能不会自动检测到并启用这一功能。</p></blockquote><p>会不会是因为芯片是支持的，但是系统默认没有开启呢？于是按Wiki里的说法，使用<code>sg_readcap -l /dev/sda</code>命令读取设备的标志位：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">jetson-nano:chenfu:<span class="token comment"># sg_readcap -l /dev/sda</span>Read Capacity results:   Protection: <span class="token assign-left variable">prot_en</span><span class="token operator">=</span><span class="token number">0</span>, <span class="token assign-left variable">p_type</span><span class="token operator">=</span><span class="token number">0</span>, <span class="token assign-left variable">p_i_exponent</span><span class="token operator">=</span><span class="token number">0</span>   Logical block provisioning: <span class="token assign-left variable">lbpme</span><span class="token operator">=</span><span class="token number">0</span>, <span class="token assign-left variable">lbprz</span><span class="token operator">=</span><span class="token number">0</span>   Last <span class="token assign-left variable">LBA</span><span class="token operator">=</span><span class="token number">937703087</span> <span class="token punctuation">(</span>0x37e436af<span class="token punctuation">)</span>, Number of logical <span class="token assign-left variable">blocks</span><span class="token operator">=</span><span class="token number">937703088</span>   Logical block <span class="token assign-left variable">length</span><span class="token operator">=</span><span class="token number">512</span> bytes   Logical blocks per physical block <span class="token assign-left variable">exponent</span><span class="token operator">=</span><span class="token number">0</span>   Lowest aligned <span class="token assign-left variable">LBA</span><span class="token operator">=</span><span class="token number">0</span>Hence:   Device size: <span class="token number">480103981056</span> bytes, <span class="token number">457862.8</span> MiB, <span class="token number">480.10</span> GB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发现<code>Logical block provisioning: lbpme=0, lbprz=0</code>其中lbpme&#x3D;0，因为LBPME位为0，所以内核默认是不会开启DISCARD的支持。针对这种情况，还需要继续通过<code>sg_vpd -a /dev/sda</code>命令查询设备支持的命令情况：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">jetson-nano:chenfu:<span class="token comment"># sg_vpd -a /dev/sda</span>Supported VPD pages VPD page:  <span class="token punctuation">..</span>.Unit serial number VPD page:  Unit serial number: 704108E11D02Device Identification VPD page:  Addressed logical unit:    designator type: NAA,  code set: Binary      0x5000000000000001Block limits VPD page <span class="token punctuation">(</span>SBC<span class="token punctuation">)</span>:  Write same non-zero <span class="token punctuation">(</span>WSNZ<span class="token punctuation">)</span>: <span class="token number">0</span>  <span class="token punctuation">..</span>.Block device characteristics VPD page <span class="token punctuation">(</span>SBC<span class="token punctuation">)</span>:  Non-rotating medium <span class="token punctuation">(</span>e.g. solid state<span class="token punctuation">)</span>  <span class="token punctuation">..</span>.Logical block provisioning VPD page <span class="token punctuation">(</span>SBC<span class="token punctuation">)</span>:  Unmap <span class="token builtin class-name">command</span> supported <span class="token punctuation">(</span>LBPU<span class="token punctuation">)</span>: <span class="token number">1</span>  Write same <span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span> with unmap bit supported <span class="token punctuation">(</span>LBPWS<span class="token punctuation">)</span>: <span class="token number">0</span>  Write same <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> with unmap bit supported <span class="token punctuation">(</span>LBPWS10<span class="token punctuation">)</span>: <span class="token number">0</span>  Logical block provisioning <span class="token builtin class-name">read</span> zeros <span class="token punctuation">(</span>LBPRZ<span class="token punctuation">)</span>: <span class="token number">0</span>  Anchored LBAs supported <span class="token punctuation">(</span>ANC_SUP<span class="token punctuation">)</span>: <span class="token number">0</span>  Threshold exponent: <span class="token number">0</span> <span class="token punctuation">[</span>threshold sets not supported<span class="token punctuation">]</span>  Descriptor present <span class="token punctuation">(</span>DP<span class="token punctuation">)</span>: <span class="token number">0</span>  Minimum percentage: <span class="token number">0</span> <span class="token punctuation">[</span>not reported<span class="token punctuation">]</span>  Provisioning type: <span class="token number">0</span> <span class="token punctuation">(</span>not known or fully provisioned<span class="token punctuation">)</span>  Threshold percentage: <span class="token number">0</span> <span class="token punctuation">[</span>percentages not supported<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以发现在<code>Logical block provisioning VPD page (SBC)</code>段下，有<code>Unmap command supported (LBPU): 1</code>，说明设备本身是支持Unmap指令的，因为前面说到，ATA中的Trim其实就是对应的SCSI中的UNMAP，所以支持UNMAP也就是支持了Trim，当然这中间的转换过程，应该是有硬盘盒的主控来完成。</p><p>那既然在物理上是支持Trim的，那剩下的就是逻辑上怎么启用的问题了，先看下目前内核识别的设备的provisioning_mode：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">jetson-nano:chenfu:<span class="token comment"># cat /sys/block/sda/device/scsi_disk/0:0:0:0/provisioning_mode</span>full<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可以发现输出是<code>full</code>，也就是说内核当前是没有检测到设备支持Trim特性，解决方法也比较简单，直接<code>echo unmap</code>到这个文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">jetson-nano:chenfu:<span class="token comment"># echo unmap > /sys/block/sda/device/scsi_disk/0:0:0:0/provisioning_mode</span>jetson-nano:chenfu:<span class="token comment"># lsblk --discard</span>NAME        DISC-ALN DISC-GRAN DISC-MAX DISC-ZEROsda                <span class="token number">0</span>      512B       4G         <span class="token number">0</span>mmcblk1            <span class="token number">0</span>        4M      76M         <span class="token number">0</span>└─mmcblk1p1        <span class="token number">0</span>        4M      76M         <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，强制指定provisioning_mode为unmap之后，<code>lsblk --discard</code>的输出已经提示sda设备支持Trim了。</p><p>最后，为了能让这个特性可以在插入硬盘盒的时候自动生效，可以手动编写一个Udev的规则文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">'ACTION=="add|change", ATTRS&#123;idVendor&#125;=="174c", ATTRS&#123;idProduct&#125;=="225c", SUBSYSTEM=="scsi_disk", ATTR&#123;provisioning_mode&#125;="unmap"'</span> <span class="token operator">>></span>/etc/udev/rules.d/10-uas-discard.rules<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>也就是说，当有idVendor为174c，idProduct为225c的设备（也就是我的这个硬盘盒）连接的时候，自动设置provisioning_mode为unmap。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近折腾了一小段时间的PCDN，家里刚好有一个闲置的JetsonNano和一块闲置的SSD，刚好可以跑跑PCDN，每天挣个宽带钱。具体跑的哪家，就不说了，说说在这过程中遇到的一个小问题：一般来说，PCDN或者类似的业务，对磁盘的写入压力还是比较大的，虽然可能平均的写入带宽并不高，但是也架不住每天读写的时间相当长，虽然我这块SSD是闲置的，但好歹是个传家宝，不管怎么说，还是有那么点点心疼的，肯定是不太希望哪天这SSD被写坏了。&lt;/p&gt;
&lt;p&gt;在这种场景下，尽可能延长SSD的写入寿命就很重要了，而方法之一呢，就是想办法把SSD的&lt;code&gt;Trim&lt;/code&gt;命令给用上。&lt;/p&gt;
&lt;p&gt;用上&lt;code&gt;Trim&lt;/code&gt;命令之前，可以先简单了解一下背后的逻辑，具体的可以参考&lt;a href=&quot;https://zh.wikipedia.org/wiki/Trim%E5%91%BD%E4%BB%A4&quot;&gt;Wiki&lt;/a&gt;，简单来说呢，因为SSD依赖垃圾回收机制来平衡NAND的磨损，但是呢具体到一整个LBA空间，只有文件系统知道哪些数据块是有效数据，所以就需要通过&lt;code&gt;Trim&lt;/code&gt;命令，建立文件系统空闲空间和SSD底层数据块的关联，从而让SSD的主控更好的进行垃圾回收操作，一般来说，合理的使用Trim，可以有效的提高SSD的性能和寿命。当然了，&lt;code&gt;Trim&lt;/code&gt;命令是ATA指令集里的，也就是SATA接口SSD才会有，对于SCSI以及SAS接口SSD，还有NVMe SSD来说，也有相应的&lt;code&gt;UNMAP&lt;/code&gt;和&lt;code&gt;Deallocate&lt;/code&gt;指令，作用都是一样的。&lt;/p&gt;
&lt;p&gt;一般来说，在Linux下，一个设备是否支持&lt;code&gt;Trim&lt;/code&gt;操作，可以通过&lt;code&gt;lsblk --discard&lt;/code&gt;进行查看，当输出中的&lt;code&gt;DISC-GRAN&lt;/code&gt;和&lt;code&gt;DISC-MAX&lt;/code&gt;列不为0时，说明这个设备是支持&lt;code&gt;Trim&lt;/code&gt;操作的：&lt;/p&gt;</summary>
    
    
    
    <category term="日常折腾" scheme="https://www.ichenfu.com/categories/%E6%97%A5%E5%B8%B8%E6%8A%98%E8%85%BE/"/>
    
    
    <category term="SSD" scheme="https://www.ichenfu.com/tags/SSD/"/>
    
    <category term="Trim" scheme="https://www.ichenfu.com/tags/Trim/"/>
    
    <category term="UAS" scheme="https://www.ichenfu.com/tags/UAS/"/>
    
  </entry>
  
  <entry>
    <title>SPDK的“Reduce”块压缩算法</title>
    <link href="https://www.ichenfu.com/2022/04/05/spdk-reduce-block-compression-algorithm/"/>
    <id>https://www.ichenfu.com/2022/04/05/spdk-reduce-block-compression-algorithm/</id>
    <published>2022-04-05T13:03:28.000Z</published>
    <updated>2022-04-28T05:53:29.134Z</updated>
    
    <content type="html"><![CDATA[<p>本文是SPDK文档<a href="https://spdk.io/doc/reduce.html">SPDK “Reduce” Block Compression Algorithm</a>的翻译，在读SPDK的文档过程中，刚好看到了SPDK里<code>bdev reduce</code>模块实现背后的算法描述，于是就想着翻译一下，正好也借翻译的同时仔细理解一下背后算法的原理，当然本人的水平有限，如果译文有任何歧义，还请参考原文并以实际原文为准。</p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>SPDK的“reduce”块压缩方案使用SSD存储压缩后的块数据，同时将元数据存放到持久内存中。此元数据包含用户数据的逻辑块到压缩后的物理块的对应关系。本文档中描述的方案是通用的，不依赖于包括<code>SPDK</code>在内任何特定的块设备框架。该算法会在一个叫做<code>libreduce</code>的库中实现。更高层次的软件可以基于该模块创建和呈现特定的块设备。对于SPDK来说，<code>bdev_reduce</code>模块封装了<code>libreduce</code>库，从而在SPDK中提供一个bdev以实现压缩功能。</p><p>本方案仅仅解释压缩后的数据块和用于跟踪这些数据块的元数据的管理。它依赖于高层软件模块来执行压缩操作。对于SPDK，<code>bdev_reduce</code>模块利用<code>DPDK compressdev</code>框架执行压缩和解压缩。</p><p>（需要注意的是，在某些情况下，数据块可能是不可压缩的，或者无法压缩到足以实现空间节省的程度。在这些情况下，数据可能不经过压缩，直接存储在磁盘上。“压缩的存储块”包括这些不经压缩的块。）</p><span id="more"></span><p>一个压缩块存储设备是一个建立在拥有相似大小的后备存储设备之上的一个逻辑实体。其中的后备存储设备必须是精简置备（thin-provisioned）的从而才能真正意义上从后文描述的实现中获得空间节省。同样该算法除了一直使用后备存储设备上可用的编号最低的块之外，对后备存储设备的实现没有直接的了解。这保证了在精简配置的后备存储设备上使用此算法时，在实际需要空间之前不会分配对应空间。</p><p>后备存储的大小，必须考虑最坏情况，也就是所有数据都不可压缩的情况。在这种情况下，后备存储的大小和压缩块设备的大小是一致的。另外，本算法基于永远不会原地写这个前台来保证原子性，所以在更新元数据之前，可能还需要额外的一些后备存储空间来作为临时写缓存。</p><p>为了最佳性能考虑，所有后备存储设备都将以4KB为最小单位进行分配、读取和写入。这些4KB的单元被称作“后备IO单元”（backing IO units）。他们被一个称作“后备IO单元索引”（backing IO unit indices）的索引列表中以0到N-1编号进行索引。在一开始，这个完整的索引代表了“空闲后备IO单元列表”（free backing IO unit list）。</p><p>一个压缩块存储设备基于chunk进行压缩和解压操作，chunk大小至少是两个4K的后备IO单元，每个chunk所需要的后备IO单元数量，也同样表明了chunk的大小，这个数量或者大小需要在压缩块存储设备创建时指定。一个chunk，需要消耗至少1个，至多chunk大小个后备IO单元数量。举个例子，一个16KB的chunk，有可能消耗1，2，3，4个后备IO单元，最终消耗的数量取决于这个chunk的压缩率。磁盘blocks和chunk的对应关系，存储在持久内存中的一个<code>chunk map</code>里。每个<code>chunk map</code>包含了N个64-bit的值，其中N是每个chunk所包含的后备IO单元的数量。每个64-bit值表示一个后备IO单元的索引。一个特殊的值（举个例子，2^64-1）用来表示因为压缩节省而不需要使用实际的后备存储。<code>chunk map</code>的数量，等于压缩块设备的容量除以它的chunk大小，再加上少量用于保证原子写操作额外的一些<code>chunk map</code>。一开始所有的<code>chunk map</code>都表示“空闲chunk map列表”。</p><p>最后，压缩块设备的逻辑映射表通过“logical map”进行表示。这里的“logical map”指的是压缩块存储设备对于对于chunk map的偏移的对于关系。logical map里每个条目是一个64-bit的值，表示所关联的chunk map。一个特殊值（UINT64_MAX）表示没有对应关联的chunk map。映射是通过将字节偏移量除以块大小得到一个索引来确定的，该索引用作块映射条目数组的数组索引。 开始时，逻辑映射表中的所有条目都没有关联的块映射。 请注意，虽然对后备存储设备的访问以 4KB 为单位，但逻辑映射表可能允许以4KB或512B为单位进行访问。</p><h2 id="一些例子"><a href="#一些例子" class="headerlink" title="一些例子"></a>一些例子</h2><p>为了说明这个算法，我们将使用一个真实的非常小规模的例子。</p><p>压缩块设备的大小为64KB，chunk大小为16KB。 这会实现以下几点：</p><ul><li>“后备存储” 需要是一个80KB大小的精简置备（thin-provisioned）逻辑设备。这包括了64KB的压缩设备原始大小，以及为了在最坏情况下保证写原子性而额外分配的16KB大小。</li><li>“空闲后备IO单元列表”（free backing IO unit list）由一个0-19的索引组成，这些索引表示在后备存储里的20个4KB最小IO单元。</li><li>一个”chunk map”的大小是32字节， 对应每个chunk需要4个后备存储单元（16KB&#x2F;4KB），以及每个存储单元需要8个字节（64bit）进行表示。</li><li>需要从持久内存中分配5个chunk map，共160B的空间。这包含了压缩块设备的4个chunk（64KB &#x2F; 16KB）所对应的4个chunk map以及为了改写已有chunk时需要的额外1个chunk map</li><li>“空闲后备IO单元列表”（Free chunk map list） 将由0 - 4（包含4）进行索引。 这些索引表示这5个被分配的chunk map</li><li>“逻辑映射表”（logical map）需要在持久内存中分配32B空间，这包含了压缩块设备4个chunk的索引，每个索引需要8B（64bit）。</li></ul><p>在下面的例子中，”X”符号代表上面所说的那个特殊值特殊值（2^64-1）。</p><h3 id="创建初始化（Initial-Creation）"><a href="#创建初始化（Initial-Creation）" class="headerlink" title="创建初始化（Initial Creation）"></a>创建初始化（Initial Creation）</h3><pre class="line-numbers language-text" data-language="text"><code class="language-text">                +--------------------+Backing Device  |                    |                +--------------------+Free Backing IO Unit List  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19           +------------+------------+------------+------------+------------+Chunk Maps |            |            |            |            |            |           +------------+------------+------------+------------+------------+Free Chunk Map List  0, 1, 2, 3, 4            +---+---+---+---+Logical Map | X | X | X | X |            +---+---+---+---+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="在32KB偏移量处写入16KB（Write-16KB-at-Offset-32KB）"><a href="#在32KB偏移量处写入16KB（Write-16KB-at-Offset-32KB）" class="headerlink" title="在32KB偏移量处写入16KB（Write 16KB at Offset 32KB）"></a>在32KB偏移量处写入16KB（Write 16KB at Offset 32KB）</h3><ul><li>找到逻辑映射表（logical map）对应的index。32KB偏移量除以16KB的chunk size，得到index为2。</li><li>Logical map里的第2个单元是一个“X”，也就是说当前这16KB还没有被写入过。</li><li>在内存中分配16KB的buffer。</li><li>将写入的这16KB数据压缩后，存入到刚刚分配的buffer中。</li><li>假设数据被压缩到只剩6KB，那么就需要2个4KB的后备IO单元。</li><li>从空闲后备IO单元列表中分配2个block（编号0和1）。需要注意的是，永远都从空闲后备IO单元列表中最小的单元还是分配，这样可以保证在thin-provision情况下，不会用到多余的后端存储，从而节省容量。</li><li>将压缩后的6KB数据存储到后备存储的第0和第一个单元。</li><li>从空闲chunk map列表中分配一个chunk map 0。</li><li>将（0，1，X，X）存储到chunk map 0中。这表示只有2个后备IO单元被用来存储这16KB数据。</li><li>把chunk map的编号0，写到逻辑映射表（logical map）的第二个单元中。</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">                +--------------------+Backing Device  |01                  |                +--------------------+Free Backing IO Unit List  2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19           +------------+------------+------------+------------+------------+Chunk Maps | 0 1 X X    |            |            |            |            |           +------------+------------+------------+------------+------------+Free Chunk Map List  1, 2, 3, 4            +---+---+---+---+Logical Map | X | X | 0 | X |            +---+---+---+---+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="在8KB偏移量处写入4KB（Write-4KB-at-Offset-8KB）"><a href="#在8KB偏移量处写入4KB（Write-4KB-at-Offset-8KB）" class="headerlink" title="在8KB偏移量处写入4KB（Write 4KB at Offset 8KB）"></a>在8KB偏移量处写入4KB（Write 4KB at Offset 8KB）</h3><ul><li>在逻辑映射表中找到对应的index。 8KB偏移量，除以16KB的chunk size，得到index为0。</li><li>逻辑映射表中的0号条目是“X”，这表示这16KB还没有被写入过数据。</li><li>写入请求不是一个完整的16KB chunk大小，所以我们必须要先分配一个16KB的buffer用于暂存源数据。</li><li>把需要写入的4KB数据写入到这16KB buffer的8KB偏移处，并把buffer其他的地方填0。</li><li>再分配16KB的目标buffer。</li><li>把16KB的源数据，压缩后存入到目标buffer中。</li><li>假设数据被压缩到3KB，这将需要1个4KB的后备IO单元。</li><li>从空闲后备单元列表中分配一个block（编号2）。</li><li>把3KB数据写入到编号2的block中。</li><li>从空闲chunk map列表中分配一个空闲chunk map(编号1)。</li><li>把（2，X，X，X）写入到chunk map中。</li><li>将chunk map的索引（编号1）写入到逻辑映射表的第0个条目里。</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">                +--------------------+Backing Device  |012                 |                +--------------------+Free Backing IO Unit List  3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19           +------------+------------+------------+------------+------------+Chunk Maps | 0 1 X X    | 2 X X X    |            |            |            |           +------------+------------+------------+------------+------------+Free Chunk Map List  2, 3, 4            +---+---+---+---+Logical Map | 1 | X | 0 | X |            +---+---+---+---+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="在16K偏移量处读取16KB数据（Read-16KB-at-Offset-16KB）"><a href="#在16K偏移量处读取16KB数据（Read-16KB-at-Offset-16KB）" class="headerlink" title="在16K偏移量处读取16KB数据（Read 16KB at Offset 16KB）"></a>在16K偏移量处读取16KB数据（Read 16KB at Offset 16KB）</h3><ul><li>16KB偏移量，在逻辑映射表中对应第1个条目。</li><li>逻辑映射表第1个条目是“X”，这说明这个16KB空间还没有被写入过任何数据。</li><li>由于这16KB的chunk还没有被写入过任何数据，所以直接这个读请求直接返回全0。</li></ul><h3 id="在4KB偏移量处写入4KB（Write-4KB-at-Offset-4KB）"><a href="#在4KB偏移量处写入4KB（Write-4KB-at-Offset-4KB）" class="headerlink" title="在4KB偏移量处写入4KB（Write 4KB at Offset 4KB）"></a>在4KB偏移量处写入4KB（Write 4KB at Offset 4KB）</h3><ul><li>4KB偏移量，在逻辑映射表中对应第0个条目。</li><li>逻辑映射表的第0个条目是“1”，由于我们并不是覆盖写整个chunk，所以我们必须要进行一个读-改-写（read-modify-write）操作。</li><li>chunk map 1仅仅指定了一个后备IO单元（编号2），分配一个16KB的buffer，并讲编号2的后备IO单元读入到这个buffer，这个buffer后面会被叫做压缩数据buffer。<br>需要注意的是，因为我们一下子分配了16KB的buffer而不是只分配4KB，我们可以继续使用这个buffer作为后面新压缩数据的存放地点。</li><li>再分配一个16KB的buffer用于存放解压后的数据。解压压缩数据buffer里的数据，并将数据存入刚分配的buffer里。</li><li>把需要写入的4KB数据写入到解压数据buffer的4KB偏移处。</li><li>把解压数据buffer里的数据压缩，并放到压缩数据buffer中。</li><li>假设新的数据压缩后大小5KB，这将需要2个4KB的后备IO单元。</li><li>从空闲后备IO单元列表里，分配编号为3和4的两个block。</li><li>将这个5KB数据写入到3和4这两个block中。</li><li>从空闲chunk map列表中分配编号2的chunk map。</li><li>将（3，4，X，X）写入到编号2的chunk map中。需要注意的是，到当前节点，这个chunk map还没有被逻辑映射表引用，如果此时出现了掉电，当前chunk的数据依然是保持完整的。</li><li>将chunk map的编号2写入到逻辑映射表中。</li><li>释放编号为1的chunk map，并放入到空闲chunk map列表中。</li><li>释放编号为2的后备IO单元，并将编号放入到空闲后备IO单元列表中。</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">                +--------------------+Backing Device  |01 34               |                +--------------------+Free Backing IO Unit List  2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19           +------------+------------+------------+------------+------------+Chunk Maps | 0 1 X X    |            | 3 4 X X    |            |            |           +------------+------------+------------+------------+------------+Free Chunk Map List  1, 3, 4            +---+---+---+---+Logical Map | 2 | X | 0 | X |            +---+---+---+---+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="跨越多个chunks的请求（Operations-that-span-across-multiple-chunks）"><a href="#跨越多个chunks的请求（Operations-that-span-across-multiple-chunks）" class="headerlink" title="跨越多个chunks的请求（Operations that span across multiple chunks）"></a>跨越多个chunks的请求（Operations that span across multiple chunks）</h3><p>针对跨越多个chunks的请求，逻辑上这个请求会被分割成多个请求，每个请求关联一个chunk。</p><p>举例：在4KB偏移处写入20KB数据</p><p>在这个场景下，这个写请求会被分割成：一个在4KB偏移处写入12KB数据的请求（只影响逻辑映射表的第0个条目），以及一个在偏移量16KB处写入8KB的请求（只影响逻辑映射表的第1个条目）。<br>每个子请求都独立的基于上述的算法进行处理，直到这两个子请求全部完成时，原始的20KB写入操作才会返回。</p><h3 id="Unmap操作（Unmap-Operations）"><a href="#Unmap操作（Unmap-Operations）" class="headerlink" title="Unmap操作（Unmap Operations）"></a>Unmap操作（Unmap Operations）</h3><p>Unmap操作通过从逻辑映射表中删除对应的（如果有）chunk map条目来实现，对应的chunk map会被放回到空闲chunk map列表中，并且任何相关的后备IO单元也会被释放并放回到空闲后备IO单元列表中。</p><p>而对于针对chunk的某一部分进行Unmap的操作，相当于对chunk的这一部分写0，如果整个chunk在多次的操作中被整体Unmap掉了，那么未压缩的数据就变成全0了，这样就可以被检测出来，在这种情况下，整个chunk的映射条目也会从逻辑映射表里被移除。</p><p>当整个chunk都被Umap掉之后，后续针对该chunk的读操作都会返回全0，这个表现就和上述在16K偏移量处读取16KB数据（Read 16KB at Offset 16KB）的例子一致。</p><h3 id="写0操作（Write-Zeroes-Operations）"><a href="#写0操作（Write-Zeroes-Operations）" class="headerlink" title="写0操作（Write Zeroes Operations）"></a>写0操作（Write Zeroes Operations）</h3><p>写0操作的流程和Unmap操作类似，如果一个写0操作覆盖了整个chunk，我们也可以在逻辑映射表中完全移除整个chunk的对应条目，然后后续的读操作也会返回全0。</p><h3 id="Restart"><a href="#Restart" class="headerlink" title="Restart"></a>Restart</h3><p>一个使用<code>libreduce</code>模块的应用程序，有可能需要定期退出并重新启动。当应用程序重新启动的时候，会重新加载压缩卷，从而恢复到应用程序退出之前的状态。</p><p>当压缩卷被加载的时候，空闲chunk map列表和空闲后备IO单元列表会通过扫描逻辑映射表的形式进行重建。逻辑映射表只会保存有效的chunk map索引，同样的，chunk map只会保存有效后备单元索引。<br>任何没有被引用的chunk map以及后备IO单元，都会被认为是空的，并加入到对应的空闲列表中。</p><p>这就保证了如果系统在一个写操作的中间状态下崩溃后（比如在chunk map被更新，但还没写入逻辑映射表的过程中崩溃）重启的过程中，所有未完成的写入操作都会被忽略。</p><h3 id="对同一个chunk的并发操作（Overlapping-operations-on-same-chunk）"><a href="#对同一个chunk的并发操作（Overlapping-operations-on-same-chunk）" class="headerlink" title="对同一个chunk的并发操作（Overlapping operations on same chunk）"></a>对同一个chunk的并发操作（Overlapping operations on same chunk）</h3><p>具体实现时，必须要考虑针对同一个chunk并发操作的情况。比如第一个IO需要对chunk A写入某些数据，同时又有第二个IO也需要对chunk A进行写入。在这种情况下，第二个IO必须等第一个IO完成之后才能开始。<br>针对类似情况的进一步优化，超出了本文档的描述范围。</p><h3 id="精简置备的后备存储（Thin-provisioned-backing-storage）"><a href="#精简置备的后备存储（Thin-provisioned-backing-storage）" class="headerlink" title="精简置备的后备存储（Thin provisioned backing storage）"></a>精简置备的后备存储（Thin provisioned backing storage）</h3><p>后备存储设备必须是精简置备的，从而才能在压缩场景下实现空间节约。本文的算法永远都会使用（重用）后备存储上最靠近偏移量0的后备IO单元。<br>这确保了即使后备存储的空间和压缩块设备的大小接近，但是直到确实需要后备IO单元的时候，才会真正从后备存储设备上分配存储空间。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文是SPDK文档&lt;a href=&quot;https://spdk.io/doc/reduce.html&quot;&gt;SPDK “Reduce” Block Compression Algorithm&lt;/a&gt;的翻译，在读SPDK的文档过程中，刚好看到了SPDK里&lt;code&gt;bdev reduce&lt;/code&gt;模块实现背后的算法描述，于是就想着翻译一下，正好也借翻译的同时仔细理解一下背后算法的原理，当然本人的水平有限，如果译文有任何歧义，还请参考原文并以实际原文为准。&lt;/p&gt;
&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;SPDK的“reduce”块压缩方案使用SSD存储压缩后的块数据，同时将元数据存放到持久内存中。此元数据包含用户数据的逻辑块到压缩后的物理块的对应关系。本文档中描述的方案是通用的，不依赖于包括&lt;code&gt;SPDK&lt;/code&gt;在内任何特定的块设备框架。该算法会在一个叫做&lt;code&gt;libreduce&lt;/code&gt;的库中实现。更高层次的软件可以基于该模块创建和呈现特定的块设备。对于SPDK来说，&lt;code&gt;bdev_reduce&lt;/code&gt;模块封装了&lt;code&gt;libreduce&lt;/code&gt;库，从而在SPDK中提供一个bdev以实现压缩功能。&lt;/p&gt;
&lt;p&gt;本方案仅仅解释压缩后的数据块和用于跟踪这些数据块的元数据的管理。它依赖于高层软件模块来执行压缩操作。对于SPDK，&lt;code&gt;bdev_reduce&lt;/code&gt;模块利用&lt;code&gt;DPDK compressdev&lt;/code&gt;框架执行压缩和解压缩。&lt;/p&gt;
&lt;p&gt;（需要注意的是，在某些情况下，数据块可能是不可压缩的，或者无法压缩到足以实现空间节省的程度。在这些情况下，数据可能不经过压缩，直接存储在磁盘上。“压缩的存储块”包括这些不经压缩的块。）&lt;/p&gt;</summary>
    
    
    
    <category term="SPDK" scheme="https://www.ichenfu.com/categories/SPDK/"/>
    
    
    <category term="SPDK" scheme="https://www.ichenfu.com/tags/SPDK/"/>
    
    <category term="Reduce" scheme="https://www.ichenfu.com/tags/Reduce/"/>
    
    <category term="bdev reduce" scheme="https://www.ichenfu.com/tags/bdev-reduce/"/>
    
  </entry>
  
  <entry>
    <title>实现一个Kubernetes的身份认证代理服务</title>
    <link href="https://www.ichenfu.com/2022/03/20/implement-a-k8s-authenticating-proxy/"/>
    <id>https://www.ichenfu.com/2022/03/20/implement-a-k8s-authenticating-proxy/</id>
    <published>2022-03-20T08:41:36.000Z</published>
    <updated>2022-04-28T05:53:29.134Z</updated>
    
    <content type="html"><![CDATA[<p>最近接到一个需求：把K8s的认证和授权体系，整合到我们内部的系统中，使得我们内部系统的用户，可以无缝的直接访问K8s集群，同时也需要限制好用户对应namespace的权限。</p><p>对于需求的用户授权也就是authorization (authz)部分，实现思路还是比较简单的，毕竟K8s的<a href="https://kubernetes.io/zh/docs/reference/access-authn-authz/rbac/">RBAC</a>实现相对来说还是非常完善的，而且RBAC对于我们目前的用户和组织权限管理理念十分的接近。所以只需要将目前系统里的用户权限和组织关系，对应到一系列的RBAC Role和RoleBinding里，就可以实现对于用户权限的精细化控制。</p><p>而对于用户的认证authentication (authn)部分，K8s提供了非常多的<a href="https://kubernetes.io/zh/docs/reference/access-authn-authz/authentication/">身份认证策略</a>。但是如文档里明确的一点：</p><span id="more"></span><blockquote><p>Kubernetes 假定普通用户是由一个与集群无关的服务通过以下方式之一进行管理的：</p><ul><li>负责分发私钥的管理员</li><li>类似 Keystone 或者 Google Accounts 这类用户数据库</li><li>包含用户名和密码列表的文件<br>有鉴于此，Kubernetes 并不包含用来代表普通用户账号的对象。 普通用户的信息无法通过API调用添加到集群中。</li></ul></blockquote><p>K8s并不自己管理用户实体，所以是没有办法像RBAC那样，通过创建一个“User”资源，来把某个用户添加到集群里的。</p><p>其实这个特点，对于系统集成来说，可能更是一个优点，因为这直接避免了第三方系统的用户属性和K8s“用户”属性可能存在的不兼容问题。</p><p>而对于目前的需求而言，需要做到以下几点：</p><ol><li>最好是基于Token实现，并且这个Token由我们自己的系统生成，同一个Token，既可以调用原有的API，也可以调用K8s的API。</li><li>尽可能保证K8s兼容性，最好用户可以无缝的，不需要经过复杂的配置，直接使用kubectl访问到集群。</li><li>记录所有用户的访问记录以便于各种审计工作。</li></ol><p>针对这几个需求，又通读了一遍文档之后，最终决定使用<a href="https://kubernetes.io/zh/docs/reference/access-authn-authz/authentication/#authenticating-proxy">身份认证代理</a>这个方式，怎么理解呢：</p><p>K8s APIServer可以获取HTTP请求中的某些头部字段，根据头部字段的值来判断当前操作的用户。也就是说，如果实现一个反向代理服务器，由这个反向代理服务器实现Token的认证工作，确认用户请求的有效性，若用户请求有效，直接把用户的信息添加到HTTP请求头中，并代理到K8s Server，最终再由K8s中的RBAC规则，判断用户能否调用对应API。</p><p>这么做刚好能满足目前的需求，首先，Token的发放和验证完全和K8s没有关系，所以Token可以保持和原有系统保持不变；同样的，代理只是根据HTTP头进行验证并转发，也不会修改任何K8s API的调用方式和格式，所以也能保持很好的兼容性；又因为所有的用户请求都会经过代理服务器，所以代理服务器可以记录所有请求的详细信息，从而方便实现各种审计工作。</p><p>那么问题来了，K8s通过哪个HTTP Header获取用户信息呢？</p><p>APIServer提供了几个命令行参数：<code>--requestheader-username-headers</code>、<code>--requestheader-group-headers</code>、<code>--requestheader-extra-headers-prefix</code>，通过这几个参数来配置HTTP头的字段名称。<br>其中，只有<code>--requestheader-username-headers</code>这个参数是必须的，由于目前场景下只需要配置这一个参数就可以了。比如：添加<code>--requestheader-username-headers=X-Remote-User</code>到APIServer启动参数，APIServer就会从请求中获取X-Remote-User这个头，并用对应的值作为当前操作的用户。</p><p>事情还没有结束，既然APIServer会从请求头中获取用户名，那么问题来了，如何确保这个请求是可信的？如何防止恶意用户，伪造请求，绕过身份认证代理服务器，直接用假冒的请求访问APIServer怎么办？这样是不是就可以模拟任何用户访问了？那一定不行，得需要有个办法来验证代理服务器的身份。不过K8s的开发者们显然考虑到了这个问题，所以APIServer提供了<code>--requestheader-client-ca-file</code>和<code>--requestheader-allowed-names</code>两个额外的参数，其中<code>--requestheader-client-ca-file</code>是必须的，用来指定认证代理服务器证书的CA位置，如果同时指定<code>--requestheader-allowed-names</code>，则在验证客户端证书发行者的同时，还会验证客户端证书的CN字段，确保不会有人用其他证书模仿代理服务器。</p><p>说到这里，整个解决方案的思路就已经比较清楚了：1.让用户带上token访问身份代理服务器；2.身份代理服务器解析token，确认用户身份后将用户名带入到请求X-Remote-User头，并转发给K8s，这里需要注意带上预先签好的客户端证书访问；3.K8s通过请求头部信息确认用户，并基于RBAC规则确认用户权限。</p><p>针对上面的方案，这里简单的使用openresty搭建了一个测试方案，主要也是因为目前的Token是jwt格式的，解析和验证也比较方便，这里贴一个比较简单的配置例子：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">server <span class="token punctuation">&#123;</span>listen       <span class="token number">80</span><span class="token punctuation">;</span>server_name  test.k8sproxy.ichenfu.com<span class="token punctuation">;</span>location / <span class="token punctuation">&#123;</span>access_by_lua <span class="token string">'-- 因为token格式是jwt，且用户名是在jwt payload里的，所以需要依赖resty.jwt这个库-- 具体的安装方式这里不详细说明，可以查找其他资料local cjson = require("cjson")local jwt = require("resty.jwt")-- 拿到用户请求的Authorization头local auth_header = ngx.var.http_Authorizationif auth_header == nil then-- 禁止没有认证信息的请求ngx.exit(ngx.HTTP_UNAUTHORIZED)endlocal _, _, jwt_token = string.find(auth_header, "Bearer%s+(.+)")if jwt_token == nil then-- 禁止认证信息有误的请求ngx.exit(ngx.HTTP_UNAUTHORIZED)end-- secret，需要保密！local secret = "ichenfu-jwt-secret"local jwt_obj = jwt:verify(secret, jwt_token)if jwt_obj.verified == false then-- 如果验证失败，说明Token有问题，禁止ngx.exit(ngx.HTTP_UNAUTHORIZED)else-- 验证成功，设置X-Remote-User头为用户名（假设用户名存储在payload中的user字段）ngx.req.set_header("X-Remote-User", jwt_obj.user)end'</span><span class="token punctuation">;</span>proxy_ssl_certificate /usr/local/openresty/nginx/conf/ssl/auth-proxy.pem<span class="token punctuation">;</span>proxy_ssl_certificate_key /usr/local/openresty/nginx/conf/ssl/auth-proxy-key.pem<span class="token punctuation">;</span>proxy_pass https://test.k8scluster.ichenfu.com:6443<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>说起来openresty确实很方便，十几行代码就搞定了一个K8s的认证代理服务器。不过在后续测试过程中，遇到了一个问题。基于上面的逻辑，用户可以拿着Token，使用kubectl访问集群，但是在实际测试过程中，发现即使在kubeconfig文件中添加了Token，甚至使用<code>kubectl --token=&quot;xxxxxxxxx&quot; get pods</code>这种在命令行里，指定Token的方式，都会提示请求失败，找不到认证信息。一开始，以为是自己lua程序写的有问题，最后通过<code>kubectl --token=&quot;xxxxxxxxx&quot; get pods --v=10 2&gt;&amp;1</code>把请求过程打印出来才发现，kubectl根本不会把Token带入到请求头中！</p><p>经过一番查找，找到了<a href="https://github.com/kubernetes/kubectl/issues/744">kubectl does not send Authorization header (or use specified auth plugin) over plain HTTP #744</a>这个Issue。才发现原来kubectl在默认情况下，如果访问一个HTTP协议的API地址，就认为这个服务是不需要认证的，如果需要认证，那API地址必须是HTTPS协议。</p><p>所以，为了实现预期的结果，还需要修改一下nginx配置文件，把监听换成HTTPS：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">server <span class="token punctuation">&#123;</span>listen       <span class="token number">443</span> ssl<span class="token punctuation">;</span>server_name  test.k8sproxy.ichenfu.com<span class="token punctuation">;</span>ssl_certificate      /usr/local/openresty/nginx/conf/ssl/kubernetes.pem<span class="token punctuation">;</span>ssl_certificate_key  /usr/local/openresty/nginx/conf/ssl/kubernetes-key.pem<span class="token punctuation">;</span><span class="token comment">#localtion配置保持不变</span><span class="token comment">#...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最终，所有需求都完美实现！当然需求的实现方式肯定不止这一种，而且最终即使使用这种方式，可能也不太会选择openresty，但是整体实现和测试的过程还是非常有意思的，特别是“意外”地知道了kubectl对于服务器认证的相关处理，收获还是不少的。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近接到一个需求：把K8s的认证和授权体系，整合到我们内部的系统中，使得我们内部系统的用户，可以无缝的直接访问K8s集群，同时也需要限制好用户对应namespace的权限。&lt;/p&gt;
&lt;p&gt;对于需求的用户授权也就是authorization (authz)部分，实现思路还是比较简单的，毕竟K8s的&lt;a href=&quot;https://kubernetes.io/zh/docs/reference/access-authn-authz/rbac/&quot;&gt;RBAC&lt;/a&gt;实现相对来说还是非常完善的，而且RBAC对于我们目前的用户和组织权限管理理念十分的接近。所以只需要将目前系统里的用户权限和组织关系，对应到一系列的RBAC Role和RoleBinding里，就可以实现对于用户权限的精细化控制。&lt;/p&gt;
&lt;p&gt;而对于用户的认证authentication (authn)部分，K8s提供了非常多的&lt;a href=&quot;https://kubernetes.io/zh/docs/reference/access-authn-authz/authentication/&quot;&gt;身份认证策略&lt;/a&gt;。但是如文档里明确的一点：&lt;/p&gt;</summary>
    
    
    
    <category term="Kubernetes" scheme="https://www.ichenfu.com/categories/Kubernetes/"/>
    
    
    <category term="authenticating-proxy" scheme="https://www.ichenfu.com/tags/authenticating-proxy/"/>
    
    <category term="kubectl token" scheme="https://www.ichenfu.com/tags/kubectl-token/"/>
    
    <category term="RBAC" scheme="https://www.ichenfu.com/tags/RBAC/"/>
    
  </entry>
  
  <entry>
    <title>使用Go-Ceph库编写一个更简单的RBD HTTP API</title>
    <link href="https://www.ichenfu.com/2022/03/05/build-a-ceph-rbd-http-api-with-go-ceph/"/>
    <id>https://www.ichenfu.com/2022/03/05/build-a-ceph-rbd-http-api-with-go-ceph/</id>
    <published>2022-03-05T14:27:13.000Z</published>
    <updated>2022-03-14T01:46:02.155Z</updated>
    
    <content type="html"><![CDATA[<p>很多人看到这个标题会很奇怪，Ceph不是有一个<a href="https://docs.ceph.com/en/pacific/mgr/ceph_api/index.html">RESTful API</a>么，为什么又要造一遍轮子？</p><p>的确，Ceph的官方组件Dashboard，内置了一些非常强大的RESTful API，功能也是比较的全面。为啥又要自己写一个呢？在我们的环境里，有一个自己实现的类似Openstack的虚拟机管理平台。而这个平台对接Ceph RBD时，就是使用的Dashboard模块提供的API。个人觉得啊，官方的API，虽然功能全，但确实对于对接的用户来说，真的不是那么友好。这里举几个简单的点：</p><span id="more"></span><ol><li><p>官方API基于Token进行鉴权，而Token又通过用户名和密码进行获取，并且有一个固定的过期时间，这就会有两个选择，一个暴力点的选择是不管发送什么请求，都会获取一个新的Token，这样可以保证基于新Token的请求都可以成功；或者，每次在请求之前请求<a href="https://docs.ceph.com/en/pacific/mgr/ceph_api/index.html#post--api-auth-check">auth&#x2F;check</a>接口，确认Token的有效性，如果失效了，那就重新获取；再或者，根据请求的返回值，如果出现401错误等等情况，再重新获取新的Token。但是无论是哪种方法，都会显得冗余和逻辑复杂，特别是在多线程等等环境下，还需要考虑使用单例等等。另外，这多出来的这些Token请求，确实也拖慢了整体的效率，毕竟Python写的API，确实不算快。</p></li><li><p>官方API是一个异步API，怎么理解呢？让我们先看下大部分接口的返回值，以<a href="https://docs.ceph.com/en/pacific/mgr/ceph_api/index.html#post--api-block-image">创建RBD</a>为例：</p></li></ol><blockquote><ul><li>201 Created – Resource created.</li><li>202 Accepted – Operation is still executing. Please check the task queue.</li><li>400 Bad Request – Operation exception. Please check the response body for details.</li><li>401 Unauthorized – Unauthenticated access. Please login first.</li><li>403 Forbidden – Unauthorized access. Please check your permissions.</li><li>500 Internal Server Error – Unexpected error. Please check the response body for the stack trace.</li></ul></blockquote><p>对于一个创建请求，如果成功，则可能会有两种返回值：201表示RBD Image创建成功，可以直接使用；202表示创建任务已经被接受了，但是还没有创建成功，具体的结果，需要去队列里找结果。怎么理解呢？如果返回201，那么恭喜，这个Image可以直接被使用了。如果返回了202，那此时还不能直接使用这个Image，因为仅仅是添加了任务，必须等任务执行完成之后，Image才真正可用。那怎么去寻找这个任务结果呢？又需要我们去轮询调用<a href="https://docs.ceph.com/en/pacific/mgr/ceph_api/index.html#get--api-task">Display Tasks API</a>，然后从返回的一个列表里，自己匹配刚刚的请求，来确认什么时间任务被执行完成。这个动作实在是不太优雅，让人难受。</p><ol start="3"><li>官方API确实也缺失了一些功能。因为我们是一个VM的环境，依赖Clone功能实现VM的OS卷分发，而Clone功能又依赖某个Image的某个Snapshot。但是翻遍了<a href="https://docs.ceph.com/en/pacific/mgr/ceph_api/index.html#rbdsnapshot">RBDSNAPSHOT</a>章节的文档，也没有找到如何确认某个Image的某个名字Snapshot是否存在的接口，最后从<a href="https://docs.ceph.com/en/pacific/mgr/ceph_api/index.html#get--api-block-image-image_spec">获取Image详情API</a>的返回结果里找到了Image所拥有的Snapshot列表。但是呢，除了Snapshot，这个接口也会返回所有基于该Snapshot创建的所有Clone的列表。如果像我们现在这样某个Snapshot会有成千上万个Clone（有很多VM的操作系统都是一样的）。那这个接口的返回Body就会变得无比之大，这对于Dashboard、以及客户端的解析，都会是一个不小的成本。</li></ol><p>当然了，这些问题，也只是在我们这个特定环境下的痛点，是绝对不可以说Ceph本身的实现问题的，那这些问题，要么忍着，要么，也可以尝试改变一下。</p><p>要说到同样是一个虚拟机管理平台，Openstack是怎么面临这些问题的呢？是不是我们也可以参考一下Openstack的实现呢？很遗憾，在Openstack Cinder组件里，是直接通过librbd的Python binding实现的。可惜的是我们并没有使用Python进行开发，相对于Openstack来说，集成方式也有些区别。</p><p>不过好在Ceph官方也提供了librbd的Golang Binding<a href="https://github.com/ceph/go-ceph">go-ceph</a>，原理和Python一样，也是直接基于librbd的C接口，那既然这样，我们也可以尝试基于这个库，实现一个我们自己的RBD HTTP API。不需要多么花哨的设计和功能，只需要满足最基本的功能就可以了。</p><p>实现之前，还是先整理一下我们的需求。到目前为止，需求并不复杂，当然未来可能会对接K8S或者类似的容器平台，还需要额外的其他接口，但在当前虚拟机这个场景下，我们需要的功能如下：</p><pre><code>1. Image相关接口，包括创建Image，获取Image信息，扩容Image，设置Image QOS，删除Image2. Snapshot相关接口，包括针对Image创建Snapshot，根据Snapshot创建Clone，以及判断Image某个Snapshot是否存在（这个接口在上面提到官方API没有，但是librbd里是有相关接口的）</code></pre><p>看起来还是比较简单的，这里举个创建Image接口的例子，顺便也算是提供了一个简单的go-ceph的使用文档，在这之前，go-ceph相关的文档确实不太好找，以至于我只能一遍看他的实现代码，一边看librbd的文档写代码：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"log"</span><span class="token string">"github.com/ceph/go-ceph/rados"</span><span class="token string">"github.com/ceph/go-ceph/rbd"</span><span class="token punctuation">)</span><span class="token keyword">const</span> PoolName <span class="token operator">=</span> <span class="token string">"test_rbd_pool"</span><span class="token keyword">const</span> ImageName <span class="token operator">=</span> <span class="token string">"test-image-name"</span><span class="token keyword">const</span> ImageSize <span class="token builtin">uint64</span> <span class="token operator">=</span> <span class="token number">100</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token comment">// 100GB</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>conn<span class="token punctuation">,</span> err <span class="token operator">:=</span> rados<span class="token punctuation">.</span><span class="token function">NewConn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 打开默认的配置文件（/etc/ceph/ceph.conf）</span><span class="token keyword">if</span> err <span class="token operator">:=</span> conn<span class="token punctuation">.</span><span class="token function">ReadDefaultConfigFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> err <span class="token operator">:=</span> conn<span class="token punctuation">.</span><span class="token function">Connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">defer</span> conn<span class="token punctuation">.</span><span class="token function">Shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span>ctx<span class="token punctuation">,</span> err <span class="token operator">:=</span> conn<span class="token punctuation">.</span><span class="token function">OpenIOContext</span><span class="token punctuation">(</span>PoolName<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">defer</span> ctx<span class="token punctuation">.</span><span class="token function">Destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 这里使用默认配置创建，也可以根据自己需求，指定image的features</span><span class="token keyword">if</span> err <span class="token operator">:=</span> rbd<span class="token punctuation">.</span><span class="token function">CreateImage</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> ImageName<span class="token punctuation">,</span> ImageSize<span class="token punctuation">,</span> rbd<span class="token punctuation">.</span><span class="token function">NewRbdImageOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 获取或者修改Image时，需要先OpenImage，或者OpenImageReadOnly</span>rbdImage<span class="token punctuation">,</span> err <span class="token operator">:=</span> rbd<span class="token punctuation">.</span><span class="token function">OpenImageReadOnly</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> ImageName<span class="token punctuation">,</span> rbd<span class="token punctuation">.</span>NoSnapshot<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> err <span class="token operator">==</span> rbd<span class="token punctuation">.</span>ErrNotFound <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"image not found"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>rbdImage<span class="token punctuation">.</span><span class="token function">GetId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总的来说，开发起来还是挺简单的。最终我也把上面需求的这些功能，封装成了HTTP API，代码也放到了<a href="https://github.com/C0reFast/rbd-api">C0reFast&#x2F;rbd-api</a>。相对官方的API来说，简单、速度快、所有操作全部是同步的，希望有一天在类似的场景下能发挥一些作用。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;很多人看到这个标题会很奇怪，Ceph不是有一个&lt;a href=&quot;https://docs.ceph.com/en/pacific/mgr/ceph_api/index.html&quot;&gt;RESTful API&lt;/a&gt;么，为什么又要造一遍轮子？&lt;/p&gt;
&lt;p&gt;的确，Ceph的官方组件Dashboard，内置了一些非常强大的RESTful API，功能也是比较的全面。为啥又要自己写一个呢？在我们的环境里，有一个自己实现的类似Openstack的虚拟机管理平台。而这个平台对接Ceph RBD时，就是使用的Dashboard模块提供的API。个人觉得啊，官方的API，虽然功能全，但确实对于对接的用户来说，真的不是那么友好。这里举几个简单的点：&lt;/p&gt;</summary>
    
    
    
    <category term="Ceph" scheme="https://www.ichenfu.com/categories/Ceph/"/>
    
    
    <category term="go-ceph" scheme="https://www.ichenfu.com/tags/go-ceph/"/>
    
    <category term="RBD" scheme="https://www.ichenfu.com/tags/RBD/"/>
    
    <category term="HTTP API" scheme="https://www.ichenfu.com/tags/HTTP-API/"/>
    
  </entry>
  
  <entry>
    <title>服务器网络启动方式探索Part2：UEFI启动篇</title>
    <link href="https://www.ichenfu.com/2021/12/25/server-net-boot-part-2-uefi/"/>
    <id>https://www.ichenfu.com/2021/12/25/server-net-boot-part-2-uefi/</id>
    <published>2021-12-25T09:31:14.000Z</published>
    <updated>2021-12-27T02:05:47.101Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇<a href="/2021/11/28/server-net-boot-part-1-legacy/">服务器网络启动方式探索Part1：Legacy启动篇</a>里，总结了一些在Legacy启动模式下的一些网络启动方案，那么这一篇，很自然的就需要介绍一下在纯UEFI模式下的网络启动了。</p><p>相比Legacy启动直接读取MBR启动分区的第一个扇区作为引导的逻辑，UEFI启动变得强大了很多，在UEFI模式下，固件直接具有的读取FAT文件系统的能力，并且直接通过运行EFI可执行文件的方式进行引导。<br>因为这个显而易见的变化，导致对应到PXE相关的实现上，也会有相应的区别。不过相比于Legacy启动的那些方案，区别不是那么大，依然是可以做到功能上一一对应的，同样的，我们从最简单的情况开始看起。</p><span id="more"></span><h2 id="UEFI-Boot-PXE"><a href="#UEFI-Boot-PXE" class="headerlink" title="UEFI Boot + PXE"></a>UEFI Boot + PXE</h2><p>这个方案依然是配置最简单的方案，和Legacy+PXE一样，也是需要ftp server和DHCP，只是DHCP服务器的配置有些不一样：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">option domain-name-servers <span class="token number">10.1</span>.1.1<span class="token punctuation">;</span>option routers <span class="token number">10.1</span>.1.1<span class="token punctuation">;</span>default-lease-time <span class="token number">14400</span><span class="token punctuation">;</span>ddns-update-style none<span class="token punctuation">;</span>subnet <span class="token number">10.1</span>.1.0 netmask <span class="token number">255.255</span>.255.0 <span class="token punctuation">&#123;</span>    range dynamic-bootp <span class="token number">10.1</span>.1.100 <span class="token number">10.1</span>.1.120<span class="token punctuation">;</span>    default-lease-time <span class="token number">14400</span><span class="token punctuation">;</span>    max-lease-time <span class="token number">172800</span><span class="token punctuation">;</span>    next-server <span class="token number">10.1</span>.1.10<span class="token punctuation">;</span>   <span class="token comment">#关键配置！用于指明tftp server的地址</span>    filename <span class="token string">"grubx64.efi"</span><span class="token punctuation">;</span>   <span class="token comment">#关键配置！用于指明bootloader的名字</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以发现其他的都没变化，只是把<code>filename</code>的配置换成了<code>grubx64.efi</code>，这意味着在UEFI启动里，放弃了使用<code>pxelinux</code>，转而使用了<code>grub</code>，当然其实SYSLINX也是有efi的，文件名<code>syslinux.efi</code>，但是因为确实用的比较少，所以在这个环境里就换成了<code>grub</code>作为Bootloader。</p><p>接下来是<code>grubx64.efi</code>和配置文件的准备，以rhel举例，如果本身机器就是用的UEFI启动，那直接可以从<code>/boot/efi/EFI/redhat/grubx64.efi</code>拷贝，如果系统本身还是MBR安装，那可以可以参考<a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/installation_guide/chap-installation-server-setup">红帽的文档</a></p><p>然后是配置文件，和<code>PXELINUX</code>一样，grub也是支持根据客户端的不同加载不同的配置文件的。具体的可以参考一下grub的文档:<a href="https://www.gnu.org/software/grub/manual/grub/grub.html#Network">8 Booting GRUB from the network</a><br>不过我们也不需要多配置文件了，只需要配置一个<code>grub.cfg</code>就行，把这个配置文件放在和grubx64.efi同目录下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">set</span> <span class="token assign-left variable">timeout</span><span class="token operator">=</span><span class="token number">5</span>menuentry <span class="token string">'RHEL'</span> <span class="token punctuation">&#123;</span>  linuxefi images/vmlinuz  initrdefi images/initrd.img<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>至此一个最简单的UEFI的PXE启动方式就配置完成了。</p><h2 id="UEFI-Boot-iPXE"><a href="#UEFI-Boot-iPXE" class="headerlink" title="UEFI Boot + iPXE"></a>UEFI Boot + iPXE</h2><p>接下来就是iPXE了，相比于PXE来说，iPXE的变化要小的多，因为自带了bootloader，所以只需要把<code>filename</code>换成<code>ipxe.efi</code>就行了:</p><pre class="line-numbers language-none"><code class="language-none">option domain-name-servers 10.1.1.1;option routers 10.1.1.1;default-lease-time 14400;ddns-update-style none;subnet 10.1.1.0 netmask 255.255.255.0 &#123;    range dynamic-bootp 10.1.1.100 10.1.1.120;    default-lease-time 14400;    max-lease-time 172800;    next-server 10.1.1.10;   #关键配置！用于指明tftp server的地址    if exists user-class and option user-class &#x3D; &quot;iPXE&quot; &#123; #根据user-class字段来判断客户端类型      filename &quot;http:&#x2F;&#x2F;10.1.1.10&#x2F;boot.script&quot;;    &#125; else &#123;      filename &quot;ipxe.efi&quot;;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同样的，<code>ipxe.efi</code>可以从<a href="http://boot.ipxe.org/">http://boot.ipxe.org</a>直接下载。剩下的关于<code>boot.script</code>配置，和上一篇Legacy里的配置是一致的。这里就不用赘述了。</p><h2 id="UEFI-HTTP-Boot"><a href="#UEFI-HTTP-Boot" class="headerlink" title="UEFI HTTP Boot"></a>UEFI HTTP Boot</h2><p>对于iPXE来说，支持通过HTTP&#x2F;FTP等等基于TCP传输的协议来获取kernel和initrd文件，速度相比于之前的PXE的tftp要快很多倍，但是如果稍微有那么一点点强迫症的话，依然会觉得整个iPXE方案里始终存在一个不太和谐的点。<br>是的，虽然kernel和initrd等文件可以通过HTTP获取，但是对于iPXE本身，无论是Legacy模式还是UEFI模式下，都依然需要用到tftp，虽然iPXE文件本身很小，只有KB级别，不会影响启动的速度了，但是tftp始终是一个依赖，这对于一个想Keep it Simple、Stupid的启动方式来说，实在是有那么些不舒服，如果能有什么办法（当然，直接把网卡刷成iPXE的方案不算）解决掉tftp的依赖，那显然是极好的。</p><p>对于这个问题呢，设计固件的聪明人们自然也想到了，于是就在UEFI 2.5的SPEC里，加上了<code>HTTP Boot</code>的功能，直接让UEFI可以从HTTP URL获取启动文件，并通过这个启动文件启动系统，对于这个方案，目前已知的情况是，Intel提供的UEFI标准实现<a href="https://github.com/tianocore/edk2">edk2</a>是支持的，文档可以参考<a href="https://edk2-docs.gitbook.io/getting-started-with-uefi-https-boot-on-edk-ii/">Getting Started with UEFI HTTPS Boot on EDK II</a>，除此之外，<a href="https://www.dell.com/support/kbdoc/zh-cn/000138011/http-boot-in-sles-15?lang=en">Dell</a>、<a href="https://lenovopress.com/lp0736-using-http-boot-to-install-an-operating-system">联想</a>、<a href="https://support.hpe.com/hpesc/public/docDisplay?docId=c05088241&docLocale=en_US">HPE</a>等等国际大厂以及<a href="https://www.redhat.com/sysadmin/uefi-http-boot-libvirt">虚拟机</a>也是明确有相关文档支持的，，而对于国内的一些厂商，目前我知道的情况是大部分都支持，不过因为确实国内用的比较少，很多厂商并没有非常仔细的测试。</p><p>我找了一台Dell的服务器，目前测试是没问题的，对于HTTP Boot来说，依然是通过DHCP获取启动配置，和iPXE类似，会带上一个特殊的标记，来区分普通PXE和HTTP Boot的区别，在iPXE文档<a href="https://ipxe.org/appnote/uefihttp">UEFI HTTP chainloading</a>里，也明确表示了iPXE支持这种启动方式。下面是个可以参考的DHCP服务器的配置：</p><pre class="line-numbers language-none"><code class="language-none">option domain-name-servers 10.1.1.1;option routers 10.1.1.1;default-lease-time 14400;ddns-update-style none;subnet 10.1.1.0 netmask 255.255.255.0 &#123;    range dynamic-bootp 10.1.1.100 10.1.1.120;    default-lease-time 14400;    max-lease-time 172800;    next-server 10.1.1.10;    if exists user-class and option user-class &#x3D; &quot;iPXE&quot; &#123; #根据user-class字段来判断客户端类型      filename &quot;http:&#x2F;&#x2F;10.1.1.10&#x2F;boot.script&quot;;    &#125; elsif substring (option vendor-class-identifier, 0, 10) &#x3D; &quot;HTTPClient&quot; &#123; # UEFI HTTP BOOT      filename &quot;http:&#x2F;&#x2F;10.1.1.10&#x2F;ipxe.efi&quot;;    &#125; else &#123;      filename &quot;ipxe.efi&quot;;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过判断<code>vendor-class-identifier</code>字段是否是<code>HTTPClient</code>，来确认是否是UEFI HTTP BOOT，如果是HTTP Boot，那就把iPXE启动文件的URL返回，这样UEFI固件就可以通过HTTP协议获取iPXE启动文件，接下来的过程就和iPXE没有区别了。如此一来，如果UFEI支持HTTP Boot并开启，那么就完全不需要tftp，只需要一个HTTP服务器就可以完成所有的启动过程了。真正意义上去除了对tftp的依赖。<br>当然，如果想基于grub或者其他bootloader启动的话，也是可以的，基本原理也差不多，感兴趣的话，可以试试。</p><h2 id="Secure-boot"><a href="#Secure-boot" class="headerlink" title="Secure boot"></a>Secure boot</h2><p>对于UEFI来说，还有一个非常重要的特性：Secure boot（安全启动），开启Secure boot之后，UEFI会利用数字签名来确认EFI驱动程序或者应用程序是否是受信任的，这其中就包括了从网络下载的bootloader，一般来说，大多数常见的OS发行版都会对Secure boot进行支持，具体支持的原理，这里就不作过多的介绍了，具体的可以参考一下红帽的文档：<a href="https://access.redhat.com/articles/5254641">What is UEFI Secure Boot and how it works?</a>。<br>需要说明的事，这篇Blog以及上一篇Blog所讨论的方法，都不涉及Secure boot，或者说这些配置都无法在Secure boot开启的情况下正常工作。但是也需要稍微进行一些修改，就可以顺利的在Secure boot环境下启动。大致的思路就是把bootloader换成一个受信任的shim，具体的实践，还需要大家自己去测试。</p><h2 id="真正的总结"><a href="#真正的总结" class="headerlink" title="真正的总结"></a>真正的总结</h2><p>最近确实花了很多时间去研究服务器的网络启动方案，从PXE开始，到HTTP Boot结束，几乎把所有相关的可能性都测试了一遍，想找到一个依赖少、稳定、兼容性好的网络启动方案。然而实际情况是，面对的OEM厂商实在是太多了，每个厂商开发固件时的侧重点也不尽相同，导致在我个人内心中最完美的HTTP Boot方案，几乎没办法真正意义上在线上环境跑通。相对的，反而是最原始功能最少的方案，跨厂商的兼容性最好。</p><p>其实一开始的目的不仅于此，如果要深究的话，其实在UEFI这种模式下，甚至有可能去除掉DHCP服务器这个依赖，理论上在UEFI模式下，固件是有自己的一套协议栈的，在PXE之前，是可以手动给网卡配置静态的IP地址，网关，DNS等等网络配置，同样的bootloader的位置也是可以静态指定的，除此之外，还有很多tricky的手段，不过这些方案总归兼容性堪忧，特别是国内的很多服务器厂商，大多对于这些高级功能缺乏测试。感兴趣的同学可以花点时间时间研究研究，还是挺有意思的😄。同样也是希望国内厂商能给力起来，像国际大厂们看齐，不断完善好固件等等各个方面。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;上一篇&lt;a href=&quot;/2021/11/28/server-net-boot-part-1-legacy/&quot;&gt;服务器网络启动方式探索Part1：Legacy启动篇&lt;/a&gt;里，总结了一些在Legacy启动模式下的一些网络启动方案，那么这一篇，很自然的就需要介绍一下在纯UEFI模式下的网络启动了。&lt;/p&gt;
&lt;p&gt;相比Legacy启动直接读取MBR启动分区的第一个扇区作为引导的逻辑，UEFI启动变得强大了很多，在UEFI模式下，固件直接具有的读取FAT文件系统的能力，并且直接通过运行EFI可执行文件的方式进行引导。&lt;br&gt;因为这个显而易见的变化，导致对应到PXE相关的实现上，也会有相应的区别。不过相比于Legacy启动的那些方案，区别不是那么大，依然是可以做到功能上一一对应的，同样的，我们从最简单的情况开始看起。&lt;/p&gt;</summary>
    
    
    
    <category term="日常折腾" scheme="https://www.ichenfu.com/categories/%E6%97%A5%E5%B8%B8%E6%8A%98%E8%85%BE/"/>
    
    
    <category term="UEFI" scheme="https://www.ichenfu.com/tags/UEFI/"/>
    
    <category term="PXE" scheme="https://www.ichenfu.com/tags/PXE/"/>
    
    <category term="HTTP Boot" scheme="https://www.ichenfu.com/tags/HTTP-Boot/"/>
    
  </entry>
  
</feed>
